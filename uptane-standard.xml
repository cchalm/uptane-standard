<?xml version="1.0" encoding="UTF-8"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc2629 version 1.2.9 -->

<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
]>

<?rfc toc="yes"?>
<?rfc sortrefs="yes"?>
<?rfc symrefs="yes"?>

<rfc ipr="noDerivativesTrust200902" docName="uptane-standard-design" category="info">

  <front>
    <title abbrev="UPTANE">Uptane Standard for Design and Implementation</title>

    <author initials="." surname="Members of the Uptane Community" fullname="Uptane Community">
      <organization>Joint Development Foundation Projects, LLC, Uptane Series (c/o Prof. Justin Cappos)</organization>
      <address>
        <postal>
          <street>6 MetroTech</street>
          <city>Brooklyn</city>
          <region>NY</region>
          <code>11201</code>
          <country>USA</country>
        </postal>
        <email>uptane-standards@googlegroups.com</email>
      </address>
    </author>

    <date year="2020" month="November" day="24"/>

    <area>TODO</area>
    <workgroup>TODO</workgroup>
    <keyword>Internet-Draft</keyword>

    <abstract>


<t>This document describes a framework for securing ground vehicle software update systems.</t>



    </abstract>


  </front>

  <middle>


<section anchor="introduction" title="Introduction">

<t>Uptane is a secure software update framework for ground vehicles. This document describes procedures to enable programmers for OEMs and suppliers to securely design and implement this framework in a manner that better protects connected units on ground vehicles. Integrating Uptane as outlined in the sections that follow can reduce the ability of attackers to compromise critical systems. It also assures a faster and easier recovery process should a compromise occur.</t>

<t>These instructions specify the components necessary for a compliant implementation. Individual implementers can make their own technological choices within those requirements. This flexibility makes Uptane adaptable to the many customized update solutions used by manufacturers. If implementers wish to have compatible formats, they may use POUFs. POUFs contain a description of implementation choices as well as data binding formats. An implementer who adopts a POUF, as well as the Uptane Standard, will be able to interoperate with other implementations using that POUF.</t>

</section>
<section anchor="terminology" title="Terminology">

<section anchor="conformance-terminology" title="Conformance terminology">

<t>The keywords MUST, MUST NOT, REQUIRED, SHALL, SHALL NOT, SHOULD, SHOULD NOT, RECOMMENDED, MAY, and OPTIONAL in this document are to be interpreted as described in <xref target="RFC2119"/>.</t>

<t>In order to be considered Uptane-compliant, an implementation MUST follow all of these rules as specified in the document.</t>

</section>
<section anchor="terminology-1" title="Terminology">

<t><spanx style="emph">Bundle</spanx>: A set of images released by the repository that is meant to be installed by one or more ECUs on a vehicle during the same update cycle.</t>

<t><spanx style="emph">Bus</spanx>: An internal communications network that interconnects components within a vehicle. A vehicle can have a number of buses that will vary in terms of power, speed, and resources.</t>

<t><spanx style="emph">ECU Identifier</spanx>: An attribute used to identify a specific ECU (e.g., a unique serial number).</t>

<t><spanx style="emph">ECU Version Manifest</spanx>: Metadata which details the software version currently installed on the ECU.</t>

<t><spanx style="emph">Hardware Identifier</spanx>: An attribute used to identify a model of an ECU.</t>

<t><spanx style="emph">Image</spanx>: File containing software for an ECU to install. May contain a binary image to flash, installation instructions, and other necessary information for the ECU to properly apply the update. Each ECU typically holds only one image, although this may vary in some cases.</t>

<t><spanx style="emph">Metadata</spanx>:  Information describing the characteristics of data including, for example, structural
metadata describing data structures (e.g., data format, syntax, and semantics) and
descriptive metadata describing data contents (e.g., information security labels). As used in Uptane, metadata can be described as information associated with a role or an image that contains the characteristics or parameters thereof (e.g., cryptographic material parameters, filenames, and versions.)</t>

<t><spanx style="emph">Primary/Secondary ECUs</spanx>: Terms used to describe the control units within a ground vehicle. A Primary ECU downloads and verifies update images and metadata for itself and for Secondary ECUs, and distributes images and metadata to Secondaries. Thus, it requires extra storage space and a means to download images and metadata.  Secondary ECUs receive their update images and metadata from the Primary, and only need to verify and install their own metadata and images.</t>

<t><spanx style="emph">POUF</spanx>: A document that contains the protocol, operations, usage, and formats (POUF) of a specific Uptane implementation. The POUF contains decisions about SHOULDs and MAYs in an implementation, as well as descriptions of data binding formats. POUFs MAY be used to create compatible Uptane implementations.</t>

<t><spanx style="emph">Repository</spanx>: A server containing metadata about images. May also contain the images themselves. Other data may be stored on the repository to be accessed by ECUs during the update process.</t>

<t><spanx style="emph">Suppliers</spanx>: Independent companies to which vehicle manufacturers may outsource the production of ECUs. Tier-1 suppliers directly serve the manufacturers. Tier-2 suppliers are those that perform outsourced work for Tier-1 suppliers.</t>

<t><spanx style="emph">Vehicle Version Manifest</spanx>: A compilation of all ECU version reports on a vehicle. It serves as a master list of all images currently running on all ECUs in the vehicle.</t>

</section>
<section anchor="uptane-role-terminology" title="Uptane role terminology">

<t>These terms are defined in greater detail in <xref target="roles"/>.</t>

<t><spanx style="emph">Delegation</spanx>: A process by which the responsibility of signing metadata about images is assigned to another party.
<spanx style="emph">Role</spanx>: A party (human or machine) responsible for signing a certain type of metadata. The role controls keys and is responsible for signing metadata entrusted to it with these keys. The roles mechanism of Uptane allows the system to distribute signing responsibilities so that the compromise of one key does not necessarily impact the security of the entire system.</t>

<t><list style="symbols">
  <t><spanx style="emph">Root role</spanx>: Signs metadata that distributes and revokes public keys used to verify the Root, Timestamp, Snapshot, and Targets role metadata.</t>
  <t><spanx style="emph">Snapshot role</spanx>: Signs metadata that indicates which images the repository has released at the same time.</t>
  <t><spanx style="emph">Targets role</spanx>: Signs metadata used to verify the image, such as cryptographic hashes and file size.</t>
  <t><spanx style="emph">Timestamp role</spanx>: Signs metadata that indicates if there are any new metadata or images on the repository.</t>
</list></t>

</section>
<section anchor="acronyms-and-abbreviations" title="Acronyms and abbreviations">

<t><spanx style="emph">CDN</spanx>: Content Delivery Network</t>

<t><spanx style="emph">ECUs</spanx>: Electronic Control Units, the computing units on a vehicle</t>

<t><spanx style="emph">LIN Bus</spanx>: Local Interconnect Bus</t>

<t><spanx style="emph">OBD</spanx>: On-board diagnostics</t>

<t><spanx style="emph">SOTA</spanx>: Software Updates Over-the-Air</t>

<t><spanx style="emph">UDS</spanx>: Unified Diagnostic Services</t>

<t><spanx style="emph">VIN</spanx>: Vehicle Identification Number</t>

</section>
</section>
<section anchor="rationale-for-and-scope-of-the-uptane-standard" title="Rationale for and scope of the Uptane Standard">

<t>This Standard document provides the essential components for the secure design, implementation, and deployment of Uptane by OEMs and suppliers. These guidelines contribute to compromise resilience, or the ability to minimize the extent of the threat posed by any given attack.</t>

<t>However, this specification is intended as an implementation guide, and not as a detailed technical argument about the security properties that Uptane provides.  Readers interested in such documentation should refer to published papers that cover this topic.  <xref target="UPTANEESCAR"/></t>

<section anchor="why-uptane-requires-a-standards-document" title="Why Uptane requires a standards document">

<t>A standards document that can guide the safe design, integration, and deployment of Uptane in vehicles is needed at this time because:</t>

<t><list style="symbols">
  <t>The number of connected units on the average vehicle continues to grow, with mainstream cars now containing up to 100 million lines of code. <xref target="USATODAY"/></t>
  <t>The expanded use of software over-the-air strategies creates new attack surfaces for malicious parties. <xref target="CR-OTA"/></t>
  <t>Legacy update strategies, such as SSL/TLS or GPG/RSA, are not feasible for use on vehicle ECUs because they force manufacturers to chose between enhanced security and customizability.</t>
  <t>Conventional strategies are also complicated by the differing resources of the ECUs, which can vary greatly in memory, storage space, and Internet connectivity.</t>
  <t>The design of Uptane makes it possible to offer improved design flexibility without sacrificing security.</t>
  <t>This added design flexibility, however, could be a liability if the framework is implemented incorrectly.</t>
  <t>Standardization of crucial steps in the design, implementation, and use of Uptane can assure that customizability does not impact security or functionality.</t>
</list></t>

</section>
<section anchor="scope-of-standard-coverage" title="Scope of Standard coverage">

<t>This document sets guidelines for implementing Uptane in most systems capable of updating software on connected units in ground vehicles, including passenger vehicles, light-duty trucks, heavy-duty trucks, and motorcycles. Uptane could potentially also be applied to other ground vehicles, such as automated shuttles, recreational vehicles, and military ground vehicles. Uptane could even be applied to domains such as IoT devices, medical devices, and autonomous aerial vehicles. In this section, we define the scope of that applicability by providing sample use cases and possible exceptions, aspects of software update security that are not applicable to Uptane, and the design requirements governing the preparation of these standards.</t>

<section anchor="assumptions" title="Assumptions">

<t>We assume the following system preconditions for Uptane:</t>

<t><list style="symbols">
  <t>Vehicles have the ability to establish connectivity to required backend services. For example, this could be done through cellular, Wi-Fi, or hard-wired mechanisms.</t>
  <t>ECUs are either directly connected to the communication channel, or are indirectly connected via some sort of network gateway.</t>
  <t>ECUs are programmable and provide sufficient performance to be updated.</t>
  <t>ECUs must be able to perform public key cryptography operations and calculate hashes of images and metadata files.</t>
  <t>There are state-of-the-art secure servers in place, such as the Director and Image repository servers.</t>
</list></t>

<t>It is important that any bugs detected in Uptane implementations be patched promptly. Failure to do so could interfere with the effectiveness of Uptane’s operations.</t>

</section>
<section anchor="use-cases" title="Use cases">

<t>The following use cases provide a number of scenarios illustrating the manner in which software updates could be accomplished using Uptane.</t>

<section anchor="oems-initializing-uptane-at-the-factory-using-sota" title="OEMs initializing Uptane at the factory using SOTA">

<t>An OEM plans to install Uptane on new vehicles. This entails the following components: code to perform full and partial verification, the latest copy of the relevant metadata, the public keys, and an accurate attestation of the latest time. The OEM then either requires its tier-1 suppliers to provide these materials to the suppliers’ assembly lines or can choose to add the materials later at the OEM’s assembly lines. The OEM’s in-vehicle implementation is Uptane-compliant if:</t>

<t><list style="numbers">
  <t>all Primaries perform full verification;</t>
  <t>all Secondaries that are updated via OTA at least perform partial verification; and</t>
  <t>all other ECUs that do not perform any type of verification cannot be updated via OTA.</t>
</list></t>

</section>
<section anchor="updating-one-ecu-with-a-complete-image" title="Updating one ECU with a complete image">

<t>A tier-1 supplier completes work on a revised image for an electronic brake control module. This module will control the brakes on all models of an SUV produced by the OEM mentioned above. Assuming supplier delegation is supported by the OEM for this ECU, each tier-1 supplier digitally signs the image, then delivers the signature, all of its metadata, including delegations, and associated images to the OEM. The OEM adds these metadata and images to its Image repository, along with information about any dependencies and conflicts between this image and those for other ECUs used in the OEM’s vehicles. The OEM also updates the inventory database, so that the Director repository can instruct the ECU on how to install these updated images.</t>

</section>
<section anchor="updating-individual-ecus-on-demand" title="Updating individual ECUs on demand">

<t>An OEM has issued a recall to address a problem with a keyless entry device that has been locking people out of their cars. The OEM prepares an updated flash image in the manner described above. The OEM then ships USB flash drives to vehicle owners and dealerships that allow those parties to update the firmware of their vehicles.</t>

</section>
<section anchor="update-one-ecu-with-multiple-deltas" title="Update one ECU with multiple deltas">

<t>The OEM wants to use delta updates to save over-the-air bytes. The delta images contain only the code and/or data that has changed from the previous image version. To do so, the OEM must first modify the Director repository, using the vehicle version manifest and dependency resolution to determine the differences between the previous and latest images. The OEM then adds the following to the custom Targets metadata used by the Director repository: (1) the algorithm used to apply a delta image, and (2) the Targets metadata about the delta image. The OEM will also check whether the delta images match the Targets metadata from the Director repository.</t>

</section>
</section>
</section>
<section anchor="exceptions" title="Exceptions">

<t>There are a number of factors that could impede the completion of the above scenarios:</t>

<t><list style="symbols">
  <t>ECUs may be lacking the necessary resources to function as designated. These insufficient resources could include limited CPU or RAM inadequate for performance of public key cryptography; a lack of sufficient storage to undo installation of bad software; or a location on a low-speed network (e.g., LIN).</t>
  <t>ECUs may reside on different network segments, and may not be able to directly reach each other, requiring a gateway to facilitate communication.</t>
  <t>A user may replace OEM-installed ECUs with aftermarket ECUs.</t>
  <t>A vehicle may be able to download only a limited amount of data via a cellular channel due to limits on a data plan.</t>
  <t>A system may lack sufficient power to download or install software updates.</t>
  <t>Vehicles may be offline for extended periods of time, thus missing required updates (e.g., key rotations).</t>
  <t>OEMs may be unwilling to implement costly security or hardware requirements.</t>
</list></t>

</section>
<section anchor="out-of-scope" title="Out of scope">

<t>The following topics will not be addressed in this document, as they represent threats outside the scope of Uptane:</t>

<t><list style="symbols">
  <t>Physical attacks, such as manual tampering with ECUs outside the vehicle.</t>
  <t>Compromise of the packaged software, such as malware embedded in a trusted package.</t>
  <t>Compromise of the supply chain (e.g., build system, version control system, packaging process). A number of strategies (e.g., git signing, TPMs, in-toto <xref target="IN-TOTO"/>)  already exist to address this problem. Therefore, there is no need to duplicate those techniques here.</t>
  <t>Problems associated with OBD or UDS programming of ECUs, such as authentication of communications between ECUs.</t>
  <t>Malicious mirrors of package repositories, which may substitute original packages with malicious packages with matching version numbers <xref target="MERCURY"/>.</t>
</list></t>

</section>
<section anchor="design-requirements" title="Design requirements">

<t>The design requirements for this document are governed by the following principal parameters:</t>

<t><list style="symbols">
  <t>to clearly mandate the design and implementation steps that are security critical and must be followed as is, while offering flexibility in the implementation of non-critical steps. In this manner, users can adapt to support different use models and deployment scenarios.</t>
  <t>to ensure that, if Uptane is implemented, the security practices mandated or suggested in this document do not interfere with the functionality of ECUs, vehicles, or the systems that maintain them.</t>
  <t>to delineate guidelines to ensure that, should any part of the SOTA mechanism of a vehicle be attacked, an attacker must compromise two or more modules to breach the SOTA mechanism.</t>
</list></t>

</section>
</section>
<section anchor="threat-model-and-attack-strategies" title="Threat model and attack strategies">

<t>The overarching goal of Uptane is to provide a system that is resilient in the face of various types of compromise. In this section, we describe the goals an attacker may have (<xref target="attacker_goals"/>) and the capabilities they may have or could develop (<xref target="capabilities"/>). We then describe and classify types of attacks on the system according to the attacker’s goals (<xref target="threats"/>).</t>

<section anchor="attacker_goals" title="Attacker goals">

<t>We assume that attackers may want to achieve one or more of the following goals, in increasing order of severity:</t>

<t><list style="symbols">
  <t>Read the contents of updates to discover confidential information, reverse-engineer firmware, or compare two firmware images to identify security fixes and hence determine the fixed security vulnerability.</t>
  <t>Deny installation of updates to prevent vehicles from fixing software problems.</t>
  <t>Cause one or more ECUs in the vehicle to fail, denying use of the vehicle or of certain functions.</t>
  <t>Control ECUs within the vehicle, and possibly the vehicle itself.</t>
</list></t>

</section>
<section anchor="capabilities" title="Attacker capabilities">

<t>Uptane is designed with resilience to compromise in mind. We assume that attackers may develop one or more of the following capabilities:</t>

<t><list style="symbols">
  <t>Intercept and modify network traffic (i.e., perform man-in-the-middle attacks). This capability may be developed in two domains:
  <list style="symbols">
      <t>Outside the vehicle, intercepting and modifying traffic between the vehicle and software repositories.</t>
      <t>Inside the vehicle, intercepting and modifying traffic on one or more vehicle buses (e.g., via an OBD port or using a compromised ECU as a vector).</t>
    </list></t>
  <t>Compromise and control either a Director repository or Image repository server, and any keys stored on that repository, but not both the Director and Image repositories.</t>
  <t>Compromise either a Primary ECU or a Secondary ECU, but not both in the same vehicle.</t>
</list></t>

</section>
<section anchor="threats" title="Description of threats">

<t>Uptane’s threat model includes the following types of attacks, organized according to the attacker goals listed in <xref target="attacker_goals"/>.</t>

<section anchor="read_updates" title="Read updates">

<t><list style="symbols">
  <t><spanx style="emph">Eavesdrop attack:</spanx> Read sensitive or confidential information from an update intended to be encrypted for a specific ECU. (Note: Not all implementations will have a need for protecting information in this way.)</t>
</list></t>

</section>
<section anchor="deny_updates" title="Deny installation of updates">

<t>An attacker seeking to deny the installation of updates may attempt one or more of the following strategies:</t>

<t><list style="symbols">
  <t><spanx style="emph">Drop-request attack:</spanx> Block network traffic outside or inside the vehicle.</t>
  <t><spanx style="emph">Slow retrieval attack:</spanx> Slow down network traffic, in the extreme case sending barely enough packets to avoid a timeout. Similar to a drop-request attack, except that both the sender and receiver of the traffic still think network traffic is unimpeded.</t>
  <t><spanx style="emph">Freeze attack:</spanx> Continue to send a properly signed, but old, update bundle to the ECUs, even if newer updates exist.</t>
  <t><spanx style="emph">Partial bundle installation attack:</spanx> Install a valid (signed) update bundle, and then block selected updates within the bundle.</t>
  <t>Conduct a denial of service attack against the Uptane repositories or infrastructure.</t>
</list></t>

</section>
<section anchor="change_functionality" title="Interfere with ECU functionality">

<t>Attackers seeking to interfere with the functionality of vehicle ECUs in order to cause an operational failure or unexpected behavior may do so in one of the following ways:</t>

<t><list style="symbols">
  <t><spanx style="emph">Rollback attack:</spanx> Cause an ECU to install a previously valid software revision that is older than the currently installed version.</t>
  <t><spanx style="emph">Endless data attack:</spanx> Send a large amount of data to an ECU until it runs out of storage, possibly causing the ECU to fail to operate.</t>
  <t><spanx style="emph">Mix-and-match attack:</spanx> Install a malicious software bundle in which some of the updates do not interoperate properly. This may be accomplished even if all of the individual images being installed are valid, as long as valid versions exist that are mutually incompatible.</t>
</list></t>

</section>
<section anchor="control_ecu" title="Control an ECU or vehicle">

<t>Full control of a vehicle, or one or more ECUs within a vehicle, is the most severe threat.</t>

<t><list style="symbols">
  <t><spanx style="emph">Arbitrary software attack:</spanx> Cause an ECU to install and run arbitrary code of the attacker’s choice.</t>
</list></t>

</section>
</section>
</section>
<section anchor="design" title="Detailed design of Uptane">

<t>Uptane does not specify implementation details. Instead, this Standard describes the components necessary for a compliant implementation and leaves it up to individual implementers to make their own technological choices within those requirements.</t>

<t>At a high level, Uptane requires:</t>

<t><list style="symbols">
  <t>Two software repositories:
  <list style="symbols">
      <t>An Image repository containing binary images to install and signed metadata about those images.</t>
      <t>A Director repository connected to an inventory database that can sign metadata on demand for images in the Image repository.</t>
    </list></t>
  <t>Repository tools for generating Uptane-specific metadata about images.</t>
  <t>A public key infrastructure supporting the required metadata production and signing roles on each repository:
  <list style="symbols">
      <t>Root - The certificate authority for the Uptane ecosystem. Distributes public keys for verifying all the other roles’ metadata.</t>
      <t>Timestamp - Indicates whether there are new metadata or images.</t>
      <t>Snapshot - Indicates images released by the repository at a point in time via signing metadata about Targets metadata.</t>
      <t>Targets - Indicates metadata about images, such as hashes and file sizes.</t>
    </list></t>
  <t>A secure way for ECUs to know the time.</t>
  <t>An ECU capable of downloading images and associated metadata from the Uptane servers.</t>
  <t>An in-vehicle client on a Primary ECU capable of verifying the signatures on all update metadata and downloading updates on behalf of its associated Secondary ECUs. The Primary ECU MAY be the same ECU that communicates with the server.</t>
  <t>A client or library on each Secondary ECU capable of performing either full or partial verification of metadata.</t>
</list></t>

<section anchor="roles" title="Roles on repositories">

<t>A repository contains images and metadata. Each role has a particular type of metadata associated with it, as described in <xref target="meta_structures"/>.</t>

<section anchor="root_role" title="The Root role">

<t>A repository’s Root role SHALL be responsible for a Certificate Authority as defined in <xref target="RFC3647"/>.
A repository’s Root role SHALL produce and sign Root metadata as described in <xref target="root_meta"/>.
A repository’s Root role SHALL sign the public keys used to verify the metadata produced by the Timestamp, Snapshot, and Targets roles.
A repository’s Root role SHALL revoke keys for the other roles if they are compromised.</t>

</section>
<section anchor="targets_role" title="The Targets role">

<t>A repository’s Targets role SHALL produce and sign metadata about images and delegations as described in <xref target="targets_meta"/>.</t>

<section anchor="targets_role_delegations" title="Delegations">

<t>The Targets role on the Image repository MAY delegate the responsibility of signing metadata to other, custom-defined roles referred to as delegated targets. If it does, it MUST do so as specified in <xref target="delegations_meta"/>.</t>

<t>Responsibility for signing images or a subset of images MAY be delegated to more than one role and therefore it is possible for two different roles to be trusted for signing a particular image. For this reason, delegations MUST be prioritized.</t>

<t>A particular delegation for a subset of images MAY be designated as <spanx style="strong">terminating</spanx>. For terminating delegations, the client SHALL NOT search any further if it does not find validly signed metadata about those images. Delegations SHOULD NOT be terminating by default; terminating delegations SHOULD only be used when there is a compelling technical reason to do so.</t>

<t>A delegation for a subset of images MAY be a multi-role delegation <xref target="TAP-3"/>. A multi-role delegation indicates that multiple roles are needed to sign a particular image and each of the delegatee roles MUST sign the same metadata.</t>

<t>Delegations only apply to the Image repository. The Targets role on the Director repository MUST NOT delegate metadata signing responsibility.</t>

</section>
</section>
<section anchor="snapshot_role" title="The Snapshot role">

<t>A repository’s Snapshot role SHALL produce and sign metadata about all Targets metadata the repository releases, including the current version number of the top-level Targets metadata, and the version numbers of all delegated Targets metadata, as described in <xref target="snapshot_meta"/>.</t>

</section>
<section anchor="timestamp_role" title="The Timestamp role">

<t>A repository’s Timestamp role SHALL produce and sign metadata indicating whether there are new metadata or images on the repository. It MUST do so by signing the metadata about the Snapshot metadata file.</t>

</section>
</section>
<section anchor="meta_structures" title="Metadata structures">

<t>Uptane’s security guarantees all rely on properly created metadata that follows a designated structure. The Uptane Standard <spanx style="strong">does not</spanx> mandate any particular format or encoding for the metadata as a whole. ASN.1 (with any encoding scheme like BER, DER, XER, etc.), JSON, XML, or any other encoding format that is capable of providing the required structure MAY be used.</t>

<t>However, string comparison is required as part of metadata verification. To ensure an accurate basis for comparing strings, all strings MUST be encoded in the Unicode Format for Network Interchange as defined in <xref target="RFC5198"/>, including normalization into Unicode Normalization Form C (<xref target="NFC"/>).</t>

<t>In the <spanx style="emph">Deployment Best Practices</spanx> (<xref target="DEPLOY"/>), Joint Development Foundation Projects, LLC, Uptane Series provides some examples of compliant metadata structures in ASN.1 and JSON.</t>

<section anchor="common_metadata" title="Common metadata structures">

<t>Every public key MUST be represented using a public key identifier.  A public key identifier is EITHER all of the following:</t>

<t><list style="symbols">
  <t>The value of the public key itself (which MAY be, for example, formatted as a PEM string)</t>
  <t>The public key cryptographic algorithm used by the key (such as RSA or ECDSA)</t>
  <t>The particular scheme used to verify the signature (such as <spanx style="verb">rsassa-pss-sha256</spanx> or <spanx style="verb">ecdsa-sha2-nistp256</spanx>)</t>
</list></t>

<t>OR a secure hash over at least the above components (such as the keyid mechanism in TUF).</t>

<t>All four Uptane roles (Root, Targets, Snapshot, and Timestamp) share a common structure. They SHALL contain the following two attributes:</t>

<t><list style="symbols">
  <t>A payload of metadata to be signed</t>
  <t>An attribute containing the signature(s) of the payload, where each entry specifies:
  <list style="symbols">
      <t>The public key identifier of the key being used to sign the payload</t>
      <t>A signature with this key over the payload</t>
    </list></t>
</list></t>

<t>The payload differs depending on the role. However, the payload for all roles shares a common structure. It SHALL contain the following four attributes:</t>

<t><list style="symbols">
  <t>An indicator of the type of role (Root, Targets, Snapshot, or Timestamp)</t>
  <t>An expiration date and time</t>
  <t>An integer version number, which SHOULD be incremented each time the metadata file is updated</t>
  <t>The role-specific metadata for the role indicated</t>
</list></t>

<t>The following sections describe the role-specific metadata. All roles SHALL follow the common structures described here.</t>

</section>
<section anchor="root_meta" title="Root metadata">

<t>A repository’s Root metadata distributes the public keys of the top-level Root, Targets, Snapshot, and Timestamp roles, as well as revocations of those keys. It SHALL contain two attributes:</t>

<t><list style="symbols">
  <t>A representation of the public keys for all four roles. Each key SHALL have a unique public key identifier.</t>
  <t>An attribute mapping each role to (1) its public key(s), and (2) the threshold of signatures required for that role.</t>
</list></t>

<t>Additionally, it MAY contain a mapping of roles to a list of valid URLs from which the role metadata can be downloaded.  If this mapping of URLs is used, the implementer SHOULD implement this functionality following <xref target="TAP-5"/> to avoid adding unforeseen security risks.</t>

</section>
<section anchor="targets_meta" title="Targets metadata">

<t>The Targets metadata on a repository contains all of the information about images to be installed on ECUs. This includes filenames, hashes, file sizes, and MAY also include other useful information, such as what types of hardware are compatible with a particular image.</t>

<t>Targets metadata can also contain metadata about delegations, allowing one Targets role to delegate its authority to another. This means that an individual Targets metadata file might contain only metadata about delegations, only metadata about images, or some combination of the two. The details of how ECUs traverse the delegation tree to find valid metadata about images is specified in <xref target="resolve_delegations"/>.</t>

<section anchor="targets_images_meta" title="Metadata about images">

<t>To be available to install on clients, all images on the repository MUST have their metadata listed in a Targets role.  Each Targets role MAY provide a list of some images on the repository.  This list MUST provide, at a minimum, the following information about each image:</t>

<t><list style="symbols">
  <t>The image filename</t>
  <t>The size of the image in bytes</t>
  <t>One or more hashes of the image file, along with the hashing function used</t>
</list></t>

<section anchor="custom-metadata-about-images" title="Custom metadata about images">

<t>In addition to the required metadata, Targets metadata files MAY contain extra metadata for images on the repository. This metadata can be customized for a particular use case. Examples of use cases for different types of custom metadata can be found in the <spanx style="emph">Deployment Best Practices</spanx> document (<xref target="DEPLOY"/>). However, there are a few important pieces of custom metadata that SHOULD be present in most implementations. In addition, there is one element in the custom metadata that MUST be present in the Targets metadata from the Director.</t>

<t>Custom metadata MAY also contain a demarcated field or section that MUST match whenever two pieces of metadata are checked against each other, such as when Targets metadata from the Director repository is checked against Targets metadata from the Image repository.</t>

<t>The information listed below SHOULD be provided for each image on both the Image repository and the Director repository. If a “MUST match section” is to be implemented, that is where this information SHOULD be placed.</t>

<t><list style="symbols">
  <t>A release counter, to be incremented each time a new version of the image is released. This can be used to prevent rollback attacks even in cases where the Director repository is compromised.</t>
  <t>A hardware identifier, or list of hardware identifiers, representing models of ECUs with which the image is compatible. This can be used to ensure that an ECU cannot be ordered to install an incompatible image, even in cases where the Director repository is compromised.</t>
</list></t>

<t>The following information is CONDITIONALLY REQUIRED for each image on the Director repository IF that image is encrypted:</t>

<t><list style="symbols">
  <t>Information about filenames, hashes, and file size of the encrypted image.</t>
  <t>Information about the encryption method, and other relevant information–for example, a symmetric encryption key encrypted by the ECU’s asymmetric key could be included in the Director repository metadata.</t>
</list></t>

<t>The following information MUST be provided from the Director repository for each image in the Targets metadata:</t>

<t><list style="symbols">
  <t>An ECU identifier (such as a serial number), specifying the ECU that should install the image.</t>
</list></t>

<t>The Director repository MAY provide a download URL for the image file. This may be useful, for example, when the image is on a public CDN and the Director wishes to provide a signed URL.</t>

</section>
</section>
<section anchor="delegations_meta" title="Metadata about delegations">

<t>A Targets metadata file on the Image repository (but not the Director repository) MUST be able to delegate signing authority to other entities. For example, it could delegate signing authority for a particular ECU’s firmware to that ECU’s supplier. A metadata file MAY contain any number of delegations and MUST keep the delegations in prioritized order.</t>

<t>Any metadata file with delegations MUST provide the following information:</t>

<t><list style="symbols">
  <t>A list of public keys of all delegatees. Each key should have a unique public key identifier and a key type.</t>
  <t>A list of delegations, each of which contains:
  <list style="symbols">
      <t>A list of the filenames to which this role applies. This MAY be expressed using wildcards, or by enumerating a list, or a combination of the two.</t>
      <t>An optional list of the hardware identifiers to which this role applies.  If this is omitted, any hardware identifier will match.</t>
      <t>An indicator of whether or not this is a terminating delegation. (See <xref target="targets_role_delegations"/>.)</t>
      <t>A list of the roles to which this delegation applies. Each role needs to specify:
      <list style="symbols">
          <t>A name for the role (e.g., “supplier1-qa”)</t>
          <t>The key identifiers for each key this role uses</t>
          <t>A threshold of keys that must sign for this role</t>
        </list></t>
    </list></t>
</list></t>

<t>Note that <spanx style="strong">any</spanx> Targets metadata file stored on the Image repository may contain delegations, and these delegations can be in chains of arbitrary length.</t>

</section>
</section>
<section anchor="snapshot_meta" title="Snapshot metadata">

<t>The Snapshot metadata lists version numbers and filenames of all Targets metadata files. It protects against mix-and-match attacks if a delegated supplier key is compromised.</t>

<t>For each Targets metadata file on the repository, the Snapshot metadata SHALL contain the following information:</t>

<t><list style="symbols">
  <t>The filename and version number of the Targets metadata file.</t>
</list></t>

<t>The Snapshot metadata MAY also list the Root metadata filename and version number. This is not required, particularly for implementations of <xref target="TAP-5"/>, but MAY be included in all cases for backward compatibility.</t>

</section>
<section anchor="timestamp_meta" title="Timestamp metadata">

<t>The Timestamp metadata SHALL contain the following information:</t>

<t><list style="symbols">
  <t>The filename and version number of the latest Snapshot metadata on the repository.</t>
  <t>One or more hashes of the Snapshot metadata file, along with the hashing function used.</t>
</list></t>

</section>
<section anchor="repo_mapping_meta" title="Repository mapping metadata">

<t>As described in the introduction to <xref target="design"/>, Uptane requires a Director repository and an Image repository. However, it is possible to have an Uptane-compliant implementation that has more than two repositories.</t>

<t>Repository mapping metadata informs a Primary ECU about which repositories to trust for images or image paths. <xref target="TAP-4"/> describes how to make use of more complex repository mapping metadata in order to have more than the two required repositories.</t>

<t>Repository mapping metadata, or the equivalent informational content, MUST be present on all Primary ECUs, and MUST contain the following information:</t>

<t><list style="symbols">
  <t>A list of repository names and one or more URLs at which the named repository can be accessed. At a minimum, this MUST include the Director and Image repositories.</t>
  <t>A list of mappings of image paths to repositories, each of which contains:
  <list style="symbols">
      <t>A list of image paths. Image paths MAY be expressed using wildcards, or by enumerating a list, or a combination of the two.</t>
      <t>A list of repositories that MUST provide signed Targets metadata for images stored at those paths.</t>
    </list></t>
</list></t>

<t>For example, in the most basic Uptane case, the repository mapping metadata would contain:</t>

<t><list style="symbols">
  <t>The name and URL of the Director repository.</t>
  <t>The name and URL of the Image repository.</t>
  <t>A single mapping indicating that all images (<spanx style="verb">*</spanx>) MUST be signed by both the Director and Image repository.</t>
</list></t>

<t>Note that the metadata need not be in the form of a metadata file. For example, in the basic case where there is only one Director and one Image repository, and all images need to have signed metadata from both repositories, it would be sufficient to have a configuration file with URLs for the two repositories and a client that always checks for metadata matches between them. In this case, no explicit mapping would be defined, because the mapping is defined as part of the Uptane client implementation.</t>

<t>The <spanx style="emph">Uptane Deployment Best Practices</spanx> document (<xref target="DEPLOY"/>) provides more guidance on how to implement repository mapping metadata for more complex use cases. It also discusses strategies for updating repository mapping metadata, if required.</t>

</section>
<section anchor="metadata_filename_rules" title="Rules for filenames in repositories and metadata">

<t>There is a difference between the filename in a metadata file or an ECU, and the filename on a repository. This difference exists in order to avoid race conditions, where metadata and images are read from, and written to, at the same time. For more details, the reader should read the TUF specification <xref target="TUF-spec"/> and PEP 458 <xref target="PEP-458"/>.</t>

<t>Unless stated otherwise, all files SHALL be written to repositories in accordance with the following two rules:</t>

<t><list style="numbers">
  <t>Metadata filenames SHALL be qualified with version numbers. If a metadata file A is specified as FILENAME.EXT in another metadata file B, then it SHALL be written as VERSION.FILENAME.EXT, where VERSION is A’s version number, as defined in <xref target="common_metadata"/>, with one exception: If the version number of the Timestamp metadata file might not be known in advance by a client, it MAY be read from, and written to, a repository using a filename without a version number qualification, i.e., FILENAME.EXT.</t>
  <t>If an image is specified in a Targets metadata file as FILENAME.EXT, it SHALL be written to the repository as HASH.FILENAME.EXT, where HASH is one of the hash digests of the file, as specified in <xref target="targets_images_meta"/>. The file MUST be written to the repository using <spanx style="emph">n</spanx> different filenames, one for each hash digest listed in its corresponding Targets metadata.</t>
</list></t>

<t>For example:</t>

<t><list style="symbols">
  <t>The version number of the Snapshot metadata file is 61, and its filename in the Timestamp metadata is <spanx style="emph">snapshot.json</spanx>. The filename on the repository will be <spanx style="emph">61.snapshot.json</spanx>.</t>
  <t>There is an image with the <spanx style="emph">filename acme_firmware.bin</spanx> specified in the Targets metadata, with a SHA3-256 of <spanx style="emph">aaaa</spanx> and a SHA-512/224 of <spanx style="emph">bbbb</spanx>. It will have two filenames on the repository: <spanx style="emph">aaaa.acme_firmware.bin</spanx> and <spanx style="emph">bbbb.acme_firmware.bin</spanx>.</t>
</list></t>

</section>
</section>
<section anchor="server-repository-implementation-requirements" title="Server / repository implementation requirements">

<t>An Uptane implementation SHALL make the following services available to vehicles:</t>

<t><list style="symbols">
  <t>Image repository</t>
  <t>Director repository</t>
</list></t>

<t>Additionally, an Uptane implementation requires ECUs to have a secure way to know the current time.</t>

<section anchor="image-repository" title="Image repository">

<t>The Image repository exists to allow an OEM and/or its suppliers to upload images and their associated metadata. It makes these images and their metadata available to vehicles. The Image repository is designed to be primarily controlled by human actors, and updated relatively infrequently.</t>

<t>The Image repository SHALL expose an interface permitting the download of metadata and images. This interface SHOULD be public.</t>

<t>The Image repository SHALL require authorization for writing metadata and images.</t>

<t>The Image repository SHALL provide a method for authorized users to upload images and their associated metadata. It SHALL check that a user writing metadata and images is authorized to do so for that specific image by checking the chain of delegations as described in <xref target="delegations_meta"/>.</t>

<t>The Image repository SHALL implement storage which permits authorized users to write an image file using a unique filename, and later read the same file using the same name. It MAY use any filesystem, key-value store, or database that fulfills this requirement.</t>

<t>The Image repository MAY require authentication for read access.</t>

</section>
<section anchor="director_repository" title="Director repository">

<t>The Director repository instructs ECUs as to which images should be installed by producing signed metadata on demand. Unlike the Image repository, it is mostly controlled by automated, online processes. It also consults a private inventory database containing information on vehicles, ECUs, and software revisions.</t>

<t>The Director repository SHALL expose an interface for Primaries to upload vehicle version manifests (<xref target="vehicle_version_manifest"/>) and download metadata. This interface SHOULD be public.
The Director MAY encrypt images for ECUs that require them, either by encrypting on-the-fly or by storing encrypted images on the repository.</t>

<t>The Director repository SHALL implement storage which permits an automated service to write generated metadata files. It MAY use any filesystem, key-value store, or database that fulfills this requirement.</t>

<section anchor="directing-installation-of-images-on-vehicles" title="Directing installation of images on vehicles">

<t>A Director repository MUST conform to the following six-step process for directing the installation of software images on a vehicle.</t>

<t><list style="numbers">
  <t>The Director SHOULD first identify the vehicle. This MAY be done when the Director receives a vehicle version manifest sent by a Primary (as described in <xref target="construct_manifest_primary"/>), decodes the manifest, and determines the unique vehicle identifier. Additionally, the Director MAY utilize other mechanisms to uniquely identify a vehicle (e.g., 2-way TLS with unique client certificates).</t>
  <t>Using the vehicle identifier, the Director queries its inventory database (as described in <xref target="inventory_db"/>) for relevant information about each ECU in the vehicle.</t>
  <t>The Director SHALL check the manifest for accuracy compared to the information in the inventory database. If any of the required checks fail, the Director MAY drop the request. An implementer MAY make additional checks if desired. At a minimum, the Director SHALL check the following:
  <list style="symbols">
      <t>Each ECU recorded in the inventory database is also represented in the manifest.</t>
      <t>The signature of the manifest matches the ECU key of the Primary that sent it.</t>
      <t>The signature of each Secondary’s contribution to the manifest matches the ECU key of that Secondary.</t>
    </list></t>
  <t>The Director SHOULD check that the nonce or counter in each ECU version report has not been used before to prevent a replay of the ECU version report. If the nonce or counter is reused the Director SHOULD drop the request.</t>
  <t>The Director extracts information about currently installed images from the vehicle version manifest. Using this information, it determines if the vehicle is already up-to-date, and if not, determines a set of images that should be installed. The exact process by which this determination takes place is out of scope of this Standard. However, the Director MUST take into account <spanx style="emph">dependencies</spanx> and <spanx style="emph">conflicts</spanx> between images and SHOULD consult well-established techniques for dependency resolution.</t>
  <t>The Director MAY encrypt images for ECUs that require it.</t>
  <t>The Director generates new metadata representing the desired set of images to be installed on the vehicle, based on the dependency resolution in step 4. This includes Targets (<xref target="targets_meta"/>), Snapshot (<xref target="snapshot_meta"/>), and Timestamp (<xref target="timestamp_meta"/>) metadata. It then sends this metadata to the Primary as described in <xref target="download_meta_primary"/>.</t>
</list></t>

</section>
<section anchor="inventory_db" title="Inventory Database">

<t>The Director SHALL use a private inventory database to store information about ECUs and vehicles. An implementer MAY use any durable database for this purpose.</t>

<t>The inventory database MUST record the following pieces of information:</t>

<t><list style="symbols">
  <t>Per vehicle:
  <list style="symbols">
      <t>A unique identifier (such as a VIN)</t>
    </list></t>
  <t>Per ECU:
  <list style="symbols">
      <t>A unique identifier (such as a serial number)</t>
      <t>The vehicle identifier the ECU is associated with</t>
      <t>An ECU key (symmetric or asymmetric; for asymmetric keys, only the public part SHOULD be stored)</t>
      <t>The ECU key identifier (as defined in <xref target="common_metadata"/>)</t>
      <t>Whether the ECU is a Primary or a Secondary</t>
    </list></t>
</list></t>

<t>The inventory database MAY record other information about ECUs and vehicles. It SHOULD record a hardware identifier for each ECU to protect against the possibility of directing the ECU to install incompatible firmware.</t>

</section>
</section>
</section>
<section anchor="in-vehicle-implementation-requirements" title="In-vehicle implementation requirements">

<t>An Uptane-compliant ECU SHALL be able to download and verify image metadata and image binaries before installing a new image and MUST have a secure way of verifying the current time, or a sufficiently recent attestation of the time.</t>

<t>Each ECU receiving over-the-air updates in a vehicle is either a Primary or a Secondary ECU. A Primary ECU collects and delivers vehicle manifests to the Director (<xref target="vehicle_version_manifest"/>) that contain information about which images have been installed on ECUs in the vehicle. It also verifies the time and downloads and verifies the latest metadata and images for itself and for its Secondaries. A Secondary ECU verifies the time, and downloads and verifies the latest metadata and images for itself from its associated Primary ECU. It also sends signed information about its installed images to its associated Primary.</t>

<t>All ECUs MUST verify image metadata as specified in <xref target="metadata_verification"/> before installing an image or making it available to other ECUs. A Primary ECU MUST perform full verification (<xref target="full_verification"/>). A Secondary ECU SHOULD perform full verification if possible. If a Secondary cannot perform full verification, it SHALL, at the very least, perform partial verification. In addition, it MAY also perform some steps from the full verification process. See the <spanx style="emph">Uptane Deployment Best Practices</spanx> document (<xref target="DEPLOY"/>) for a discussion of how to choose between partial and full verification.</t>

<t>ECUs MUST have a secure source of time. An OEM/Uptane implementer MAY use any external source of time that is demonstrably secure. The <spanx style="emph">Uptane Deployment Best Practices</spanx> document (<xref target="DEPLOY"/>) describes one way to implement an external time server to cryptographically attest time, as well as the security properties required.</t>

<section anchor="build-time-prerequisite-requirements-for-ecus" title="Build-time prerequisite requirements for ECUs">

<t>For an ECU to be capable of receiving Uptane-secured updates, it MUST have the following data provisioned at the time it is manufactured or installed in the vehicle:</t>

<t><list style="numbers">
  <t>A sufficiently recent copy of required Uptane metadata at the time of manufacture or install. This is necessary for the ECU to authenticate that the remote repository is legitimate when it first downloads metadata in the field. See <spanx style="emph">Uptane Deployment Best Practices</spanx> (<xref target="DEPLOY"/>) for more information.
  <list style="symbols">
      <t>Partial verification Secondary ECUs MUST have the Root and Targets metadata from the Director repository (to reduce the scope of rollback and replay attacks). These ECUs MAY also have metadata from other roles or the Image repository if they will be used by the Secondary.</t>
      <t>Full verification ECUs MUST have a complete set of metadata (Root, Targets, Snapshot, and Timestamp) from both repositories (to prevent rollback and replay attacks), as well as the repository mapping metadata (<xref target="repo_mapping_meta"/>). Delegations are not required.</t>
    </list></t>
  <t>The current time, or a secure attestation of a sufficiently recent time.</t>
  <t>An <spanx style="strong">ECU key</spanx>. This is a private key, unique to the ECU, used to sign ECU version reports and decrypt images. An ECU key MAY be either a symmetric key or an asymmetric key. If it is an asymmetric key, there MAY be separate keys for encryption and signing. For the purposes of this Standard, the set of private keys that an ECU uses is referred to as the ECU key (singular), even if it is actually multiple keys used for different purposes.</t>
</list></t>

</section>
<section anchor="what-the-primary-does" title="What the Primary does">

<t>A Primary downloads, verifies, and distributes the latest time, metadata, and images. To do so, it SHALL perform the following seven steps:</t>

<t><list style="numbers">
  <t>Construct and send vehicle version manifest (<xref target="construct_manifest_primary"/>)</t>
  <t>Download and check current time (<xref target="check_time_primary"/>)</t>
  <t>Download and verify metadata (<xref target="download_meta_primary"/>)</t>
  <t>Download and verify images (<xref target="download_images_primary"/>)</t>
  <t>OPTIONAL: Send latest time to Secondaries (<xref target="send_time_primary"/>)</t>
  <t>Send metadata to Secondaries (<xref target="send_metadata_primary"/>)</t>
  <t>Send images to Secondaries (<xref target="send_images_primary"/>)</t>
</list></t>

<t>Note that the subsequent sections concerning requirements for a Primary do not prohibit implementing Primary capabilities on an ECU that does not communicate directly with the Uptane repositories. This allows for implementations to have multiple ECUs within the vehicle performing functions equivalent to a Primary.
If multiple such Primaries are included within a vehicle, each Secondary ECU SHALL have a single Primary responsible for providing its updates.</t>

<section anchor="construct_manifest_primary" title="Construct and send vehicle version manifest">

<t>The Primary SHALL build a <spanx style="emph">vehicle version manifest</spanx> as described in <xref target="vehicle_version_manifest"/>.</t>

<t>Once the complete manifest is built, the Primary MAY send the manifest to the Director repository. However, it is not strictly required that the Primary send the manifest until step three. If permitted by the implementation, a Primary MAY send only a diff of the manifest to save bandwidth. If an implementation permits diffs, the Director SHOULD have a way to request a full manifest.</t>

<t>Secondaries MAY send their version report at any time so that it is already stored on the Primary when it wishes to check for updates. Alternatively, the Primary MAY request a version report from each Secondary at the time of the update check.</t>

<section anchor="vehicle_version_manifest" title="Vehicle version manifest">

<t>The vehicle version manifest is a metadata structure that MUST contain the following information:</t>

<t><list style="symbols">
  <t>An attribute containing the signature(s) of the payload, each specified by:
  <list style="symbols">
      <t>The public key identifier of the key being used to sign the payload</t>
      <t>The signing method (i.e., ed25519, rsassa-pss, etc.)</t>
      <t>A hash of the payload to be signed</t>
      <t>The hashing function used (i.e., SHA3-256, SHA-512/224, etc.)</t>
      <t>The signature of the hash</t>
    </list></t>
  <t>A payload representing the installed versions of each software image on the vehicle. This payload SHALL contain:
  <list style="symbols">
      <t>The vehicle’s unique identifier (e.g., the VIN)</t>
      <t>The Primary ECU’s unique identifier (e.g., the serial number)</t>
      <t>A list of ECU version reports as specified in <xref target="version_report"/></t>
    </list></t>
</list></t>

<t>Note that one of the ECU version reports should be the version report for the Primary itself.</t>

</section>
<section anchor="version_report" title="ECU version report">

<t>An ECU version report is a metadata structure that MUST contain the following information:</t>

<t><list style="symbols">
  <t>An attribute containing the signature(s) of the payload, each specified by:
  <list style="symbols">
      <t>The public key identifier of the key being used to sign the payload</t>
      <t>The signing method (i.e., ed25519, rsassa-pss, etc.)</t>
      <t>A hash of the payload to be signed</t>
      <t>The hashing function used (i.e., SHA3-256, SHA-512/224, etc.)</t>
      <t>The signature of the hash</t>
    </list></t>
  <t>A payload containing:
  <list style="symbols">
      <t>The ECU’s unique identifier (e.g., the serial number)</t>
      <t>The filename, length, and hashes of its currently installed image (i.e., the non-custom Targets metadata for this particular image)</t>
      <t>An indicator of any detected security attack</t>
      <t>The latest time the ECU can verify at the time this version report was generated</t>
      <t>A nonce or counter to prevent a replay of the ECU version report. This value MUST change each update cycle. It MAY be a cryptographic nonce used with a time server as described in <spanx style="emph">Uptane Deployment Best Practices</spanx>  (<xref target="DEPLOY"/>).</t>
    </list></t>
</list></t>

</section>
</section>
<section anchor="check_time_primary" title="Download and check current time">

<t>The Primary SHALL load the current time from a secure source.</t>

</section>
<section anchor="download_meta_primary" title="Download and verify metadata">

<t>The Primary SHALL download metadata for all targets and perform a full verification on it as specified in <xref target="full_verification"/>.</t>

</section>
<section anchor="download_images_primary" title="Download and verify images">

<t>The Primary SHALL download and verify images for itself and for all of its associated Secondaries. Images SHALL be verified by checking that the hash of the image file matches the hash specified in the Director’s Targets metadata for that image.</t>

<t>There may be several different filenames that all refer to the same image binary, as described in <xref target="metadata_filename_rules"/>. If the Primary has received multiple hashes for a given image binary via the Targets role (see <xref target="targets_images_meta"/>) then it SHALL verify every hash for this image even though the image is identified by a single hash as part of its filename.</t>

</section>
<section anchor="send_time_primary" title="Send latest time to Secondaries">

<t>Unless the Secondary ECU has its own way of verifying the time or does not have the capacity to verify a time message, the Primary is CONDITIONALLY REQUIRED to send the time to each ECU. The Secondary will verify the time message, then overwrite its current time with the received time.</t>

</section>
<section anchor="send_metadata_primary" title="Send metadata to Secondaries">

<t>The Primary SHALL send its latest downloaded metadata to all of its associated Secondaries. The metadata it sends to each Secondary MUST include all of the metadata required for verification on that Secondary. For full verification Secondaries, this includes the metadata for all four roles from both repositories, plus any delegated Targets metadata files the Secondary will recurse through to find the proper delegation. For partial verification Secondaries, this MAY include fewer metadata files; at a minimum, it includes only the Targets metadata file from the Director repository.</t>

<t>The Primary SHOULD determine the minimal set of metadata files to send to each Secondary by performing delegation resolution as described in <xref target="full_verification"/>.</t>

<t>Each Secondary SHALL store the latest copy of all metadata required for its own verification.</t>

</section>
<section anchor="send_images_primary" title="Send images to Secondaries">

<t>The Primary SHALL send the latest image to each of its associated Secondaries that have storage to receive it.</t>

<t>For Secondaries without storage, the Primary SHOULD wait for a request from the Secondary to stream the new image file to it. The Secondary will send the request once it has verified the metadata sent in the previous step.</t>

</section>
</section>
<section anchor="installing-images-on-primary-or-secondary-ecus" title="Installing images on Primary or Secondary ECUs">

<t>An ECU SHALL perform the following steps when attempting to install a new image:</t>

<t><list style="numbers">
  <t>Verify latest attested time. This is optional if the ECU does not have the capacity to verify a time message (<xref target="verify_time"/>)</t>
  <t>Verify metadata (<xref target="verify_metadata"/>)</t>
  <t>Download latest image (<xref target="download_image"/>)</t>
  <t>Verify image (<xref target="verify_image"/>)</t>
  <t>Install image (<xref target="install_image"/>)</t>
  <t>Create and send version report (<xref target="create_version_report"/>)</t>
</list></t>

<section anchor="verify_time" title="Load and verify the latest attested time">

<t>IF the ECU has the capability to verify a time message, the ECU is CONDITIONALLY REQUIRED to load and verify the current time, or the most recent securely attested time.</t>

</section>
<section anchor="verify_metadata" title="Verify metadata">

<t>The ECU SHALL verify the latest downloaded metadata (<xref target="metadata_verification"/>) using either full or partial verification. If the metadata verification fails for any reason, the ECU SHALL jump to the final step (<xref target="create_version_report"/>).</t>

</section>
<section anchor="download_image" title="Download latest image">

<t>If the ECU does not have secondary storage, i.e., buffer storage to temporarily store the latest image before installing it, it SHALL download the latest image from the Primary. (If the ECU has secondary storage, it will already have the latest image in its secondary storage as specified in <xref target="send_images_primary"/>, and should skip to the next step.) The ECU MAY first create a backup of its previous working image and store it elsewhere (e.g., the Primary).</t>

<t>The filename used to identify the latest known image (i.e., the file to request from the Primary) SHALL be determined as follows:</t>

<t><list style="numbers">
  <t>Load the Targets metadata file from the Director repository.</t>
  <t>Find the Targets metadata associated with this ECU identifier.</t>
  <t>Construct the Image filename using the rule in <xref target="metadata_filename_rules"/>, or use the download URL specified in the Director metadata.</t>
  <t>If there is no Targets metadata about this image, abort the update cycle and report that there is no such image. Additionally, in the case of failure, the ECU SHALL retain its previous Targets metadata instead of using the new Targets metadata. Otherwise, download the image (up to the number of bytes specified in the Targets metadata) and verify it according to <xref target="verify_image"/>.</t>
</list></t>

<t>When the Primary responds to the download request, the ECU SHALL overwrite its current image with the downloaded image from the Primary.</t>

<t>If any part of this step fails, the ECU SHALL jump to the final step (<xref target="create_version_report"/>).</t>

</section>
<section anchor="verify_image" title="Verify image">

<t>The ECU SHALL verify that the latest image matches the latest metadata as follows:</t>

<t><list style="numbers">
  <t>Load the latest Targets metadata file from the Director.</t>
  <t>Find the Targets metadata associated with this ECU identifier.</t>
  <t>Check that the hardware identifier in the metadata matches the ECU’s hardware identifier.</t>
  <t>Check that the image filename is valid for this ECU. This MAY be a comparison against a wildcard path, which restricts the ECUs to which a delegation will apply.</t>
  <t>Check that the release counter of the image in the previous metadata, if it exists, is less than or equal to the release counter in the latest metadata.</t>
  <t>If the image is encrypted, decrypt the image with a decryption key to be chosen as follows:
  <list style="symbols">
      <t>If the ECU key is a symmetric key, the ECU SHALL use the ECU key for image decryption.</t>
      <t>If the ECU key is asymmetric, the ECU SHALL check the Targets metadata for an encrypted symmetric key. If such a key is found, the ECU SHALL decrypt the symmetric key using its ECU key, and use the decrypted symmetric key for image decryption.</t>
      <t>If the ECU key is asymmetric and there is no symmetric key in the Targets metadata, the ECU SHALL use its ECU key for image decryption.</t>
    </list></t>
  <t>Check that all hashes listed in the metadata match the corresponding hashes of the image.</t>
</list></t>

<t>If the ECU has secondary storage, the checks SHOULD be performed on the image in secondary storage before it is installed.</t>

<t>When checking hashes, the ECU SHOULD additionally check that the length of the image matches the length listed in the metadata.</t>

<t>NOTE: Verifying image size along with the hashes will become a requirement in a future version of the Uptane Standard.</t>

<t>NOTE: See <xref target="DEPLOY"/> for guidance on how to deal with Secondary ECU failures for ECUs that do not have secondary storage.</t>

<t>If any step fails, the ECU SHALL jump to the final step (<xref target="create_version_report"/>).</t>

</section>
<section anchor="install_image" title="Install image">

<t>The ECU SHALL attempt to install the update. This installation SHOULD occur at a time when all pre-conditions are met. These pre-conditions MAY include ensuring the vehicle is in a safe environment for install (e.g., the vehicle is parked when updating a specific ECU). Another pre-condition MAY include ensuring the ECU has a backup of its current image and metadata in case the current installation fails.</t>

</section>
<section anchor="create_version_report" title="Create and send version report">

<t>The ECU SHALL create a version report as described in <xref target="version_report"/>, and send it to the Primary (or simply save it to disk, if the ECU is a Primary). The Primary SHOULD write the version reports it receives to disk and associate them with the Secondaries that sent them.</t>

</section>
</section>
<section anchor="metadata_verification" title="Metadata verification procedures">

<t>A Primary ECU MUST perform full verification of metadata. A Secondary ECU SHOULD perform full verification of metadata. If a Secondary cannot perform full verification, it SHALL, at the very least, perform partial verification.</t>

<t>If a step in the following workflows does not succeed (e.g., the update is aborted because a new metadata file was not signed), an ECU SHOULD still be able to update again in the future. Errors raised during the update process SHOULD NOT leave ECUs in an unrecoverable state.</t>

<section anchor="partial_verification" title="Partial verification">

<t>In order to perform partial verification, an ECU SHALL perform the following steps:</t>

<t><list style="numbers">
  <t>Load and verify the current time or the most recent securely attested time.</t>
  <t>Download and check the Targets metadata file from the Director repository, following the procedure in <xref target="check_targets"/>.</t>
</list></t>

<t>Note that this verification procedure is the smallest set of Uptane checks permissible for an Uptane Secondary ECU. An ECU MAY additionally implement more metadata checks.</t>

<t>For example, an ECU MAY also fetch and verify Root metadata from the Director (following the procedure in <xref target="check_root"/>) before checking Targets metadata. Performing this additional check would provide the ECU with a secure way to receive and validate a rotation of the Director’s Targets key.</t>

<t>See <xref target="DEPLOY"/> for more discussion on this topic.</t>

</section>
<section anchor="full_verification" title="Full verification">

<t>Full verification of metadata means that the ECU checks that the Targets metadata about images from the Director repository matches the Targets metadata about the same images from the Image repository. This provides resilience to a key compromise in the system.</t>

<t>Full verification MUST be performed by Primary ECUs and SHOULD be performed by Secondary ECUs. In the following instructions, whenever an ECU is directed to download metadata, it applies only to Primary ECUs.</t>

<t>If <xref target="TAP-5"/> is supported and a Primary has an external connection to the Uptane repositories, a Primary ECU SHALL download metadata and images following the rules specified in that TAP.  If <xref target="TAP-5"/> is not supported, or if the Primary does not have an external connection to the Uptane repositories, the download SHOULD follow the <xref target="TUF-spec"/> and the metadata file renaming rules specified in <xref target="metadata_filename_rules"/>.</t>

<t>Before starting full verification, the repository mapping metadata MUST be consulted to determine where to download metadata from. This procedure assumes the basic Uptane case: there are only two repositories (Director and Image), and all image paths are required to be signed by both repositories. If a more complex repository layout is being used, refer to <xref target="DEPLOY"/> for guidance on how to determine where metadata should be downloaded from.</t>

<t>In order to perform full verification, an ECU SHALL perform the following steps:</t>

<t><list style="numbers">
  <t>Load and verify the current time or the most recent securely attested time.</t>
  <t>Download and check the Root metadata file from the Director repository, following the procedure in <xref target="check_root"/>.</t>
  <t>Download and check the Timestamp metadata file from the Director repository, following the procedure in <xref target="check_timestamp"/>.</t>
  <t>Check the previously downloaded Snapshot metadata file from the Directory repository (if available). If the hashes and version number of that file match the hashes and version number listed in the new Timestamp metadata, there are no new updates and the verification process MAY be stopped and considered complete. Otherwise, download and check the Snapshot metadata file from the Director repository, following the procedure in <xref target="check_snapshot"/>.</t>
  <t>Download and check the Targets metadata file from the Director repository, following the procedure in <xref target="check_targets"/>.</t>
  <t>If the Targets metadata from the Directory repository indicates that there are no new targets that are not already currently installed, the verification process MAY be stopped and considered complete. Otherwise, download and check the Root metadata file from the Image repository, following the procedure in <xref target="check_root"/>.</t>
  <t>Download and check the Timestamp metadata file from the Image repository, following the procedure in <xref target="check_timestamp"/>.</t>
  <t>Check the previously downloaded Snapshot metadata file from the Image repository (if available). If the hashes and version number of that file match the hashes and version number listed in the new Timestamp metadata, the ECU MAY skip to the last step. Otherwise, download and check the Snapshot metadata file from the Image repository, following the procedure in <xref target="check_snapshot"/>.</t>
  <t>Download and check the top-level Targets metadata file from the Image repository, following the procedure in <xref target="check_targets"/>.</t>
  <t>Verify that Targets metadata from the Director and Image repositories match. A Primary ECU MUST perform this check on metadata for all images listed in the Targets metadata file from the Director repository downloaded in step 6. A Secondary ECU MAY elect to perform this check only on the metadata for the image it will install. (That is, the image metadata from the Director that contains the ECU identifier of the current ECU.) To check that the metadata for an image matches, complete the following procedure:
  <list style="numbers">
      <t>Locate and download a Targets metadata file from the Image repository that contains an image with exactly the same filename listed in the Director metadata, following the procedure in <xref target="resolve_delegations"/>.</t>
      <t>Check that the Targets metadata from the Image repository matches the Targets metadata from the Director repository:
      <list style="numbers">
          <t>Check that the non-custom metadata (i.e., length and hashes) of the unencrypted or encrypted image are the same in both sets of metadata. Note: the Primary is responsible for validating encrypted images and associated metadata. The target ECU (Primary or Secondary) is responsible for validating the unencrypted image and associated metadata.</t>
          <t>Check that all MUST match custom metadata (e.g., hardware identifier and release counter) are the same in both sets of metadata.</t>
          <t>Check that the release counter in the previous Targets metadata file is less than or equal to the release counter in this Targets metadata file.</t>
        </list></t>
    </list></t>
</list></t>

<t>If any step fails, the ECU MUST return an error code indicating the failure. If a check for a specific type of security attack fails (i.e., rollback, freeze, arbitrary software, etc.), the ECU SHOULD return an error code that indicates the type of attack.</t>

</section>
<section anchor="check_root" title="How to check Root metadata">

<t>To properly check Root metadata, an ECU SHOULD:</t>

<t><list style="numbers">
  <t>Load the previous Root metadata file.</t>
  <t>Update to the latest Root metadata file.
  <list style="numbers">
      <t>Let N denote the version number of the latest Root metadata file (which at first could be the same as the previous Root metadata file).</t>
      <t>Try downloading a new version N+1 of the Root metadata file, up to some X number of bytes. The value for X is set by the implementer. For example, X may be tens of kilobytes. The filename used to download the Root metadata file is of the fixed form VERSION_NUMBER.FILENAME.EXT (e.g., 42.root.json). If this file is not available, the current Root metadata file is the latest; continue with step 3.</t>
      <t>Version N+1 of the Root metadata file MUST have been signed by the following: (1) a threshold of keys specified in the latest Root metadata file (version N), and (2) a threshold of keys specified in the new Root metadata file being validated (version N+1). If version N+1 is not signed as required, discard it, abort the update cycle, and report the signature failure. On the next update cycle, begin at version N of the Root metadata file. (Checks for an arbitrary software attack.)</t>
      <t>The version number of the latest Root metadata file (version N) must be less than or equal to the version number of the new Root metadata file (version N+1). Effectively, this means checking that the version number signed in the new Root metadata file is indeed N+1. If the version of the new Root metadata file is less than the latest metadata file, discard it, abort the update cycle, and report the rollback attack. On the next update cycle, begin at step 1 and version N of the Root metadata file. (Checks for a rollback attack.)</t>
      <t>Set the latest Root metadata file to the new Root metadata file.</t>
      <t>Repeat steps 2.1 to 2.6.</t>
    </list></t>
  <t>Check that the current (or latest securely attested) time is lower than the expiration timestamp in the latest Root metadata file. (Checks for a freeze attack.)</t>
  <t>If the Timestamp and/or Snapshot keys have been rotated, delete the previous Timestamp and Snapshot metadata files. (Checks for recovery from fast-forward attacks <xref target="MERCURY"/>.)</t>
</list></t>

</section>
<section anchor="check_timestamp" title="How to check Timestamp metadata">

<t>To properly check Timestamp metadata, an ECU SHOULD:</t>

<t><list style="numbers">
  <t>Download up to Y number of bytes. The value for Y is set by the implementer. For example, Y may be tens of kilobytes. The filename used to download the Timestamp metadata file is of the fixed form FILENAME.EXT (e.g., timestamp.json).</t>
  <t>Check that it has been signed by the threshold of keys specified in the latest Root metadata file. If the new Timestamp metadata file is not properly signed, discard it, abort the update cycle, and report the signature failure. (Checks for an arbitrary software attack.)</t>
  <t>Check that the version number of the previous Timestamp metadata file, if any, is less than or equal to the version number of this Timestamp metadata file. If the new Timestamp metadata file is older than the trusted Timestamp metadata file, discard it, abort the update cycle, and report the potential rollback attack. (Checks for a rollback attack.)</t>
  <t>Check that the current (or latest securely attested) time is lower than the expiration timestamp in this Timestamp metadata file. If the new Timestamp metadata file has expired, discard it, abort the update cycle, and report the potential freeze attack. (Checks for a freeze attack.)</t>
</list></t>

</section>
<section anchor="check_snapshot" title="How to check Snapshot metadata">

<t>To properly check Snapshot metadata, an ECU SHOULD:</t>

<t><list style="numbers">
  <t>Download up to the number of bytes specified in the Timestamp metadata file, constructing the metadata filename as defined in <xref target="metadata_filename_rules"/>.</t>
  <t>The hashes and version number of the new Snapshot metadata file MUST match the hashes and version number listed in Timestamp metadata. If the hashes and version number do not match, discard the new Snapshot metadata, abort the update cycle, and report the failure. (Checks for a mix-and-match attack.)</t>
  <t>Check that it has been signed by the threshold of keys specified in the latest Root metadata file. If the new Snapshot metadata file is not signed as required, discard it, abort the update cycle, and report the signature failure. (Checks for an arbitrary software attack.)</t>
  <t>Check that the version number of the previous Snapshot metadata file, if any, is less than or equal to the version number of this Snapshot metadata file. If this Snapshot metadata file is older than the previous Snapshot metadata file, discard it, abort the update cycle, and report the potential rollback attack. (Checks for a rollback attack.)</t>
  <t>Check that the version number listed by the previous Snapshot metadata file for each Targets metadata file is less than or equal to its version number in this Snapshot metadata file. If this condition is not met, discard the new Snapshot metadata file, abort the update cycle, and report the failure. (Checks for a rollback attack.)</t>
  <t>Check that each Targets metadata filename listed in the previous Snapshot metadata file is also listed in this Snapshot metadata file. If this condition is not met, discard the new Snapshot metadata file, abort the update cycle, and report the failure. (Checks for a rollback attack.)</t>
  <t>Check that the current (or latest securely attested) time is lower than the expiration timestamp in this Snapshot metadata file. If the new Snapshot metadata file is expired, discard it, abort the update cycle, and report the potential freeze attack. (Checks for a freeze attack.)</t>
</list></t>

</section>
<section anchor="check_targets" title="How to check Targets metadata">

<t>To properly check Targets metadata, an ECU SHOULD:</t>

<t><list style="numbers">
  <t>Download up to Z number of bytes, constructing the metadata filename as defined in <xref target="metadata_filename_rules"/>. The value for Z is set by the implementer. For example, Z may be tens of kilobytes.</t>
  <t>The version number of the new Targets metadata file MUST match the version number listed in the latest Snapshot metadata. If the version number does not match, discard it, abort the update cycle, and report the failure. (Checks for a mix-and-match attack.) This step MAY be skipped when checking Targets metadata on a partial verification ECU; partial verification ECUs might not have Snapshot metadata.</t>
  <t>Check that the Targets metadata has been signed by the threshold of keys specified in the relevant metadata file (Checks for an arbitrary software attack):
  <list style="numbers">
      <t>If checking top-level Targets metadata, the threshold of keys is specified in the Root metadata.</t>
      <t>If checking delegated Targets metadata, the threshold of keys is specified in the Targets metadata file that delegated authority to this role.</t>
    </list></t>
  <t>Check that the version number of the previous Targets metadata file, if any, is less than or equal to the version number of this Targets metadata file. (Checks for a rollback attack.)</t>
  <t>Check that the current (or latest securely attested) time is lower than the expiration timestamp in this Targets metadata file. (Checks for a freeze attack.)</t>
  <t>If checking Targets metadata from the Director repository, verify that there are no delegations.</t>
  <t>If checking Targets metadata from the Director repository, check that no ECU identifier is represented more than once.</t>
  <t>If checking Targets metadata from the Director repository, and the ECU performing the verification is the Primary ECU, check that all listed ECU identifiers correspond to ECUs that are actually present in the vehicle.</t>
</list></t>

</section>
<section anchor="resolve_delegations" title="How to resolve delegations">

<t>To properly check Targets metadata for an image, an ECU MUST locate the metadata file(s) for the role (or roles) that have the authority to sign the image. This metadata might be located in the top-level Targets metadata, but it also may be delegated to another role or to multiple roles. Therefore, all delegations MUST be resolved using the following recursive procedure, beginning with the top-level Targets metadata file.</t>

<t><list style="numbers">
  <t>Download the current metadata file, and check it following the procedure in <xref target="check_targets"/>. If the file cannot be loaded, or if any verification step fails, abort the delegation resolution, and indicate that image metadata cannot be found because of a missing or invalid role.</t>
  <t>If the current metadata file contains signed metadata about the image, end the delegation resolution and return the metadata to be checked.</t>
  <t>If the current metadata file was reached via a terminating delegation and does not contain signed metadata about the image, abort the delegation resolution for this image and return an error indicating that image metadata could not be found.</t>
  <t>Search the list of delegations, in listed order. For each delegation:
  <list style="numbers">
      <t>Check if the delegation applies to the image being processed. For the delegation to apply, it MUST include the hardware identifier of the target, and the target name MUST match one of the delegation’s image paths. If either of these tests fail, move on to the next delegation in the list.</t>
      <t>If the delegation is a multi-role delegation, follow the procedure described in <xref target="multirole_delegations"/>. If the multi-role delegation is terminating and no valid image metadata is found, abort the delegation resolution and return an error indicating that image metadata could not be found.</t>
      <t>If the delegation is a normal delegation, perform delegation resolution, starting at step 1. Note that this may recurse an arbitrary number of levels deep. If a delegation that applies to the image is found but no image metadata is found in the delegated roles or any of its sub-delegations, simply continue on with the next delegation in the list. The search is only completed or aborted if image metadata or a terminating delegation that applies to the image is found.</t>
    </list></t>
  <t>If the end of the list of delegations in the top-level metadata is reached without finding valid image metadata, return an error indicating that image metadata could not be found.</t>
</list></t>

</section>
<section anchor="multirole_delegations" title="Multi-role delegations">

<t>It is possible to delegate signing authority to multiple delegated roles as described in <xref target="TAP-3"/>. Each multi-role delegation effectively contains a list of ordinary delegations, plus a threshold of those roles that must be in agreement about the non-custom metadata for the image. All multi-role delegations MUST be resolved using the following procedure. Note that there may be sub-delegations inside multi-role delegations.</t>

<t><list style="numbers">
  <t>For each of the roles in the delegation, find and load the image metadata following the procedure in <xref target="resolve_delegations"/>.</t>
  <t>Inspect the non-custom part of the metadata loaded in step 1:
  <list style="numbers">
      <t>Locate all sets of roles which have agreeing (i.e., identical) non-custom metadata and “MUST match” custom metadata. Discard any set of roles with a size smaller than the threshold of roles that must be in agreement for this delegation.</t>
      <t>Check for a conflict. A conflict exists if there remains more than one agreeing set of roles, each set having different metadata. If a conflict is found, choose and return the metadata from the set of roles which includes the earliest role in the multi-delegation list.</t>
      <t>If there is no conflict, check if there is any single set of roles with matching non-custom metadata. If there is, choose and return the metadata from this set.</t>
      <t>If no agreeing set can be found that meets the agreement threshold, return an error indicating that image metadata could not be found.</t>
    </list></t>
</list></t>

</section>
</section>
</section>
</section>


  </middle>

  <back>

    <references title='Normative References'>





<reference  anchor="RFC2119" target='https://www.rfc-editor.org/info/rfc2119'>
<front>
<title>Key words for use in RFCs to Indicate Requirement Levels</title>
<author initials='S.' surname='Bradner' fullname='S. Bradner'><organization /></author>
<date year='1997' month='March' />
<abstract><t>In many standards track documents several words are used to signify the requirements in the specification.  These words are often capitalized. This document defines these words as they should be interpreted in IETF documents.  This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t></abstract>
</front>
<seriesInfo name='BCP' value='14'/>
<seriesInfo name='RFC' value='2119'/>
<seriesInfo name='DOI' value='10.17487/RFC2119'/>
</reference>



<reference  anchor="RFC3647" target='https://www.rfc-editor.org/info/rfc3647'>
<front>
<title>Internet X.509 Public Key Infrastructure Certificate Policy and Certification Practices Framework</title>
<author initials='S.' surname='Chokhani' fullname='S. Chokhani'><organization /></author>
<author initials='W.' surname='Ford' fullname='W. Ford'><organization /></author>
<author initials='R.' surname='Sabett' fullname='R. Sabett'><organization /></author>
<author initials='C.' surname='Merrill' fullname='C. Merrill'><organization /></author>
<author initials='S.' surname='Wu' fullname='S. Wu'><organization /></author>
<date year='2003' month='November' />
<abstract><t>This document presents a framework to assist the writers of certificate policies or certification practice statements for participants within public key infrastructures, such as certification authorities, policy authorities, and communities of interest that wish to rely on certificates.  In particular, the framework provides a comprehensive list of topics that potentially (at the writer's discretion) need to be covered in a certificate policy or a certification practice statement.  This document supersedes RFC 2527.</t></abstract>
</front>
<seriesInfo name='RFC' value='3647'/>
<seriesInfo name='DOI' value='10.17487/RFC3647'/>
</reference>



<reference  anchor="RFC5198" target='https://www.rfc-editor.org/info/rfc5198'>
<front>
<title>Unicode Format for Network Interchange</title>
<author initials='J.' surname='Klensin' fullname='J. Klensin'><organization /></author>
<author initials='M.' surname='Padlipsky' fullname='M. Padlipsky'><organization /></author>
<date year='2008' month='March' />
<abstract><t>The Internet today is in need of a standardized form for the transmission of internationalized &quot;text&quot; information, paralleling the specifications for the use of ASCII that date from the early days of the ARPANET.  This document specifies that format, using UTF-8 with normalization and specific line-ending sequences.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='5198'/>
<seriesInfo name='DOI' value='10.17487/RFC5198'/>
</reference>


<reference anchor="NFC" target="http://www.unicode.org/reports/tr15/">
  <front>
    <title>Unicode Standard Annex #15: Unicode Normalization Forms</title>
    <author initials="M." surname="Davis">
      <organization></organization>
    </author>
    <author initials="M." surname="Duerst">
      <organization></organization>
    </author>
    <date year="2018" month="October"/>
  </front>
</reference>
<reference anchor="TAP-3" target="https://github.com/theupdateframework/taps/blob/d0818e580c322815a473520f2e8cc5f5eb8df499/tap3.md">
  <front>
    <title>The Update Framework TAP 3 - Multi-role delegations</title>
    <author initials="T.K." surname="Kuppusamy">
      <organization></organization>
    </author>
    <author initials="S." surname="Awwad">
      <organization></organization>
    </author>
    <author initials="E." surname="Cordell">
      <organization></organization>
    </author>
    <author initials="V." surname="Diaz">
      <organization></organization>
    </author>
    <author initials="J." surname="Moshenko">
      <organization></organization>
    </author>
    <author initials="J." surname="Cappos">
      <organization></organization>
    </author>
    <date year="2018" month="January" day="18"/>
  </front>
</reference>
<reference anchor="TAP-4" target="https://github.com/theupdateframework/taps/blob/2cb67d913ec19424d1e354b38f862886fbfd4105/tap4.md">
  <front>
    <title>The Update Framework TAP 4 - Multiple repository consensus on entrusted targets</title>
    <author initials="T.K." surname="Kuppusamy">
      <organization></organization>
    </author>
    <author initials="S." surname="Awwad">
      <organization></organization>
    </author>
    <author initials="E." surname="Cordell">
      <organization></organization>
    </author>
    <author initials="V." surname="Diaz">
      <organization></organization>
    </author>
    <author initials="J." surname="Moshenko">
      <organization></organization>
    </author>
    <author initials="J." surname="Cappos">
      <organization></organization>
    </author>
    <date year="2017" month="December" day="15"/>
  </front>
</reference>
<reference anchor="TAP-5" target="https://github.com/theupdateframework/taps/blob/01726d203c9b9c029d26f6612069ce3180500d9a/tap5.md#downloading-metadata-and-target-files">
  <front>
    <title>The Update Framework TAP 5 - Setting URLs for roles in the root metadata file</title>
    <author initials="T.K." surname="Kuppusamy">
      <organization></organization>
    </author>
    <author initials="S." surname="Awwad">
      <organization></organization>
    </author>
    <author initials="E." surname="Cordell">
      <organization></organization>
    </author>
    <author initials="V." surname="Diaz">
      <organization></organization>
    </author>
    <author initials="J." surname="Moshenko">
      <organization></organization>
    </author>
    <author initials="J." surname="Cappos">
      <organization></organization>
    </author>
    <date year="2018" month="January" day="22"/>
  </front>
</reference>
<reference anchor="TUF-spec" target="https://github.com/theupdateframework/specification/blob/2b4e18472fe25d5b57f36f6fa50104967c8faeaa/tuf-spec.md">
  <front>
    <title>The Update Framework Specification</title>
    <author initials="J." surname="Samuel">
      <organization></organization>
    </author>
    <author initials="N." surname="Mathewson">
      <organization></organization>
    </author>
    <author initials="G." surname="Condra">
      <organization></organization>
    </author>
    <author initials="V." surname="Diaz">
      <organization></organization>
    </author>
    <author initials="T.K." surname="Kuppusamy">
      <organization></organization>
    </author>
    <author initials="S." surname="Awwad">
      <organization></organization>
    </author>
    <author initials="S." surname="Tobias">
      <organization></organization>
    </author>
    <author initials="J." surname="Wright">
      <organization></organization>
    </author>
    <author initials="H." surname="Mehnert">
      <organization></organization>
    </author>
    <author initials="E." surname="Tryzelaar">
      <organization></organization>
    </author>
    <author initials="J." surname="Cappos">
      <organization></organization>
    </author>
    <author initials="R." surname="Dingledine">
      <organization></organization>
    </author>
    <date year="2018" month="September" day="19"/>
  </front>
</reference>


    </references>

    <references title='Informative References'>

<reference anchor="MERCURY" target="https://www.usenix.org/system/files/conference/atc17/atc17-kuppusamy.pdf">
  <front>
    <title>Mercury: Bandwidth-Effective Prevention of Rollback Attacks Against Community Repositories</title>
    <author initials="T.K." surname="Kuppusamy">
      <organization></organization>
    </author>
    <author initials="V." surname="Diaz">
      <organization></organization>
    </author>
    <author initials="J." surname="Cappos">
      <organization></organization>
    </author>
    <date year="2017" month="July" day="12"/>
  </front>
  <seriesInfo name="ISBN" value="978-1-931971-38-6"/>
</reference>
<reference anchor="UPTANEESCAR" target="https://ssl.engineering.nyu.edu/papers/kuppusamy_escar_16.pdf">
  <front>
    <title>Securing Software Updates for Automobiles</title>
    <author initials="T.K." surname="Kuppusamy">
      <organization></organization>
    </author>
    <author initials="A." surname="Brown">
      <organization></organization>
    </author>
    <author initials="S." surname="Awwad">
      <organization></organization>
    </author>
    <author initials="D." surname="McCoy">
      <organization></organization>
    </author>
    <author initials="R." surname="Bielawski">
      <organization></organization>
    </author>
    <author initials="C." surname="Mott">
      <organization></organization>
    </author>
    <author initials="S." surname="Lauzon">
      <organization></organization>
    </author>
    <author initials="A." surname="Weimerskirch">
      <organization></organization>
    </author>
    <author initials="J." surname="Cappos">
      <organization></organization>
    </author>
    <date year="2016" month="October" day="16"/>
  </front>
</reference>
<reference anchor="PEP-458" target="https://www.python.org/dev/peps/pep-0458/">
  <front>
    <title>PEP 458 -- Surviving a Compromise of PyPI</title>
    <author initials="T.K." surname="Kuppusamy">
      <organization></organization>
    </author>
    <author initials="V." surname="Diaz">
      <organization></organization>
    </author>
    <author initials="D." surname="Stufft">
      <organization></organization>
    </author>
    <author initials="J." surname="Cappos">
      <organization></organization>
    </author>
    <date year="2013" month="September" day="27"/>
  </front>
</reference>
<reference anchor="DEPLOY" target="https://uptane.github.io/deployment-considerations/index.html">
  <front>
    <title>Uptane Deployment Best Practices</title>
    <author initials="." surname="Members of the Uptane Community">
      <organization></organization>
    </author>
    <date year="n.d."/>
  </front>
</reference>
<reference anchor="USATODAY" target="https://www.usatoday.com/story/tech/columnist/2016/06/28/your-average-car-lot-more-code-driven-than-you-think/86437052/">
  <front>
    <title>Your average car is a lot more code-driven than you think</title>
    <author initials="B." surname="O'Donnell">
      <organization></organization>
    </author>
    <date year="2016" month="June" day="28"/>
  </front>
</reference>
<reference anchor="CR-OTA" target="https://www.consumerreports.org/automotive-technology/automakers-embrace-over-the-air-updates-can-we-trust-digital-car-repair/">
  <front>
    <title>Automakers Embrace Over-the-Air Updates, but Can We Trust Digital Car Repair?</title>
    <author initials="K." surname="Barry">
      <organization></organization>
    </author>
    <date year="2018" month="April" day="20"/>
  </front>
</reference>
<reference anchor="IN-TOTO" target="https://in-toto.github.io/">
  <front>
    <title>in-toto: A framework to secure the integrity of software supply chains</title>
    <author >
      <organization></organization>
    </author>
    <date year="2018" month="October" day="29"/>
  </front>
</reference>


    </references>



  </back>

<!-- ##markdown-source:
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

-->

</rfc>


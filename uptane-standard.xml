<?xml version="1.0" encoding="UTF-8"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc2629 version 1.2.9 -->

<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
]>

<?rfc toc="yes"?>
<?rfc sortrefs="yes"?>
<?rfc symrefs="yes"?>

<rfc ipr="noDerivativesTrust200902" docName="uptane-standard-design" category="info">

  <front>
    <title abbrev="UPTANE">Uptane Standard for Design and Implementation</title>

    <author initials="." surname="Members of the Uptane Alliance Community" fullname="Uptane Alliance Community">
      <organization>Uptane Alliance (c/o Prof. Justin Cappos)</organization>
      <address>
        <postal>
          <street>6 MetroTech</street>
          <city>Brooklyn</city>
          <region>NY</region>
          <code>11201</code>
          <country>USA</country>
        </postal>
        <email>uptane-standards@googlegroups.com</email>
      </address>
    </author>

    <date year="2020" month="June" day="23"/>

    <area>TODO</area>
    <workgroup>TODO</workgroup>
    <keyword>Internet-Draft</keyword>

    <abstract>


<t>This document describes a framework for securing ground vehicle software update systems.</t>



    </abstract>


  </front>

  <middle>


<section anchor="introduction" title="Introduction">

<t>Uptane is a secure software update framework for ground vehicles. This document describes procedures to enable programmers for OEMs and suppliers to securely design and implement this framework in a manner that better protects connected units on ground vehicles. Integrating Uptane as outlined in the sections that follow can reduce the ability of attackers to compromise critical systems. It also assures a faster and easier recovery process should a compromise occur.</t>

<t>These instructions specify the components necessary for a compliant implementation. Individual implementors can make their own technological choices within those requirements. This flexibility makes Uptane adaptable to the many customized update solutions used by manufacturers. If implementors wish to have compatible formats, they may use POUFs. POUFs contain a description of implementation choices as well as data binding formats. An implementor who adopts a POUF, as well as the Uptane Standard, will be able to interoperate with other implementations using that POUF.</t>

</section>
<section anchor="terminology" title="Terminology">

<section anchor="conformance-terminology" title="Conformance terminology">

<t>The keywords MUST, MUST NOT, REQUIRED, SHALL, SHALL NOT, SHOULD, SHOULD NOT, RECOMMENDED, MAY, and OPTIONAL in this document are to be interpreted as described in <xref target="RFC2119"/>.</t>

<t>In order to be considered “Uptane-compliant,” an implementation MUST follow all of these rules as specified in the document.</t>

</section>
<section anchor="terminology-1" title="Terminology">

<t><spanx style="emph">Bundle</spanx>: A set of images released by the repository that is meant to be installed by one or more target ECUs on a vehicle during the same update cycle.</t>

<t><spanx style="emph">Bus</spanx>: An internal communications network that interconnects components within a vehicle. A vehicle can have a number of buses that will vary in terms of power, speed and resources.</t>

<t><spanx style="emph">ECU Identifier</spanx>: An attribute used to identify a specific ECU (e.g., such as a unique serial number).</t>

<t><spanx style="emph">ECU Version Manifest</spanx>: Metadata which details the software version currently installed on the ECU.</t>

<t><spanx style="emph">Hardware Identifier</spanx>: An attribute used to identify a model of an ECU.</t>

<t><spanx style="emph">Image</spanx>: File containing software for an ECU to install. May contain a binary image to flash, installation instructions, and other necessary information for the ECU to properly apply the update. Each ECU typically holds only one image, although this may vary in some cases.</t>

<t><spanx style="emph">Metadata</spanx>:  Information describing the characteristics of data including, for example, structural
metadata describing data structures (e.g., data format, syntax, and semantics) and
descriptive metadata describing data contents (e.g., information security labels). As used in Uptane, metadata can be described as information associated with a role or an image that contains the characteristics or parameters thereof (e.g. cryptographic material parameters, file names and versions.)</t>

<t><spanx style="emph">Primary/Secondary ECUs</spanx>: Terms used to describe the control units within a ground vehicle. A primary ECU downloads and verifies update images and metadata for itself and for secondary ECUs, and distributes images and metadata to secondaries. Thus, it requires extra storage space and a means to download images and metadata.  Secondary ECUs receive their update images and metadata from the primary, and only need to verify and install their own metadata and images.</t>

<t><spanx style="emph">POUF</spanx>: A document that contains the protocol, operations, usage, and formats (POUF) of a specific Uptane implementation. The POUF contains decisions about SHOULDs and MAYs in an implementation, as well as descriptions of data binding formats. POUFs MAY be used to create compatible Uptane implementations.</t>

<t><spanx style="emph">Repository</spanx>: A server containing metadata about images. May also contain the images themselves. Other data may be stored on the repository to be accessed by ECUs during the update process.</t>

<t><spanx style="emph">Suppliers</spanx>: Independent companies to which auto manufacturers may outsource the production of ECUs. Tier-1 suppliers directly serve the manufacturers. Tier-2 suppliers are those that perform outsourced work for Tier-1 suppliers.</t>

<t><spanx style="emph">Vehicle Version Manifest</spanx>: A compilation of all ECU version manifests on a vehicle. It serves as a master list of all images currently running on all ECUs in the vehicle.</t>

</section>
<section anchor="uptane-role-terminology" title="Uptane Role terminology">

<t>These terms are defined in greater detail in <xref target="roles"/>.</t>

<t><spanx style="emph">Delegations</spanx>: A process by which the responsibility of signing metadata about images is assigned to another party.<vspace />
<spanx style="emph">Role</spanx>: A party (human or machine) responsible for signing a certain type of metadata. The role controls keys and is responsible for signing metadata entrusted to it with these keys. The roles mechanism of Uptane allows the system to distribute signing responsibilities so that the compromise of one key does not necessarily impact the security of the entire system.</t>

<t><list style="symbols">
  <t><spanx style="emph">Root Role</spanx>: Signs metadata that distributes and revokes public keys used to verify the Root, Timestamp, Snapshot, and Targets role metadata.</t>
  <t><spanx style="emph">Snapshot Role</spanx>: Signs metadata that indicates which images the repository has released at the same time.</t>
  <t><spanx style="emph">Targets Role</spanx>: Signs metadata used to verify the image, such as cryptographic hashes and file size.</t>
  <t><spanx style="emph">Timestamp Role</spanx>: Signs metadata that indicates if there are any new metadata or images on the repository.</t>
</list></t>

</section>
<section anchor="acronyms-and-abbreviations" title="Acronyms and abbreviations">

<t><spanx style="emph">CAN Bus</spanx>: Controller Area Network bus standard</t>

<t><spanx style="emph">CDN</spanx>: Content Delivery Network</t>

<t><spanx style="emph">ECUs</spanx>: Electronic Control Units, the computing units on a vehicle</t>

<t><spanx style="emph">LIN Bus</spanx>: Local Interconnect Bus</t>

<t><spanx style="emph">OBD</spanx>: On-board diagnostics</t>

<t><spanx style="emph">SOTA</spanx>: Software Updates Over-the-Air</t>

<t><spanx style="emph">UDS</spanx>: Unified Diagnostic Services</t>

<t><spanx style="emph">VIN</spanx>: Vehicle Identification Number</t>

</section>
</section>
<section anchor="rationale-for-and-scope-of-uptane-standards" title="Rationale for and scope of Uptane Standards">

<t>This Standards document clarifies the essential components and best practices for the secure design, implementation and deployment of Uptane by OEMs and suppliers. These practices contribute to compromise resilience, or the ability to minimize the extent of the threat posed by any given attack.</t>

<t>However, this specification is intended as an implementation guide, and not as a detailed technical argument about the security properties that Uptane provides.  Readers interested in such documentation should refer to published papers that cover this topic.  <xref target="UPTANEESCAR"/></t>

<section anchor="why-uptane-requires-a-standards-document" title="Why Uptane requires a standards document">

<t>A standards document that can guide the safe design, integration and deployment of Uptane in vehicles is needed at this time because:</t>

<t><list style="symbols">
  <t>The number of connected units on the average vehicle continues to grow, with mainstream cars now containing up to 100 million lines of code. <xref target="USATODAY"/></t>
  <t>The expanded use of software over-the-air strategies creates new attack surfaces for malicious parties. <xref target="CR-OTA"/></t>
  <t>Legacy update strategies, such as SSL/TLS or GPG/RSA, are not feasible for use on vehicle ECUs because they force manufacturers to chose between enhanced security and customizability.</t>
  <t>Conventional strategies are also complicated by the differing resources of the ECUs, which can vary greatly in memory, storage space, and Internet connectivity.</t>
  <t>The design of Uptane makes it possible to offer improved design flexibility, without sacrificing security.</t>
  <t>This added design flexibility, however, could be a liability if the framework is implemented incorrectly.</t>
  <t>Standardization of crucial steps in the design, implementation and use of Uptane can assure that customizability does not impact security or functionality.</t>
</list></t>

</section>
<section anchor="scope-of-standards-coverage" title="Scope of Standards coverage">

<t>This document sets guidelines for implementing Uptane in most systems capable of updating software on connected units in ground vehicles, including passenger vehicles, light-duty trucks, heavy-duty trucks, and motorcycles. Uptane could potentially also be applied to other ground vehicles, such as automated shuttles, recreational vehicles, and military ground vehicles. Uptane could even be applied to domains such as IoT devices, medical devices, and unmanned aerial vehicles. In this section, we define the scope of that applicability by providing sample use cases and possible exceptions, aspects of software update security that are not applicable to Uptane, and the design requirements governing the preparation of these standards.</t>

<section anchor="assumptions" title="Assumptions">

<t>We assume the following system preconditions for Uptane:</t>

<t><list style="symbols">
  <t>Vehicles have the ability to establish connectivity to required backend services. For example, this could be done through cellular, Wi-Fi, or hard-wired mechanisms.</t>
  <t>ECUs are either directly connected to the communication channel, or are indirectly connected via some sort of network gateway.</t>
  <t>ECUs are programmable and provide sufficient performance to be updated.</t>
  <t>ECUs must be able to perform a public key cryptography operation as well as some supporting operations.</t>
  <t>There are state-of-the-art secure servers in place, such as the Director and Image repository servers.</t>
</list></t>

<t>It is important that any bugs detected in Uptane implementations be patched promptly. Failure to do so could interfere with the effectiveness of Uptane’s operations.</t>

</section>
<section anchor="use-cases" title="Use cases">

<t>The following use cases provide a number of scenarios illustrating the manner in which software updates could be accomplished using Uptane.</t>

<section anchor="oems-initializing-uptane-at-the-factory-using-sota" title="OEMs initializing Uptane at the factory using SOTA">

<t>An OEM plans to install Uptane on new vehicles. This entails the following components: code to perform full and partial verification, the latest copy of the relevant metadata, the public keys, and an accurate attestation of the latest time. The OEM then either requires its tier-1 suppliers to provide these materials to the suppliers’ assembly lines or can choose to add the materials later at the OEM’s assembly lines. The OEM’s implementation is Uptane-compliant if:</t>

<t><list style="numbers">
  <t>all primaries perform full verification;</t>
  <t>all secondaries that are updated via OTA perform full or partial verification; and</t>
  <t>all other ECUs that do not perform verification cannot be updated via OTA.</t>
</list></t>

</section>
<section anchor="updating-one-ecu-with-a-complete-image" title="Updating one ECU with a complete image">

<t>A tier-1 supplier completes work on a revised image for an electronic brake control module. This module will control the brakes on all models of an SUV produced by the OEM mentioned above. Assuming supplier delegation is supported by the OEM for this ECU, each tier-1 supplier digitally signs the image, then delivers the signature and all of its metadata, including delegations, and associated images to the OEM. The OEM adds these metadata and images to its image repository, along with information about any dependencies and conflicts between this image and those for other ECUs used in the OEM’s vehicles. The OEM also updates the inventory database, so that the director repository can instruct the ECU on how to install these updated images.</t>

</section>
<section anchor="updating-individual-ecus-on-demand" title="Updating individual ECUs on demand">

<t>An OEM has issued a recall to address a problem with a keyless entry device that has been locking people out of their cars. The OEM prepares an updated flash image in the manner described above. The OEM then ships USB flash drives to vehicle owners and dealerships that allow those parties to update the firmware of their vehicles.</t>

</section>
<section anchor="update-one-ecu-with-multiple-deltas" title="Update one ECU with multiple deltas">

<t>The OEM wants to use delta updates to save over-the-air bytes. The delta images contain only the code and/or data that has changed from the previous image version. To do so, the OEM must first modify the Director repository, using the vehicle version manifest and dependency resolution to determine the differences between the previous and latest images. The OEM then adds the following to the custom Targets metadata used by the Director repository: (1) the algorithm used to apply a delta image, and (2) the Targets metadata about the delta image. The OEM will also check whether the delta images match the Targets metadata from the Director repository.</t>

</section>
</section>
</section>
<section anchor="exceptions" title="Exceptions">

<t>There are a number of factors that could impede the completion of the above scenarios:</t>

<t><list style="symbols">
  <t>ECUs may be lacking the necessary resources to function as designated. These resources could include weaknesses, in terms of CPU or RAM, that render performance of public key cryptography infeasible; a lack of sufficient storage to undo installation of bad software; or an ECU simply may reside on a low-speed network (e.g., LIN).</t>
  <t>ECUs may reside on different network segments, and may not be able to directly reach each other, requiring a gateway to facilitate communication.</t>
  <t>A user may replace OEM-installed ECUs with aftermarket ECUs.</t>
  <t>A vehicle may be able to download only a limited amount of data via a cellular channel, due to limits on a data plan.</t>
  <t>A system may lack sufficient power to download or install software updates.</t>
  <t>Vehicles may be offline for extended periods of time, thus missing required updates (e.g., key rotations).</t>
  <t>OEMs may be unwilling to implement costly security or hardware requirements.</t>
</list></t>

</section>
<section anchor="out-of-scope" title="Out of Scope">

<t>The following topics will not be addressed in this document, as they represent threats outside the scope of Uptane:</t>

<t><list style="symbols">
  <t>Physical attacks, such as manual tampering with ECUs outside the vehicle.</t>
  <t>Compromise of the packaged software, such as malware embedded in a trusted package.</t>
  <t>Compromise of the supply chain (e.g., build system, version control system, packaging process). A number of strategies (e.g., git signing, TPMs, in-toto <xref target="IN-TOTO"/>)  already exist to address this problem. Therefore, there is no need to duplicate those techniques here.</t>
  <t>Problems associated with OBD or UDS programming of ECUs, such as authentication of communications between ECUs.</t>
  <t>Malicious mirrors of package repositories, which may substitute original packages with malicious packages with matching version numbers <xref target="MERCURY"/>.</t>
</list></t>

</section>
<section anchor="design-requirements" title="Design requirements">

<t>The design requirements for this document are governed by the following principal parameters:</t>

<t><list style="symbols">
  <t>to clearly mandate the design and implementation steps that are security critical and must be followed as is, while offering flexibility in the implementation of non-critical steps. In this manner, users can adapt to support different use models and deployment scenarios.</t>
  <t>to ensure that, if Uptane is implemented, the security practices mandated or suggested in this document do not interfere with the functionality of ECUs, vehicles, or the systems that maintain them.</t>
  <t>to delineate best practices to ensure that, should any part of the SOTA mechanism of a vehicle be attacked, an attacker must compromise two or more modules to breach the SOTA mechanism.</t>
</list></t>

</section>
</section>
<section anchor="threat-model-and-attack-strategies" title="Threat model and attack strategies">

<t>The overarching goal of Uptane is to provide a system that is resilient in the face of various types of compromise. In this section, we describe the goals an attacker may have (<xref target="attacker_goals"/>) and the capabilities they may have or could develop (<xref target="capabilities"/>). We then describe and classify types of attacks on the system according to the attacker’s goals (<xref target="threats"/>).</t>

<section anchor="attacker_goals" title="Attacker goals">

<t>We assume that attackers may want to achieve one or more of the following goals, in increasing order of severity:</t>

<t><list style="symbols">
  <t>Read the contents of updates to discover confidential information, reverse-engineer firmware, or compare two firmware images to identify security fixes and hence determine the fixed security vulnerability</t>
  <t>Deny installation of updates to prevent vehicles from fixing software problems</t>
  <t>Cause one or more ECUs in the vehicle to fail, denying use of the vehicle or of certain functions</t>
  <t>Control ECUs within the vehicle, and possibly the vehicle itself</t>
</list></t>

</section>
<section anchor="capabilities" title="Attacker capabilities">

<t>Uptane is designed with resilience to compromise in mind. We assume that attackers may develop one or more of the following capabilities:</t>

<t><list style="symbols">
  <t>Intercept and modify network traffic (i.e., perform man-in-the-middle attacks). This capability may be developed in two domains:
  <list style="symbols">
      <t>Outside the vehicle, intercepting and modifying traffic between the vehicle and software repositories</t>
      <t>Inside the vehicle, intercepting and modifying traffic on one or more vehicle buses (e.g. via an OBD port or using a compromised ECU as a vector)</t>
    </list></t>
  <t>Compromise and control either a Director repository or Image repository server, and any keys stored on that repository, but not both the Director and Image repositories.</t>
  <t>Compromise either a Primary ECU or a Secondary ECU, but not both in the same vehicle</t>
</list></t>

</section>
<section anchor="threats" title="Description of threats">

<t>Uptane’s threat model includes the following types of attacks, organized according to the attacker goals listed in <xref target="attacker_goals"/>.</t>

<section anchor="read_updates" title="Read updates">

<t><list style="symbols">
  <t><spanx style="emph">Eavesdrop attack:</spanx> Read sensitive or confidential information from an update intended to be encrypted for a specific ECU. (Note: Not all implementations will have a need for protecting information in this way.)</t>
</list></t>

</section>
<section anchor="deny_updates" title="Deny installation of updates">

<t>An attacker seeking to deny the installation of updates may attempt one or more of the following strategies, among others:</t>

<t><list style="symbols">
  <t><spanx style="emph">Drop-request attack:</spanx> Block network traffic outside or inside the vehicle.</t>
  <t><spanx style="emph">Slow retrieval attack:</spanx> Slow down network traffic, in the extreme case sending barely enough packets to avoid a timeout. Similar to a drop-request attack, except that both the sender and receiver of the traffic still think network traffic is unimpeded.</t>
  <t><spanx style="emph">Freeze attack:</spanx> Continue to send a properly signed, but old, update bundle to the ECUs, even if newer updates exist.</t>
  <t><spanx style="emph">Partial bundle installation attack:</spanx> Install a valid (signed) update bundle, and then block selected updates within the bundle.</t>
  <t>Conduct a denial of service attack against the Uptane repositories or infrastructure.</t>
</list></t>

</section>
<section anchor="change_functionality" title="Interfere with ECU functionality">

<t>Attackers seeking to interfere with the functionality of vehicle ECUs in order to cause an operational failure or unexpected behavior may do so in one of the following ways:</t>

<t><list style="symbols">
  <t><spanx style="emph">Rollback attack:</spanx> Cause an ECU to install a previously valid software revision that is older than the currently installed version.</t>
  <t><spanx style="emph">Endless data attack:</spanx> Send a large amount of data to an ECU, until it runs out of storage, possibly causing the ECU to fail to operate.</t>
  <t><spanx style="emph">Mix-and-match attack:</spanx> Install a malicious software bundle in which some of the updates do not interoperate properly. This may be accomplished even if all of the individual images being installed are valid, as long as valid versions exist that are mutually incompatible.</t>
</list></t>

</section>
<section anchor="control_ecu" title="Control an ECU or vehicle">

<t>Full control of a vehicle, or one or more ECUs within a vehicle, is the most severe threat.</t>

<t><list style="symbols">
  <t><spanx style="emph">Arbitrary software attack:</spanx> Cause an ECU to install and run arbitrary code of the attacker’s choice.</t>
</list></t>

</section>
</section>
</section>
<section anchor="design" title="Detailed design of Uptane">

<t>Uptane is a secure software update framework for automobiles. We do not specify implementation details. Instead, we describe the components necessary for a compliant implementation and leave it up to individual implementors to make their own technological choices within those requirements.</t>

<t>At a high level, Uptane requires:</t>

<t><list style="symbols">
  <t>Two software repositories:
  <list style="symbols">
      <t>An Image repository containing binary images to install, and signed metadata about those images</t>
      <t>A Director repository connected to an inventory database that can sign metadata on demand for images in the Image repository</t>
    </list></t>
  <t>Repository tools for generating Uptane-specific metadata about images</t>
  <t>A public key infrastructure supporting the required metadata production/signing roles on each repository:
  <list style="symbols">
      <t>Root - Certificate authority for the Uptane ecosystem. Distributes public keys for verifying all the other roles’ metadata</t>
      <t>Timestamp - Indicates whether there are new metadata or images</t>
      <t>Snapshot - Indicates images released by the repository at a point in time, via signing metadata about Targets metadata</t>
      <t>Targets - Indicates metadata about images, such as hashes and file sizes</t>
    </list></t>
  <t>A secure way for ECUs to know the time.</t>
  <t>An ECU capable of downloading images and associated metadata from the Uptane servers.</t>
  <t>An in-vehicle client on a Primary ECU capable of verifying the signatures on all update metadata and downloading updates on behalf of its associated Secondary ECUs. The primary ECU MAY be the same ECU that communicates with the server.</t>
  <t>A client or library on each Secondary ECU capable of performing either full or partial verification of metadata</t>
</list></t>

<section anchor="roles" title="Roles on repositories">

<t>A repository contains images and metadata. Each role has a particular type of metadata associated with it, as described in <xref target="meta_structures"/>.</t>

<section anchor="root_role" title="The Root role">

<t>A repository’s Root role SHALL be responsible for a Certificate Authority as defined in <xref target="RFC3647"/>.
A repository’s Root role SHALL produce and sign Root metadata as described in <xref target="root_meta"/>.
A repository’s Root role SHALL sign the public keys used to verify the metadata produced by the Timestamp, Snapshot, and Targets roles.
A repository’s Root role SHALL revoke keys for the other roles, in case of compromise.</t>

</section>
<section anchor="targets_role" title="The Targets role">

<t>A repository’s Targets role SHALL produce and sign metadata about images and delegations as described in <xref target="targets_meta"/>.</t>

<section anchor="targets_role_delegations" title="Delegations">

<t>The Targets role on the Image repository MAY delegate the responsibility of signing metadata to other, custom-defined roles referred to as delegated targets. If it does, it MUST do so as specified in <xref target="delegations_meta"/>.</t>

<t>Responsibility for signing images or a subset of images MAY be delegated to more than one role and therefore it is possible for two different roles to be trusted for signing a particular image. For this reason, delegations MUST be prioritized.</t>

<t>A particular delegation for a subset of images MAY be designated as <spanx style="strong">terminating</spanx>. For terminating delegations, the client SHALL NOT search any further if it does not find validly signed metadata about those images. Delegations SHOULD NOT be terminating by default; terminating delegations SHOULD only be used when there is a compelling technical reason to do so.</t>

<t>A delegation for a subset of images MAY be a multi-role delegation <xref target="TAP-3"/>. A multi-role delegation indicates that multiple roles are needed to sign a particular image and each of the delegatee roles MUST sign the same metadata.</t>

<t>Delegations only apply to the Image repository. The Targets role on the Director repository MUST NOT delegate metadata signing responsibility.</t>

</section>
</section>
<section anchor="snapshot_role" title="The Snapshot role">

<t>A repository’s Snapshot role SHALL produce and sign metadata about all Targets metadata the repository releases, including the current version number of the top-level Targets metadata, and the version numbers of all delegated Targets metadata, as described in <xref target="snapshot_meta"/>.</t>

</section>
<section anchor="timestamp_role" title="The Timestamp role">

<t>A repository’s Timestamp role SHALL produce and sign metadata indicating whether there are new metadata or images on the repository. It MUST do so by signing the metadata about the Snapshot metadata file.</t>

</section>
</section>
<section anchor="meta_structures" title="Metadata structures">

<t>Uptane’s security guarantees all rely on properly created metadata that follows a designated structure. The Uptane standard <spanx style="strong">does not</spanx> mandate any particular format or encoding for the metadata as a whole. ASN.1 (with any encoding scheme like BER, DER, XER, etc.), JSON, XML, or any other encoding format that is capable of providing the required structure MAY be used.</t>

<t>However, string comparison is required as part of metadata verification. To ensure an accurate basis for comparing strings, all strings MUST be encoded in the Unicode Format for Network Interchange as defined in <xref target="RFC5198"/>, including normalization into Unicode Normalization Form C (<xref target="NFC"/>).</t>

<t>In the Deployment Considerations document (<xref target="DEPLOY"/>), the Uptane Alliance provides some examples of compliant metadata structures in ASN.1 and JSON.</t>

<section anchor="common_metadata" title="Common metadata structures">

<t>Every public key MUST be represented using a public key identifier.  A public key identifier is EITHER all of the following:</t>

<t><list style="symbols">
  <t>The value of the public key itself (which MAY be, for example, formatted as a PEM string)</t>
  <t>The public key cryptographic algorithm used by the key (such as RSA or ECDSA)</t>
  <t>The particular scheme used to verify the signature (such as <spanx style="verb">rsassa-pss-sha256</spanx> or <spanx style="verb">ecdsa-sha2-nistp256</spanx>)</t>
</list></t>

<t>OR a secure hash over at least the above components (such as the keyid mechanism in TUF).</t>

<t>All four Uptane roles (Root, Targets, Snapshot, and Timestamp) share a common structure. They SHALL contain the following two attributes:</t>

<t><list style="symbols">
  <t>A payload of metadata to be signed</t>
  <t>An attribute containing the signature(s) of the payload, where each entry specifies:
  <list style="symbols">
      <t>The public key identifier of the key being used to sign the payload</t>
      <t>A signature with this key over the payload</t>
    </list></t>
</list></t>

<t>The payload differs depending on the role. However, the payload for all roles shares a common structure. It SHALL contain the following four attributes:</t>

<t><list style="symbols">
  <t>An indicator of the type of role (Root, Targets, Snapshot, or Timestamp)</t>
  <t>An expiration date and time</t>
  <t>An integer version number, which SHOULD be incremented each time the metadata file is updated</t>
  <t>The role-specific metadata for the role indicated</t>
</list></t>

<t>The following sections describe the role-specific metadata. All roles SHALL follow the common structures described here.</t>

</section>
<section anchor="root_meta" title="Root metadata">

<t>A repository’s Root metadata distributes the public keys of the top-level Root, Targets, Snapshot, and Timestamp roles, as well as revocations of those keys. It SHALL contain two attributes:</t>

<t><list style="symbols">
  <t>A representation of the public keys for all four roles. Each key SHALL have a unique public key identifier.</t>
  <t>An attribute mapping each role to (1) its public key(s), and (2) the threshold of signatures required for that role</t>
</list></t>

<t>Additionally, it MAY contain a mapping of roles to a list of valid URLs from which the role metadata can be downloaded.  If this mapping of URLs is used, the implementer SHOULD implement this functionality following <xref target="TAP-5"/> to avoid adding unforeseen security risks.</t>

</section>
<section anchor="targets_meta" title="Targets metadata">

<t>The Targets metadata on a repository contains all of the information about images to be installed on ECUs. This includes filenames, hashes, file sizes, and MAY also include other useful information about images, such as what types of hardware are compatible with a particular image.</t>

<t>Targets metadata can also contain metadata about delegations, allowing one Targets role to delegate its authority to another. This means that an individual Targets metadata file might contain only metadata about delegations, only metadata about images, or some combination of the two. The details of how ECUs traverse the delegation tree to find valid metadata about images is specified in <xref target="resolve_delegations"/>.</t>

<section anchor="targets_images_meta" title="Metadata about images">

<t>To be available to install on clients, all images on the repository MUST have their metadata listed in a Targets role.  Each Targets role MAY provide a list of some images on the repository.  This list MUST provide, at a minimum, the following information about each image:</t>

<t><list style="symbols">
  <t>The image filename</t>
  <t>The size of the image in bytes</t>
  <t>One or more hashes of the image file, along with the hashing function used</t>
</list></t>

<section anchor="custom-metadata-about-images" title="Custom metadata about images">

<t>In addition to the required metadata, Targets metadata files MAY contain extra metadata for images on the repository. This metadata can be customized for a particular use case. Examples of use cases for different types of custom metadata can be found in the Deployment Considerations document (<xref target="DEPLOY"/>). However, there are a few important pieces of custom metadata that SHOULD be present in most implementations. In addition, there is one element in the custom metadata that MUST be present in the Targets metadata from the Director.</t>

<t>Custom metadata MAY also contain a demarcated field or section that MUST match whenever two pieces of metadata are checked against each other, such as when Targets metadata from the Director repository is checked against Targets metadata from the Image repository.</t>

<t>The information listed below SHOULD be provided for each image on both the Image repository and the Director repository. If a “MUST match section” is to be implemented, that is where this information SHOULD be placed.</t>

<t><list style="symbols">
  <t>A release counter, to be incremented each time a new version of the image is released. This can be used to prevent rollback attacks even in cases where the Director repository is compromised.</t>
  <t>A hardware identifier, or list of hardware identifiers, representing models of ECUs with which the image is compatible. This can be used to ensure that an ECU cannot be ordered to install an incompatible image, even in cases where the Director repository is compromised.</t>
</list></t>

<t>The following information is CONDITIONALLY REQUIRED for each image on the Director repository IF that image is encrypted:</t>

<t><list style="symbols">
  <t>Information about filenames, hashes, and file size of the encrypted image.</t>
  <t>Information about the encryption method, and other relevant information–for example, a symmetric encryption key encrypted by the ECU’s asymmetric key could be included in the Director repository metadata.</t>
</list></t>

<t>The following information MUST be provided for each image in the Targets metadata from the Director repository:</t>

<t><list style="symbols">
  <t>An ECU identifier (such as a serial number), specifying the ECU that should install the image.</t>
</list></t>

<t>The Director repository MAY provide a download URL for the image file. This may be useful, for example, when the image is on a public CDN and the director wishes to provide a signed URL.</t>

</section>
</section>
<section anchor="delegations_meta" title="Metadata about delegations">

<t>A Targets metadata file on the Image repository (but not the Director repository) MUST be able to delegate signing authority to other entities. For example, it could delegate signing authority for a particular ECU’s firmware to that ECU’s supplier. A metadata file MAY contain any number of delegations and MUST keep the delegations in prioritized order.</t>

<t>A list of delegations MUST provide the following information:</t>

<t><list style="symbols">
  <t>A list of public keys of all delegatees. Each key should have a unique public key identifier and a key type.</t>
  <t>A list of delegations, each of which contains:
  <list style="symbols">
      <t>A list of the filenames to which this role applies. This MAY be expressed using wildcards, or by enumerating a list, or a combination of the two.</t>
      <t>An optional list of the hardware identifiers to which this role applies.  If this is omitted, any hardware identifier will match.</t>
      <t>An indicator of whether or not this is a terminating delegation. (See <xref target="targets_role_delegations"/>.)</t>
      <t>A list of the roles to which this delegation applies. Each role needs to specify:
      <list style="symbols">
          <t>A name for the role (e.g. “supplier1-qa”)</t>
          <t>The key identifiers for each key this role uses</t>
          <t>A threshold of keys that must sign for this role</t>
        </list></t>
    </list></t>
</list></t>

<t>Note that <spanx style="strong">any</spanx> Targets metadata file stored on the Image repository may contain delegations, and these delegations can be in chains of arbitrary length.</t>

</section>
</section>
<section anchor="snapshot_meta" title="Snapshot metadata">

<t>The Snapshot metadata lists version numbers and filenames of all Targets metadata files. It protects against mix-and-match attacks if a delegated supplier key is compromised.</t>

<t>For each Targets metadata file on the repository, the Snapshot metadata SHALL contain the following information:</t>

<t><list style="symbols">
  <t>The filename and version number of the each Targets metadata file on the repository</t>
</list></t>

<t>The Snapshot metadata MAY also list the Root metadata filename and version number. This is not required, particularly for implementations of <xref target="TAP-5"/>, but MAY be included in all cases for backward compatibility.</t>

</section>
<section anchor="timestamp_meta" title="Timestamp metadata">

<t>The Timestamp metadata SHALL contain the following information:</t>

<t><list style="symbols">
  <t>The filename and version number of the latest Snapshot metadata on the repository.</t>
  <t>One or more hashes of the Snapshot metadata file, along with the hashing function used.</t>
</list></t>

</section>
<section anchor="repo_mapping_meta" title="Repository mapping metadata">

<t>As described in the introduction to <xref target="design"/>, Uptane requires a Director repository and an Image repository. However, it is possible to have an Uptane-compliant implementation that has more than two repositories.</t>

<t>Repository mapping metadata informs a Primary ECU about which repositories to trust for images or image paths. <xref target="TAP-4"/> describes how to make use of more complex repository mapping metadata in order to have more than the two required repositories.</t>

<t>Repository mapping metadata, or the equivalent informational content, MUST be present on all Primary ECUs, and MUST contain the following information:</t>

<t><list style="symbols">
  <t>A list of repository names and one or more URLs at which the named repository can be accessed. At a minimum, this MUST include the Director and Image repositories.</t>
  <t>A list of mappings of image paths to repositories, each of which contains:
  <list style="symbols">
      <t>A list of image paths. Image paths MAY be expressed using wildcards, or by enumerating a list, or a combination of the two.</t>
      <t>A list of repositories that MUST sign the Targets metadata for the image paths.</t>
    </list></t>
</list></t>

<t>For example, in the most basic Uptane case, the repository mapping metadata would contain:</t>

<t><list style="symbols">
  <t>The name and URL of the Director repository</t>
  <t>The name and URL of the Image repository</t>
  <t>A single mapping indicating that all images (<spanx style="verb">*</spanx>) MUST be signed by both the Director and Image repository</t>
</list></t>

<t>Note that the metadata need not be in the form of a metadata file. For example, in the basic case where there is only one Director and one Image repository, and all images need to have signed metadata from both repositories, it would be sufficient to have a configuration file with URLs for the two repositories, and a client that always checks for metadata matches between them. In this case, no explicit mapping would be defined, because the mapping is defined as part of the Uptane client implementation.</t>

<t>The <spanx style="emph">Uptane Deployment Considerations</spanx> document (<xref target="DEPLOY"/>) gives more guidance on how to implement repository mapping metadata for more complex use cases. It also discusses strategies for updating repository mapping metadata, if required.</t>

</section>
<section anchor="metadata_filename_rules" title="Rules for filenames in repositories and metadata">

<t>There is a difference between the file name in a metadata file or an ECU, and the file name on a repository. This difference exists in order to avoid race conditions, where metadata and images are read from, and written to, at the same time. For more details, the reader should read the TUF specification <xref target="TUF-spec"/> and PEP 458 <xref target="PEP-458"/>.</t>

<t>Unless stated otherwise, all files SHALL be written to repositories in accordance with the following two rules:</t>

<t><list style="numbers">
  <t>Metadata filenames SHALL be qualified with version numbers. If a metadata file A is specified as FILENAME.EXT in another metadata file B, then it SHALL be written as VERSION.FILENAME.EXT, where VERSION is A’s version number, as defined in <xref target="common_metadata"/>, with one exception: If the version number of the Timestamp metadata file might not be known in advance by a client, it MAY be read from, and written to, a repository using a filename without a version number qualification, i.e. FILENAME.EXT.</t>
  <t>If an image is specified in a Targets metadata file as FILENAME.EXT, it SHALL be written to the repository as HASH.FILENAME.EXT, where HASH is one of the hash digests of the file, as specified in <xref target="targets_images_meta"/>. The file MUST be written to the repository using <spanx style="emph">n</spanx> different filenames, one for each hash digest listed in its corresponding Targets metadata.</t>
</list></t>

<t>For example:</t>

<t><list style="symbols">
  <t>The version number of the Snapshot metadata file is 61, and its filename in the Timestamp metadata is “snapshot.json”. The filename on the repository will be “61.snapshot.json”.</t>
  <t>There is an image with the filename “acme_firmware.bin” specified in the Targets metadata, with a SHA3-256 of “aaaa” and a SHA-512/224 of “bbbb”. It will have two filenames on the repository: “aaaa.acme_firmware.bin” and “bbbb.acme_firmware.bin”.</t>
</list></t>

</section>
</section>
<section anchor="server-repository-implementation-requirements" title="Server / repository implementation requirements">

<t>An Uptane implementation SHALL make the following services available to vehicles:</t>

<t><list style="symbols">
  <t>Image repository</t>
  <t>Director repository</t>
</list></t>

<t>Additionally, an Uptane implementation requires ECUs to have a secure way to know the current time.</t>

<section anchor="image-repository" title="Image repository">

<t>The Image repository exists to allow an OEM and/or its suppliers to upload images and their associated metadata. It makes these images and their metadata available to vehicles. The Image repository is designed to be primarily controlled by human actors, and updated relatively infrequently.</t>

<t>The Image repository SHALL expose an interface permitting the download of metadata and images. This interface SHOULD be public.</t>

<t>The Image repository SHALL require authorization for writing metadata and images.</t>

<t>The Image repository SHALL provide a method for authorized users to upload images and their associated metadata. It SHALL check that a user writing metadata and images is authorized to do so for that specific image by checking the chain of delegations as described in <xref target="delegations_meta"/>.</t>

<t>The Image repository SHALL implement storage which permits authorized users to write an image file using a unique filename, and later read the same file using the same name. It MAY use any filesystem, key-value store, or database that fulfills this requirement.</t>

<t>The Image repository MAY require authentication for read access.</t>

</section>
<section anchor="director_repository" title="Director repository">

<t>The Director repository instructs ECUs as to which images should be installed by producing signed metadata on demand. Unlike the Image repository, it is mostly controlled by automated, online processes. It also consults a private inventory database containing information on vehicles, ECUs, and software revisions.</t>

<t>The Director repository SHALL expose an interface for primaries to upload vehicle version manifests (<xref target="vehicle_version_manifest"/>) and download metadata. This interface SHOULD be public.
The Director MAY encrypt images for ECUs that require them, either by encrypting on-the-fly or by storing encrypted images in the repository.</t>

<t>The Director repository SHALL implement storage which permits an automated service to write generated metadata files. It MAY use any filesystem, key-value store, or database that fulfills this requirement.</t>

<section anchor="directing-installation-of-images-on-vehicles" title="Directing installation of images on vehicles">

<t>A Director repository MUST conform to the following six-step process for directing the installation of software images on a vehicle.</t>

<t><list style="numbers">
  <t>The Director SHOULD first identify the vehicle. This MAY be done when the Director receives a vehicle version manifest sent by a Primary (as described in <xref target="construct_manifest_primary"/>), decodes the manifest, and determines the unique vehicle identifier. Additionally, the Director MAY utilize other mechanisms to uniquely identify a vehicle (e.g., 2-way TLS with unique client certificates).</t>
  <t>Using the vehicle identifier, the Director queries its inventory database (as described in <xref target="inventory_db"/>) for relevant information about each ECU in the vehicle.</t>
  <t>The Director SHALL check the manifest for accuracy compared to the information in the inventory database. If any of the required checks fail, the Director MAY drop the request. An implementer MAY make additional checks if desired. At a minimum, the Director SHALL check the following:
  <list style="symbols">
      <t>Each ECU recorded in the inventory database is also represented in the manifest.</t>
      <t>The signature of the manifest matches the ECU key of the Primary that sent it.</t>
      <t>The signature of each Secondary’s contribution to the manifest matches the ECU key of that Secondary.</t>
    </list></t>
  <t>The Director SHOULD check that the nonce or counter in each ECU Version Report has not been used before to prevent a replay of the ECU Version Report. If the nonce or counter is reused the Director SHOULD drop the request.</t>
  <t>The Director extracts information about currently installed images from the vehicle version manifest. Using this information, it determines if the vehicle is already up-to-date, and if not, determines a set of images that should be installed. The exact process by which this determination takes place is out of scope of this standard. However, the Director MUST take into account <spanx style="emph">dependencies</spanx> and <spanx style="emph">conflicts</spanx> between images and SHOULD consult well-established techniques for dependency resolution.</t>
  <t>The Director MAY encrypt images for ECUs that require it.</t>
  <t>The Director generates new metadata representing the desired set of images to be installed on the vehicle, based on the dependency resolution in step 4. This includes Targets (<xref target="targets_meta"/>), Snapshot (<xref target="snapshot_meta"/>), and Timestamp (<xref target="timestamp_meta"/>) metadata. It then sends this metadata to the Primary as described in <xref target="download_meta_primary"/>.</t>
</list></t>

</section>
<section anchor="inventory_db" title="Inventory Database">

<t>The Director SHALL use a private inventory database to store information about ECUs and vehicles. An implementor MAY use any durable database for this purpose.</t>

<t>The inventory database MUST record the following pieces of information:</t>

<t><list style="symbols">
  <t>Per vehicle:
  <list style="symbols">
      <t>A unique identifier (such as a VIN)</t>
    </list></t>
  <t>Per ECU:
  <list style="symbols">
      <t>A unique identifier (such as a serial number)</t>
      <t>The vehicle identifier the ECU is associated with</t>
      <t>An ECU key (symmetric or asymmetric; for asymmetric keys, only the public part SHOULD be stored)</t>
      <t>The ECU key identifier (as defined in <xref target="common_metadata"/>)</t>
      <t>Whether the ECU is a Primary or a Secondary</t>
    </list></t>
</list></t>

<t>The inventory database MAY record other information about ECUs and vehicles. It SHOULD record a hardware identifier for each ECU to protect against the possibility of directing the ECU to install incompatible firmware.</t>

</section>
</section>
</section>
<section anchor="in-vehicle-implementation-requirements" title="In-vehicle implementation requirements">

<t>An Uptane-compliant ECU SHALL be able to download and verify Image metadata and image binaries before installing a new image and MUST have a secure way of verifying the current time, or a sufficiently recent attestation of the time.</t>

<t>Each ECU in a vehicle receiving over-the-air updates is either a Primary or a Secondary ECU. A Primary ECU collects and delivers vehicle manifests to the Director (<xref target="vehicle_version_manifest"/>) that contain information about which images have been installed on ECUs in the vehicle. It also verifies the time and downloads and verifies the latest metadata and images for itself and for its secondaries. A Secondary ECU verifies the time, and downloads and verifies the latest metadata and images for itself from its associated Primary ECU. It also sends signed information about its installed images to its associated Primary.</t>

<t>All ECUs MUST verify image metadata as specified in <xref target="metadata_verification"/> before installing an image or making it available to other ECUs. A Primary ECU MUST perform full verification (<xref target="full_verification"/>). A Secondary ECU SHOULD perform full verification if possible. If a Secondary cannot perform full verification, it SHALL perform partial verification. See the Uptane Deployment Considerations (<xref target="DEPLOY"/>) for a discussion of how to choose between partial and full verification.</t>

<t>ECUs MUST have a secure source of time. An OEM/Uptane implementor MAY use any external source of time that is demonstrably secure. The Uptane Deployment Considerations (<xref target="DEPLOY"/>) describe one way to implement an external time server to cryptographically attest time, as well as the security properties required. When “loading time” is referenced in procedures in this standard, it should be understood to mean loading into memory the current time (if the ECU has its own secure clock), or the most recent attested time.</t>

<section anchor="build-time-prerequisite-requirements-for-ecus" title="Build-time prerequisite requirements for ECUs">

<t>For an ECU to be capable of receiving Uptane-secured updates, it MUST have the following data provisioned at the time it is manufactured or installed in the vehicle:</t>

<t><list style="numbers">
  <t>A sufficiently recent copy of required Uptane metadata at the time of manufacture or install. This is necessary for the ECU to authenticate that the remote repository is legitmate when it first downloads metadata in the field. See the Uptane Deployment Considerations (<xref target="DEPLOY"/>) for more information.
  <list style="symbols">
      <t>Partial verification Secondary ECUs MUST have the Root and Targets metadata from the Director repository (to reduce the scope of rollback and replay attacks). These ECUs MAY also have metadata from other roles or the Image repository if they will be used by the Secondary.</t>
      <t>Full verification ECUs MUST have a complete set of metadata (Root, Targets, Snapshot, and Timestamp) from both repositories (to prevent rollback and replay attacks), as well as the repository mapping metadata (<xref target="repo_mapping_meta"/>). Delegations are not required.</t>
    </list></t>
  <t>The current time, or a secure attestation of a sufficiently recent time.</t>
  <t>An <spanx style="strong">ECU key</spanx>. This is a private key, unique to the ECU, used to sign ECU version manifests and decrypt images. An ECU key MAY be either a symmetric key or an asymmetric key. If it is an asymmetric key, there MAY be separate keys for encryption and signing. For the purposes of this standard, the set of private keys that an ECU uses is referred to as the ECU key (singular), even if it is actually multiple keys used for different purposes.</t>
</list></t>

</section>
<section anchor="what-the-primary-does" title="What the Primary does">

<t>A Primary downloads, verifies, and distributes the latest time, metadata and images. To do so, it SHALL perform the following seven steps:</t>

<t><list style="numbers">
  <t>Construct and send vehicle version manifest (<xref target="construct_manifest_primary"/>)</t>
  <t>Download and check current time (<xref target="check_time_primary"/>)</t>
  <t>Download and verify metadata (<xref target="download_meta_primary"/>)</t>
  <t>Download and verify images (<xref target="download_images_primary"/>)</t>
  <t>OPTIONAL: Send latest time to secondaries (<xref target="send_time_primary"/>)</t>
  <t>Send metadata to Secondaries (<xref target="send_metadata_primary"/>)</t>
  <t>Send images to Secondaries (<xref target="send_images_primary"/>)</t>
</list></t>

<t>Note that the subsequent sections concerning requirements for a Primary do not prohibit implementing Primary capabilities on an ECU that does not communicate directly with the Uptane repositories. This allows for implementations to have multiple ECUs within the vehicle performing functions equivalent to a Primary.
If multiple such Primaries are included within a vehicle, each Secondary ECU SHALL have a single Primary responsible for providing its updates.</t>

<section anchor="construct_manifest_primary" title="Construct and send vehicle version manifest">

<t>The Primary SHALL build a <spanx style="emph">vehicle version manifest</spanx> as described in <xref target="vehicle_version_manifest"/>.</t>

<t>Once the complete manifest is built, the Primary MAY send the manifest to the Director repository. However, it is not strictly required that the Primary send the manifest until step three. If permitted by the implementation, a Primary MAY send only a diff of the manifest to save bandwidth. If an implementation permits diffs, the Director SHOULD have a way to request a full manifest.</t>

<t>Secondaries MAY send their version report at any time so that it is already stored on the Primary when it wishes to check for updates. Alternatively, the Primary MAY request a version report from each Secondary at the time of the update check.</t>

<section anchor="vehicle_version_manifest" title="Vehicle version manifest">

<t>The vehicle version manifest is a metadata structure that MUST contain the following information:</t>

<t><list style="symbols">
  <t>An attribute containing the signature(s) of the payload, each specified by:
  <list style="symbols">
      <t>The public key identifier of the key being used to sign the payload</t>
      <t>The signing method (e.g. ed25519, rsassa-pss, etc.)</t>
      <t>A hash of the payload to be signed</t>
      <t>The hashing function used (e.g. SHA3-256, SHA-512/224, etc.)</t>
      <t>The signature of the hash</t>
    </list></t>
  <t>A payload representing the installed versions of each software image on the vehicle. This payload SHALL contain:
  <list style="symbols">
      <t>The vehicle’s unique identifier (e.g. the VIN)</t>
      <t>The Primary ECU’s unique identifier (e.g. the serial number)</t>
      <t>A list of ECU version reports as specified in <xref target="version_report"/></t>
    </list></t>
</list></t>

<t>Note that one of the ECU version reports should be the version report for the Primary itself.</t>

</section>
<section anchor="version_report" title="ECU version report">

<t>An ECU version report is a metadata structure that MUST contain the following information:</t>

<t><list style="symbols">
  <t>An attribute containing the signature(s) of the payload, each specified by:
  <list style="symbols">
      <t>The public key identifier of the key being used to sign the payload</t>
      <t>The signing method (e.g. ed25519, rsassa-pss, etc.)</t>
      <t>A hash of the payload to be signed</t>
      <t>The hashing function used (e.g. SHA3-256, SHA-512/224, etc.)</t>
      <t>The signature of the hash</t>
    </list></t>
  <t>A payload containing:
  <list style="symbols">
      <t>The ECU’s unique identifier (e.g. the serial number)</t>
      <t>The filename, length, and hashes of its currently installed image (i.e. the non-custom Targets metadata for this particular image)</t>
      <t>An indicator of any detected security attack</t>
      <t>The latest time the ECU can verify at the time this version report was generated</t>
      <t>A nonce or counter to prevent a replay of the ECU version report. This value MUST change each update cycle and MAY be the cryptographic nonce used with a Time Server.</t>
    </list></t>
</list></t>

</section>
</section>
<section anchor="check_time_primary" title="Download and check current time">

<t>The Primary SHALL load the current time from a secure source.</t>

</section>
<section anchor="download_meta_primary" title="Download and verify metadata">

<t>The Primary SHALL download metadata for all targets and perform a full verification on it as specified in <xref target="full_verification"/>.</t>

</section>
<section anchor="download_images_primary" title="Download and verify images">

<t>The Primary SHALL download and verify images for itself and for all of its associated Secondaries. Images SHALL be verified by checking that the hash of the image file matches the hash specified in the Director’s Targets metadata for that image.</t>

<t>There may be several different filenames that all refer to the same image binary, as described in <xref target="metadata_filename_rules"/>. If the primary has received multiple hashes for a given image binary via the Targets role (see <xref target="targets_images_meta"/>) then it SHALL verify every hash for this image despite that the image is identified by a single hash as part of its filename.</t>

</section>
<section anchor="send_time_primary" title="Send latest time to Secondaries">

<t>Unless the Secondary ECU has its own way of verifying the time or does not have the capacity to verify a time message, the Primary is CONDITIONALLY REQUIRED to send the time to each ECU. The Secondary will verify the time message, then overwrite its current time with the received time.</t>

</section>
<section anchor="send_metadata_primary" title="Send metadata to Secondaries">

<t>The Primary SHALL send its latest downloaded metadata to all of its associated Secondaries. The metadata it sends to each Secondary MUST include all of the metadata required for verification on that Secondary. For full verification Secondaries, this includes the metadata for all four roles from both repositories, plus any delegated Targets metadata files the Secondary will recurse through to find the proper delegation. For partial verification Secondaries, this includes only the Targets metadata file from the Director repository.</t>

<t>The Primary SHOULD determine the minimal set of metadata files to send to each Secondary by performing delegation resolution as described in <xref target="full_verification"/>.</t>

<t>Each Secondary SHALL store the latest copy of all metadata required for its own verification.</t>

</section>
<section anchor="send_images_primary" title="Send images to Secondaries">

<t>The Primary SHALL send the latest image to each of its associated Secondaries that have storage to receive it.</t>

<t>For Secondaries without storage, the Primary SHOULD wait for a request from the Secondary to stream the new image file to it. The Secondary will send the request once it has verified the metadata sent in the previous step.</t>

</section>
</section>
<section anchor="installing-images-on-primary-or-secondary-ecus" title="Installing images on Primary or Secondary ECUs">

<t>An ECU SHALL perform the following steps when attempting to install a new image:</t>

<t><list style="numbers">
  <t>Verify latest attested time (<xref target="verify_time"/>)</t>
  <t>Verify metadata (<xref target="verify_metadata"/>)</t>
  <t>Download latest image (<xref target="download_image"/>)</t>
  <t>Verify image (<xref target="verify_image"/>)</t>
  <t>Install image (<xref target="install_image"/>)</t>
  <t>Create and send version report (<xref target="create_version_report"/>)</t>
</list></t>

<section anchor="verify_time" title="Load and verify the latest attested time">

<t>The ECU SHALL load and verify the current time, or the most recent securely attested time.</t>

</section>
<section anchor="verify_metadata" title="Verify metadata">

<t>The ECU SHALL verify the latest downloaded metadata (<xref target="metadata_verification"/>) using either full or partial verification. If the metadata verification fails for any reason, the ECU SHALL jump to the final step (<xref target="create_version_report"/>).</t>

</section>
<section anchor="download_image" title="Download latest image">

<t>If the ECU does not have secondary storage, i.e. buffer storage to temporarily store the latest image before installing it, it SHALL download the latest image from the Primary. (If the ECU has secondary storage, it will already have the latest image in its secondary storage as specified in <xref target="send_images_primary"/>, and should skip to the next step.) The ECU MAY first create a backup of its previous working image and store it elsewhere (e.g., the primary).</t>

<t>The filename used to identify the latest known image (i.e., the file to request from the Primary) SHALL be determined as follows:</t>

<t><list style="numbers">
  <t>Load the Targets metadata file from the Director repository.</t>
  <t>Find the Targets metadata associated with this ECU identifier.</t>
  <t>Construct the Image filename using the rule in <xref target="metadata_filename_rules"/>, or use the download URL specified in the Director metadata.</t>
  <t>If there is no Targets metadata about this image, abort the update cycle and report that there is no such image. Additionally, in the case of failure, the ECU SHALL retain its previous Targets metadata instead of using the new Targets metadata. Otherwise, download the image (up to the number of bytes specified in the Targets metadata) and verify it according to <xref target="verify_image"/>.</t>
</list></t>

<t>When the Primary responds to the download request, the ECU SHALL overwrite its current image with the downloaded image from the Primary.</t>

<t>If any part of this step fails, the ECU SHALL jump to the final step (<xref target="create_version_report"/>).</t>

</section>
<section anchor="verify_image" title="Verify image">

<t>The ECU SHALL verify that the latest image matches the latest metadata as follows:</t>

<t><list style="numbers">
  <t>Load the latest Targets metadata file from the Director.</t>
  <t>Find the Targets metadata associated with this ECU identifier.</t>
  <t>Check that the hardware identifier in the metadata matches the ECUs hardware identifier.</t>
  <t>Check that the image filename is valid for this ECU. This MAY be a comparison against a wildcard path, which restricts the ECUs to which a delegation will apply.</t>
  <t>Check that the release counter of the image in the previous metadata, if it exists, is less than or equal to the release counter in the latest metadata.</t>
  <t>If the image is encrypted, decrypt the image with a decryption key to be chosen as follows:
  <list style="symbols">
      <t>If the ECU key is a symmetric key, the ECU SHALL use the ECU key for image decryption.</t>
      <t>If the ECU key is asymmetric, the ECU SHALL check the Targets metadata for an encrypted symmetric key. If such a key is found, the ECU SHALL decrypt the symmetric key using its ECU key, and use the decrypted symmetric key for image decryption.</t>
      <t>If the ECU key is asymmetric and there is no symmetric key in the target metadata, the ECU SHALL use its ECU key for image decryption.</t>
    </list></t>
  <t>Check that all hashes listed in the metadata match the corresponding hashes of the image.</t>
</list></t>

<t>If the ECU has secondary storage, the checks SHOULD be performed on the image in secondary storage before it is installed.</t>

<t>NOTE: See <xref target="DEPLOY"/> for guidance on how to deal with Secondary ECU failures for ECUs that do not have secondary storage.</t>

<t>If any step fails, the ECU SHALL jump to the (<xref target="create_version_report"/>) step.</t>

</section>
<section anchor="install_image" title="Install image">

<t>The ECU SHALL attempt to install the update. This installation SHOULD occur at a time when all pre-conditions are met. These pre-conditions MAY include ensuring the vehicle is in a safe environment for install (e.g., the vehicle is parked when updating a specific ECU). Another pre-condition MAY include ensuring the ECU has a backup of its current image and metadata in case the current installation fails.</t>

</section>
<section anchor="create_version_report" title="Create and send version report">

<t>The ECU SHALL create a version report as described in <xref target="version_report"/>, and send it to the Primary (or simply save it to disk, if the ECU is a Primary). The Primary SHOULD write the version reports it receives to disk and associate them with the Secondaries that sent them.</t>

</section>
</section>
<section anchor="metadata_verification" title="Metadata verification procedures">

<t>A Primary ECU MUST perform full verification of metadata. A Secondary ECU SHOULD perform full verification of metadata. If a Secondary cannot perform full verification, it SHALL perform partial verification instead.</t>

<t>If a step in the following workflows does not succeed (e.g., the update is aborted because a new metadata file was not signed), an ECU SHOULD still be able to update again in the future. Errors raised during the update process SHOULD NOT leave ECUs in an unrecoverable state.</t>

<section anchor="partial_verification" title="Partial verification">

<t>In order to perform partial verification, an ECU SHALL perform the following steps:</t>

<t><list style="numbers">
  <t>Load and verify the current time or the most recent securely attested time.</t>
  <t>Download and check the Targets metadata file from the Director repository, following the procedure in <xref target="check_targets"/>.</t>
</list></t>

</section>
<section anchor="full_verification" title="Full verification">

<t>Full verification of metadata means that the ECU checks that the Targets metadata about images from the Director repository matches the Targets metadata about the same images from the Image repository. This provides resilience to a key compromise in the system.</t>

<t>Full verification MAY be performed by either Primary or Secondary ECUs. In the following instructions, whenever an ECU is directed to download metadata, it applies only to Primary ECUs.</t>

<t>If <xref target="TAP-5"/> is supported and a Primary has an external connection to the Uptane repositories, a Primary ECU SHALL download metadata and images following the rules specified in that TAP.  If <xref target="TAP-5"/> is not supported, or if the Primary does not have an external connection to the Uptane repositories, the download SHOULD follow the <xref target="TUF-spec"/> and the metadata file renaming rules specified in <xref target="metadata_filename_rules"/>.</t>

<t>Before starting full verification, the repository mapping metadata MUST be consulted to determine where to download metadata from. This procedure assumes the basic Uptane case: there are only two repositories (Director and Image), and all image paths are required to be signed by both repositories. If a more complex repository layout is being used, refer to <xref target="DEPLOY"/> for guidance on how to determine where metadata should be downloaded from.</t>

<t>In order to perform full verification, an ECU SHALL perform the following steps:</t>

<t><list style="numbers">
  <t>Load and verify the current time or the most recent securely attested time.</t>
  <t>Download and check the Root metadata file from the Director repository, following the procedure in <xref target="check_root"/>.</t>
  <t>Download and check the Timestamp metadata file from the Director repository, following the procedure in <xref target="check_timestamp"/>.</t>
  <t>Check the previously downloaded Snapshot metadata file from the Directory repository (if available). If the hashes and version number of that file match the hashes and version number listed in the new Timestamp metadata, there are no new updates and the verification process MAY be stopped and considered complete. Otherwise, download and check the Snapshot metadata file from the Director repository, following the procedure in <xref target="check_snapshot"/>.</t>
  <t>Download and check the Targets metadata file from the Director repository, following the procedure in <xref target="check_targets"/>.</t>
  <t>If the Targets metadata from the Directory repository indicates that there are no new targets that are not already currently installed, the verification process MAY be stopped and considered complete. Otherwise, download and check the Root metadata file from the Image repository, following the procedure in <xref target="check_root"/>.</t>
  <t>Download and check the Timestamp metadata file from the Image repository, following the procedure in <xref target="check_timestamp"/>.</t>
  <t>Check the previously downloaded Snapshot metadata file from the Image repository (if available). If the hashes and version number of that file match the hashes and version number listed in the new Timestamp metadata, the ECU MAY skip to the last step. Otherwise, download and check the Snapshot metadata file from the Image repository, following the procedure in <xref target="check_snapshot"/>.</t>
  <t>Download and check the top-level Targets metadata file from the Image repository, following the procedure in <xref target="check_targets"/>.</t>
  <t>Verify that Targets metadata from the Director and Image repositories match. A Primary ECU MUST perform this check on metadata for all images listed in the Targets metadata file from the Director repository downloaded in step 6. A Secondary ECU MAY elect to perform this check only on the metadata for the image it will install. (That is, the target metadata from the Director that contains the ECU identifier of the current ECU.) To check that the metadata for an image matches, complete the following procedure:
  <list style="numbers">
      <t>Locate and download a Targets metadata file from the Image repository that contains an image with exactly the same file name listed in the Director metadata, following the procedure in <xref target="resolve_delegations"/>.</t>
      <t>Check that the Targets metadata from the Image repository matches the Targets metadata from the Director repository:
      <list style="numbers">
          <t>Check that the non-custom metadata (i.e., length and hashes) of the unencrypted or encrypted image are the same in both sets of metadata. Note: the Primary is responsible for validating encrypted images and associated metadata. The target ECU (Primary or Secondary) is responsible for validating the unencrypted image and associated metadata.</t>
          <t>Check that all “MUST match” custom metadata (e.g., hardware identifier and release counter) are the same in both sets of metadata.</t>
          <t>Check that the release counter in the previous Targets metadata file is less than or equal to the release counter in this Targets metadata file.</t>
        </list></t>
    </list></t>
</list></t>

<t>If any step fails, the ECU MUST return an error code indicating the failure. If a check for a specific type of security attack fails (e.g. rollback, freeze, arbitrary software, etc.), the ECU SHOULD return an error code that indicates the type of attack.</t>

</section>
<section anchor="check_root" title="How to check Root metadata">

<t>To properly check Root metadata, an ECU SHOULD:</t>

<t><list style="numbers">
  <t>Load the previous Root metadata file.</t>
  <t>Update to the latest Root metadata file.
  <list style="numbers">
      <t>Let N denote the version number of the latest Root metadata file (which at first could be the same as the previous Root metadata file).</t>
      <t>Try downloading a new version N+1 of the Root metadata file, up to some X number of bytes. The value for X is set by the implementor. For example, X may be tens of kilobytes. The filename used to download the Root metadata file is of the fixed form VERSION_NUMBER.FILENAME.EXT (e.g., 42.root.json). If this file is not available, the current Root metadata file is the latest; continue with step 3.</t>
      <t>Version N+1 of the Root metadata file MUST have been signed by the following: (1) a threshold of keys specified in the latest Root metadata file (version N), and (2) a threshold of keys specified in the new Root metadata file being validated (version N+1). If version N+1 is not signed as required, discard it, abort the update cycle, and report the signature failure. On the next update cycle, begin at version N of the Root metadata file. (Checks for an arbitrary software attack.)</t>
      <t>The version number of the latest Root metadata file (version N) must be less than or equal to the version number of the new Root metadata file (version N+1). Effectively, this means checking that the version number signed in the new Root metadata file is indeed N+1. If the version of the new Root metadata file is less than the latest metadata file, discard it, abort the update cycle, and report the rollback attack. On the next update cycle, begin at step 1 and version N of the Root metadata file. (Checks for a rollback attack.)</t>
      <t>Set the latest Root metadata file to the new Root metadata file.</t>
      <t>Repeat steps 2.1 to 2.6.</t>
    </list></t>
  <t>Check that the current (or latest securely attested) time is lower than the expiration timestamp in the latest Root metadata file. (Checks for a freeze attack.)</t>
  <t>If the Timestamp and/or Snapshot keys have been rotated, delete the previous Timestamp and Snapshot metadata files. (Checks for recovery from fast-forward attacks <xref target="MERCURY"/>.)</t>
</list></t>

</section>
<section anchor="check_timestamp" title="How to check Timestamp metadata">

<t>To properly check Timestamp metadata, an ECU SHOULD:</t>

<t><list style="numbers">
  <t>Download up to Y number of bytes. The value for Y is set by the implementor. For example, Y may be tens of kilobytes. The filename used to download the Timestamp metadata file is of the fixed form FILENAME.EXT (e.g., timestamp.json).</t>
  <t>Check that it has been signed by the threshold of keys specified in the latest Root metadata file. If the new Timestamp metadata file is not properly signed, discard it, abort the update cycle, and report the signature failure. (Checks for an arbitrary software attack.)</t>
  <t>Check that the version number of the previous Timestamp metadata file, if any, is less than or equal to the version number of this Timestamp metadata file. If the new Timestamp metadata file is older than the trusted Timestamp metadata file, discard it, abort the update cycle, and report the potential rollback attack. (Checks for a rollback attack.)</t>
  <t>Check that the current (or latest securely attested) time is lower than the expiration timestamp in this Timestamp metadata file. If the new Timestamp metadata file has expired, discard it, abort the update cycle, and report the potential freeze attack. (Checks for a freeze attack.)</t>
</list></t>

</section>
<section anchor="check_snapshot" title="How to check Snapshot metadata">

<t>To properly check Snapshot metadata, an ECU SHOULD:</t>

<t><list style="numbers">
  <t>Download up to the number of bytes specified in the Timestamp metadata file, constructing the metadata filename as defined in <xref target="metadata_filename_rules"/>.</t>
  <t>The hashes and version number of the new Snapshot metadata file MUST match the hashes and version number listed in Timestamp metadata. If the hashes and version number do not match, discard the new Snapshot metadata, abort the update cycle, and report the failure. (Checks for a mix-and-match attack.)</t>
  <t>Check that it has been signed by the threshold of keys specified in the latest Root metadata file. If the new Snapshot metadata file is not signed as required, discard it, abort the update cycle, and report the signature failure. (Checks for an arbitrary software attack.)</t>
  <t>Check that the version number of the previous Snapshot metadata file, if any, is less than or equal to the version number of this Snapshot metadata file. If this Snapshot metadata file is older than the previous Snapshot metadata file, discard it, abort the update cycle, and report the potential rollback attack. (Checks for a rollback attack.)</t>
  <t>Check that the version number listed by the previous Snapshot metadata file for each Targets metadata file is less than or equal to its version number in this Snapshot metadata file. If this condition is not met, discard the new Snapshot metadata file, abort the update cycle, and report the failure. (Checks for a rollback attack.)</t>
  <t>Check that each Targets metadata filename listed in the previous Snapshot metadata file is also listed in this Snapshot metadata file. If this condition is not met, discard the new Snapshot metadata file, abort the update cycle, and report the failure. (Checks for a rollback attack.)</t>
  <t>Check that the current (or latest securely attested) time is lower than the expiration timestamp in this Snapshot metadata file. If the new Snapshot metadata file is expired, discard it, abort the update cycle, and report the potential freeze attack. (Checks for a freeze attack.)</t>
</list></t>

</section>
<section anchor="check_targets" title="How to check Targets metadata">

<t>To properly check Targets metadata, an ECU SHOULD:</t>

<t><list style="numbers">
  <t>Download up to Z number of bytes, constructing the metadata filename as defined in <xref target="metadata_filename_rules"/>. The value for Z is set by the implementor. For example, Z may be tens of kilobytes.</t>
  <t>The version number of the new Targets metadata file MUST match the version number listed in the latest Snapshot metadata. If the version number does not match, discard it, abort the update cycle, and report the failure. (Checks for a mix-and-match attack.) Skip this step if checking Targets metadata on a partial verification ECU; partial verification ECUs will not have Snapshot metadata.</t>
  <t>Check that the Targets metadata has been signed by the threshold of keys specified in the relevant metadata file (Checks for an arbitrary software attack):
  <list style="numbers">
      <t>If checking top-level Targets metadata, the threshold of keys is specified in the Root metadata.</t>
      <t>If checking delegated Targets metadata, the threshold of keys is specified in the Targets metadata file that delegated authority to this role.</t>
    </list></t>
  <t>Check that the version number of the previous Targets metadata file, if any, is less than or equal to the version number of this Targets metadata file. (Checks for a rollback attack.)</t>
  <t>Check that the current (or latest securely attested) time is lower than the expiration timestamp in this Targets metadata file. (Checks for a freeze attack.)</t>
  <t>If checking Targets metadata from the Director repository, verify that there are no delegations.</t>
  <t>If checking Targets metadata from the Director repository, check that no ECU identifier is represented more than once.</t>
  <t>If checking Targets metadata from the Director repository, and the ECU performing the verification is the Primary ECU, check that all listed ECU identifiers correspond to ECUs that are actually present in the vehicle.</t>
</list></t>

</section>
<section anchor="resolve_delegations" title="How to resolve delegations">

<t>To properly check Targets metadata for an image, an ECU MUST locate the metadata file(s) for the role (or roles) that have the authority to sign the image. This metadata might be located in the top-level Targets metadata, but it also may be delegated to another role or to multiple roles. Therefore, all delegations MUST be resolved using the following recursive procedure, beginning with the top-level Targets metadata file.</t>

<t><list style="numbers">
  <t>Download the current metadata file, and check it following the procedure in <xref target="check_targets"/>. If the file cannot be loaded, or if any verification step fails, abort the delegation resolution, and indicate that Image metadata cannot be found because of a missing or invalid role.</t>
  <t>If the current metadata file contains signed metadata about the image, end the delegation resolution and return the metadata to be checked.</t>
  <t>If the current metadata file was reached via a terminating delegation and does not contain signed metadata about the image, abort the delegation resolution for this image and return an error indicating that image metadata could not be found.</t>
  <t>Search the list of delegations, in listed order. For each delegation:
  <list style="numbers">
      <t>Check if the delegation applies to the image being processed. For the delegation to apply, it MUST include the hardware identifier of the target, and the target name must match one of the delegation’s image paths. If either of these tests fail, move on to the next delegation in the list.</t>
      <t>If the delegation is a multi-role delegation, follow the procedure described in <xref target="multirole_delegations"/>. If the multi-role delegation is terminating and no valid Image metadata is found, abort the delegation resolution and return an error indicating that image metadata could not be found.</t>
      <t>If the delegation is a normal delegation, perform delegation resolution, starting at step 1. Note that this may recurse an arbitrary number of levels deep. If a delegation that applies to the image is found but no image metadata is found in the delegated roles or any of its sub-delegations, simply continue on with the next delegation in the list. The search is only completed/aborted if image metadata or a terminating delegation that applies to the image is found.</t>
    </list></t>
  <t>If the end of the list of delegations in the top-level metadata is reached without finding valid image metadata, return an error indicating that image metadata could not be found.</t>
</list></t>

</section>
<section anchor="multirole_delegations" title="Multi-role delegations">

<t>It is possible to delegate signing authority to multiple delegated roles as described in <xref target="TAP-3"/>. Each multi-role delegation effectively contains a list of ordinary delegations, plus a threshold of those roles that must be in agreement about the non-custom metadata for the image. All multi-role delegations MUST be resolved using the following procedure. Note that there may be sub-delegations inside multi-role delegations.</t>

<t><list style="numbers">
  <t>For each of the roles in the delegation, find and load the image metadata (or error) following the procedure in <xref target="resolve_delegations"/>.</t>
  <t>Inspect the non-custom part of the metadata loaded in step 1:
  <list style="numbers">
      <t>Locate all sets of roles which have agreeing (i.e. identical) non-custom metadata and “MUST match” custom metadata. Discard any set of roles with a size smaller than the threshold of roles that must be in agreement for this delegation.</t>
      <t>Check for a conflict. A conflict exists if there remains more than one agreeing set of roles, each set having different metadata. If a conflict is found, choose and return the metadata from the set of roles which includes the earliest role in the multi-delegation list.</t>
      <t>If there is no conflict, check if there is any single set of roles with matching non-custom metadata. If there is, choose and return the metadata from this set.</t>
      <t>If no agreeing set can be found that meets the agreement threshold, return an error indicating that image metadata could not be found.</t>
    </list></t>
</list></t>

</section>
</section>
</section>
</section>


  </middle>

  <back>

    <references title='Normative References'>





<reference  anchor="RFC2119" target='https://www.rfc-editor.org/info/rfc2119'>
<front>
<title>Key words for use in RFCs to Indicate Requirement Levels</title>
<author initials='S.' surname='Bradner' fullname='S. Bradner'><organization /></author>
<date year='1997' month='March' />
<abstract><t>In many standards track documents several words are used to signify the requirements in the specification.  These words are often capitalized. This document defines these words as they should be interpreted in IETF documents.  This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t></abstract>
</front>
<seriesInfo name='BCP' value='14'/>
<seriesInfo name='RFC' value='2119'/>
<seriesInfo name='DOI' value='10.17487/RFC2119'/>
</reference>



<reference  anchor="RFC3647" target='https://www.rfc-editor.org/info/rfc3647'>
<front>
<title>Internet X.509 Public Key Infrastructure Certificate Policy and Certification Practices Framework</title>
<author initials='S.' surname='Chokhani' fullname='S. Chokhani'><organization /></author>
<author initials='W.' surname='Ford' fullname='W. Ford'><organization /></author>
<author initials='R.' surname='Sabett' fullname='R. Sabett'><organization /></author>
<author initials='C.' surname='Merrill' fullname='C. Merrill'><organization /></author>
<author initials='S.' surname='Wu' fullname='S. Wu'><organization /></author>
<date year='2003' month='November' />
<abstract><t>This document presents a framework to assist the writers of certificate policies or certification practice statements for participants within public key infrastructures, such as certification authorities, policy authorities, and communities of interest that wish to rely on certificates.  In particular, the framework provides a comprehensive list of topics that potentially (at the writer's discretion) need to be covered in a certificate policy or a certification practice statement.  This document supersedes RFC 2527.</t></abstract>
</front>
<seriesInfo name='RFC' value='3647'/>
<seriesInfo name='DOI' value='10.17487/RFC3647'/>
</reference>



<reference  anchor="RFC5198" target='https://www.rfc-editor.org/info/rfc5198'>
<front>
<title>Unicode Format for Network Interchange</title>
<author initials='J.' surname='Klensin' fullname='J. Klensin'><organization /></author>
<author initials='M.' surname='Padlipsky' fullname='M. Padlipsky'><organization /></author>
<date year='2008' month='March' />
<abstract><t>The Internet today is in need of a standardized form for the transmission of internationalized &quot;text&quot; information, paralleling the specifications for the use of ASCII that date from the early days of the ARPANET.  This document specifies that format, using UTF-8 with normalization and specific line-ending sequences.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='5198'/>
<seriesInfo name='DOI' value='10.17487/RFC5198'/>
</reference>


<reference anchor="NFC" target="http://www.unicode.org/reports/tr15/">
  <front>
    <title>Unicode Standard Annex #15: Unicode Normalization Forms</title>
    <author initials="M." surname="Davis">
      <organization></organization>
    </author>
    <author initials="M." surname="Duerst">
      <organization></organization>
    </author>
    <date year="2018" month="October"/>
  </front>
</reference>
<reference anchor="TAP-3" target="https://github.com/theupdateframework/taps/blob/d0818e580c322815a473520f2e8cc5f5eb8df499/tap3.md">
  <front>
    <title>The Update Framework TAP 3 - Multi-role delegations</title>
    <author initials="T.K." surname="Kuppusamy">
      <organization></organization>
    </author>
    <author initials="S." surname="Awwad">
      <organization></organization>
    </author>
    <author initials="E." surname="Cordell">
      <organization></organization>
    </author>
    <author initials="V." surname="Diaz">
      <organization></organization>
    </author>
    <author initials="J." surname="Moshenko">
      <organization></organization>
    </author>
    <author initials="J." surname="Cappos">
      <organization></organization>
    </author>
    <date year="2018" month="January" day="18"/>
  </front>
</reference>
<reference anchor="TAP-4" target="https://github.com/theupdateframework/taps/blob/2cb67d913ec19424d1e354b38f862886fbfd4105/tap4.md">
  <front>
    <title>The Update Framework TAP 4 - Multiple repository consensus on entrusted targets</title>
    <author initials="T.K." surname="Kuppusamy">
      <organization></organization>
    </author>
    <author initials="S." surname="Awwad">
      <organization></organization>
    </author>
    <author initials="E." surname="Cordell">
      <organization></organization>
    </author>
    <author initials="V." surname="Diaz">
      <organization></organization>
    </author>
    <author initials="J." surname="Moshenko">
      <organization></organization>
    </author>
    <author initials="J." surname="Cappos">
      <organization></organization>
    </author>
    <date year="2017" month="December" day="15"/>
  </front>
</reference>
<reference anchor="TAP-5" target="https://github.com/theupdateframework/taps/blob/01726d203c9b9c029d26f6612069ce3180500d9a/tap5.md#downloading-metadata-and-target-files">
  <front>
    <title>The Update Framework TAP 5 - Setting URLs for roles in the root metadata file</title>
    <author initials="T.K." surname="Kuppusamy">
      <organization></organization>
    </author>
    <author initials="S." surname="Awwad">
      <organization></organization>
    </author>
    <author initials="E." surname="Cordell">
      <organization></organization>
    </author>
    <author initials="V." surname="Diaz">
      <organization></organization>
    </author>
    <author initials="J." surname="Moshenko">
      <organization></organization>
    </author>
    <author initials="J." surname="Cappos">
      <organization></organization>
    </author>
    <date year="2018" month="January" day="22"/>
  </front>
</reference>
<reference anchor="TUF-spec" target="https://github.com/theupdateframework/specification/blob/2b4e18472fe25d5b57f36f6fa50104967c8faeaa/tuf-spec.md">
  <front>
    <title>The Update Framework Specification</title>
    <author initials="J." surname="Samuel">
      <organization></organization>
    </author>
    <author initials="N." surname="Mathewson">
      <organization></organization>
    </author>
    <author initials="G." surname="Condra">
      <organization></organization>
    </author>
    <author initials="V." surname="Diaz">
      <organization></organization>
    </author>
    <author initials="T.K." surname="Kuppusamy">
      <organization></organization>
    </author>
    <author initials="S." surname="Awwad">
      <organization></organization>
    </author>
    <author initials="S." surname="Tobias">
      <organization></organization>
    </author>
    <author initials="J." surname="Wright">
      <organization></organization>
    </author>
    <author initials="H." surname="Mehnert">
      <organization></organization>
    </author>
    <author initials="E." surname="Tryzelaar">
      <organization></organization>
    </author>
    <author initials="J." surname="Cappos">
      <organization></organization>
    </author>
    <author initials="R." surname="Dingledine">
      <organization></organization>
    </author>
    <date year="2018" month="September" day="19"/>
  </front>
</reference>


    </references>

    <references title='Informative References'>

<reference anchor="MERCURY" target="https://www.usenix.org/system/files/conference/atc17/atc17-kuppusamy.pdf">
  <front>
    <title>Mercury: Bandwidth-Effective Prevention of Rollback Attacks Against Community Repositories</title>
    <author initials="T.K." surname="Kuppusamy">
      <organization></organization>
    </author>
    <author initials="V." surname="Diaz">
      <organization></organization>
    </author>
    <author initials="J." surname="Cappos">
      <organization></organization>
    </author>
    <date year="2017" month="July" day="12"/>
  </front>
  <seriesInfo name="ISBN" value="978-1-931971-38-6"/>
</reference>
<reference anchor="UPTANEESCAR" target="https://ssl.engineering.nyu.edu/papers/kuppusamy_escar_16.pdf">
  <front>
    <title>Securing Software Updates for Automobiles</title>
    <author initials="T.K." surname="Kuppusamy">
      <organization></organization>
    </author>
    <author initials="A." surname="Brown">
      <organization></organization>
    </author>
    <author initials="S." surname="Awwad">
      <organization></organization>
    </author>
    <author initials="D." surname="McCoy">
      <organization></organization>
    </author>
    <author initials="R." surname="Bielawski">
      <organization></organization>
    </author>
    <author initials="C." surname="Mott">
      <organization></organization>
    </author>
    <author initials="S." surname="Lauzon">
      <organization></organization>
    </author>
    <author initials="A." surname="Weimerskirch">
      <organization></organization>
    </author>
    <author initials="J." surname="Cappos">
      <organization></organization>
    </author>
    <date year="2016" month="October" day="16"/>
  </front>
</reference>
<reference anchor="PEP-458" target="https://www.python.org/dev/peps/pep-0458/">
  <front>
    <title>PEP 458 -- Surviving a Compromise of PyPI</title>
    <author initials="T.K." surname="Kuppusamy">
      <organization></organization>
    </author>
    <author initials="V." surname="Diaz">
      <organization></organization>
    </author>
    <author initials="D." surname="Stufft">
      <organization></organization>
    </author>
    <author initials="J." surname="Cappos">
      <organization></organization>
    </author>
    <date year="2013" month="September" day="27"/>
  </front>
</reference>
<reference anchor="DEPLOY" target="https://docs.google.com/document/d/17wOs-T7mugwte5_Dt-KLGMsp-3_yAARejpFmrAMefSE/">
  <front>
    <title>Uptane Deployment Considerations</title>
    <author initials="." surname="Members of the Uptane Alliance Community">
      <organization></organization>
    </author>
    <date year="n.d."/>
  </front>
</reference>
<reference anchor="USATODAY" target="https://www.usatoday.com/story/tech/columnist/2016/06/28/your-average-car-lot-more-code-driven-than-you-think/86437052/">
  <front>
    <title>Your average car is a lot more code-driven than you think</title>
    <author initials="B." surname="O'Donnell">
      <organization></organization>
    </author>
    <date year="2016" month="June" day="28"/>
  </front>
</reference>
<reference anchor="CR-OTA" target="https://www.consumerreports.org/automotive-technology/automakers-embrace-over-the-air-updates-can-we-trust-digital-car-repair/">
  <front>
    <title>Automakers Embrace Over-the-Air Updates, but Can We Trust Digital Car Repair?</title>
    <author initials="K." surname="Barry">
      <organization></organization>
    </author>
    <date year="2018" month="April" day="20"/>
  </front>
</reference>
<reference anchor="IN-TOTO" target="https://in-toto.github.io/">
  <front>
    <title>in-toto: A framework to secure the integrity of software supply chains</title>
    <author >
      <organization></organization>
    </author>
    <date year="2018" month="October" day="29"/>
  </front>
</reference>


    </references>



  </back>

<!-- ##markdown-source:
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
wSjhnBToChjh0ecPIff/B95N7IMzMgEA

-->

</rfc>


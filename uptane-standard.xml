<?xml version="1.0" encoding="UTF-8"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc2629 version 1.2.9 -->

<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
]>

<?rfc toc="yes"?>
<?rfc sortrefs="yes"?>
<?rfc symrefs="yes"?>

<rfc ipr="noDerivativesTrust200902" docName="uptane-standard-design" category="info">

  <front>
    <title abbrev="UPTANE">Uptane Standard for Design and Implementation</title>

    <author initials="." surname="Members of the Uptane Community" fullname="Uptane Community">
      <organization>Joint Development Foundation Projects, LLC, Uptane Series (c/o Prof. Justin Cappos)</organization>
      <address>
        <postal>
          <street>6 MetroTech</street>
          <city>Brooklyn</city>
          <region>NY</region>
          <code>11201</code>
          <country>USA</country>
        </postal>
        <email>uptane-standards@googlegroups.com</email>
      </address>
    </author>

    <date year="2020" month="December" day="08"/>

    <area>TODO</area>
    <workgroup>TODO</workgroup>
    <keyword>Internet-Draft</keyword>

    <abstract>


<t>This document describes a framework for securing ground vehicle software update systems.</t>



    </abstract>


  </front>

  <middle>


<section anchor="introduction" title="Introduction">

<t>Uptane is a secure software update framework for ground vehicles. This document describes procedures to enable programmers for OEMs and suppliers to securely design and implement this framework in a manner that better protects connected units on ground vehicles. Integrating Uptane as outlined in the sections that follow can reduce the ability of attackers to compromise critical systems. It also assures a faster and easier recovery process should a compromise occur.</t>

<t>These instructions specify the components necessary for a compliant implementation. Individual implementers can make their own technological choices within those requirements. This flexibility makes Uptane adaptable to the many customized update solutions used by manufacturers. If implementers wish to have compatible formats, they may use POUFs. POUFs contain a description of implementation choices as well as data binding formats. An implementer who adopts a POUF, as well as the Uptane Standard, will be able to interoperate with other implementations using that POUF.</t>

</section>
<section anchor="terminology" title="Terminology">

<section anchor="conformance-terminology" title="Conformance terminology">

<t>The keywords MUST, MUST NOT, REQUIRED, SHALL, SHALL NOT, SHOULD, SHOULD NOT, RECOMMENDED, MAY, and OPTIONAL in this document are to be interpreted as described in <xref target="RFC2119"/>.</t>

<t>In order to be considered Uptane-compliant, an implementation MUST follow all of these rules as specified in the document.</t>

</section>
<section anchor="terminology-1" title="Terminology">

<t><spanx style="emph">Bundle</spanx>: A set of images released by the repository that is meant to be installed by one or more ECUs on a vehicle during the same update cycle.</t>

<t><spanx style="emph">Bus</spanx>: An internal communications network that interconnects components within a vehicle. A vehicle can have a number of buses that will vary in terms of power, speed, and resources.</t>

<t><spanx style="emph">ECU Identifier</spanx>: An attribute used to identify a specific ECU (e.g., a unique serial number).</t>

<t><spanx style="emph">ECU Version Manifest</spanx>: Metadata which details the software version currently installed on the ECU.</t>

<t><spanx style="emph">Hardware Identifier</spanx>: An attribute used to identify a model of an ECU.</t>

<t><spanx style="emph">Image</spanx>: File containing software for an ECU to install. May contain a binary image to flash, installation instructions, and other necessary information for the ECU to properly apply the update. Each ECU typically holds only one image, although this may vary in some cases.</t>

<t><spanx style="emph">Metadata</spanx>:  Information describing the characteristics of data including, for example, structural
metadata describing data structures (e.g., data format, syntax, and semantics) and
descriptive metadata describing data contents (e.g., information security labels). As used in Uptane, metadata can be described as information associated with a role or an image that contains the characteristics or parameters thereof (e.g., cryptographic material parameters, filenames, and versions.)</t>

<t><spanx style="emph">Primary/Secondary ECUs</spanx>: Terms used to describe the control units within a ground vehicle. A Primary ECU downloads and verifies update images and metadata for itself and for Secondary ECUs, and distributes images and metadata to Secondaries. Thus, it requires extra storage space and a means to download images and metadata.  Secondary ECUs receive their update images and metadata from the Primary, and only need to verify and install their own metadata and images.</t>

<t><spanx style="emph">POUF</spanx>: A document that contains the protocol, operations, usage, and formats (POUF) of a specific Uptane implementation. The POUF contains decisions about SHOULDs and MAYs in an implementation, as well as descriptions of data binding formats. POUFs MAY be used to create compatible Uptane implementations.</t>

<t><spanx style="emph">Repository</spanx>: A server containing metadata about images. May also contain the images themselves. Other data may be stored on the repository to be accessed by ECUs during the update process.</t>

<t><spanx style="emph">Suppliers</spanx>: Independent companies to which vehicle manufacturers may outsource the production of ECUs. Tier-1 suppliers directly serve the manufacturers. Tier-2 suppliers are those that perform outsourced work for Tier-1 suppliers.</t>

<t><spanx style="emph">Vehicle Version Manifest</spanx>: A compilation of all ECU version reports on a vehicle. It serves as a master list of all images currently running on all ECUs in the vehicle.</t>

</section>
<section anchor="uptane-role-terminology" title="Uptane role terminology">

<t>These terms are defined in greater detail in <xref target="roles"/>.</t>

<t><spanx style="emph">Delegation</spanx>: A process by which the responsibility of signing metadata about images is assigned to another party.
<spanx style="emph">Role</spanx>: A party (human or machine) responsible for signing a certain type of metadata. The role controls keys and is responsible for signing metadata entrusted to it with these keys. The roles mechanism of Uptane allows the system to distribute signing responsibilities so that the compromise of one key does not necessarily impact the security of the entire system.</t>

<t><list style="symbols">
  <t><spanx style="emph">Root role</spanx>: Signs metadata that distributes and revokes public keys used to verify the Root, Timestamp, Snapshot, and Targets role metadata.</t>
  <t><spanx style="emph">Snapshot role</spanx>: Signs metadata that indicates which images the repository has released at the same time.</t>
  <t><spanx style="emph">Targets role</spanx>: Signs metadata used to verify the image, such as cryptographic hashes and file size.</t>
  <t><spanx style="emph">Timestamp role</spanx>: Signs metadata that indicates if there are any new metadata or images on the repository.</t>
</list></t>

</section>
<section anchor="acronyms-and-abbreviations" title="Acronyms and abbreviations">

<t><spanx style="emph">CDN</spanx>: Content Delivery Network</t>

<t><spanx style="emph">ECUs</spanx>: Electronic Control Units, the computing units on a vehicle</t>

<t><spanx style="emph">LIN Bus</spanx>: Local Interconnect Bus</t>

<t><spanx style="emph">OBD</spanx>: On-board diagnostics</t>

<t><spanx style="emph">SOTA</spanx>: Software Updates Over-the-Air</t>

<t><spanx style="emph">UDS</spanx>: Unified Diagnostic Services</t>

<t><spanx style="emph">VIN</spanx>: Vehicle Identification Number</t>

</section>
</section>
<section anchor="rationale-for-and-scope-of-the-uptane-standard" title="Rationale for and scope of the Uptane Standard">

<t>This Standard document provides the essential components for the secure design, implementation, and deployment of Uptane by OEMs and suppliers. These guidelines contribute to compromise resilience, or the ability to minimize the extent of the threat posed by any given attack.</t>

<t>However, this specification is intended as an implementation guide, and not as a detailed technical argument about the security properties that Uptane provides.  Readers interested in such documentation should refer to published papers that cover this topic.  <xref target="UPTANEESCAR"/></t>

<section anchor="why-uptane-requires-a-standards-document" title="Why Uptane requires a standards document">

<t>A standards document that can guide the safe design, integration, and deployment of Uptane in vehicles is needed at this time because:</t>

<t><list style="symbols">
  <t>The number of connected units on the average vehicle continues to grow, with mainstream cars now containing up to 100 million lines of code. <xref target="USATODAY"/></t>
  <t>The expanded use of software over-the-air strategies creates new attack surfaces for malicious parties. <xref target="CR-OTA"/></t>
  <t>Legacy update strategies, such as SSL/TLS or GPG/RSA, are not feasible for use on vehicle ECUs because they force manufacturers to chose between enhanced security and customizability.</t>
  <t>Conventional strategies are also complicated by the differing resources of the ECUs, which can vary greatly in memory, storage space, and Internet connectivity.</t>
  <t>The design of Uptane makes it possible to offer improved design flexibility without sacrificing security.</t>
  <t>This added design flexibility, however, could be a liability if the framework is implemented incorrectly.</t>
  <t>Standardization of crucial steps in the design, implementation, and use of Uptane can assure that customizability does not impact security or functionality.</t>
</list></t>

</section>
<section anchor="scope-of-standard-coverage" title="Scope of Standard coverage">

<t>This document sets guidelines for implementing Uptane in most systems capable of updating software on connected units in ground vehicles, including passenger vehicles, light-duty trucks, heavy-duty trucks, and motorcycles. Uptane could potentially also be applied to other ground vehicles, such as automated shuttles, recreational vehicles, and military ground vehicles. Uptane could even be applied to domains such as IoT devices, medical devices, and autonomous aerial vehicles. In this section, we define the scope of that applicability by providing sample use cases and possible exceptions, aspects of software update security that are not applicable to Uptane, and the design requirements governing the preparation of these standards.</t>

<section anchor="assumptions" title="Assumptions">

<t>We assume the following system preconditions for Uptane:</t>

<t><list style="symbols">
  <t>Vehicles have the ability to establish connectivity to required backend services. For example, this could be done through cellular, Wi-Fi, or hard-wired mechanisms.</t>
  <t>ECUs are either directly connected to the communication channel, or are indirectly connected via some sort of network gateway.</t>
  <t>ECUs are programmable and provide sufficient performance to be updated.</t>
  <t>ECUs must be able to perform public key cryptography operations and calculate hashes of images and metadata files.</t>
  <t>There are state-of-the-art secure servers in place, such as the Director and Image repository servers.</t>
</list></t>

<t>It is important that any bugs detected in Uptane implementations be patched promptly. Failure to do so could interfere with the effectiveness of Uptane’s operations.</t>

</section>
<section anchor="use-cases" title="Use cases">

<t>The following use cases provide a number of scenarios illustrating the manner in which software updates could be accomplished using Uptane.</t>

<section anchor="oems-initializing-uptane-at-the-factory-using-sota" title="OEMs initializing Uptane at the factory using SOTA">

<t>An OEM plans to install Uptane on new vehicles. This entails the following components: code to perform full and partial verification, the latest copy of the relevant metadata, the public keys, and an accurate attestation of the latest time. The OEM then either requires its tier-1 suppliers to provide these materials to the suppliers’ assembly lines or can choose to add the materials later at the OEM’s assembly lines. The OEM’s in-vehicle implementation is Uptane-compliant if:</t>

<t><list style="numbers">
  <t>all Primaries perform full verification;</t>
  <t>all Secondaries that are updated via OTA at least perform partial verification; and</t>
  <t>all other ECUs that do not perform any type of verification cannot be updated via OTA.</t>
</list></t>

</section>
<section anchor="updating-one-ecu-with-a-complete-image" title="Updating one ECU with a complete image">

<t>A tier-1 supplier completes work on a revised image for an electronic brake control module. This module will control the brakes on all models of an SUV produced by the OEM mentioned above. Assuming supplier delegation is supported by the OEM for this ECU, each tier-1 supplier digitally signs the image, then delivers the signature, all of its metadata, including delegations, and associated images to the OEM. The OEM adds these metadata and images to its Image repository, along with information about any dependencies and conflicts between this image and those for other ECUs used in the OEM’s vehicles. The OEM also updates the inventory database, so that the Director repository can instruct the ECU on how to install these updated images.</t>

</section>
<section anchor="updating-individual-ecus-on-demand" title="Updating individual ECUs on demand">

<t>An OEM has issued a recall to address a problem with a keyless entry device that has been locking people out of their cars. The OEM prepares an updated flash image in the manner described above. The OEM then ships USB flash drives to vehicle owners and dealerships that allow those parties to update the firmware of their vehicles.</t>

</section>
<section anchor="update-one-ecu-with-multiple-deltas" title="Update one ECU with multiple deltas">

<t>The OEM wants to use delta updates to save over-the-air bytes. The delta images contain only the code and/or data that has changed from the previous image version. To do so, the OEM must first modify the Director repository, using the vehicle version manifest and dependency resolution to determine the differences between the previous and latest images. The OEM then adds the following to the custom Targets metadata used by the Director repository: (1) the algorithm used to apply a delta image, and (2) the Targets metadata about the delta image. The OEM will also check whether the delta images match the Targets metadata from the Director repository.</t>

</section>
</section>
</section>
<section anchor="exceptions" title="Exceptions">

<t>There are a number of factors that could impede the completion of the above scenarios:</t>

<t><list style="symbols">
  <t>ECUs may be lacking the necessary resources to function as designated. These insufficient resources could include limited CPU or RAM inadequate for performance of public key cryptography; a lack of sufficient storage to undo installation of bad software; or a location on a low-speed network (e.g., LIN).</t>
  <t>ECUs may reside on different network segments, and may not be able to directly reach each other, requiring a gateway to facilitate communication.</t>
  <t>A user may replace OEM-installed ECUs with aftermarket ECUs.</t>
  <t>A vehicle may be able to download only a limited amount of data via a cellular channel due to limits on a data plan.</t>
  <t>A system may lack sufficient power to download or install software updates.</t>
  <t>Vehicles may be offline for extended periods of time, thus missing required updates (e.g., key rotations).</t>
  <t>OEMs may be unwilling to implement costly security or hardware requirements.</t>
</list></t>

</section>
<section anchor="out-of-scope" title="Out of scope">

<t>The following topics will not be addressed in this document, as they represent threats outside the scope of Uptane:</t>

<t><list style="symbols">
  <t>Physical attacks, such as manual tampering with ECUs outside the vehicle.</t>
  <t>Compromise of the packaged software, such as malware embedded in a trusted package.</t>
  <t>Compromise of the supply chain (e.g., build system, version control system, packaging process). A number of strategies (e.g., git signing, TPMs, in-toto <xref target="IN-TOTO"/>)  already exist to address this problem. Therefore, there is no need to duplicate those techniques here.</t>
  <t>Problems associated with OBD or UDS programming of ECUs, such as authentication of communications between ECUs.</t>
  <t>Malicious mirrors of package repositories, which may substitute original packages with malicious packages with matching version numbers <xref target="MERCURY"/>.</t>
</list></t>

</section>
<section anchor="design-requirements" title="Design requirements">

<t>The design requirements for this document are governed by the following principal parameters:</t>

<t><list style="symbols">
  <t>to clearly mandate the design and implementation steps that are security critical and must be followed as is, while offering flexibility in the implementation of non-critical steps. In this manner, users can adapt to support different use models and deployment scenarios.</t>
  <t>to ensure that, if Uptane is implemented, the security practices mandated or suggested in this document do not interfere with the functionality of ECUs, vehicles, or the systems that maintain them.</t>
  <t>to delineate guidelines to ensure that, should any part of the SOTA mechanism of a vehicle be attacked, an attacker must compromise two or more modules to breach the SOTA mechanism.</t>
</list></t>

</section>
</section>
<section anchor="threat-model-and-attack-strategies" title="Threat model and attack strategies">

<t>The overarching goal of Uptane is to provide a system that is resilient in the face of various types of compromise. In this section, we describe the goals an attacker may have (<xref target="attacker_goals"/>) and the capabilities they may have or could develop (<xref target="capabilities"/>). We then describe and classify types of attacks on the system according to the attacker’s goals (<xref target="threats"/>).</t>

<section anchor="attacker_goals" title="Attacker goals">

<t>We assume that attackers may want to achieve one or more of the following goals, in increasing order of severity:</t>

<t><list style="symbols">
  <t>Read the contents of updates to discover confidential information, reverse-engineer firmware, or compare two firmware images to identify security fixes and hence determine the fixed security vulnerability.</t>
  <t>Deny installation of updates to prevent vehicles from fixing software problems.</t>
  <t>Cause one or more ECUs in the vehicle to fail, denying use of the vehicle or of certain functions.</t>
  <t>Control ECUs within the vehicle, and possibly the vehicle itself.</t>
</list></t>

</section>
<section anchor="capabilities" title="Attacker capabilities">

<t>Uptane is designed with resilience to compromise in mind. We assume that attackers may develop one or more of the following capabilities:</t>

<t><list style="symbols">
  <t>Intercept and modify network traffic (i.e., perform man-in-the-middle attacks). This capability may be developed in two domains:
  <list style="symbols">
      <t>Outside the vehicle, intercepting and modifying traffic between the vehicle and software repositories.</t>
      <t>Inside the vehicle, intercepting and modifying traffic on one or more vehicle buses (e.g., via an OBD port or using a compromised ECU as a vector).</t>
    </list></t>
  <t>Compromise and control either a Director repository or Image repository server, and any keys stored on that repository, but not both the Director and Image repositories.</t>
  <t>Compromise either a Primary ECU or a Secondary ECU, but not both in the same vehicle.</t>
</list></t>

</section>
<section anchor="threats" title="Description of threats">

<t>Uptane’s threat model includes the following types of attacks, organized according to the attacker goals listed in <xref target="attacker_goals"/>.</t>

<section anchor="read_updates" title="Read updates">

<t><list style="symbols">
  <t><spanx style="emph">Eavesdrop attack:</spanx> Read sensitive or confidential information from an update intended to be encrypted for a specific ECU. (Note: Not all implementations will have a need for protecting information in this way.)</t>
</list></t>

</section>
<section anchor="deny_updates" title="Deny installation of updates">

<t>An attacker seeking to deny the installation of updates may attempt one or more of the following strategies:</t>

<t><list style="symbols">
  <t><spanx style="emph">Drop-request attack:</spanx> Block network traffic outside or inside the vehicle.</t>
  <t><spanx style="emph">Slow retrieval attack:</spanx> Slow down network traffic, in the extreme case sending barely enough packets to avoid a timeout. Similar to a drop-request attack, except that both the sender and receiver of the traffic still think network traffic is unimpeded.</t>
  <t><spanx style="emph">Freeze attack:</spanx> Continue to send a properly signed, but old, update bundle to the ECUs, even if newer updates exist.</t>
  <t><spanx style="emph">Partial bundle installation attack:</spanx> Install a valid (signed) update bundle, and then block selected updates within the bundle.</t>
  <t>Conduct a denial of service attack against the Uptane repositories or infrastructure.</t>
</list></t>

</section>
<section anchor="change_functionality" title="Interfere with ECU functionality">

<t>Attackers seeking to interfere with the functionality of vehicle ECUs in order to cause an operational failure or unexpected behavior may do so in one of the following ways:</t>

<t><list style="symbols">
  <t><spanx style="emph">Rollback attack:</spanx> Cause an ECU to install a previously valid software revision that is older than the currently installed version.</t>
  <t><spanx style="emph">Endless data attack:</spanx> Send a large amount of data to an ECU until it runs out of storage, possibly causing the ECU to fail to operate.</t>
  <t><spanx style="emph">Mix-and-match attack:</spanx> Install a malicious software bundle in which some of the updates do not interoperate properly. This may be accomplished even if all of the individual images being installed are valid, as long as valid versions exist that are mutually incompatible.</t>
</list></t>

</section>
<section anchor="control_ecu" title="Control an ECU or vehicle">

<t>Full control of a vehicle, or one or more ECUs within a vehicle, is the most severe threat.</t>

<t><list style="symbols">
  <t><spanx style="emph">Arbitrary software attack:</spanx> Cause an ECU to install and run arbitrary code of the attacker’s choice.</t>
</list></t>

</section>
</section>
</section>
<section anchor="design" title="Detailed design of Uptane">

<t>Uptane does not specify implementation details. Instead, this Standard describes the components necessary for a compliant implementation and leaves it up to individual implementers to make their own technological choices within those requirements.</t>

<t>At a high level, Uptane requires:</t>

<t><list style="symbols">
  <t>Two software repositories:
  <list style="symbols">
      <t>An Image repository containing binary images to install and signed metadata about those images.</t>
      <t>A Director repository connected to an inventory database that can sign metadata on demand for images in the Image repository.</t>
    </list></t>
  <t>Repository tools for generating Uptane-specific metadata about images.</t>
  <t>A public key infrastructure supporting the required metadata production and signing roles on each repository:
  <list style="symbols">
      <t>Root - The certificate authority for the Uptane ecosystem. Distributes public keys for verifying all the other roles’ metadata.</t>
      <t>Timestamp - Indicates whether there are new metadata or images.</t>
      <t>Snapshot - Indicates images released by the repository at a point in time via signing metadata about Targets metadata.</t>
      <t>Targets - Indicates metadata about images, such as hashes and file sizes.</t>
    </list></t>
  <t>A secure way for ECUs to know the time.</t>
  <t>An ECU capable of downloading images and associated metadata from the Uptane servers.</t>
  <t>An in-vehicle client on a Primary ECU capable of verifying the signatures on all update metadata and downloading updates on behalf of its associated Secondary ECUs. The Primary ECU MAY be the same ECU that communicates with the server.</t>
  <t>A client or library on each Secondary ECU capable of performing either full or partial verification of metadata.</t>
</list></t>

<section anchor="roles" title="Roles on repositories">

<t>A repository contains images and metadata. Each role has a particular type of metadata associated with it, as described in <xref target="meta_structures"/>.</t>

<section anchor="root_role" title="The Root role">

<t>A repository’s Root role SHALL be responsible for a Certificate Authority as defined in <xref target="RFC3647"/>.
A repository’s Root role SHALL produce and sign Root metadata as described in <xref target="root_meta"/>.
A repository’s Root role SHALL sign the public keys used to verify the metadata produced by the Timestamp, Snapshot, and Targets roles.
A repository’s Root role SHALL revoke keys for the other roles if they are compromised.</t>

</section>
<section anchor="targets_role" title="The Targets role">

<t>A repository’s Targets role SHALL produce and sign metadata about images and delegations as described in <xref target="targets_meta"/>.</t>

<section anchor="targets_role_delegations" title="Delegations">

<t>The Targets role on the Image repository MAY delegate the responsibility of signing metadata to other, custom-defined roles referred to as delegated targets. If it does, it MUST do so as specified in <xref target="delegations_meta"/>.</t>

<t>Responsibility for signing images or a subset of images MAY be delegated to more than one role and therefore it is possible for two different roles to be trusted for signing a particular image. For this reason, delegations MUST be prioritized.</t>

<t>A particular delegation for a subset of images MAY be designated as <spanx style="strong">terminating</spanx>. For terminating delegations, the client SHALL NOT search any further if it does not find validly signed metadata about those images. Delegations SHOULD NOT be terminating by default; terminating delegations SHOULD only be used when there is a compelling technical reason to do so.</t>

<t>A delegation for a subset of images MAY be a multi-role delegation <xref target="TAP-3"/>. A multi-role delegation indicates that multiple roles are needed to sign a particular image and each of the delegatee roles MUST sign the same metadata.</t>

<t>Delegations only apply to the Image repository. The Targets role on the Director repository MUST NOT delegate metadata signing responsibility.</t>

</section>
</section>
<section anchor="snapshot_role" title="The Snapshot role">

<t>A repository’s Snapshot role SHALL produce and sign metadata about all Targets metadata the repository releases, including the current version number of the top-level Targets metadata, and the version numbers of all delegated Targets metadata, as described in <xref target="snapshot_meta"/>.</t>

</section>
<section anchor="timestamp_role" title="The Timestamp role">

<t>A repository’s Timestamp role SHALL produce and sign metadata indicating whether there are new metadata or images on the repository. It MUST do so by signing the metadata about the Snapshot metadata file.</t>

</section>
</section>
<section anchor="meta_structures" title="Metadata structures">

<t>Uptane’s security guarantees all rely on properly created metadata that follows a designated structure. The Uptane Standard <spanx style="strong">does not</spanx> mandate any particular format or encoding for the metadata as a whole. ASN.1 (with any encoding scheme like BER, DER, XER, etc.), JSON, XML, or any other encoding format that is capable of providing the required structure MAY be used.</t>

<t>However, string comparison is required as part of metadata verification. To ensure an accurate basis for comparing strings, all strings MUST be encoded in the Unicode Format for Network Interchange as defined in <xref target="RFC5198"/>, including normalization into Unicode Normalization Form C (<xref target="NFC"/>).</t>

<t>In the <spanx style="emph">Deployment Best Practices</spanx> (<xref target="DEPLOY"/>), Joint Development Foundation Projects, LLC, Uptane Series provides some examples of compliant metadata structures in ASN.1 and JSON.</t>

<section anchor="common_metadata" title="Common metadata structures">

<t>Every public key MUST be represented using a public key identifier.  A public key identifier is EITHER all of the following:</t>

<t><list style="symbols">
  <t>The value of the public key itself (which MAY be, for example, formatted as a PEM string)</t>
  <t>The public key cryptographic algorithm used by the key (such as RSA or ECDSA)</t>
  <t>The particular scheme used to verify the signature (such as <spanx style="verb">rsassa-pss-sha256</spanx> or <spanx style="verb">ecdsa-sha2-nistp256</spanx>)</t>
</list></t>

<t>OR a secure hash over at least the above components (such as the keyid mechanism in TUF).</t>

<t>All four Uptane roles (Root, Targets, Snapshot, and Timestamp) share a common structure. They SHALL contain the following two attributes:</t>

<t><list style="symbols">
  <t>A payload of metadata to be signed</t>
  <t>An attribute containing the signature(s) of the payload, where each entry specifies:
  <list style="symbols">
      <t>The public key identifier of the key being used to sign the payload</t>
      <t>A signature with this key over the payload</t>
    </list></t>
</list></t>

<t>The payload differs depending on the role. However, the payload for all roles shares a common structure. It SHALL contain the following four attributes:</t>

<t><list style="symbols">
  <t>An indicator of the type of role (Root, Targets, Snapshot, or Timestamp)</t>
  <t>An expiration date and time</t>
  <t>An integer version number, which SHOULD be incremented each time the metadata file is updated</t>
  <t>The role-specific metadata for the role indicated</t>
</list></t>

<t>The following sections describe the role-specific metadata. All roles SHALL follow the common structures described here.</t>

</section>
<section anchor="root_meta" title="Root metadata">

<t>A repository’s Root metadata distributes the public keys of the top-level Root, Targets, Snapshot, and Timestamp roles, as well as revocations of those keys. It SHALL contain two attributes:</t>

<t><list style="symbols">
  <t>A representation of the public keys for all four roles. Each key SHALL have a unique public key identifier.</t>
  <t>An attribute mapping each role to (1) its public key(s), and (2) the threshold of signatures required for that role.</t>
</list></t>

<t>Additionally, it MAY contain a mapping of roles to a list of valid URLs from which the role metadata can be downloaded.  If this mapping of URLs is used, the implementer SHOULD implement this functionality following <xref target="TAP-5"/> to avoid adding unforeseen security risks.</t>

</section>
<section anchor="targets_meta" title="Targets metadata">

<t>The Targets metadata on a repository contains all of the information about images to be installed on ECUs. This includes filenames, hashes, file sizes, and MAY also include other useful information, such as what types of hardware are compatible with a particular image.</t>

<t>Targets metadata can also contain metadata about delegations, allowing one Targets role to delegate its authority to another. This means that an individual Targets metadata file might contain only metadata about delegations, only metadata about images, or some combination of the two. The details of how ECUs traverse the delegation tree to find valid metadata about images is specified in <xref target="resolve_delegations"/>.</t>

<section anchor="targets_images_meta" title="Metadata about images">

<t>To be available to install on clients, all images on the repository MUST have their metadata listed in a Targets role.  Each Targets role MAY provide a list of some images on the repository.  This list MUST provide, at a minimum, the following information about each image:</t>

<t><list style="symbols">
  <t>The image filename</t>
  <t>The size of the image in bytes</t>
  <t>One or more hashes of the image file, along with the hashing function used</t>
</list></t>

<section anchor="custom-metadata-about-images" title="Custom metadata about images">

<t>In addition to the required metadata, Targets metadata files MAY contain extra metadata for images on the repository. This metadata can be customized for a particular use case. Examples of use cases for different types of custom metadata can be found in the <spanx style="emph">Deployment Best Practices</spanx> document (<xref target="DEPLOY"/>). However, there are a few important pieces of custom metadata that SHOULD be present in most implementations. In addition, there is one element in the custom metadata that MUST be present in the Targets metadata from the Director.</t>

<t>Custom metadata MAY also contain a demarcated field or section that MUST match whenever two pieces of metadata are checked against each other, such as when Targets metadata from the Director repository is checked against Targets metadata from the Image repository.</t>

<t>The information listed below SHOULD be provided for each image on both the Image repository and the Director repository. If a “MUST match section” is to be implemented, that is where this information SHOULD be placed.</t>

<t><list style="symbols">
  <t>A release counter, to be incremented each time a new version of the image is released. This can be used to prevent rollback attacks even in cases where the Director repository is compromised.</t>
  <t>A hardware identifier, or list of hardware identifiers, representing models of ECUs with which the image is compatible. This can be used to ensure that an ECU cannot be ordered to install an incompatible image, even in cases where the Director repository is compromised.</t>
</list></t>

<t>The following information is CONDITIONALLY REQUIRED for each image on the Director repository IF that image is encrypted:</t>

<t><list style="symbols">
  <t>Information about filenames, hashes, and file size of the encrypted image.</t>
  <t>Information about the encryption method, and other relevant information–for example, a symmetric encryption key encrypted by the ECU’s asymmetric key could be included in the Director repository metadata.</t>
</list></t>

<t>The following information MUST be provided from the Director repository for each image in the Targets metadata:</t>

<t><list style="symbols">
  <t>An ECU identifier (such as a serial number), specifying the ECU that should install the image.</t>
</list></t>

<t>The Director repository MAY provide a download URL for the image file. This may be useful, for example, when the image is on a public CDN and the Director wishes to provide a signed URL.</t>

</section>
</section>
<section anchor="delegations_meta" title="Metadata about delegations">

<t>A Targets metadata file on the Image repository (but not the Director repository) MUST be able to delegate signing authority to other entities. For example, it could delegate signing authority for a particular ECU’s firmware to that ECU’s supplier. A metadata file MAY contain any number of delegations and MUST keep the delegations in prioritized order.</t>

<t>Any metadata file with delegations MUST provide the following information:</t>

<t><list style="symbols">
  <t>A list of public keys of all delegatees. Each key should have a unique public key identifier and a key type.</t>
  <t>A list of delegations, each of which contains:
  <list style="symbols">
      <t>A list of the filenames to which this role applies. This MAY be expressed using wildcards, or by enumerating a list, or a combination of the two.</t>
      <t>An optional list of the hardware identifiers to which this role applies.  If this is omitted, any hardware identifier will match.</t>
      <t>An indicator of whether or not this is a terminating delegation. (See <xref target="targets_role_delegations"/>.)</t>
      <t>A list of the roles to which this delegation applies. Each role needs to specify:
      <list style="symbols">
          <t>A name for the role (e.g., “supplier1-qa”)</t>
          <t>The key identifiers for each key this role uses</t>
          <t>A threshold of keys that must sign for this role</t>
        </list></t>
    </list></t>
</list></t>

<t>Note that <spanx style="strong">any</spanx> Targets metadata file stored on the Image repository may contain delegations, and these delegations can be in chains of arbitrary length.</t>

</section>
</section>
<section anchor="snapshot_meta" title="Snapshot metadata">

<t>The Snapshot metadata lists version numbers and filenames of all Targets metadata files. It protects against mix-and-match attacks if a delegated supplier key is compromised.</t>

<t>For each Targets metadata file on the repository, the Snapshot metadata SHALL contain the following information:</t>

<t><list style="symbols">
  <t>The filename and version number of the Targets metadata file.</t>
</list></t>

<t>The Snapshot metadata MAY also list the Root metadata filename and version number. This is not required, particularly for implementations of <xref target="TAP-5"/>, but MAY be included in all cases for backward compatibility.</t>

</section>
<section anchor="timestamp_meta" title="Timestamp metadata">

<t>The Timestamp metadata SHALL contain the following information:</t>

<t><list style="symbols">
  <t>The filename and version number of the latest Snapshot metadata on the repository.</t>
  <t>One or more hashes of the Snapshot metadata file, along with the hashing function used.</t>
</list></t>

</section>
<section anchor="repo_mapping_meta" title="Repository mapping metadata">

<t>As described in the introduction to <xref target="design"/>, Uptane requires a Director repository and an Image repository. However, it is possible to have an Uptane-compliant implementation that has more than two repositories.</t>

<t>Repository mapping metadata informs a Primary ECU about which repositories to trust for images or image paths. <xref target="TAP-4"/> describes how to make use of more complex repository mapping metadata in order to have more than the two required repositories.</t>

<t>Repository mapping metadata, or the equivalent informational content, MUST be present on all Primary ECUs, and MUST contain the following information:</t>

<t><list style="symbols">
  <t>A list of repository names and one or more URLs at which the named repository can be accessed. At a minimum, this MUST include the Director and Image repositories.</t>
  <t>A list of mappings of image paths to repositories, each of which contains:
  <list style="symbols">
      <t>A list of image paths. Image paths MAY be expressed using wildcards, or by enumerating a list, or a combination of the two.</t>
      <t>A list of repositories that MUST provide signed Targets metadata for images stored at those paths.</t>
    </list></t>
</list></t>

<t>For example, in the most basic Uptane case, the repository mapping metadata would contain:</t>

<t><list style="symbols">
  <t>The name and URL of the Director repository.</t>
  <t>The name and URL of the Image repository.</t>
  <t>A single mapping indicating that all images (<spanx style="verb">*</spanx>) MUST be signed by both the Director and Image repository.</t>
</list></t>

<t>Note that the metadata need not be in the form of a metadata file. For example, in the basic case where there is only one Director and one Image repository, and all images need to have signed metadata from both repositories, it would be sufficient to have a configuration file with URLs for the two repositories and a client that always checks for metadata matches between them. In this case, no explicit mapping would be defined, because the mapping is defined as part of the Uptane client implementation.</t>

<t>The <spanx style="emph">Uptane Deployment Best Practices</spanx> document (<xref target="DEPLOY"/>) provides more guidance on how to implement repository mapping metadata for more complex use cases. It also discusses strategies for updating repository mapping metadata, if required.</t>

</section>
<section anchor="metadata_filename_rules" title="Rules for filenames in repositories and metadata">

<t>There is a difference between the filename in a metadata file or an ECU, and the filename on a repository. This difference exists in order to avoid race conditions, where metadata and images are read from, and written to, at the same time. For more details, the reader should read the TUF specification <xref target="TUF-spec"/> and PEP 458 <xref target="PEP-458"/>.</t>

<t>Unless stated otherwise, all files SHALL be written to repositories in accordance with the following two rules:</t>

<t><list style="numbers">
  <t>Metadata filenames SHALL be qualified with version numbers. If a metadata file A is specified as FILENAME.EXT in another metadata file B, then it SHALL be written as VERSION.FILENAME.EXT, where VERSION is A’s version number, as defined in <xref target="common_metadata"/>, with one exception: If the version number of the Timestamp metadata file might not be known in advance by a client, it MAY be read from, and written to, a repository using a filename without a version number qualification, i.e., FILENAME.EXT.</t>
  <t>If an image is specified in a Targets metadata file as FILENAME.EXT, it SHALL be written to the repository as HASH.FILENAME.EXT, where HASH is one of the hash digests of the file, as specified in <xref target="targets_images_meta"/>. The file MUST be written to the repository using <spanx style="emph">n</spanx> different filenames, one for each hash digest listed in its corresponding Targets metadata.</t>
</list></t>

<t>For example:</t>

<t><list style="symbols">
  <t>The version number of the Snapshot metadata file is 61, and its filename in the Timestamp metadata is <spanx style="emph">snapshot.json</spanx>. The filename on the repository will be <spanx style="emph">61.snapshot.json</spanx>.</t>
  <t>There is an image with the <spanx style="emph">filename acme_firmware.bin</spanx> specified in the Targets metadata, with a SHA3-256 of <spanx style="emph">aaaa</spanx> and a SHA-512/224 of <spanx style="emph">bbbb</spanx>. It will have two filenames on the repository: <spanx style="emph">aaaa.acme_firmware.bin</spanx> and <spanx style="emph">bbbb.acme_firmware.bin</spanx>.</t>
</list></t>

</section>
</section>
<section anchor="server-repository-implementation-requirements" title="Server / repository implementation requirements">

<t>An Uptane implementation SHALL make the following services available to vehicles:</t>

<t><list style="symbols">
  <t>Image repository</t>
  <t>Director repository</t>
</list></t>

<t>Additionally, an Uptane implementation requires ECUs to have a secure way to know the current time.</t>

<section anchor="image-repository" title="Image repository">

<t>The Image repository exists to allow an OEM and/or its suppliers to upload images and their associated metadata. It makes these images and their metadata available to vehicles. The Image repository is designed to be primarily controlled by human actors, and updated relatively infrequently.</t>

<t>The Image repository SHALL expose an interface permitting the download of metadata and images. This interface SHOULD be public.</t>

<t>The Image repository SHALL require authorization for writing metadata and images.</t>

<t>The Image repository SHALL provide a method for authorized users to upload images and their associated metadata. It SHALL check that a user writing metadata and images is authorized to do so for that specific image by checking the chain of delegations as described in <xref target="delegations_meta"/>.</t>

<t>The Image repository SHALL implement storage which permits authorized users to write an image file using a unique filename, and later read the same file using the same name. It MAY use any filesystem, key-value store, or database that fulfills this requirement.</t>

<t>The Image repository MAY require authentication for read access.</t>

</section>
<section anchor="director_repository" title="Director repository">

<t>The Director repository instructs ECUs as to which images should be installed by producing signed metadata on demand. Unlike the Image repository, it is mostly controlled by automated, online processes. It also consults a private inventory database containing information on vehicles, ECUs, and software revisions.</t>

<t>The Director repository SHALL expose an interface for Primaries to upload vehicle version manifests (<xref target="vehicle_version_manifest"/>) and download metadata. This interface SHOULD be public.
The Director MAY encrypt images for ECUs that require them, either by encrypting on-the-fly or by storing encrypted images on the repository.</t>

<t>The Director repository SHALL implement storage which permits an automated service to write generated metadata files. It MAY use any filesystem, key-value store, or database that fulfills this requirement.</t>

<section anchor="directing-installation-of-images-on-vehicles" title="Directing installation of images on vehicles">

<t>A Director repository MUST conform to the following six-step process for directing the installation of software images on a vehicle.</t>

<t><list style="numbers">
  <t>The Director SHOULD first identify the vehicle. This MAY be done when the Director receives a vehicle version manifest sent by a Primary (as described in <xref target="construct_manifest_primary"/>), decodes the manifest, and determines the unique vehicle identifier. Additionally, the Director MAY utilize other mechanisms to uniquely identify a vehicle (e.g., 2-way TLS with unique client certificates).</t>
  <t>Using the vehicle identifier, the Director queries its inventory database (as described in <xref target="inventory_db"/>) for relevant information about each ECU in the vehicle.</t>
  <t>The Director SHALL check the manifest for accuracy compared to the information in the inventory database. If any of the required checks fail, the Director MAY drop the request. An implementer MAY make additional checks if desired. At a minimum, the Director SHALL check the following:
  <list style="symbols">
      <t>Each ECU recorded in the inventory database is also represented in the manifest.</t>
      <t>The signature of the manifest matches the ECU key of the Primary that sent it.</t>
      <t>The signature of each Secondary’s contribution to the manifest matches the ECU key of that Secondary.</t>
    </list></t>
  <t>The Director SHOULD check that the nonce or counter in each ECU version report has not been used before to prevent a replay of the ECU version report. If the nonce or counter is reused the Director SHOULD drop the request.</t>
  <t>The Director extracts information about currently installed images from the vehicle version manifest. Using this information, it determines if the vehicle is already up-to-date, and if not, determines a set of images that should be installed. The exact process by which this determination takes place is out of scope of this Standard. However, the Director MUST take into account <spanx style="emph">dependencies</spanx> and <spanx style="emph">conflicts</spanx> between images and SHOULD consult well-established techniques for dependency resolution.</t>
  <t>The Director MAY encrypt images for ECUs that require it.</t>
  <t>The Director generates new metadata representing the desired set of images to be installed on the vehicle, based on the dependency resolution in step 4. This includes Targets (<xref target="targets_meta"/>), Snapshot (<xref target="snapshot_meta"/>), and Timestamp (<xref target="timestamp_meta"/>) metadata. It then sends this metadata to the Primary as described in <xref target="download_meta_primary"/>.</t>
</list></t>

</section>
<section anchor="inventory_db" title="Inventory Database">

<t>The Director SHALL use a private inventory database to store information about ECUs and vehicles. An implementer MAY use any durable database for this purpose.</t>

<t>The inventory database MUST record the following pieces of information:</t>

<t><list style="symbols">
  <t>Per vehicle:
  <list style="symbols">
      <t>A unique identifier (such as a VIN)</t>
    </list></t>
  <t>Per ECU:
  <list style="symbols">
      <t>A unique identifier (such as a serial number)</t>
      <t>The vehicle identifier the ECU is associated with</t>
      <t>An ECU key (symmetric or asymmetric; for asymmetric keys, only the public part SHOULD be stored)</t>
      <t>The ECU key identifier (as defined in <xref target="common_metadata"/>)</t>
      <t>Whether the ECU is a Primary or a Secondary</t>
    </list></t>
</list></t>

<t>The inventory database MAY record other information about ECUs and vehicles. It SHOULD record a hardware identifier for each ECU to protect against the possibility of directing the ECU to install incompatible firmware.</t>

</section>
</section>
</section>
<section anchor="in-vehicle-implementation-requirements" title="In-vehicle implementation requirements">

<t>An Uptane-compliant ECU SHALL be able to download and verify image metadata and image binaries before installing a new image and MUST have a secure way of verifying the current time, or a sufficiently recent attestation of the time.</t>

<t>All ECUs SHOULD monitor the download speed of image metadata and image binaries to detect and respond to a slow retrieval attack. If the download is slower than a pre-defined threshold, the ECU SHOULD send an alert to the Director repository, for example as part of the next vehicle version manifest.</t>

<t>Each ECU receiving over-the-air updates in a vehicle is either a Primary or a Secondary ECU. A Primary ECU collects and delivers vehicle manifests to the Director (<xref target="vehicle_version_manifest"/>) that contain information about which images have been installed on ECUs in the vehicle. It also verifies the time and downloads and verifies the latest metadata and images for itself and for its Secondaries. A Secondary ECU verifies the time, and downloads and verifies the latest metadata and images for itself from its associated Primary ECU. It also sends signed information about its installed images to its associated Primary.</t>

<t>All ECUs MUST verify image metadata as specified in <xref target="metadata_verification"/> before installing an image or making it available to other ECUs. A Primary ECU MUST perform full verification (<xref target="full_verification"/>). A Secondary ECU SHOULD perform full verification if possible. If a Secondary cannot perform full verification, it SHALL, at the very least, perform partial verification. In addition, it MAY also perform some steps from the full verification process. See the <spanx style="emph">Uptane Deployment Best Practices</spanx> document (<xref target="DEPLOY"/>) for a discussion of how to choose between partial and full verification.</t>

<t>ECUs MUST have a secure source of time. An OEM/Uptane implementer MAY use any external source of time that is demonstrably secure. The <spanx style="emph">Uptane Deployment Best Practices</spanx> document (<xref target="DEPLOY"/>) describes one way to implement an external time server to cryptographically attest time, as well as the security properties required.</t>

<section anchor="build-time-prerequisite-requirements-for-ecus" title="Build-time prerequisite requirements for ECUs">

<t>For an ECU to be capable of receiving Uptane-secured updates, it MUST have the following data provisioned at the time it is manufactured or installed in the vehicle:</t>

<t><list style="numbers">
  <t>A sufficiently recent copy of required Uptane metadata at the time of manufacture or install. This is necessary for the ECU to authenticate that the remote repository is legitimate when it first downloads metadata in the field. See <spanx style="emph">Uptane Deployment Best Practices</spanx> (<xref target="DEPLOY"/>) for more information.
  <list style="symbols">
      <t>Partial verification Secondary ECUs MUST have the Root and Targets metadata from the Director repository (to reduce the scope of rollback and replay attacks). These ECUs MAY also have metadata from other roles or the Image repository if they will be used by the Secondary.</t>
      <t>Full verification ECUs MUST have a complete set of metadata (Root, Targets, Snapshot, and Timestamp) from both repositories (to prevent rollback and replay attacks), as well as the repository mapping metadata (<xref target="repo_mapping_meta"/>). Delegations are not required.</t>
    </list></t>
  <t>The current time, or a secure attestation of a sufficiently recent time.</t>
  <t>An <spanx style="strong">ECU key</spanx>. This is a private key, unique to the ECU, used to sign ECU version reports and decrypt images. An ECU key MAY be either a symmetric key or an asymmetric key. If it is an asymmetric key, there MAY be separate keys for encryption and signing. For the purposes of this Standard, the set of private keys that an ECU uses is referred to as the ECU key (singular), even if it is actually multiple keys used for different purposes.</t>
</list></t>

</section>
<section anchor="what-the-primary-does" title="What the Primary does">

<t>A Primary downloads, verifies, and distributes the latest time, metadata, and images. To do so, it SHALL perform the following seven steps:</t>

<t><list style="numbers">
  <t>Construct and send vehicle version manifest (<xref target="construct_manifest_primary"/>)</t>
  <t>Download and check current time (<xref target="check_time_primary"/>)</t>
  <t>Download and verify metadata (<xref target="download_meta_primary"/>)</t>
  <t>Download and verify images (<xref target="download_images_primary"/>)</t>
  <t>OPTIONAL: Send latest time to Secondaries (<xref target="send_time_primary"/>)</t>
  <t>Send metadata to Secondaries (<xref target="send_metadata_primary"/>)</t>
  <t>Send images to Secondaries (<xref target="send_images_primary"/>)</t>
</list></t>

<t>Note that the subsequent sections concerning requirements for a Primary do not prohibit implementing Primary capabilities on an ECU that does not communicate directly with the Uptane repositories. This allows for implementations to have multiple ECUs within the vehicle performing functions equivalent to a Primary.
If multiple such Primaries are included within a vehicle, each Secondary ECU SHALL have a single Primary responsible for providing its updates.</t>

<section anchor="construct_manifest_primary" title="Construct and send vehicle version manifest">

<t>The Primary SHALL build a <spanx style="emph">vehicle version manifest</spanx> as described in <xref target="vehicle_version_manifest"/>.</t>

<t>Once the complete manifest is built, the Primary MAY send the manifest to the Director repository. However, it is not strictly required that the Primary send the manifest until step three. If permitted by the implementation, a Primary MAY send only a diff of the manifest to save bandwidth. If an implementation permits diffs, the Director SHOULD have a way to request a full manifest.</t>

<t>Secondaries MAY send their version report at any time so that it is already stored on the Primary when it wishes to check for updates. Alternatively, the Primary MAY request a version report from each Secondary at the time of the update check.</t>

<section anchor="vehicle_version_manifest" title="Vehicle version manifest">

<t>The vehicle version manifest is a metadata structure that MUST contain the following information:</t>

<t><list style="symbols">
  <t>An attribute containing the signature(s) of the payload, each specified by:
  <list style="symbols">
      <t>The public key identifier of the key being used to sign the payload</t>
      <t>The signing method (i.e., ed25519, rsassa-pss, etc.)</t>
      <t>A hash of the payload to be signed</t>
      <t>The hashing function used (i.e., SHA3-256, SHA-512/224, etc.)</t>
      <t>The signature of the hash</t>
    </list></t>
  <t>A payload representing the installed versions of each software image on the vehicle. This payload SHALL contain:
  <list style="symbols">
      <t>The vehicle’s unique identifier (e.g., the VIN)</t>
      <t>The Primary ECU’s unique identifier (e.g., the serial number)</t>
      <t>A list of ECU version reports as specified in <xref target="version_report"/></t>
    </list></t>
</list></t>

<t>Note that one of the ECU version reports should be the version report for the Primary itself.</t>

</section>
<section anchor="version_report" title="ECU version report">

<t>An ECU version report is a metadata structure that MUST contain the following information:</t>

<t><list style="symbols">
  <t>An attribute containing the signature(s) of the payload, each specified by:
  <list style="symbols">
      <t>The public key identifier of the key being used to sign the payload</t>
      <t>The signing method (i.e., ed25519, rsassa-pss, etc.)</t>
      <t>A hash of the payload to be signed</t>
      <t>The hashing function used (i.e., SHA3-256, SHA-512/224, etc.)</t>
      <t>The signature of the hash</t>
    </list></t>
  <t>A payload containing:
  <list style="symbols">
      <t>The ECU’s unique identifier (e.g., the serial number)</t>
      <t>The filename, length, and hashes of its currently installed image (i.e., the non-custom Targets metadata for this particular image)</t>
      <t>An indicator of any detected security attack</t>
      <t>The latest time the ECU can verify at the time this version report was generated</t>
      <t>A nonce or counter to prevent a replay of the ECU version report. This value MUST change each update cycle. It MAY be a cryptographic nonce used with a time server as described in <spanx style="emph">Uptane Deployment Best Practices</spanx>  (<xref target="DEPLOY"/>).</t>
    </list></t>
</list></t>

</section>
</section>
<section anchor="check_time_primary" title="Download and check current time">

<t>The Primary SHALL load the current time from a secure source.</t>

</section>
<section anchor="download_meta_primary" title="Download and verify metadata">

<t>The Primary SHALL download metadata for all targets and perform a full verification on it as specified in <xref target="full_verification"/>.</t>

</section>
<section anchor="download_images_primary" title="Download and verify images">

<t>The Primary SHALL download and verify images for itself and for all of its associated Secondaries. Images SHALL be verified by checking that the hash of the image file matches the hash specified in the Director’s Targets metadata for that image.</t>

<t>There may be several different filenames that all refer to the same image binary, as described in <xref target="metadata_filename_rules"/>. If the Primary has received multiple hashes for a given image binary via the Targets role (see <xref target="targets_images_meta"/>) then it SHALL verify every hash for this image even though the image is identified by a single hash as part of its filename.</t>

</section>
<section anchor="send_time_primary" title="Send latest time to Secondaries">

<t>Unless the Secondary ECU has its own way of verifying the time or does not have the capacity to verify a time message, the Primary is CONDITIONALLY REQUIRED to send the time to each ECU. The Secondary will verify the time message, then overwrite its current time with the received time.</t>

</section>
<section anchor="send_metadata_primary" title="Send metadata to Secondaries">

<t>The Primary SHALL send its latest downloaded metadata to all of its associated Secondaries. The metadata it sends to each Secondary MUST include all of the metadata required for verification on that Secondary. For full verification Secondaries, this includes the metadata for all four roles from both repositories, plus any delegated Targets metadata files the Secondary will recurse through to find the proper delegation. For partial verification Secondaries, this MAY include fewer metadata files; at a minimum, it includes only the Targets metadata file from the Director repository.</t>

<t>The Primary SHOULD determine the minimal set of metadata files to send to each Secondary by performing delegation resolution as described in <xref target="full_verification"/>.</t>

<t>Each Secondary SHALL store the latest copy of all metadata required for its own verification.</t>

</section>
<section anchor="send_images_primary" title="Send images to Secondaries">

<t>The Primary SHALL send the latest image to each of its associated Secondaries that have storage to receive it.</t>

<t>For Secondaries without storage, the Primary SHOULD wait for a request from the Secondary to stream the new image file to it. The Secondary will send the request once it has verified the metadata sent in the previous step.</t>

</section>
</section>
<section anchor="installing-images-on-primary-or-secondary-ecus" title="Installing images on Primary or Secondary ECUs">

<t>An ECU SHALL perform the following steps when attempting to install a new image:</t>

<t><list style="numbers">
  <t>Verify latest attested time. This is optional if the ECU does not have the capacity to verify a time message (<xref target="verify_time"/>)</t>
  <t>Verify metadata (<xref target="verify_metadata"/>)</t>
  <t>Download latest image (<xref target="download_image"/>)</t>
  <t>Verify image (<xref target="verify_image"/>)</t>
  <t>Install image (<xref target="install_image"/>)</t>
  <t>Create and send version report (<xref target="create_version_report"/>)</t>
</list></t>

<section anchor="verify_time" title="Load and verify the latest attested time">

<t>IF the ECU has the capability to verify a time message, the ECU is CONDITIONALLY REQUIRED to load and verify the current time, or the most recent securely attested time.</t>

</section>
<section anchor="verify_metadata" title="Verify metadata">

<t>The ECU SHALL verify the latest downloaded metadata (<xref target="metadata_verification"/>) using either full or partial verification. If the metadata verification fails for any reason, the ECU SHALL jump to the final step (<xref target="create_version_report"/>).</t>

</section>
<section anchor="download_image" title="Download latest image">

<t>If the ECU does not have secondary storage, i.e., buffer storage to temporarily store the latest image before installing it, it SHALL download the latest image from the Primary. (If the ECU has secondary storage, it will already have the latest image in its secondary storage as specified in <xref target="send_images_primary"/>, and should skip to the next step.) The ECU MAY first create a backup of its previous working image and store it elsewhere (e.g., the Primary).</t>

<t>The filename used to identify the latest known image (i.e., the file to request from the Primary) SHALL be determined as follows:</t>

<t><list style="numbers">
  <t>Load the Targets metadata file from the Director repository.</t>
  <t>Find the Targets metadata associated with this ECU identifier.</t>
  <t>Construct the Image filename using the rule in <xref target="metadata_filename_rules"/>, or use the download URL specified in the Director metadata.</t>
  <t>If there is no Targets metadata about this image, abort the update cycle and report that there is no such image. Additionally, in the case of failure, the ECU SHALL retain its previous Targets metadata instead of using the new Targets metadata. Otherwise, download the image (up to the number of bytes specified in the Targets metadata) and verify it according to <xref target="verify_image"/>.</t>
</list></t>

<t>When the Primary responds to the download request, the ECU SHALL overwrite its current image with the downloaded image from the Primary.</t>

<t>If any part of this step fails, the ECU SHALL jump to the final step (<xref target="create_version_report"/>).</t>

</section>
<section anchor="verify_image" title="Verify image">

<t>The ECU SHALL verify that the latest image matches the latest metadata as follows:</t>

<t><list style="numbers">
  <t>Load the latest Targets metadata file from the Director.</t>
  <t>Find the Targets metadata associated with this ECU identifier.</t>
  <t>Check that the hardware identifier in the metadata matches the ECU’s hardware identifier.</t>
  <t>Check that the image filename is valid for this ECU. This MAY be a comparison against a wildcard path, which restricts the ECUs to which a delegation will apply.</t>
  <t>Check that the release counter of the image in the previous metadata, if it exists, is less than or equal to the release counter in the latest metadata.</t>
  <t>If the image is encrypted, decrypt the image with a decryption key to be chosen as follows:
  <list style="symbols">
      <t>If the ECU key is a symmetric key, the ECU SHALL use the ECU key for image decryption.</t>
      <t>If the ECU key is asymmetric, the ECU SHALL check the Targets metadata for an encrypted symmetric key. If such a key is found, the ECU SHALL decrypt the symmetric key using its ECU key, and use the decrypted symmetric key for image decryption.</t>
      <t>If the ECU key is asymmetric and there is no symmetric key in the Targets metadata, the ECU SHALL use its ECU key for image decryption.</t>
    </list></t>
  <t>Check that all hashes listed in the metadata match the corresponding hashes of the image.</t>
</list></t>

<t>If the ECU has secondary storage, the checks SHOULD be performed on the image in secondary storage before it is installed.</t>

<t>When checking hashes, the ECU SHOULD additionally check that the length of the image matches the length listed in the metadata.</t>

<t>NOTE: Verifying image size along with the hashes will become a requirement in a future version of the Uptane Standard.</t>

<t>NOTE: See <xref target="DEPLOY"/> for guidance on how to deal with Secondary ECU failures for ECUs that do not have secondary storage.</t>

<t>If any step fails, the ECU SHALL jump to the final step (<xref target="create_version_report"/>).</t>

</section>
<section anchor="install_image" title="Install image">

<t>The ECU SHALL attempt to install the update. This installation SHOULD occur at a time when all pre-conditions are met. These pre-conditions MAY include ensuring the vehicle is in a safe environment for install (e.g., the vehicle is parked when updating a specific ECU). Another pre-condition MAY include ensuring the ECU has a backup of its current image and metadata in case the current installation fails.</t>

</section>
<section anchor="create_version_report" title="Create and send version report">

<t>The ECU SHALL create a version report as described in <xref target="version_report"/>, and send it to the Primary (or simply save it to disk, if the ECU is a Primary). The Primary SHOULD write the version reports it receives to disk and associate them with the Secondaries that sent them.</t>

</section>
</section>
<section anchor="metadata_verification" title="Metadata verification procedures">

<t>A Primary ECU MUST perform full verification of metadata. A Secondary ECU SHOULD perform full verification of metadata. If a Secondary cannot perform full verification, it SHALL, at the very least, perform partial verification.</t>

<t>If a step in the following workflows does not succeed (e.g., the update is aborted because a new metadata file was not signed), an ECU SHOULD still be able to update again in the future. Errors raised during the update process SHOULD NOT leave ECUs in an unrecoverable state.</t>

<section anchor="partial_verification" title="Partial verification">

<t>In order to perform partial verification, an ECU SHALL perform the following steps:</t>

<t><list style="numbers">
  <t>Load and verify the current time or the most recent securely attested time.</t>
  <t>Download and check the Targets metadata file from the Director repository, following the procedure in <xref target="check_targets"/>.</t>
</list></t>

<t>Note that this verification procedure is the smallest set of Uptane checks permissible for an Uptane Secondary ECU. An ECU MAY additionally implement more metadata checks.</t>

<t>For example, an ECU MAY also fetch and verify Root metadata from the Director (following the procedure in <xref target="check_root"/>) before checking Targets metadata. Performing this additional check would provide the ECU with a secure way to receive and validate a rotation of the Director’s Targets key.</t>

<t>See <xref target="DEPLOY"/> for more discussion on this topic.</t>

</section>
<section anchor="full_verification" title="Full verification">

<t>Full verification of metadata means that the ECU checks that the Targets metadata about images from the Director repository matches the Targets metadata about the same images from the Image repository. This provides resilience to a key compromise in the system.</t>

<t>Full verification MUST be performed by Primary ECUs and SHOULD be performed by Secondary ECUs. In the following instructions, whenever an ECU is directed to download metadata, it applies only to Primary ECUs.</t>

<t>If <xref target="TAP-5"/> is supported and a Primary has an external connection to the Uptane repositories, a Primary ECU SHALL download metadata and images following the rules specified in that TAP.  If <xref target="TAP-5"/> is not supported, or if the Primary does not have an external connection to the Uptane repositories, the download SHOULD follow the <xref target="TUF-spec"/> and the metadata file renaming rules specified in <xref target="metadata_filename_rules"/>.</t>

<t>Before starting full verification, the repository mapping metadata MUST be consulted to determine where to download metadata from. This procedure assumes the basic Uptane case: there are only two repositories (Director and Image), and all image paths are required to be signed by both repositories. If a more complex repository layout is being used, refer to <xref target="DEPLOY"/> for guidance on how to determine where metadata should be downloaded from.</t>

<t>In order to perform full verification, an ECU SHALL perform the following steps:</t>

<t><list style="numbers">
  <t>Load and verify the current time or the most recent securely attested time.</t>
  <t>Download and check the Root metadata file from the Director repository, following the procedure in <xref target="check_root"/>.</t>
  <t>Download and check the Timestamp metadata file from the Director repository, following the procedure in <xref target="check_timestamp"/>.</t>
  <t>Check the previously downloaded Snapshot metadata file from the Directory repository (if available). If the hashes and version number of that file match the hashes and version number listed in the new Timestamp metadata, there are no new updates and the verification process MAY be stopped and considered complete. Otherwise, download and check the Snapshot metadata file from the Director repository, following the procedure in <xref target="check_snapshot"/>.</t>
  <t>Download and check the Targets metadata file from the Director repository, following the procedure in <xref target="check_targets"/>.</t>
  <t>If the Targets metadata from the Directory repository indicates that there are no new targets that are not already currently installed, the verification process MAY be stopped and considered complete. Otherwise, download and check the Root metadata file from the Image repository, following the procedure in <xref target="check_root"/>.</t>
  <t>Download and check the Timestamp metadata file from the Image repository, following the procedure in <xref target="check_timestamp"/>.</t>
  <t>Check the previously downloaded Snapshot metadata file from the Image repository (if available). If the hashes and version number of that file match the hashes and version number listed in the new Timestamp metadata, the ECU MAY skip to the last step. Otherwise, download and check the Snapshot metadata file from the Image repository, following the procedure in <xref target="check_snapshot"/>.</t>
  <t>Download and check the top-level Targets metadata file from the Image repository, following the procedure in <xref target="check_targets"/>.</t>
  <t>Verify that Targets metadata from the Director and Image repositories match. A Primary ECU MUST perform this check on metadata for all images listed in the Targets metadata file from the Director repository downloaded in step 6. A Secondary ECU MAY elect to perform this check only on the metadata for the image it will install. (That is, the image metadata from the Director that contains the ECU identifier of the current ECU.) To check that the metadata for an image matches, complete the following procedure:
  <list style="numbers">
      <t>Locate and download a Targets metadata file from the Image repository that contains an image with exactly the same filename listed in the Director metadata, following the procedure in <xref target="resolve_delegations"/>.</t>
      <t>Check that the Targets metadata from the Image repository matches the Targets metadata from the Director repository:
      <list style="numbers">
          <t>Check that the non-custom metadata (i.e., length and hashes) of the unencrypted or encrypted image are the same in both sets of metadata. Note: the Primary is responsible for validating encrypted images and associated metadata. The target ECU (Primary or Secondary) is responsible for validating the unencrypted image and associated metadata.</t>
          <t>Check that all MUST match custom metadata (e.g., hardware identifier and release counter) are the same in both sets of metadata.</t>
          <t>Check that the release counter in the previous Targets metadata file is less than or equal to the release counter in this Targets metadata file.</t>
        </list></t>
    </list></t>
</list></t>

<t>If any step fails, the ECU MUST return an error code indicating the failure. If a check for a specific type of security attack fails (i.e., rollback, freeze, arbitrary software, etc.), the ECU SHOULD return an error code that indicates the type of attack.</t>

</section>
<section anchor="check_root" title="How to check Root metadata">

<t>To properly check Root metadata, an ECU SHOULD:</t>

<t><list style="numbers">
  <t>Load the previous Root metadata file.</t>
  <t>Update to the latest Root metadata file.
  <list style="numbers">
      <t>Let N denote the version number of the latest Root metadata file (which at first could be the same as the previous Root metadata file).</t>
      <t>Try downloading a new version N+1 of the Root metadata file, up to some X number of bytes. The value for X is set by the implementer. For example, X may be tens of kilobytes. The filename used to download the Root metadata file is of the fixed form VERSION_NUMBER.FILENAME.EXT (e.g., 42.root.json). If this file is not available, the current Root metadata file is the latest; continue with step 3.</t>
      <t>Version N+1 of the Root metadata file MUST have been signed by the following: (1) a threshold of keys specified in the latest Root metadata file (version N), and (2) a threshold of keys specified in the new Root metadata file being validated (version N+1). If version N+1 is not signed as required, discard it, abort the update cycle, and report the signature failure. On the next update cycle, begin at version N of the Root metadata file. (Checks for an arbitrary software attack.)</t>
      <t>The version number of the latest Root metadata file (version N) must be less than or equal to the version number of the new Root metadata file (version N+1). Effectively, this means checking that the version number signed in the new Root metadata file is indeed N+1. If the version of the new Root metadata file is less than the latest metadata file, discard it, abort the update cycle, and report the rollback attack. On the next update cycle, begin at step 1 and version N of the Root metadata file. (Checks for a rollback attack.)</t>
      <t>Set the latest Root metadata file to the new Root metadata file.</t>
      <t>Repeat steps 2.1 to 2.6.</t>
    </list></t>
  <t>Check that the current (or latest securely attested) time is lower than the expiration timestamp in the latest Root metadata file. (Checks for a freeze attack.)</t>
  <t>If the Timestamp and/or Snapshot keys have been rotated, delete the previous Timestamp and Snapshot metadata files. (Checks for recovery from fast-forward attacks <xref target="MERCURY"/>.)</t>
</list></t>

</section>
<section anchor="check_timestamp" title="How to check Timestamp metadata">

<t>To properly check Timestamp metadata, an ECU SHOULD:</t>

<t><list style="numbers">
  <t>Download up to Y number of bytes. The value for Y is set by the implementer. For example, Y may be tens of kilobytes. The filename used to download the Timestamp metadata file is of the fixed form FILENAME.EXT (e.g., timestamp.json).</t>
  <t>Check that it has been signed by the threshold of keys specified in the latest Root metadata file. If the new Timestamp metadata file is not properly signed, discard it, abort the update cycle, and report the signature failure. (Checks for an arbitrary software attack.)</t>
  <t>Check that the version number of the previous Timestamp metadata file, if any, is less than or equal to the version number of this Timestamp metadata file. If the new Timestamp metadata file is older than the trusted Timestamp metadata file, discard it, abort the update cycle, and report the potential rollback attack. (Checks for a rollback attack.)</t>
  <t>Check that the current (or latest securely attested) time is lower than the expiration timestamp in this Timestamp metadata file. If the new Timestamp metadata file has expired, discard it, abort the update cycle, and report the potential freeze attack. (Checks for a freeze attack.)</t>
</list></t>

</section>
<section anchor="check_snapshot" title="How to check Snapshot metadata">

<t>To properly check Snapshot metadata, an ECU SHOULD:</t>

<t><list style="numbers">
  <t>Download up to the number of bytes specified in the Timestamp metadata file, constructing the metadata filename as defined in <xref target="metadata_filename_rules"/>.</t>
  <t>The hashes and version number of the new Snapshot metadata file MUST match the hashes and version number listed in the Timestamp metadata. If the hashes and version number do not match, discard the new Snapshot metadata, abort the update cycle, and report the failure. (Checks for a mix-and-match attack.)</t>
  <t>Check that it has been signed by the threshold of keys specified in the latest Root metadata file. If the new Snapshot metadata file is not signed as required, discard it, abort the update cycle, and report the signature failure. (Checks for an arbitrary software attack.)</t>
  <t>Check that the version number of the previous Snapshot metadata file, if any, is less than or equal to the version number of this Snapshot metadata file. If this Snapshot metadata file is older than the previous Snapshot metadata file, discard it, abort the update cycle, and report the potential rollback attack. (Checks for a rollback attack.)</t>
  <t>Check that the version number listed by the previous Snapshot metadata file for each Targets metadata file is less than or equal to its version number in this Snapshot metadata file. If this condition is not met, discard the new Snapshot metadata file, abort the update cycle, and report the failure. (Checks for a rollback attack.)</t>
  <t>Check that each Targets metadata filename listed in the previous Snapshot metadata file is also listed in this Snapshot metadata file. If this condition is not met, discard the new Snapshot metadata file, abort the update cycle, and report the failure. (Checks for a rollback attack.)</t>
  <t>Check that the current (or latest securely attested) time is lower than the expiration timestamp in this Snapshot metadata file. If the new Snapshot metadata file is expired, discard it, abort the update cycle, and report the potential freeze attack. (Checks for a freeze attack.)</t>
</list></t>

</section>
<section anchor="check_targets" title="How to check Targets metadata">

<t>To properly check Targets metadata, an ECU SHOULD:</t>

<t><list style="numbers">
  <t>Download up to Z number of bytes, constructing the metadata filename as defined in <xref target="metadata_filename_rules"/>. The value for Z is set by the implementer. For example, Z may be tens of kilobytes.</t>
  <t>The version number of the new Targets metadata file MUST match the version number listed in the latest Snapshot metadata. If the version number does not match, discard it, abort the update cycle, and report the failure. (Checks for a mix-and-match attack.) This step MAY be skipped when checking Targets metadata on a partial verification ECU; partial verification ECUs might not have Snapshot metadata.</t>
  <t>Check that the Targets metadata has been signed by the threshold of keys specified in the relevant metadata file. (Checks for an arbitrary software attack.):
  <list style="numbers">
      <t>If checking top-level Targets metadata, the threshold of keys is specified in the Root metadata.</t>
      <t>If checking delegated Targets metadata, the threshold of keys is specified in the Targets metadata file that delegated authority to this role.</t>
    </list></t>
  <t>Check that the version number of the previous Targets metadata file, if any, is less than or equal to the version number of this Targets metadata file. (Checks for a rollback attack.)</t>
  <t>Check that the current (or latest securely attested) time is lower than the expiration timestamp in this Targets metadata file. (Checks for a freeze attack.)</t>
  <t>If checking Targets metadata from the Director repository, verify that there are no delegations.</t>
  <t>If checking Targets metadata from the Director repository, check that no ECU identifier is represented more than once.</t>
  <t>If checking Targets metadata from the Director repository, and the ECU performing the verification is the Primary ECU, check that all listed ECU identifiers correspond to ECUs that are actually present in the vehicle.</t>
</list></t>

</section>
<section anchor="resolve_delegations" title="How to resolve delegations">

<t>To properly check Targets metadata for an image, an ECU MUST locate the metadata file(s) for the role (or roles) that have the authority to sign the image. This metadata might be located in the top-level Targets metadata, but it also may be delegated to another role or to multiple roles. Therefore, all delegations MUST be resolved using the following recursive procedure, beginning with the top-level Targets metadata file.</t>

<t><list style="numbers">
  <t>Download and check the current metadata file, following the procedure in <xref target="check_targets"/>. If the file cannot be loaded, or if any verification step fails, abort the delegation resolution, and indicate that image metadata cannot be found because of a missing or invalid role.</t>
  <t>If the current metadata file contains signed metadata about the image, end the delegation resolution and return the metadata to be checked.</t>
  <t>If the current metadata file was reached via a terminating delegation and does not contain signed metadata about the image, abort the delegation resolution for this image and return an error indicating that image metadata could not be found.</t>
  <t>Search the list of delegations, in listed order. For each delegation:
  <list style="numbers">
      <t>Check if the delegation applies to the image being processed. For the delegation to apply, it MUST include the hardware identifier of the target, and the target name MUST match one of the delegation’s image paths. If either of these tests fail, move on to the next delegation in the list.</t>
      <t>If the delegation is a multi-role delegation, follow the procedure described in <xref target="multirole_delegations"/>. If the multi-role delegation is terminating and no valid image metadata is found, abort the delegation resolution and return an error indicating that image metadata could not be found.</t>
      <t>If the delegation is a normal delegation, perform delegation resolution, starting at step 1. Note that this may recurse an arbitrary number of levels deep. If a delegation that applies to the image is found but no image metadata is found in the delegated roles or any of its sub-delegations, simply continue on with the next delegation in the list. The search is only completed or aborted if image metadata or a terminating delegation that applies to the image is found.</t>
    </list></t>
  <t>If the end of the list of delegations in the top-level metadata is reached without finding valid image metadata, return an error indicating that image metadata could not be found.</t>
</list></t>

</section>
<section anchor="multirole_delegations" title="Multi-role delegations">

<t>It is possible to delegate signing authority to multiple delegated roles as described in <xref target="TAP-3"/>. Each multi-role delegation effectively contains a list of ordinary delegations, plus a threshold of those roles that must be in agreement about the non-custom metadata for the image. All multi-role delegations MUST be resolved using the following procedure. Note that there may be sub-delegations inside multi-role delegations.</t>

<t><list style="numbers">
  <t>For each of the roles in the delegation, find and load the image metadata following the procedure in <xref target="resolve_delegations"/>.</t>
  <t>Inspect the non-custom part of the metadata loaded in step 1:
  <list style="numbers">
      <t>Locate all sets of roles that have agreeing (i.e., identical) non-custom metadata and “MUST match” custom metadata. Discard any set of roles with a size smaller than the threshold of roles that must be in agreement for this delegation.</t>
      <t>Check for a conflict. A conflict exists if there is more than one agreeing set of roles, yet each set has different metadata. If a conflict is found, choose and return the metadata from the set of roles which includes the earliest role in the multi-delegation list.</t>
      <t>If there is no conflict, check if there is any single set of roles with matching non-custom metadata. If there is, choose and return the metadata from this set.</t>
      <t>If no agreeing set can be found that meets the agreement threshold, return an error indicating that image metadata could not be found.</t>
    </list></t>
</list></t>

</section>
</section>
</section>
</section>


  </middle>

  <back>

    <references title='Normative References'>





<reference  anchor="RFC2119" target='https://www.rfc-editor.org/info/rfc2119'>
<front>
<title>Key words for use in RFCs to Indicate Requirement Levels</title>
<author initials='S.' surname='Bradner' fullname='S. Bradner'><organization /></author>
<date year='1997' month='March' />
<abstract><t>In many standards track documents several words are used to signify the requirements in the specification.  These words are often capitalized. This document defines these words as they should be interpreted in IETF documents.  This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t></abstract>
</front>
<seriesInfo name='BCP' value='14'/>
<seriesInfo name='RFC' value='2119'/>
<seriesInfo name='DOI' value='10.17487/RFC2119'/>
</reference>



<reference  anchor="RFC3647" target='https://www.rfc-editor.org/info/rfc3647'>
<front>
<title>Internet X.509 Public Key Infrastructure Certificate Policy and Certification Practices Framework</title>
<author initials='S.' surname='Chokhani' fullname='S. Chokhani'><organization /></author>
<author initials='W.' surname='Ford' fullname='W. Ford'><organization /></author>
<author initials='R.' surname='Sabett' fullname='R. Sabett'><organization /></author>
<author initials='C.' surname='Merrill' fullname='C. Merrill'><organization /></author>
<author initials='S.' surname='Wu' fullname='S. Wu'><organization /></author>
<date year='2003' month='November' />
<abstract><t>This document presents a framework to assist the writers of certificate policies or certification practice statements for participants within public key infrastructures, such as certification authorities, policy authorities, and communities of interest that wish to rely on certificates.  In particular, the framework provides a comprehensive list of topics that potentially (at the writer's discretion) need to be covered in a certificate policy or a certification practice statement.  This document supersedes RFC 2527.</t></abstract>
</front>
<seriesInfo name='RFC' value='3647'/>
<seriesInfo name='DOI' value='10.17487/RFC3647'/>
</reference>



<reference  anchor="RFC5198" target='https://www.rfc-editor.org/info/rfc5198'>
<front>
<title>Unicode Format for Network Interchange</title>
<author initials='J.' surname='Klensin' fullname='J. Klensin'><organization /></author>
<author initials='M.' surname='Padlipsky' fullname='M. Padlipsky'><organization /></author>
<date year='2008' month='March' />
<abstract><t>The Internet today is in need of a standardized form for the transmission of internationalized &quot;text&quot; information, paralleling the specifications for the use of ASCII that date from the early days of the ARPANET.  This document specifies that format, using UTF-8 with normalization and specific line-ending sequences.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='5198'/>
<seriesInfo name='DOI' value='10.17487/RFC5198'/>
</reference>


<reference anchor="NFC" target="https://www.unicode.org/reports/tr15/">
  <front>
    <title>Unicode Standard Annex #15: Unicode Normalization Forms</title>
    <author initials="M." surname="Davis">
      <organization></organization>
    </author>
    <author initials="M." surname="Duerst">
      <organization></organization>
    </author>
    <date year="2018" month="October"/>
  </front>
</reference>
<reference anchor="TAP-3" target="https://github.com/theupdateframework/taps/blob/d0818e580c322815a473520f2e8cc5f5eb8df499/tap3.md">
  <front>
    <title>The Update Framework TAP 3 - Multi-role delegations</title>
    <author initials="T.K." surname="Kuppusamy">
      <organization></organization>
    </author>
    <author initials="S." surname="Awwad">
      <organization></organization>
    </author>
    <author initials="E." surname="Cordell">
      <organization></organization>
    </author>
    <author initials="V." surname="Diaz">
      <organization></organization>
    </author>
    <author initials="J." surname="Moshenko">
      <organization></organization>
    </author>
    <author initials="J." surname="Cappos">
      <organization></organization>
    </author>
    <date year="2018" month="January" day="18"/>
  </front>
</reference>
<reference anchor="TAP-4" target="https://github.com/theupdateframework/taps/blob/2cb67d913ec19424d1e354b38f862886fbfd4105/tap4.md">
  <front>
    <title>The Update Framework TAP 4 - Multiple repository consensus on entrusted targets</title>
    <author initials="T.K." surname="Kuppusamy">
      <organization></organization>
    </author>
    <author initials="S." surname="Awwad">
      <organization></organization>
    </author>
    <author initials="E." surname="Cordell">
      <organization></organization>
    </author>
    <author initials="V." surname="Diaz">
      <organization></organization>
    </author>
    <author initials="J." surname="Moshenko">
      <organization></organization>
    </author>
    <author initials="J." surname="Cappos">
      <organization></organization>
    </author>
    <date year="2017" month="December" day="15"/>
  </front>
</reference>
<reference anchor="TAP-5" target="https://github.com/theupdateframework/taps/blob/01726d203c9b9c029d26f6612069ce3180500d9a/tap5.md#downloading-metadata-and-target-files">
  <front>
    <title>The Update Framework TAP 5 - Setting URLs for roles in the root metadata file</title>
    <author initials="T.K." surname="Kuppusamy">
      <organization></organization>
    </author>
    <author initials="S." surname="Awwad">
      <organization></organization>
    </author>
    <author initials="E." surname="Cordell">
      <organization></organization>
    </author>
    <author initials="V." surname="Diaz">
      <organization></organization>
    </author>
    <author initials="J." surname="Moshenko">
      <organization></organization>
    </author>
    <author initials="J." surname="Cappos">
      <organization></organization>
    </author>
    <date year="2018" month="January" day="22"/>
  </front>
</reference>
<reference anchor="TUF-spec" target="https://github.com/theupdateframework/specification/blob/2b4e18472fe25d5b57f36f6fa50104967c8faeaa/tuf-spec.md">
  <front>
    <title>The Update Framework Specification</title>
    <author initials="J." surname="Samuel">
      <organization></organization>
    </author>
    <author initials="N." surname="Mathewson">
      <organization></organization>
    </author>
    <author initials="G." surname="Condra">
      <organization></organization>
    </author>
    <author initials="V." surname="Diaz">
      <organization></organization>
    </author>
    <author initials="T.K." surname="Kuppusamy">
      <organization></organization>
    </author>
    <author initials="S." surname="Awwad">
      <organization></organization>
    </author>
    <author initials="S." surname="Tobias">
      <organization></organization>
    </author>
    <author initials="J." surname="Wright">
      <organization></organization>
    </author>
    <author initials="H." surname="Mehnert">
      <organization></organization>
    </author>
    <author initials="E." surname="Tryzelaar">
      <organization></organization>
    </author>
    <author initials="J." surname="Cappos">
      <organization></organization>
    </author>
    <author initials="R." surname="Dingledine">
      <organization></organization>
    </author>
    <date year="2018" month="September" day="19"/>
  </front>
</reference>


    </references>

    <references title='Informative References'>

<reference anchor="MERCURY" target="https://www.usenix.org/system/files/conference/atc17/atc17-kuppusamy.pdf">
  <front>
    <title>Mercury: Bandwidth-Effective Prevention of Rollback Attacks Against Community Repositories</title>
    <author initials="T.K." surname="Kuppusamy">
      <organization></organization>
    </author>
    <author initials="V." surname="Diaz">
      <organization></organization>
    </author>
    <author initials="J." surname="Cappos">
      <organization></organization>
    </author>
    <date year="2017" month="July" day="12"/>
  </front>
  <seriesInfo name="ISBN" value="978-1-931971-38-6"/>
</reference>
<reference anchor="UPTANEESCAR" target="https://ssl.engineering.nyu.edu/papers/kuppusamy_escar_16.pdf">
  <front>
    <title>Securing Software Updates for Automobiles</title>
    <author initials="T.K." surname="Kuppusamy">
      <organization></organization>
    </author>
    <author initials="A." surname="Brown">
      <organization></organization>
    </author>
    <author initials="S." surname="Awwad">
      <organization></organization>
    </author>
    <author initials="D." surname="McCoy">
      <organization></organization>
    </author>
    <author initials="R." surname="Bielawski">
      <organization></organization>
    </author>
    <author initials="C." surname="Mott">
      <organization></organization>
    </author>
    <author initials="S." surname="Lauzon">
      <organization></organization>
    </author>
    <author initials="A." surname="Weimerskirch">
      <organization></organization>
    </author>
    <author initials="J." surname="Cappos">
      <organization></organization>
    </author>
    <date year="2016" month="October" day="16"/>
  </front>
</reference>
<reference anchor="PEP-458" target="https://www.python.org/dev/peps/pep-0458/">
  <front>
    <title>PEP 458 -- Surviving a Compromise of PyPI</title>
    <author initials="T.K." surname="Kuppusamy">
      <organization></organization>
    </author>
    <author initials="V." surname="Diaz">
      <organization></organization>
    </author>
    <author initials="D." surname="Stufft">
      <organization></organization>
    </author>
    <author initials="J." surname="Cappos">
      <organization></organization>
    </author>
    <date year="2013" month="September" day="27"/>
  </front>
</reference>
<reference anchor="DEPLOY" target="https://uptane.github.io/deployment-considerations/index.html">
  <front>
    <title>Uptane Deployment Best Practices</title>
    <author initials="." surname="Members of the Uptane Community">
      <organization></organization>
    </author>
    <date year="n.d."/>
  </front>
</reference>
<reference anchor="USATODAY" target="https://www.usatoday.com/story/tech/columnist/2016/06/28/your-average-car-lot-more-code-driven-than-you-think/86437052/">
  <front>
    <title>Your average car is a lot more code-driven than you think</title>
    <author initials="B." surname="O'Donnell">
      <organization></organization>
    </author>
    <date year="2016" month="June" day="28"/>
  </front>
</reference>
<reference anchor="CR-OTA" target="https://www.consumerreports.org/automotive-technology/automakers-embrace-over-the-air-updates-can-we-trust-digital-car-repair/">
  <front>
    <title>Automakers Embrace Over-the-Air Updates, but Can We Trust Digital Car Repair?</title>
    <author initials="K." surname="Barry">
      <organization></organization>
    </author>
    <date year="2018" month="April" day="20"/>
  </front>
</reference>
<reference anchor="IN-TOTO" target="https://in-toto.io/">
  <front>
    <title>in-toto: A framework to secure the integrity of software supply chains</title>
    <author >
      <organization></organization>
    </author>
    <date year="2018" month="October" day="29"/>
  </front>
</reference>


    </references>



  </back>

<!-- ##markdown-source:
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
jcItbmPiK0SjXiiSnxqPv+YyUq+1obvI5j5dg9i2UJKFBe4PDbnfY+0eNjjA
mt+UIp847u5WB4eK87WjgAQiB6BdBc69YYtOJ3mS+qohX2F+KTJqG5Pa7hzc
FZC8DmhoYlVTIv28ZBMi38jcEbdybgdAZL/jG0WOS4YVOL3rImsvfdh3YJHU
IBMcpOl4fUlfFmQS1cf1EmVtz5itLKmw0C3qiOdTjThs4kr6klTOEBYnLrsw
fV53riK3L1LCVN1lx5DssCB1jOMvu2fu1x8tioS66EZFGgYFV3BDKJp4ovXi
fh2+GYNYy/di8E6RcOVouK/a7rMGb5n1+a0lkgkU3uAz3fy5lZHVCy/CLgaH
SsfwPDs8Ojp4PEp8YWyphy8lJ7jsdbDcsDC0jt+bq63TaMD5yEaY24l6gw9w
yKA6dcdV2Wkj2rgYgzA8KXJXCv/RcYNMeQ96efnHps8HxVE4OCY5rvQbY0u7
6buO78pmr/ZK7x2joCI6v/HlixUOTKpH32De4S7ms+B+igSuu2GTqbuCPQET
ePmCtZDLpefF/3/X/nvcNQ9SD59vQ+rzSxsizQVUWI3xRSEouWcocEV31nIk
zVgKSfambrNHO6rqu9dbqIe84uTZomAHMQmy4cAtPFAK5CphOr6oGpZp0dQR
tl/DnXVRo3LMnWCgr4wpItLFEaV8X7gdB+G1csyNunBcW6aw7wKvgXtCcU6Q
NajG8uAtbGlhBVKNW71BKcQG2h2dsE+G5asQ2VhYioiM3L1Txzrl5zv9KmXf
1J2QaFcjXUJVaAbVutMeT0FFclSXePc4UratvtAax0NK7dbVdwfq8cVJbe+B
lpqkt53yx85tLiaMLErhkHthKZrJn7BhffRKJ3VN5WLTWjC65lrgcaJ50lKc
j9pFAwXqSTNMXI0DMgmpAkLZGMbpvRlqdtmXpf3FubsV8JdUqZ/ClDOvbAqp
Yw38orjSaDFtcIzdZHGUoFr0bhNUBguyL/c4lsnZfeRwc3KEEVAdOeSJyAKE
uawXUcVQR8g5L0I1WRrDeNNtOqTi6U12k893umYTl4Ed2JSJ0iHocBpM6e0N
jmDloPaWB2dwRzvFTCoQKm3m15foiLjIQ+1kuM5oW3k1UreksSxs5/VrJiu5
6TjTma+kYAJOHjAsjl90BhKHLT7l7852u5LAtWNW6iMBtBucXM7Jty0Ihr/F
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
jA55LqXsPDY41PlT6Pv/BeQNNKzpNgEA

-->

</rfc>


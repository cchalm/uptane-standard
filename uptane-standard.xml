<?xml version="1.0" encoding="UTF-8"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc2629 version 1.2.9 -->

<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
]>

<?rfc toc="yes"?>
<?rfc sortrefs="yes"?>
<?rfc symrefs="yes"?>

<rfc ipr="noDerivativesTrust200902" docName="uptane-standard-design" category="info">

  <front>
    <title abbrev="UPTANE">Uptane Standard for Design and Implementation</title>

    <author initials="." surname="Members of the Uptane Community" fullname="Uptane Community">
      <organization>Joint Development Foundation Projects, LLC, Uptane Series (c/o Prof. Justin Cappos)</organization>
      <address>
        <postal>
          <street>6 MetroTech</street>
          <city>Brooklyn</city>
          <region>NY</region>
          <code>11201</code>
          <country>USA</country>
        </postal>
        <email>uptane-standards@googlegroups.com</email>
      </address>
    </author>

    <date year="2021" month="July" day="15"/>

    <area>TODO</area>
    <workgroup>TODO</workgroup>
    <keyword>Internet-Draft</keyword>

    <abstract>


<t>This document describes a framework for securing ground vehicle software update systems.</t>



    </abstract>


  </front>

  <middle>


<section anchor="introduction" title="Introduction">

<t>Uptane is a secure software update framework for ground vehicles. This document describes procedures to enable programmers for OEMs and suppliers to securely design and implement this framework in a manner that better protects connected units on ground vehicles. Integrating Uptane as outlined in the sections that follow can reduce the ability of attackers to compromise critical systems. It also assures a faster and easier recovery process should a compromise occur.</t>

<t>These instructions specify the components necessary for a compliant implementation. Individual implementers can make their own technological choices within those requirements. This flexibility makes Uptane adaptable to the many customized update solutions used by manufacturers. If implementers wish to have compatible formats, they may use POUFs. POUFs contain a description of implementation choices as well as data binding formats. An implementer who adopts a POUF, as well as the Uptane Standard, will be able to interoperate with other implementations using that POUF.</t>

</section>
<section anchor="terminology" title="Terminology">

<section anchor="conformance-terminology" title="Conformance terminology">

<t>The keywords MUST, MUST NOT, REQUIRED, SHALL, SHALL NOT, SHOULD, SHOULD NOT, RECOMMENDED, MAY, and OPTIONAL in this document are to be interpreted as described in <xref target="RFC2119"/>.</t>

<t>In order to be considered Uptane-compliant, an implementation MUST follow all of these rules as specified in the document.</t>

</section>
<section anchor="terminology-1" title="Terminology">

<t>For definitions of terms used in this Standard, please refer to the <eref target="https://uptane.github.io/deployment-considerations/glossary.html">glossary</eref> in the Deployment Best Practices.</t>

</section>
<section anchor="uptane-role-terminology" title="Uptane role terminology">

<t>These terms are defined in greater detail in <xref target="roles"/>.</t>

<t><spanx style="emph">Delegation</spanx>: A process by which the responsibility of signing metadata about images is assigned to another party.
<spanx style="emph">Role</spanx>: A party (human or machine) responsible for signing a certain type of metadata. The role controls keys and is responsible for signing metadata entrusted to it with these keys. The roles mechanism of Uptane allows the system to distribute signing responsibilities so that the compromise of one key does not necessarily impact the security of the entire system.</t>

<t><list style="symbols">
  <t><spanx style="emph">Root role</spanx>: Signs metadata that distributes and revokes public keys used to verify the Root, Timestamp, Snapshot, and Targets role metadata.</t>
  <t><spanx style="emph">Snapshot role</spanx>: Signs metadata that indicates which images the repository has released at the same time.</t>
  <t><spanx style="emph">Targets role</spanx>: Signs metadata used to verify the image, such as cryptographic hashes and file size.</t>
  <t><spanx style="emph">Timestamp role</spanx>: Signs metadata that indicates if there are any new metadata or images on the repository.</t>
</list></t>

</section>
<section anchor="acronyms-and-abbreviations" title="Acronyms and abbreviations">

<t><spanx style="emph">CDN</spanx>: Content Delivery Network</t>

<t><spanx style="emph">ECUs</spanx>: Electronic Control Units, the computing units on a vehicle</t>

<t><spanx style="emph">LIN Bus</spanx>: Local Interconnect Bus</t>

<t><spanx style="emph">OBD</spanx>: On-board diagnostics</t>

<t><spanx style="emph">SOTA</spanx>: Software Updates Over-the-Air</t>

<t><spanx style="emph">UDS</spanx>: Unified Diagnostic Services</t>

<t><spanx style="emph">VIN</spanx>: Vehicle Identification Number</t>

</section>
</section>
<section anchor="rationale-for-and-scope-of-the-uptane-standard" title="Rationale for and scope of the Uptane Standard">

<t>This Standard document provides the essential components for the secure design, implementation, and deployment of Uptane by OEMs and suppliers. These guidelines contribute to compromise resilience, or the ability to minimize the extent of the threat posed by any given attack.</t>

<t>However, this specification is intended as an implementation guide, and not as a detailed technical argument about the security properties that Uptane provides.  Readers interested in such documentation should refer to published papers that cover this topic.  <xref target="UPTANEESCAR"/></t>

<section anchor="why-uptane-requires-a-standards-document" title="Why Uptane requires a standards document">

<t>A standards document that can guide the safe design, integration, and deployment of Uptane in vehicles is needed at this time because:</t>

<t><list style="symbols">
  <t>The number of connected units on the average vehicle continues to grow, with mainstream cars now containing up to 100 million lines of code. <xref target="USATODAY"/></t>
  <t>The expanded use of software over-the-air strategies creates new attack surfaces for malicious parties. <xref target="CR-OTA"/></t>
  <t>Legacy update strategies, such as SSL/TLS or GPG/RSA, are not feasible for use on vehicle ECUs because they force manufacturers to chose between enhanced security and customizability.</t>
  <t>Conventional strategies are also complicated by the differing resources of the ECUs, which can vary greatly in memory, storage space, and Internet connectivity.</t>
  <t>The design of Uptane makes it possible to offer improved design flexibility without sacrificing security.</t>
  <t>This added design flexibility, however, could be a liability if the framework is implemented incorrectly.</t>
  <t>Standardization of crucial steps in the design, implementation, and use of Uptane can assure that customizability does not impact security or functionality.</t>
</list></t>

</section>
<section anchor="scope-of-standard-coverage" title="Scope of Standard coverage">

<t>This document sets guidelines for implementing Uptane in most systems capable of updating software on connected units in ground vehicles, including passenger vehicles, light-duty trucks, heavy-duty trucks, and motorcycles. Uptane could potentially also be applied to other ground vehicles, such as automated shuttles, recreational vehicles, and military ground vehicles. Uptane could even be applied to domains such as IoT devices, medical devices, and autonomous aerial vehicles. In this section, we define the scope of that applicability by providing sample use cases and possible exceptions, aspects of software update security that are not applicable to Uptane, and the design requirements governing the preparation of these standards.</t>

<section anchor="assumptions" title="Assumptions">

<t>We assume the following system preconditions for Uptane:</t>

<t><list style="symbols">
  <t>Vehicles have the ability to establish connectivity to required backend services. For example, this could be done through cellular, Wi-Fi, or hard-wired mechanisms.</t>
  <t>ECUs are either directly connected to the communication channel, or are indirectly connected via some sort of network gateway.</t>
  <t>ECUs are programmable and provide sufficient performance to be updated.</t>
  <t>ECUs must be able to perform public key cryptography operations and calculate hashes of images and metadata files.</t>
  <t>There are state-of-the-art secure servers in place, such as the Director and Image repository servers.</t>
</list></t>

<t>It is important that any bugs detected in Uptane implementations be patched promptly. Failure to do so could interfere with the effectiveness of Uptane’s operations.</t>

</section>
<section anchor="use-cases" title="Use cases">

<t>The following use cases provide a number of scenarios illustrating the manner in which software updates could be accomplished using Uptane.</t>

<section anchor="oems-initializing-uptane-at-the-factory-using-sota" title="OEMs initializing Uptane at the factory using SOTA">

<t>An OEM plans to install Uptane on new vehicles. This entails the following components: code to perform full and partial verification, the latest copy of the relevant metadata, the public keys, and an accurate attestation of the latest time. The OEM then either requires its tier-1 suppliers to provide these materials to the suppliers’ assembly lines or can choose to add the materials later at the OEM’s assembly lines. The OEM’s in-vehicle implementation is Uptane-compliant if:</t>

<t><list style="numbers">
  <t>all Primaries perform full verification;</t>
  <t>all Secondaries that are updated via OTA at least perform partial verification; and</t>
  <t>all other ECUs that do not perform any type of verification cannot be updated via OTA.</t>
</list></t>

</section>
<section anchor="updating-one-ecu-with-a-complete-image" title="Updating one ECU with a complete image">

<t>A tier-1 supplier completes work on a revised image for an electronic brake control module. This module will control the brakes on all models of an SUV produced by the OEM mentioned above. Assuming supplier delegation is supported by the OEM for this ECU, each tier-1 supplier digitally signs the image, then delivers the signature, all of its metadata, including delegations, and associated images to the OEM. The OEM adds these metadata and images to its Image repository, along with information about any dependencies and conflicts between this image and those for other ECUs used in the OEM’s vehicles. The OEM also updates the inventory database, so that the Director repository can instruct the ECU on how to install these updated images.</t>

</section>
<section anchor="updating-individual-ecus-on-demand" title="Updating individual ECUs on demand">

<t>An OEM has issued a recall to address a problem with a keyless entry device that has been locking people out of their cars. The OEM prepares an updated flash image in the manner described above. The OEM then ships USB flash drives to vehicle owners and dealerships that allow those parties to update the firmware of their vehicles.</t>

</section>
<section anchor="update-one-ecu-with-multiple-deltas" title="Update one ECU with multiple deltas">

<t>The OEM wants to use delta updates to save over-the-air bytes. The delta images contain only the code and/or data that has changed from the previous image version. To do so, the OEM must first modify the Director repository, using the vehicle version manifest and dependency resolution to determine the differences between the previous and latest images. The OEM then adds the following to the custom Targets metadata used by the Director repository: (1) the algorithm used to apply a delta image, and (2) the Targets metadata about the delta image. The OEM will also check whether the delta images match the Targets metadata from the Director repository.</t>

</section>
</section>
</section>
<section anchor="exceptions" title="Exceptions">

<t>There are a number of factors that could impede the completion of the above scenarios:</t>

<t><list style="symbols">
  <t>ECUs may be lacking the necessary resources to function as designated. These insufficient resources could include limited CPU or RAM inadequate for performance of public key cryptography; a lack of sufficient storage to undo installation of bad software; or a location on a low-speed network (e.g., LIN).</t>
  <t>ECUs may reside on different network segments, and may not be able to directly reach each other, requiring a gateway to facilitate communication.</t>
  <t>A user may replace OEM-installed ECUs with aftermarket ECUs.</t>
  <t>A vehicle may be able to download only a limited amount of data via a cellular channel due to limits on a data plan.</t>
  <t>A system may lack sufficient power to download or install software updates.</t>
  <t>Vehicles may be offline for extended periods of time, thus missing required updates (e.g., key rotations).</t>
  <t>OEMs may be unwilling to implement costly security or hardware requirements.</t>
</list></t>

</section>
<section anchor="out-of-scope" title="Out of scope">

<t>The following topics will not be addressed in this document, as they represent threats outside the scope of Uptane:</t>

<t><list style="symbols">
  <t>Physical attacks, such as manual tampering with ECUs outside the vehicle.</t>
  <t>Compromise of the packaged software, such as malware embedded in a trusted package.</t>
  <t>Compromise of the supply chain (e.g., build system, version control system, packaging process). A number of strategies (e.g., git signing, TPMs, in-toto <xref target="IN-TOTO"/>)  already exist to address this problem. Therefore, there is no need to duplicate those techniques here.</t>
  <t>Problems associated with OBD or UDS programming of ECUs, such as authentication of communications between ECUs.</t>
  <t>Malicious mirrors of package repositories, which may substitute original packages with malicious packages with matching version numbers <xref target="MERCURY"/>.</t>
</list></t>

</section>
<section anchor="design-requirements" title="Design requirements">

<t>The design requirements for this document are governed by the following principal parameters:</t>

<t><list style="symbols">
  <t>to clearly mandate the design and implementation steps that are security critical and must be followed as is, while offering flexibility in the implementation of non-critical steps. In this manner, users can adapt to support different use models and deployment scenarios.</t>
  <t>to ensure that, if Uptane is implemented, the security practices mandated or suggested in this document do not interfere with the functionality of ECUs, vehicles, or the systems that maintain them.</t>
  <t>to delineate guidelines to ensure that, should any part of the SOTA mechanism of a vehicle be attacked, an attacker must compromise two or more modules to breach the SOTA mechanism.</t>
</list></t>

</section>
</section>
<section anchor="threat-model-and-attack-strategies" title="Threat model and attack strategies">

<t>The overarching goal of Uptane is to provide a system that is resilient in the face of various types of compromise. In this section, we describe the goals an attacker may have (<xref target="attacker_goals"/>) and the capabilities they may have or could develop (<xref target="capabilities"/>). We then describe and classify types of attacks on the system according to the attacker’s goals (<xref target="threats"/>).</t>

<section anchor="attacker_goals" title="Attacker goals">

<t>We assume that attackers may want to achieve one or more of the following goals, in increasing order of severity:</t>

<t><list style="symbols">
  <t>Read the contents of updates to discover confidential information, reverse-engineer firmware, or compare two firmware images to identify security fixes and hence determine the fixed security vulnerability.</t>
  <t>Deny installation of updates to prevent vehicles from fixing software problems.</t>
  <t>Cause one or more ECUs in the vehicle to fail, denying use of the vehicle or of certain functions.</t>
  <t>Control ECUs within the vehicle, and possibly the vehicle itself.</t>
</list></t>

</section>
<section anchor="capabilities" title="Attacker capabilities">

<t>Uptane is designed with resilience to compromise in mind. We assume that attackers may develop one or more of the following capabilities:</t>

<t><list style="symbols">
  <t>Intercept and modify network traffic (i.e., perform man-in-the-middle attacks). This capability may be developed in two domains:
  <list style="symbols">
      <t>Outside the vehicle, intercepting and modifying traffic between the vehicle and software repositories.</t>
      <t>Inside the vehicle, intercepting and modifying traffic on one or more vehicle buses (e.g., via an OBD port or using a compromised ECU as a vector).</t>
    </list></t>
  <t>Compromise and control either a Director repository or Image repository server, and any keys stored on that repository, but not both the Director and Image repositories.</t>
  <t>Compromise either a Primary ECU or a Secondary ECU, but not both in the same vehicle.</t>
</list></t>

</section>
<section anchor="threats" title="Description of threats">

<t>Uptane’s threat model includes the following types of attacks, organized according to the attacker goals listed in <xref target="attacker_goals"/>.</t>

<section anchor="read_updates" title="Read updates">

<t><list style="symbols">
  <t><spanx style="emph">Eavesdrop attack:</spanx> Read sensitive or confidential information from an update intended to be encrypted for a specific ECU. (Note: Not all implementations will have a need to protect information in this way.)</t>
</list></t>

</section>
<section anchor="deny_updates" title="Deny installation of updates">

<t>An attacker seeking to deny the installation of updates may attempt one or more of the following strategies:</t>

<t><list style="symbols">
  <t><spanx style="emph">Drop-request attack:</spanx> Block network traffic outside or inside the vehicle.</t>
  <t><spanx style="emph">Slow retrieval attack:</spanx> Slow down network traffic, in the extreme case sending barely enough packets to avoid a timeout. Similar to a drop-request attack, except that both the sender and receiver of the traffic still think network traffic is unimpeded.</t>
  <t><spanx style="emph">Freeze attack:</spanx> Continue to send a properly signed, but old, update bundle to the ECUs, even if newer updates exist.</t>
  <t><spanx style="emph">Partial bundle installation attack:</spanx> Install a valid (signed) update bundle, and then block selected updates within the bundle.</t>
  <t>Conduct a denial of service attack against the Uptane repositories or infrastructure.</t>
</list></t>

</section>
<section anchor="change_functionality" title="Interfere with ECU functionality">

<t>Attackers seeking to interfere with the functionality of vehicle ECUs in order to cause an operational failure or unexpected behavior may do so in one of the following ways:</t>

<t><list style="symbols">
  <t><spanx style="emph">Rollback attack:</spanx> Cause an ECU to install a previously valid software revision that is older than the currently installed version.</t>
  <t><spanx style="emph">Endless data attack:</spanx> Send a large amount of data to an ECU until it runs out of storage, possibly causing the ECU to fail to operate.</t>
  <t><spanx style="emph">Mix-and-match attack:</spanx> Install a malicious software bundle in which some of the updates do not interoperate properly. This may be accomplished even if all of the individual images being installed are valid, as long as valid versions exist that are mutually incompatible.</t>
</list></t>

</section>
<section anchor="control_ecu" title="Control an ECU or vehicle">

<t>Full control of a vehicle, or one or more ECUs within a vehicle, is the most severe threat.</t>

<t><list style="symbols">
  <t><spanx style="emph">Arbitrary software attack:</spanx> Cause an ECU to install and run arbitrary code of the attacker’s choice.</t>
</list></t>

</section>
</section>
</section>
<section anchor="design" title="Detailed design of Uptane">

<t>Uptane does not specify implementation details. Instead, this Standard describes the components necessary for a compliant implementation and leaves it up to individual implementers to make their own technological choices within those requirements.</t>

<t>At a high level, Uptane requires:</t>

<t><list style="symbols">
  <t>Two software repositories:
  <list style="symbols">
      <t>An Image repository containing binary images to install and signed metadata about those images.</t>
      <t>A Director repository connected to an inventory database that can sign metadata on demand for images in the Image repository.</t>
    </list></t>
  <t>Repository tools for generating Uptane-specific metadata about images.</t>
  <t>A public key infrastructure supporting the required metadata production and signing roles on each repository:
  <list style="symbols">
      <t>Root - The certificate authority for the Uptane ecosystem. Distributes public keys for verifying all the other roles’ metadata.</t>
      <t>Timestamp - Indicates whether there are new metadata or images.</t>
      <t>Snapshot - Indicates images released by the repository at a point in time via signing metadata about Targets metadata.</t>
      <t>Targets - Indicates metadata about images, such as hashes and file sizes.</t>
    </list></t>
  <t>A secure way for ECUs to know the time.</t>
  <t>An ECU capable of downloading images and associated metadata from the Uptane servers.</t>
  <t>An in-vehicle client on a Primary ECU capable of verifying the signatures on all update metadata and downloading updates on behalf of its associated Secondary ECUs. The Primary ECU MAY be the same ECU that communicates with the server.</t>
  <t>A client or library on each Secondary ECU capable of performing either full or partial verification of metadata.</t>
</list></t>

<section anchor="roles" title="Roles on repositories">

<t>A repository contains images and metadata. Each role has a particular type of metadata associated with it, as described in <xref target="meta_structures"/>.</t>

<section anchor="root_role" title="The Root role">

<t>A repository’s Root role SHALL be responsible for a Certificate Authority as defined in <xref target="RFC3647"/>.
A repository’s Root role SHALL produce and sign Root metadata as described in <xref target="root_meta"/>.
A repository’s Root role SHALL sign the public keys used to verify the metadata produced by the Timestamp, Snapshot, and Targets roles.
A repository’s Root role SHALL revoke keys for the other roles if they are compromised.</t>

</section>
<section anchor="targets_role" title="The Targets role">

<t>A repository’s Targets role SHALL produce and sign metadata about images and delegations as described in <xref target="targets_meta"/>.</t>

<section anchor="targets_role_delegations" title="Delegations">

<t>The Targets role on the Image repository MAY delegate the responsibility of signing metadata to other, custom-defined roles referred to as delegated targets. If it does, it MUST do so as specified in <xref target="delegations_meta"/>.</t>

<t>As responsibility for signing images or a subset of images MAY be delegated to more than one role, it is possible that two different roles will be trusted to sign a particular image. For this reason, delegations MUST be prioritized.</t>

<t>A particular delegation for a subset of images MAY be designated as <spanx style="strong">terminating</spanx>. For terminating delegations, the client SHALL NOT search any further if it does not find validly signed metadata about those images. Delegations SHOULD NOT be terminating by default; terminating delegations SHOULD only be used when there is a compelling technical reason to do so.</t>

<t>A delegation for a subset of images MAY be a multi-role delegation <xref target="TAP-3"/>. A multi-role delegation indicates that multiple roles are needed to sign a particular image and each of the delegatee roles MUST sign the same metadata.</t>

<t>Delegations only apply to the Image repository. The Targets role on the Director repository MUST NOT delegate metadata signing responsibility.</t>

</section>
</section>
<section anchor="snapshot_role" title="The Snapshot role">

<t>A repository’s Snapshot role SHALL produce and sign metadata about all Targets metadata the repository releases, including the current version number of the top-level Targets metadata, and the version numbers of all delegated Targets metadata, as described in <xref target="snapshot_meta"/>.</t>

</section>
<section anchor="timestamp_role" title="The Timestamp role">

<t>A repository’s Timestamp role SHALL produce and sign metadata indicating whether there are new metadata or images on the repository. It MUST do so by signing the metadata about the Snapshot metadata file.</t>

</section>
</section>
<section anchor="meta_structures" title="Metadata structures">

<t>Uptane’s security guarantees all rely on properly created metadata that follows a designated structure. The Uptane Standard <spanx style="strong">does not</spanx> mandate any particular format or encoding for the metadata as a whole. ASN.1 (with any encoding scheme like BER, DER, XER, etc.), JSON, XML, or any other encoding format that is capable of providing the required structure MAY be used.</t>

<t>However, string comparison is required as part of metadata verification. To ensure an accurate basis for comparing strings, all strings MUST be encoded in the Unicode Format for Network Interchange as defined in <xref target="RFC5198"/>, including normalization into Unicode Normalization Form C (<xref target="NFC"/>).</t>

<t>In the <spanx style="emph">Deployment Best Practices</spanx> (<xref target="DEPLOY"/>), Joint Development Foundation Projects, LLC, Uptane Series provides some examples of compliant metadata structures in ASN.1 and JSON.</t>

<section anchor="common_metadata" title="Common metadata structures">

<t>Every public key MUST be represented using a public key identifier.  A public key identifier is EITHER all of the following:</t>

<t><list style="symbols">
  <t>The value of the public key itself (which MAY be, for example, formatted as a PEM string)</t>
  <t>The public key cryptographic algorithm used by the key (such as RSA or ECDSA)</t>
  <t>The particular scheme used to verify the signature (such as <spanx style="verb">rsassa-pss-sha256</spanx> or <spanx style="verb">ecdsa-sha2-nistp256</spanx>)</t>
</list></t>

<t>OR a secure hash over at least the above components (such as the keyid mechanism in TUF).</t>

<t>All four Uptane roles (Root, Targets, Snapshot, and Timestamp) share a common structure. They SHALL contain the following two attributes:</t>

<t><list style="symbols">
  <t>A payload of metadata to be signed</t>
  <t>An attribute containing the signature(s) of the payload, where each entry specifies:
  <list style="symbols">
      <t>The public key identifier of the key being used to sign the payload</t>
      <t>A signature with this key over the payload</t>
    </list></t>
</list></t>

<t>The payload differs depending on the role. However, the payload for all roles shares a common structure. It SHALL contain the following four attributes:</t>

<t><list style="symbols">
  <t>An indicator of the type of role (Root, Targets, Snapshot, or Timestamp)</t>
  <t>An expiration date and time</t>
  <t>An integer version number, which SHOULD be incremented each time the metadata file is updated</t>
  <t>The role-specific metadata for the role indicated</t>
</list></t>

<t>The following sections describe the role-specific metadata. All roles SHALL follow the common structures described here.</t>

</section>
<section anchor="root_meta" title="Root metadata">

<t>A repository’s Root metadata distributes the public keys of the top-level Root, Targets, Snapshot, and Timestamp roles, as well as revocations of those keys. It SHALL contain two attributes:</t>

<t><list style="symbols">
  <t>A representation of the public keys for all four roles. Each key SHALL have a unique public key identifier.</t>
  <t>An attribute mapping each role to (1) its public key(s), and (2) the threshold of signatures required for that role.</t>
</list></t>

</section>
<section anchor="targets_meta" title="Targets metadata">

<t>The Targets metadata on a repository contains all of the information about images to be installed on ECUs. This includes filenames, hashes, and file sizes. It MAY also include other useful information, such as what types of hardware are compatible with a particular image.</t>

<t>Targets metadata can also contain metadata about delegations, allowing one Targets role to delegate its authority to another. This means that an individual Targets metadata file might contain only metadata about delegations, only metadata about images, or some combination of the two. The details of how ECUs traverse the delegation tree to find valid metadata about images is specified in <xref target="resolve_delegations"/>.</t>

<section anchor="targets_images_meta" title="Metadata about images">

<t>To be available to install on clients, all images on the repository MUST have their metadata listed in a Targets role.  Each Targets role MAY provide a list of some images on the repository.  This list MUST provide, at a minimum, the following information about each image:</t>

<t><list style="symbols">
  <t>The image filename</t>
  <t>The size of the image in bytes</t>
  <t>One or more hashes of the image file, along with the hashing function used</t>
</list></t>

<t>If there are no images included in the Targets metadata from the Director repository, then the metadata SHOULD include a vehicle identifier in order to avoid a replay attack.</t>

<section anchor="custom-metadata-about-images" title="Custom metadata about images">

<t>In addition to what is required, Targets metadata files MAY contain extra metadata for images on the repository. This metadata can be customized for a particular use case. Examples of use cases for different types of custom metadata can be found in the <spanx style="emph">Deployment Best Practices</spanx> document (<xref target="DEPLOY"/>). However, there are a few important pieces of custom metadata that SHOULD be present in most implementations. In addition, there is one element in the custom metadata that MUST be present in the Targets metadata from the Director.</t>

<t>Custom metadata MAY also contain a demarcated field or section that MUST match whenever two pieces of metadata are checked against each other, such as when Targets metadata from the Director repository is checked against Targets metadata from the Image repository.</t>

<t>The information listed below SHOULD be provided for each image on both the Image repository and the Director repository. If a “MUST match section” is to be implemented, that is where this information SHOULD be placed.</t>

<t><list style="symbols">
  <t>A release counter, to be incremented each time a new version of the image is released. This can be used to prevent rollback attacks even in cases where the Director repository is compromised.</t>
  <t>A hardware identifier, or list of hardware identifiers, representing models of ECUs with which the image is compatible. This can be used to ensure that an ECU cannot be ordered to install an incompatible image, even in cases where the Director repository is compromised.</t>
</list></t>

<t>The following information is CONDITIONALLY REQUIRED for each image on the Director repository IF that image is encrypted:</t>

<t><list style="symbols">
  <t>Information about filenames, hashes, and file size of the encrypted image.</t>
  <t>Information about the encryption method, and other relevant information–for example, a symmetric encryption key encrypted by the ECU’s asymmetric key could be included in the Director repository metadata.</t>
</list></t>

<t>The following information MUST be provided from the Director repository for each image in the Targets metadata:</t>

<t><list style="symbols">
  <t>An ECU identifier (such as a serial number), specifying the ECU that should install the image.</t>
</list></t>

<t>The Director repository MAY provide a download URL for the image file. This may be useful, for example, when the image is on a public CDN and the Director wishes to provide a signed URL.</t>

</section>
</section>
<section anchor="delegations_meta" title="Metadata about delegations">

<t>A Targets metadata file on the Image repository (but not the Director repository) MUST be able to delegate signing authority to other entities. For example, it could delegate signing authority for a particular ECU’s firmware to that ECU’s supplier. A metadata file MAY contain any number of delegations and MUST keep the delegations in prioritized order.</t>

<t>Any metadata file with delegations MUST provide the following information:</t>

<t><list style="symbols">
  <t>A list of public keys of all delegatees. Each key should have a unique public key identifier and a key type.</t>
  <t>A list of delegations, each of which contains:
  <list style="symbols">
      <t>A list of the filenames to which this role applies. This MAY be expressed using wildcards, or by enumerating a list, or a combination of the two.</t>
      <t>An optional list of the hardware identifiers to which this role applies.  If this is omitted, any hardware identifier will match.</t>
      <t>An indicator of whether or not this is a terminating delegation. (See <xref target="targets_role_delegations"/>.)</t>
      <t>A list of the roles to which this delegation applies. Each role needs to specify:
      <list style="symbols">
          <t>A name for the role (e.g., “supplier1-qa”)</t>
          <t>The key identifiers for each key this role uses</t>
          <t>A threshold of keys that must sign for this role</t>
        </list></t>
    </list></t>
</list></t>

<t>Note that <spanx style="strong">any</spanx> Targets metadata file stored on the Image repository may contain delegations, and these delegations can be in chains of arbitrary length.</t>

</section>
</section>
<section anchor="snapshot_meta" title="Snapshot metadata">

<t>The Snapshot metadata lists version numbers and filenames of all Targets metadata files. It protects against mix-and-match attacks if a delegated supplier key is compromised.</t>

<t>For each Targets metadata file on the repository, the Snapshot metadata SHALL contain the following information:</t>

<t><list style="symbols">
  <t>The filename and version number of the Targets metadata file.</t>
</list></t>

<t>The Snapshot metadata MAY also list the Root metadata filename and version number for the purpose of backwards compatibility. Historically, this was a requirement in TUF, but it is no longer required and does not provide a significant security benefit.</t>

</section>
<section anchor="timestamp_meta" title="Timestamp metadata">

<t>The Timestamp metadata SHALL contain the following information:</t>

<t><list style="symbols">
  <t>The filename and version number of the latest Snapshot metadata on the repository.</t>
  <t>One or more hashes of the Snapshot metadata file, along with the hashing function used.</t>
</list></t>

</section>
<section anchor="repo_mapping_meta" title="Repository mapping metadata">

<t>As described in the introduction to <xref target="design"/>, Uptane requires a Director repository and an Image repository. However, it is possible to have an Uptane-compliant implementation that has more than two repositories.</t>

<t>Repository mapping metadata informs a Primary ECU about which repositories to trust for images or image paths. <xref target="TAP-4"/> describes how to make use of more complex repository mapping metadata in order to have more than the two required repositories.</t>

<t>Repository mapping metadata, or the equivalent informational content, MUST be present on all Primary ECUs, and MUST contain the following information:</t>

<t><list style="symbols">
  <t>A list of repository names and one or more URLs at which the named repository can be accessed. At a minimum, this MUST include the Director and Image repositories.</t>
  <t>A list of mappings of image paths to repositories, each of which contains:
  <list style="symbols">
      <t>A list of image paths. Image paths MAY be expressed using wildcards, or by enumerating a list, or a combination of the two.</t>
      <t>A list of repositories that MUST provide signed Targets metadata for images stored at those paths.</t>
    </list></t>
</list></t>

<t>For example, in the most basic Uptane case, the repository mapping metadata would contain:</t>

<t><list style="symbols">
  <t>The name and URL of the Director repository.</t>
  <t>The name and URL of the Image repository.</t>
  <t>A single mapping indicating that all images (<spanx style="verb">*</spanx>) MUST be signed by both the Director and Image repository.</t>
</list></t>

<t>Note that the metadata need not be in the form of a metadata file. For example, in the basic case where there is only one Director and one Image repository, and all images need to have signed metadata from both repositories, it would be sufficient to have a configuration file with URLs for the two repositories and a client that always checks for metadata matches between them. In this case, no explicit mapping would be defined, because the mapping is defined as part of the Uptane client implementation.</t>

<t>The <spanx style="emph">Uptane Deployment Best Practices</spanx> document (<xref target="DEPLOY"/>) provides more guidance on how to implement repository mapping metadata for more complex use cases. It also discusses strategies for updating repository mapping metadata, if required.</t>

</section>
<section anchor="metadata_filename_rules" title="Rules for filenames in repositories and metadata">

<t>There is a difference between the filename in a metadata file or an ECU, and the filename on a repository. This difference exists in order to avoid race conditions, where metadata and images are read from, and written to, at the same time. For more details, the reader should read the TUF specification <xref target="TUF-spec"/> and PEP 458 <xref target="PEP-458"/>.</t>

<t>Unless stated otherwise, all files SHALL be written to repositories in accordance with the following two rules:</t>

<t><list style="numbers">
  <t>Metadata filenames SHALL be qualified with version numbers. If a metadata file A is specified as FILENAME.EXT in another metadata file B, then it SHALL be written as VERSION.FILENAME.EXT, where VERSION is A’s version number, as defined in <xref target="common_metadata"/>, with one exception: If the version number of the Timestamp metadata file might not be known in advance by a client, it MAY be read from, and written to, a repository using a filename without a version number qualification, i.e., FILENAME.EXT.</t>
  <t>If an image is specified in a Targets metadata file as FILENAME.EXT, it SHALL be written to the repository as HASH.FILENAME.EXT, where HASH is one of the hash digests of the file, as specified in <xref target="targets_images_meta"/>. The file MUST be written to the repository using <spanx style="emph">n</spanx> different filenames, one for each hash digest listed in its corresponding Targets metadata.</t>
</list></t>

<t>For example:</t>

<t><list style="symbols">
  <t>The version number of the Snapshot metadata file is 61, and its filename in the Timestamp metadata is <spanx style="emph">snapshot.json</spanx>. The filename on the repository will be <spanx style="emph">61.snapshot.json</spanx>.</t>
  <t>There is an image with the <spanx style="emph">filename acme_firmware.bin</spanx> specified in the Targets metadata, with a SHA3-256 of <spanx style="emph">aaaa</spanx> and a SHA-512/224 of <spanx style="emph">bbbb</spanx>. It will have two filenames on the repository: <spanx style="emph">aaaa.acme_firmware.bin</spanx> and <spanx style="emph">bbbb.acme_firmware.bin</spanx>.</t>
</list></t>

</section>
</section>
<section anchor="server-repository-implementation-requirements" title="Server / repository implementation requirements">

<t>An Uptane implementation SHALL make the following services available to vehicles:</t>

<t><list style="symbols">
  <t>Image repository</t>
  <t>Director repository</t>
</list></t>

<t>Additionally, an Uptane implementation requires ECUs to have a secure way to know the current time.</t>

<section anchor="image-repository" title="Image repository">

<t>The Image repository exists to allow an OEM and/or its suppliers to upload images and their associated metadata. It makes these images and their metadata available to vehicles. The Image repository is designed to be primarily controlled by human actors, and updated relatively infrequently.</t>

<t>The Image repository SHALL expose an interface permitting the download of metadata and images. This interface SHOULD be public.</t>

<t>The Image repository SHALL require authorization for writing metadata and images.</t>

<t>The Image repository SHALL provide a method for authorized users to upload images and their associated metadata. It SHALL check that a user writing metadata and images is authorized to do so for that specific image by checking the chain of delegations as described in <xref target="delegations_meta"/>.</t>

<t>The Image repository SHALL implement storage which permits authorized users to write an image file using a unique filename, and later read the same file using the same name. It MAY use any filesystem, key-value store, or database that fulfills this requirement.</t>

<t>The Image repository MAY require authentication for read access.</t>

</section>
<section anchor="director_repository" title="Director repository">

<t>The Director repository instructs ECUs as to which images should be installed by producing signed metadata on demand. Unlike the Image repository, it is mostly controlled by automated, online processes. It also consults a private inventory database containing information on vehicles, ECUs, and software revisions.</t>

<t>The Director repository SHALL expose an interface for Primaries to upload vehicle version manifests (<xref target="vehicle_version_manifest"/>) and download metadata. This interface SHOULD be public.
The Director MAY encrypt images for ECUs that require them, either by encrypting on-the-fly or by storing encrypted images on the repository.</t>

<t>The Director repository SHALL implement storage which permits an automated service to write generated metadata files. It MAY use any filesystem, key-value store, or database that fulfills this requirement.</t>

<section anchor="directing-installation-of-images-on-vehicles" title="Directing installation of images on vehicles">

<t>A Director repository MUST conform to the following six-step process for directing the installation of software images on a vehicle.</t>

<t><list style="numbers">
  <t>The Director SHOULD first identify the vehicle. This MAY be done when the Director receives a vehicle version manifest sent by a Primary (as described in <xref target="construct_manifest_primary"/>), decodes the manifest, and determines the unique vehicle identifier. Additionally, the Director MAY utilize other mechanisms to uniquely identify a vehicle (e.g., 2-way TLS with unique client certificates).</t>
  <t>Using the vehicle identifier, the Director queries its inventory database (as described in <xref target="inventory_db"/>) for relevant information about each ECU in the vehicle.</t>
  <t>The Director SHALL check the manifest for accuracy compared to the information in the inventory database. If any of the required checks fail, the Director MAY drop the request. An implementer MAY make additional checks if desired. At a minimum, the Director SHALL check the following:
  <list style="symbols">
      <t>Each ECU recorded in the inventory database is also represented in the manifest.</t>
      <t>The signature of the manifest matches the ECU key of the Primary that sent it.</t>
      <t>The signature of each Secondary’s contribution to the manifest matches the ECU key of that Secondary.</t>
    </list></t>
  <t>The Director SHOULD check that the nonce or counter in each ECU version report has not been used before to prevent a replay of the ECU version report. If the nonce or counter is reused the Director SHOULD drop the request.</t>
  <t>The Director extracts information about currently installed images from the vehicle version manifest. Using this information, it determines if the vehicle is already up-to-date, and if not, determines a set of images that should be installed. The exact process by which this determination takes place is out of scope for this Standard. However, the Director MUST take into account <spanx style="emph">dependencies</spanx> and <spanx style="emph">conflicts</spanx> between images and SHOULD consult well-established techniques for dependency resolution.</t>
  <t>The Director MAY encrypt images for ECUs that require it.</t>
  <t>The Director generates new metadata representing the desired set of images to be installed on the vehicle, based on the dependency resolution in step 4. This includes Targets (<xref target="targets_meta"/>), Snapshot (<xref target="snapshot_meta"/>), and Timestamp (<xref target="timestamp_meta"/>) metadata. It then sends this metadata to the Primary as described in <xref target="download_meta_primary"/>.</t>
</list></t>

</section>
<section anchor="inventory_db" title="Inventory Database">

<t>The Director SHALL use a private inventory database to store information about ECUs and vehicles. An implementer MAY use any durable database for this purpose.</t>

<t>The inventory database MUST record the following pieces of information:</t>

<t><list style="symbols">
  <t>Per vehicle:
  <list style="symbols">
      <t>A unique identifier (such as a VIN)</t>
    </list></t>
  <t>Per ECU:
  <list style="symbols">
      <t>A unique identifier (such as a serial number)</t>
      <t>The vehicle identifier the ECU is associated with</t>
      <t>An ECU key (symmetric or asymmetric; for asymmetric keys, only the public part SHOULD be stored)</t>
      <t>The ECU key identifier (as defined in <xref target="common_metadata"/>)</t>
      <t>Whether the ECU is a Primary or a Secondary</t>
    </list></t>
</list></t>

<t>The inventory database MAY record other information about ECUs and vehicles. It SHOULD record a hardware identifier for each ECU to protect against the possibility of directing the ECU to install incompatible firmware.</t>

</section>
</section>
</section>
<section anchor="in-vehicle-implementation-requirements" title="In-vehicle implementation requirements">

<t>An Uptane-compliant ECU SHALL be able to download and verify image metadata and image binaries before installing a new image and MUST have a secure way of verifying the current time, or a sufficiently recent attestation of the time.</t>

<t>All ECUs SHOULD monitor the download speed of image metadata and image binaries to detect and respond to a slow retrieval attack. If the download is slower than a pre-defined threshold, the ECU SHOULD send an alert to the Director repository, for example as part of the next vehicle version manifest.</t>

<t>Each ECU receiving over-the-air updates in a vehicle is either a Primary or a Secondary ECU. A Primary ECU collects and delivers to the Director vehicle manifests (<xref target="vehicle_version_manifest"/>) that contain information about which images have been installed on ECUs in the vehicle. It also verifies the time, and downloads and verifies the latest metadata and images for itself and for its Secondaries. A Secondary ECU verifies the time, and downloads and verifies the latest metadata and images for itself from its associated Primary ECU. It also sends signed information about its installed images to its associated Primary.</t>

<t>All ECUs MUST verify image metadata as specified in <xref target="metadata_verification"/> before installing an image or making it available to other ECUs. A Primary ECU MUST perform full verification (<xref target="full_verification"/>). A Secondary ECU SHOULD perform full verification if possible. If a Secondary cannot perform full verification, it SHALL, at the very least, perform partial verification. In addition, it MAY also perform some steps from the full verification process. See the <spanx style="emph">Uptane Deployment Best Practices</spanx> document (<xref target="DEPLOY"/>) for a discussion of how to choose between partial and full verification.</t>

<t>ECUs MUST have a secure source of time. An OEM/Uptane implementer MAY use any external source of time that is demonstrably secure. The <spanx style="emph">Uptane Deployment Best Practices</spanx> document (<xref target="DEPLOY"/>) describes one way to implement an external time server to cryptographically attest time, as well as the security properties required.</t>

<section anchor="build-time-prerequisite-requirements-for-ecus" title="Build-time prerequisite requirements for ECUs">

<t>For an ECU to be capable of receiving Uptane-secured updates, it MUST have the following data provisioned at the time it is manufactured or installed in the vehicle:</t>

<t><list style="numbers">
  <t>A sufficiently recent copy of required Uptane metadata at the time of manufacture or install. This is necessary for the ECU to authenticate that the remote repository is legitimate when it first downloads metadata in the field. See <spanx style="emph">Uptane Deployment Best Practices</spanx> (<xref target="DEPLOY"/>) for more information.
  <list style="symbols">
      <t>Partial verification Secondary ECUs MUST have the Root and Targets metadata from the Director repository (to reduce the scope of rollback and replay attacks). These ECUs MAY also have metadata from other roles or the Image repository if they will be used by the Secondary.</t>
      <t>Full verification ECUs MUST have a complete set of metadata (Root, Targets, Snapshot, and Timestamp) from both repositories (to prevent rollback and replay attacks), as well as the repository mapping metadata (<xref target="repo_mapping_meta"/>). Delegations are not required.</t>
    </list></t>
  <t>The current time, or a secure attestation of a sufficiently recent time.</t>
  <t>An <spanx style="strong">ECU key</spanx>. This is a private key, unique to the ECU, used to sign ECU version reports and decrypt images. An ECU key MAY be either a symmetric key or an asymmetric key. If it is an asymmetric key, there MAY be separate keys for encryption and signing. For the purposes of this Standard, the set of private keys that an ECU uses is referred to as the ECU key (singular), even if it is actually multiple keys used for different purposes.</t>
</list></t>

</section>
<section anchor="what-the-primary-does" title="What the Primary does">

<t>A Primary downloads, verifies, and distributes the latest time, metadata, and images. To do so, it SHALL perform the following seven steps:</t>

<t><list style="numbers">
  <t>Construct and send vehicle version manifest (<xref target="construct_manifest_primary"/>)</t>
  <t>Download and check current time (<xref target="check_time_primary"/>)</t>
  <t>Download and verify metadata (<xref target="download_meta_primary"/>)</t>
  <t>Download and verify images (<xref target="download_images_primary"/>)</t>
  <t>OPTIONAL: Send latest time to Secondaries (<xref target="send_time_primary"/>)</t>
  <t>Send metadata to Secondaries (<xref target="send_metadata_primary"/>)</t>
  <t>Send images to Secondaries (<xref target="send_images_primary"/>)</t>
</list></t>

<t>Note that the subsequent sections concerning requirements for a Primary do not prohibit implementing Primary capabilities on an ECU that does not communicate directly with the Uptane repositories. This allows for implementations to have multiple ECUs within the vehicle performing functions equivalent to a Primary.
If multiple such Primaries are included within a vehicle, each Secondary ECU SHALL have a single Primary responsible for providing its updates.</t>

<section anchor="construct_manifest_primary" title="Construct and send vehicle version manifest">

<t>The Primary SHALL build a <spanx style="emph">vehicle version manifest</spanx> as described in <xref target="vehicle_version_manifest"/>.</t>

<t>Once the complete manifest is built, the Primary MAY send the manifest to the Director repository. However, it is not strictly required that the Primary send the manifest until step three. If permitted by the implementation, a Primary MAY send only a diff of the manifest to save bandwidth. If an implementation permits diffs, the Director SHOULD have a way to request a full manifest.</t>

<t>Secondaries MAY send their version report at any time so that it is already stored on the Primary when it wishes to check for updates. Alternatively, the Primary MAY request a version report from each Secondary at the time of the update check.</t>

<section anchor="vehicle_version_manifest" title="Vehicle version manifest">

<t>The vehicle version manifest is a metadata structure that MUST contain the following information:</t>

<t><list style="symbols">
  <t>An attribute containing the signature(s) of the payload, each specified by:
  <list style="symbols">
      <t>The public key identifier of the key being used to sign the payload</t>
      <t>The signing method (i.e., ed25519, rsassa-pss, etc.)</t>
      <t>A hash of the payload to be signed</t>
      <t>The hashing function used (i.e., SHA3-256, SHA-512/224, etc.)</t>
      <t>The signature of the hash</t>
    </list></t>
  <t>A payload representing the installed versions of each software image on the vehicle. This payload SHALL contain:
  <list style="symbols">
      <t>The vehicle’s unique identifier (e.g., the VIN)</t>
      <t>The Primary ECU’s unique identifier (e.g., the serial number)</t>
      <t>A list of ECU version reports as specified in <xref target="version_report"/></t>
    </list></t>
</list></t>

<t>Note that one of the ECU version reports should be the version report for the Primary itself.</t>

</section>
<section anchor="version_report" title="ECU version report">

<t>An ECU version report is a metadata structure that MUST contain the following information:</t>

<t><list style="symbols">
  <t>An attribute containing the signature(s) of the payload, each specified by:
  <list style="symbols">
      <t>The public key identifier of the key being used to sign the payload</t>
      <t>The signing method (i.e., ed25519, rsassa-pss, etc.)</t>
      <t>A hash of the payload to be signed</t>
      <t>The hashing function used (i.e., SHA3-256, SHA-512/224, etc.)</t>
      <t>The signature of the hash</t>
    </list></t>
  <t>A payload containing:
  <list style="symbols">
      <t>The ECU’s unique identifier (e.g., the serial number)</t>
      <t>The filename, length, and hashes of its currently installed image (i.e., the non-custom Targets metadata for this particular image)</t>
      <t>An indicator of any detected security attack</t>
      <t>The latest time the ECU can verify at the time this version report was generated</t>
      <t>A nonce or counter to prevent a replay of the ECU version report. This value MUST change each update cycle. It MAY be a cryptographic nonce used with a time server as described in <spanx style="emph">Uptane Deployment Best Practices</spanx>  (<xref target="DEPLOY"/>).</t>
    </list></t>
</list></t>

</section>
</section>
<section anchor="check_time_primary" title="Download and check current time">

<t>The Primary SHALL load the current time from a secure source.</t>

</section>
<section anchor="download_meta_primary" title="Download and verify metadata">

<t>The Primary SHALL download metadata for all targets and perform a full verification on it as specified in <xref target="full_verification"/>.</t>

</section>
<section anchor="download_images_primary" title="Download and verify images">

<t>The Primary SHALL download and verify images for itself and for all of its associated Secondaries. Images SHALL be verified by checking that the hash of the image file matches the hash specified in the Director’s Targets metadata for that image.</t>

<t>There may be several different filenames that all refer to the same image binary, as described in <xref target="metadata_filename_rules"/>. If the Primary has received multiple hashes for a given image binary via the Targets role (see <xref target="targets_images_meta"/>) then it SHALL verify every hash for this image even though the image is identified by a single hash as part of its filename.</t>

</section>
<section anchor="send_time_primary" title="Send latest time to Secondaries">

<t>Unless the Secondary ECU has its own way of verifying the time or does not have the capacity to verify a time message, the Primary is CONDITIONALLY REQUIRED to send the time to each ECU. The Secondary will verify the time message, then overwrite its current time with the received time.</t>

</section>
<section anchor="send_metadata_primary" title="Send metadata to Secondaries">

<t>The Primary SHALL send its latest downloaded metadata to all of its associated Secondaries. The metadata it sends to each Secondary MUST include all of the metadata required for verification on that Secondary. For full verification Secondaries, this includes the metadata for all four roles from both repositories, plus any delegated Targets metadata files the Secondary will recurse through to find the proper delegation. For partial verification Secondaries, this MAY include fewer metadata files; at a minimum, it includes only the Targets metadata file from the Director repository.</t>

<t>The Primary SHOULD determine the minimal set of metadata files to send to each Secondary by performing delegation resolution as described in <xref target="full_verification"/>.</t>

<t>Each Secondary SHALL store the latest copy of all metadata required for its own verification.</t>

</section>
<section anchor="send_images_primary" title="Send images to Secondaries">

<t>The Primary SHALL send the latest image to each of its associated Secondaries that have sufficient storage to receive it.</t>

<t>For Secondaries without sufficient storage to store a copy of the image, the Primary SHOULD wait for a request from the Secondary to stream the new image file to it. The Secondary will send the request once it has verified the metadata sent in the previous step.</t>

</section>
</section>
<section anchor="installing-images-on-primary-or-secondary-ecus" title="Installing images on Primary or Secondary ECUs">

<t>An ECU SHALL perform the following steps when attempting to install a new image:</t>

<t><list style="numbers">
  <t>Verify latest attested time. This is optional if the ECU does not have the capacity to verify a time message (<xref target="verify_time"/>)</t>
  <t>Verify metadata (<xref target="verify_metadata"/>)</t>
  <t>Download latest image (<xref target="download_image"/>)</t>
  <t>Verify image (<xref target="verify_image"/>)</t>
  <t>Install image (<xref target="install_image"/>)</t>
  <t>Create and send version report (<xref target="create_version_report"/>)</t>
</list></t>

<section anchor="verify_time" title="Load and verify the latest attested time">

<t>IF the ECU has the capability to verify a time message, the ECU is CONDITIONALLY REQUIRED to load and verify the current time, or the most recent securely attested time.</t>

</section>
<section anchor="verify_metadata" title="Verify metadata">

<t>The ECU SHALL verify the latest downloaded metadata (<xref target="metadata_verification"/>) using either full or partial verification. If the metadata verification fails for any reason, the ECU SHALL jump to the final step (<xref target="create_version_report"/>).</t>

</section>
<section anchor="download_image" title="Download latest image">

<t>If the ECU has limited secondary storage, i.e., insufficient buffer storage to temporarily store the latest image before installing it, it SHALL download the latest image from the Primary. (If the ECU has sufficient secondary storage, it will already have the latest image in its secondary storage as specified in <xref target="send_images_primary"/>, and should skip to the next step.) The ECU MAY first create a backup of its previous working image and store it elsewhere (e.g., the Primary).</t>

<t>The filename used to identify the latest known image (i.e., the file to request from the Primary) SHALL be determined as follows:</t>

<t><list style="numbers">
  <t>Load the Targets metadata file from the Director repository.</t>
  <t>Find the Targets metadata associated with this ECU identifier.</t>
  <t>Construct the Image filename using the rule in <xref target="metadata_filename_rules"/>, or use the download URL specified in the Director metadata.</t>
  <t>If there is no Targets metadata about this image, abort the update cycle and report that there is no such image. Additionally, in the case of failure, the ECU SHALL retain its previous Targets metadata instead of using the new Targets metadata. Otherwise, download the image (up to the number of bytes specified in the Targets metadata) and verify it according to <xref target="verify_image"/>.</t>
</list></t>

<t>When the Primary responds to the download request, the ECU SHALL overwrite its current image with the downloaded image from the Primary.</t>

<t>If any part of this step fails, the ECU SHALL jump to the final step (<xref target="create_version_report"/>).</t>

</section>
<section anchor="verify_image" title="Verify image">

<t>The ECU SHALL verify that the latest image matches the latest metadata as follows:</t>

<t><list style="numbers">
  <t>Load the latest Targets metadata file from the Director.</t>
  <t>Find the Targets metadata associated with this ECU identifier.</t>
  <t>Check that the hardware identifier in the metadata matches the ECU’s hardware identifier.</t>
  <t>Check that the image filename is valid for this ECU. This MAY be a comparison against a wildcard path, which restricts the ECUs to which a delegation will apply.</t>
  <t>Check that the release counter of the image in the previous metadata, if it exists, is less than or equal to the release counter in the latest metadata.</t>
  <t>If the image is encrypted, decrypt the image with a decryption key to be chosen as follows:
  <list style="symbols">
      <t>If the ECU key is a symmetric key, the ECU SHALL use the ECU key for image decryption.</t>
      <t>If the ECU key is asymmetric, the ECU SHALL check the Targets metadata for an encrypted symmetric key. If such a key is found, the ECU SHALL decrypt the symmetric key using its ECU key, and use the decrypted symmetric key for image decryption.</t>
      <t>If the ECU key is asymmetric and there is no symmetric key in the Targets metadata, the ECU SHALL use its ECU key for image decryption.</t>
    </list></t>
  <t>Check that all hashes listed in the metadata match the corresponding hashes of the image.</t>
</list></t>

<t>If the ECU has enough secondary storage capacity to store the image, the checks SHOULD be performed on the image in secondary storage before it is installed.</t>

<t>When checking hashes, the ECU SHOULD additionally check that the length of the image matches the length listed in the metadata.</t>

<t>NOTE: Verifying image size along with the hashes will become a requirement in a future version of the Uptane Standard.</t>

<t>NOTE: See <xref target="DEPLOY"/> for guidance on how to deal with Secondary ECU failures for ECUs that have limited secondary storage.</t>

<t>If any step fails, the ECU SHALL jump to the final step (<xref target="create_version_report"/>).</t>

</section>
<section anchor="install_image" title="Install image">

<t>The ECU SHALL attempt to install the update. This installation SHOULD occur at a time when all pre-conditions are met. These pre-conditions MAY include ensuring the vehicle is in a safe environment for install (e.g., the vehicle is parked when updating a specific ECU). Another pre-condition MAY include ensuring the ECU has a backup of its current image and metadata in case the current installation fails.</t>

</section>
<section anchor="create_version_report" title="Create and send version report">

<t>The ECU SHALL create a version report as described in <xref target="version_report"/>, and send it to the Primary (or simply save it to disk, if the ECU is a Primary). The Primary SHOULD write the version reports it receives to disk and associate them with the Secondaries that sent them.</t>

</section>
</section>
<section anchor="metadata_verification" title="Metadata verification procedures">

<t>A Primary ECU MUST perform full verification of metadata. A Secondary ECU SHOULD perform full verification of metadata. If a Secondary cannot perform full verification, it SHALL, at the very least, perform partial verification.</t>

<t>If a step in the following workflows does not succeed (e.g., the update is aborted because a new metadata file was not signed), an ECU SHOULD still be able to update again in the future. Errors raised during the update process SHOULD NOT leave ECUs in an unrecoverable state.</t>

<section anchor="partial_verification" title="Partial verification">

<t>In order to perform partial verification, an ECU SHALL perform the following steps:</t>

<t><list style="numbers">
  <t>Load and verify the current time or the most recent securely attested time.</t>
  <t>Download and check the Targets metadata file from the Director repository, following the procedure in <xref target="check_targets"/>.</t>
</list></t>

<t>Note that this verification procedure is the smallest set of Uptane checks permissible for an Uptane Secondary ECU. An ECU MAY additionally implement more metadata checks.</t>

<t>For example, an ECU MAY also fetch and verify Root metadata from the Director (following the procedure in <xref target="check_root"/>) before checking Targets metadata. Performing this additional check would provide the ECU with a secure way to receive and validate a rotation of the Director’s Targets key.</t>

<t>See <xref target="DEPLOY"/> for more discussion on this topic.</t>

</section>
<section anchor="full_verification" title="Full verification">

<t>Full verification of metadata means that the ECU checks that the Targets metadata about images from the Director repository matches the Targets metadata about the same images from the Image repository. This provides resilience to a key compromise in the system.</t>

<t>Full verification MUST be performed by Primary ECUs and SHOULD be performed by Secondary ECUs. In the following instructions, whenever an ECU is directed to download metadata, it applies only to Primary ECUs.</t>

<t>Before starting full verification, the repository mapping metadata MUST be consulted to determine where to download metadata from. This procedure assumes the basic Uptane case: there are only two repositories (Director and Image), and all image paths are required to be signed by both repositories. If a more complex repository layout is being used, refer to <xref target="DEPLOY"/> for guidance on how to determine where metadata should be downloaded from.</t>

<t>In order to perform full verification, an ECU SHALL perform the following steps:</t>

<t><list style="numbers">
  <t>Load and verify the current time or the most recent securely attested time.</t>
  <t>Download and check the Root metadata file from the Director repository, following the procedure in <xref target="check_root"/>.</t>
  <t>Download and check the Timestamp metadata file from the Director repository, following the procedure in <xref target="check_timestamp"/>.</t>
  <t>Check the previously downloaded Snapshot metadata file from the Directory repository (if available). If the hashes and version number of that file match the hashes and version number listed in the new Timestamp metadata, there are no new updates and the verification process MAY be stopped and considered complete. Otherwise, download and check the Snapshot metadata file from the Director repository, following the procedure in <xref target="check_snapshot"/>.</t>
  <t>Download and check the Targets metadata file from the Director repository, following the procedure in <xref target="check_targets"/>.</t>
  <t>If the Targets metadata from the Directory repository indicates that there are no new targets that are not already currently installed, the verification process MAY be stopped and considered complete. Otherwise, download and check the Root metadata file from the Image repository, following the procedure in <xref target="check_root"/>.</t>
  <t>Download and check the Timestamp metadata file from the Image repository, following the procedure in <xref target="check_timestamp"/>.</t>
  <t>Check the previously downloaded Snapshot metadata file from the Image repository (if available). If the hashes and version number of that file match the hashes and version number listed in the new Timestamp metadata, the ECU MAY skip to the last step. Otherwise, download and check the Snapshot metadata file from the Image repository, following the procedure in <xref target="check_snapshot"/>.</t>
  <t>Download and check the top-level Targets metadata file from the Image repository, following the procedure in <xref target="check_targets"/>.</t>
  <t>Verify that Targets metadata from the Director and Image repositories match. A Primary ECU MUST perform this check on metadata for all images listed in the Targets metadata file from the Director repository downloaded in step 6. A Secondary ECU MAY elect to perform this check only on the metadata for the image it will install. (That is, the image metadata from the Director that contains the ECU identifier of the current ECU.) To check that the metadata for an image matches, complete the following procedure:
  <list style="numbers">
      <t>Locate and download a Targets metadata file from the Image repository that contains an image with exactly the same filename listed in the Director metadata, following the procedure in <xref target="resolve_delegations"/>.</t>
      <t>Check that the Targets metadata from the Image repository matches the Targets metadata from the Director repository:
      <list style="numbers">
          <t>Check that the non-custom metadata (i.e., length and hashes) of the unencrypted or encrypted image are the same in both sets of metadata. Note: the Primary is responsible for validating encrypted images and associated metadata. The target ECU (Primary or Secondary) is responsible for validating the unencrypted image and associated metadata.</t>
          <t>Check that all MUST match custom metadata (e.g., hardware identifier and release counter) are the same in both sets of metadata.</t>
          <t>Check that the release counter in the previous Targets metadata file is less than or equal to the release counter in this Targets metadata file.</t>
        </list></t>
    </list></t>
</list></t>

<t>If any step fails, the ECU MUST return an error code indicating the failure. If a check for a specific type of security attack fails (i.e., rollback, freeze, arbitrary software, etc.), the ECU SHOULD return an error code that indicates the type of attack.</t>

</section>
<section anchor="check_root" title="How to check Root metadata">

<t>To properly check Root metadata, an ECU SHOULD:</t>

<t><list style="numbers">
  <t>Load the previous Root metadata file.</t>
  <t>Update to the latest Root metadata file.
  <list style="numbers">
      <t>Let N denote the version number of the latest Root metadata file (which at first could be the same as the previous Root metadata file).</t>
      <t>Try downloading a new version N+1 of the Root metadata file, up to some X number of bytes. The value for X is set by the implementer. For example, X may be tens of kilobytes. The filename used to download the Root metadata file is of the fixed form VERSION_NUMBER.FILENAME.EXT (e.g., 42.root.json). If this file is not available, the current Root metadata file is the latest; continue with step 3.</t>
      <t>Version N+1 of the Root metadata file MUST have been signed by the following: (1) a threshold of unique keys specified in the latest Root metadata file (version N), and (2) a threshold of unique keys specified in the new Root metadata file being validated (version N+1). If version N+1 is not signed as required, discard it, abort the update cycle, and report the signature failure. On the next update cycle, begin at version N of the Root metadata file. (Checks for an arbitrary software attack.)</t>
      <t>The version number of the latest Root metadata file (version N) must be less than or equal to the version number of the new Root metadata file (version N+1). Effectively, this means checking that the version number signed in the new Root metadata file is indeed N+1. If the version of the new Root metadata file is less than the latest metadata file, discard it, abort the update cycle, and report the rollback attack. On the next update cycle, begin at step 1 and version N of the Root metadata file. (Checks for a rollback attack.)</t>
      <t>Set the latest Root metadata file to the new Root metadata file.</t>
      <t>Repeat steps 2.1 to 2.6.</t>
    </list></t>
  <t>Check that the current (or latest securely attested) time is lower than the expiration timestamp in the latest Root metadata file. (Checks for a freeze attack.)</t>
  <t>If the Timestamp and/or Snapshot keys have been rotated, delete the previous Timestamp and Snapshot metadata files. (Checks for recovery from fast-forward attacks <xref target="MERCURY"/>.)</t>
</list></t>

</section>
<section anchor="check_timestamp" title="How to check Timestamp metadata">

<t>To properly check Timestamp metadata, an ECU SHOULD:</t>

<t><list style="numbers">
  <t>Download up to Y number of bytes. The value for Y is set by the implementer. For example, Y may be tens of kilobytes. The filename used to download the Timestamp metadata file is of the fixed form FILENAME.EXT (e.g., timestamp.json).</t>
  <t>Check that it has been signed by the threshold of unique keys specified in the latest Root metadata file. If the new Timestamp metadata file is not properly signed, discard it, abort the update cycle, and report the signature failure. (Checks for an arbitrary software attack.)</t>
  <t>Check that the version number of the previous Timestamp metadata file, if any, is less than or equal to the version number of this Timestamp metadata file. If the new Timestamp metadata file is older than the trusted Timestamp metadata file, discard it, abort the update cycle, and report the potential rollback attack. (Checks for a rollback attack.)</t>
  <t>Check that the current (or latest securely attested) time is lower than the expiration timestamp in this Timestamp metadata file. If the new Timestamp metadata file has expired, discard it, abort the update cycle, and report the potential freeze attack. (Checks for a freeze attack.)</t>
</list></t>

</section>
<section anchor="check_snapshot" title="How to check Snapshot metadata">

<t>To properly check Snapshot metadata, an ECU SHOULD:</t>

<t><list style="numbers">
  <t>Download up to the number of bytes specified in the Timestamp metadata file, constructing the metadata filename as defined in <xref target="metadata_filename_rules"/>.</t>
  <t>The hashes and version number of the new Snapshot metadata file MUST match the hashes and version number listed in the Timestamp metadata. If the hashes and version number do not match, discard the new Snapshot metadata, abort the update cycle, and report the failure. (Checks for a mix-and-match attack.)</t>
  <t>Check that it has been signed by the threshold of unique keys specified in the latest Root metadata file. If the new Snapshot metadata file is not signed as required, discard it, abort the update cycle, and report the signature failure. (Checks for an arbitrary software attack.)</t>
  <t>Check that the version number of the previous Snapshot metadata file, if any, is less than or equal to the version number of this Snapshot metadata file. If this Snapshot metadata file is older than the previous Snapshot metadata file, discard it, abort the update cycle, and report the potential rollback attack. (Checks for a rollback attack.)</t>
  <t>Check that the version number listed by the previous Snapshot metadata file for each Targets metadata file is less than or equal to its version number in this Snapshot metadata file. If this condition is not met, discard the new Snapshot metadata file, abort the update cycle, and report the failure. (Checks for a rollback attack.)</t>
  <t>Check that each Targets metadata filename listed in the previous Snapshot metadata file is also listed in this Snapshot metadata file. If this condition is not met, discard the new Snapshot metadata file, abort the update cycle, and report the failure. (Checks for a rollback attack.)</t>
  <t>Check that the current (or latest securely attested) time is lower than the expiration timestamp in this Snapshot metadata file. If the new Snapshot metadata file is expired, discard it, abort the update cycle, and report the potential freeze attack. (Checks for a freeze attack.)</t>
</list></t>

</section>
<section anchor="check_targets" title="How to check Targets metadata">

<t>To properly check Targets metadata, an ECU SHOULD:</t>

<t><list style="numbers">
  <t>Download up to Z number of bytes, constructing the metadata filename as defined in <xref target="metadata_filename_rules"/>. The value for Z is set by the implementer. For example, Z may be tens of kilobytes.</t>
  <t>The version number of the new Targets metadata file MUST match the version number listed in the latest Snapshot metadata. If the version number does not match, discard it, abort the update cycle, and report the failure. (Checks for a mix-and-match attack.) This step MAY be skipped when checking Targets metadata on a partial verification ECU, as these ECUs might not have Snapshot metadata.</t>
  <t>Check that the Targets metadata has been signed by the threshold of unique keys specified in the relevant metadata file. (Checks for an arbitrary software attack.):
  <list style="numbers">
      <t>If checking top-level Targets metadata, the threshold of keys is specified in the Root metadata.</t>
      <t>If checking delegated Targets metadata, the threshold of keys is specified in the Targets metadata file that delegated authority to this role.</t>
    </list></t>
  <t>Check that the version number of the previous Targets metadata file, if any, is less than or equal to the version number of this Targets metadata file. (Checks for a rollback attack.)</t>
  <t>Check that the current (or latest securely attested) time is lower than the expiration timestamp in this Targets metadata file. (Checks for a freeze attack.)</t>
  <t>If checking Targets metadata from the Director repository, verify that there are no delegations.</t>
  <t>If checking Targets metadata from the Director repository, check that no ECU identifier is represented more than once.</t>
  <t>If checking Targets metadata from the Director repository, and the ECU performing the verification is the Primary ECU, check that all listed ECU identifiers correspond to ECUs that are actually present in the vehicle.</t>
</list></t>

</section>
<section anchor="resolve_delegations" title="How to resolve delegations">

<t>To properly check Targets metadata for an image, an ECU MUST locate the metadata file(s) for the role (or roles) that have the authority to sign the image. This metadata might be located in the top-level Targets metadata, but it may also be delegated to another role or to multiple roles. Therefore, all delegations MUST be resolved using the following recursive procedure, beginning with the top-level Targets metadata file.</t>

<t><list style="numbers">
  <t>Download and check the current metadata file, following the procedure in <xref target="check_targets"/>. If the file cannot be loaded, or if any verification step fails, abort the delegation resolution, and indicate that image metadata cannot be found because of a missing or invalid role.</t>
  <t>If the current metadata file contains signed metadata about the image, end the delegation resolution and return the metadata to be checked.</t>
  <t>If the current metadata file was reached via a terminating delegation and does not contain signed metadata about the image, abort the delegation resolution for this image and return an error indicating that image metadata could not be found.</t>
  <t>Search the list of delegations, in listed order. For each delegation:
  <list style="numbers">
      <t>Check if the delegation applies to the image being processed. For the delegation to apply, it MUST include the hardware identifier of the target, and the target name MUST match one of the delegation’s image paths. If either of these tests fail, move on to the next delegation in the list.</t>
      <t>If the delegation is a multi-role delegation, follow the procedure described in <xref target="multirole_delegations"/>. If the multi-role delegation is terminating and no valid image metadata is found, abort the delegation resolution and return an error indicating that image metadata could not be found.</t>
      <t>If the delegation is a normal delegation, perform delegation resolution, starting at step 1. Note that this may recurse an arbitrary number of levels deep. If a delegation that applies to the image is found but no image metadata is found in the delegated roles or any of its sub-delegations, simply continue on with the next delegation in the list. The search is only completed or aborted if image metadata or a terminating delegation that applies to the image is found.</t>
    </list></t>
  <t>If the end of the list of delegations in the top-level metadata is reached without finding valid image metadata, return an error indicating that image metadata could not be found.</t>
</list></t>

</section>
<section anchor="multirole_delegations" title="Multi-role delegations">

<t>It is possible to delegate signing authority to multiple delegated roles as described in <xref target="TAP-3"/>. Each multi-role delegation effectively contains a list of ordinary delegations, plus a threshold of those roles that must be in agreement about the non-custom metadata for the image. All multi-role delegations MUST be resolved using the following procedure. Note that there may be sub-delegations inside multi-role delegations.</t>

<t><list style="numbers">
  <t>For each of the roles in the delegation, find and load the image metadata following the procedure in <xref target="resolve_delegations"/>.</t>
  <t>Inspect the non-custom part of the metadata loaded in step 1:
  <list style="numbers">
      <t>Locate all sets of roles that have agreeing (i.e., identical) non-custom metadata and “MUST match” custom metadata. Discard any set of roles with a size smaller than the threshold of roles that must be in agreement for this delegation.</t>
      <t>Check for a conflict. A conflict exists if there is more than one agreeing set of roles, yet each set has different metadata. If a conflict is found, choose and return the metadata from the set of roles which includes the earliest role in the multi-delegation list.</t>
      <t>If there is no conflict, check if there is any single set of roles with matching non-custom metadata. If there is, choose and return the metadata from this set.</t>
      <t>If no agreeing set can be found that meets the agreement threshold, return an error indicating that image metadata could not be found.</t>
    </list></t>
</list></t>

</section>
</section>
</section>
</section>


  </middle>

  <back>

    <references title='Normative References'>





<reference  anchor="RFC2119" target='https://www.rfc-editor.org/info/rfc2119'>
<front>
<title>Key words for use in RFCs to Indicate Requirement Levels</title>
<author initials='S.' surname='Bradner' fullname='S. Bradner'><organization /></author>
<date year='1997' month='March' />
<abstract><t>In many standards track documents several words are used to signify the requirements in the specification.  These words are often capitalized. This document defines these words as they should be interpreted in IETF documents.  This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t></abstract>
</front>
<seriesInfo name='BCP' value='14'/>
<seriesInfo name='RFC' value='2119'/>
<seriesInfo name='DOI' value='10.17487/RFC2119'/>
</reference>



<reference  anchor="RFC3647" target='https://www.rfc-editor.org/info/rfc3647'>
<front>
<title>Internet X.509 Public Key Infrastructure Certificate Policy and Certification Practices Framework</title>
<author initials='S.' surname='Chokhani' fullname='S. Chokhani'><organization /></author>
<author initials='W.' surname='Ford' fullname='W. Ford'><organization /></author>
<author initials='R.' surname='Sabett' fullname='R. Sabett'><organization /></author>
<author initials='C.' surname='Merrill' fullname='C. Merrill'><organization /></author>
<author initials='S.' surname='Wu' fullname='S. Wu'><organization /></author>
<date year='2003' month='November' />
<abstract><t>This document presents a framework to assist the writers of certificate policies or certification practice statements for participants within public key infrastructures, such as certification authorities, policy authorities, and communities of interest that wish to rely on certificates.  In particular, the framework provides a comprehensive list of topics that potentially (at the writer's discretion) need to be covered in a certificate policy or a certification practice statement.  This document supersedes RFC 2527.</t></abstract>
</front>
<seriesInfo name='RFC' value='3647'/>
<seriesInfo name='DOI' value='10.17487/RFC3647'/>
</reference>



<reference  anchor="RFC5198" target='https://www.rfc-editor.org/info/rfc5198'>
<front>
<title>Unicode Format for Network Interchange</title>
<author initials='J.' surname='Klensin' fullname='J. Klensin'><organization /></author>
<author initials='M.' surname='Padlipsky' fullname='M. Padlipsky'><organization /></author>
<date year='2008' month='March' />
<abstract><t>The Internet today is in need of a standardized form for the transmission of internationalized &quot;text&quot; information, paralleling the specifications for the use of ASCII that date from the early days of the ARPANET.  This document specifies that format, using UTF-8 with normalization and specific line-ending sequences.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='5198'/>
<seriesInfo name='DOI' value='10.17487/RFC5198'/>
</reference>


<reference anchor="NFC" target="https://www.unicode.org/reports/tr15/">
  <front>
    <title>Unicode Standard Annex #15: Unicode Normalization Forms</title>
    <author initials="M." surname="Davis">
      <organization></organization>
    </author>
    <author initials="M." surname="Duerst">
      <organization></organization>
    </author>
    <date year="2018" month="October"/>
  </front>
</reference>
<reference anchor="TAP-3" target="https://github.com/theupdateframework/taps/blob/d0818e580c322815a473520f2e8cc5f5eb8df499/tap3.md">
  <front>
    <title>The Update Framework TAP 3 - Multi-role delegations</title>
    <author initials="T.K." surname="Kuppusamy">
      <organization></organization>
    </author>
    <author initials="S." surname="Awwad">
      <organization></organization>
    </author>
    <author initials="E." surname="Cordell">
      <organization></organization>
    </author>
    <author initials="V." surname="Diaz">
      <organization></organization>
    </author>
    <author initials="J." surname="Moshenko">
      <organization></organization>
    </author>
    <author initials="J." surname="Cappos">
      <organization></organization>
    </author>
    <date year="2018" month="January" day="18"/>
  </front>
</reference>
<reference anchor="TAP-4" target="https://github.com/theupdateframework/taps/blob/2cb67d913ec19424d1e354b38f862886fbfd4105/tap4.md">
  <front>
    <title>The Update Framework TAP 4 - Multiple repository consensus on entrusted targets</title>
    <author initials="T.K." surname="Kuppusamy">
      <organization></organization>
    </author>
    <author initials="S." surname="Awwad">
      <organization></organization>
    </author>
    <author initials="E." surname="Cordell">
      <organization></organization>
    </author>
    <author initials="V." surname="Diaz">
      <organization></organization>
    </author>
    <author initials="J." surname="Moshenko">
      <organization></organization>
    </author>
    <author initials="J." surname="Cappos">
      <organization></organization>
    </author>
    <date year="2017" month="December" day="15"/>
  </front>
</reference>
<reference anchor="TUF-spec" target="https://github.com/theupdateframework/specification/blob/2b4e18472fe25d5b57f36f6fa50104967c8faeaa/tuf-spec.md">
  <front>
    <title>The Update Framework Specification</title>
    <author initials="J." surname="Samuel">
      <organization></organization>
    </author>
    <author initials="N." surname="Mathewson">
      <organization></organization>
    </author>
    <author initials="G." surname="Condra">
      <organization></organization>
    </author>
    <author initials="V." surname="Diaz">
      <organization></organization>
    </author>
    <author initials="T.K." surname="Kuppusamy">
      <organization></organization>
    </author>
    <author initials="S." surname="Awwad">
      <organization></organization>
    </author>
    <author initials="S." surname="Tobias">
      <organization></organization>
    </author>
    <author initials="J." surname="Wright">
      <organization></organization>
    </author>
    <author initials="H." surname="Mehnert">
      <organization></organization>
    </author>
    <author initials="E." surname="Tryzelaar">
      <organization></organization>
    </author>
    <author initials="J." surname="Cappos">
      <organization></organization>
    </author>
    <author initials="R." surname="Dingledine">
      <organization></organization>
    </author>
    <date year="2018" month="September" day="19"/>
  </front>
</reference>


    </references>

    <references title='Informative References'>

<reference anchor="MERCURY" target="https://www.usenix.org/system/files/conference/atc17/atc17-kuppusamy.pdf">
  <front>
    <title>Mercury: Bandwidth-Effective Prevention of Rollback Attacks Against Community Repositories</title>
    <author initials="T.K." surname="Kuppusamy">
      <organization></organization>
    </author>
    <author initials="V." surname="Diaz">
      <organization></organization>
    </author>
    <author initials="J." surname="Cappos">
      <organization></organization>
    </author>
    <date year="2017" month="July" day="12"/>
  </front>
  <seriesInfo name="ISBN" value="978-1-931971-38-6"/>
</reference>
<reference anchor="UPTANEESCAR" target="https://ssl.engineering.nyu.edu/papers/kuppusamy_escar_16.pdf">
  <front>
    <title>Securing Software Updates for Automobiles</title>
    <author initials="T.K." surname="Kuppusamy">
      <organization></organization>
    </author>
    <author initials="A." surname="Brown">
      <organization></organization>
    </author>
    <author initials="S." surname="Awwad">
      <organization></organization>
    </author>
    <author initials="D." surname="McCoy">
      <organization></organization>
    </author>
    <author initials="R." surname="Bielawski">
      <organization></organization>
    </author>
    <author initials="C." surname="Mott">
      <organization></organization>
    </author>
    <author initials="S." surname="Lauzon">
      <organization></organization>
    </author>
    <author initials="A." surname="Weimerskirch">
      <organization></organization>
    </author>
    <author initials="J." surname="Cappos">
      <organization></organization>
    </author>
    <date year="2016" month="October" day="16"/>
  </front>
</reference>
<reference anchor="PEP-458" target="https://www.python.org/dev/peps/pep-0458/">
  <front>
    <title>PEP 458 -- Surviving a Compromise of PyPI</title>
    <author initials="T.K." surname="Kuppusamy">
      <organization></organization>
    </author>
    <author initials="V." surname="Diaz">
      <organization></organization>
    </author>
    <author initials="D." surname="Stufft">
      <organization></organization>
    </author>
    <author initials="J." surname="Cappos">
      <organization></organization>
    </author>
    <date year="2013" month="September" day="27"/>
  </front>
</reference>
<reference anchor="DEPLOY" target="https://uptane.github.io/deployment-considerations/index.html">
  <front>
    <title>Uptane Deployment Best Practices</title>
    <author initials="." surname="Members of the Uptane Community">
      <organization></organization>
    </author>
    <date year="n.d."/>
  </front>
</reference>
<reference anchor="USATODAY" target="https://www.usatoday.com/story/tech/columnist/2016/06/28/your-average-car-lot-more-code-driven-than-you-think/86437052/">
  <front>
    <title>Your average car is a lot more code-driven than you think</title>
    <author initials="B." surname="O'Donnell">
      <organization></organization>
    </author>
    <date year="2016" month="June" day="28"/>
  </front>
</reference>
<reference anchor="CR-OTA" target="https://www.consumerreports.org/automotive-technology/automakers-embrace-over-the-air-updates-can-we-trust-digital-car-repair/">
  <front>
    <title>Automakers Embrace Over-the-Air Updates, but Can We Trust Digital Car Repair?</title>
    <author initials="K." surname="Barry">
      <organization></organization>
    </author>
    <date year="2018" month="April" day="20"/>
  </front>
</reference>
<reference anchor="IN-TOTO" target="https://in-toto.io/">
  <front>
    <title>in-toto: A framework to secure the integrity of software supply chains</title>
    <author >
      <organization></organization>
    </author>
    <date year="2018" month="October" day="29"/>
  </front>
</reference>


    </references>



  </back>

<!-- ##markdown-source:
H4sIAN/g72AAA+19WXfbVprgu34FTvwQSU1SlrzEcR5mZFvuqMrbWHJS6T59
XCABSiiTAAsAJTM+/u/z7XcBQMl2Uj19zuTBsUHgLt/99u2Ox+OdtmgX+ePk
3apNyzw5gz+ztM6SeVUnz/KmuCgTeJKcLleLfJmXbdoWVbmTTqd1fgVfvTk/
fnWyk1WzMl3CKGsaZdzIKOOMRtiZpW1+UdWbx0lRzqudnWJVP07K6lleF1cw
4FXenNfrpj26e/fHu0c7aZ2nj5Pz189e71xX9YeLulqv5N8f8g08yh4np2Wb
12Xejp/V6bzd2aEZ36eLqoRVbPJmZ1U8Tv6zrWajpKnqts7nDfxts8S//NfO
TrpuL6v68U6SjGFJzePkZb6c5nWTVPOkvcwVGk+r5XJdFu0GXkwS3mLvT1V9
kZbF7wScx8lfqqJsAXpX+aJaIdCS59UaAIK/Jm/q6h/5rIXlvHjxdGRwB1Dk
TbI7O6jwjfkk+QsApCiTp+lqVTV7NEu+TItFB8jN/76oqotFTnBqJrNqSS83
sOm8fZw8hL21dXWezy7p+QyW0uJRvDs7pgd1fkGrfvUb/w57epw8qavqw2JT
yicZbPzw8Oju4c5OWdVLOjOE3p3kr3wiSZbPk92X787OR8nZz8cvXoySl8e/
jZK8nU1w8W+fPz06PPyRv/nb5MHdH5M3fz1NmlU+41/vPbz/A//6Km/x2JN3
ZYETEybCplZpXZQXuC34X8MfPTj88RF/pC+/wtUt5CQA7PUyeQovvHr+9DFt
pU3rC4TKZduumscHB9fX15M1fzuBQzyo8xWgS3PQ1ocPDvgLpo/vdAajkOOy
zD8mdw4fPN4ye/MdDeLwDf9TnJskz9Krouk+XQMqtvQYkAYmB8A/Gh/epZ2e
H79J7iVpC+d2lWR3Hx0+yh/AD/B4fK9/jxdFe7meImIcAG6vVzjmvAZkRjAf
tOmqOZguqumBDPbo7uze0dGjwwfp/R/uPTi6Oz/KH81mD+YP8umjbH7/xx/x
k3uTZeaD55yIBkdOnuvQstRx8nK9aItxXS1yQBNAVAJPMwyY88lfJ8lf16vV
ukmXm/C3s0lyfH2dZuHTkwkQZA2DL8LnvwAwi/T38OFfJsnLqrnMyw9V5wcm
txj0dw/Hh48M+vcV+kez6cMfsh8F+ve/Dfoy2OG9fHb44/2j+9lhfu/B/em9
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
vmFySY9gD1E6tBRzIGh5vaiHXvG9X3OvVVFce89thOIFkYLVcYiK0EZZzben
850XcjsConNw2896RZExr4iWk7V6avgJBfgCR3asdj5yCkAfWJkiOgv2WyNy
6H/F1/fwFWTY+2XBVgffHM5t+eUeRblAo86xWdRVvuBeFtg6q6TrGvthxHgB
+nDFLV64pRIqNSt047fW+sI1R5/3aTeWoamfeykOFK/ZvgDBCY2O/e5KJJGF
hv0g3Jxbh3SORY5Nc7xNxic7+yvPXfyIdCMD2yPcE3/LSol7uantbjJLu7U0
bGZw0w2Pb5WB1HM8juh1Kvd6q5m3gMgZDnqZAbsx+OibXmjhLnPHiklIqJIg
ATrlhiO7nqN2eirpt95X9gy/sLRdbji0Yf1Tuqh/yDdjLq4hRwS5P8KmMvP1
Aj5YSPNzjzMOgQGn8lHP608+r2TR7GUSztPn8fx0J5On793Tz8MReb3eRxhg
6kW31NFy6fIaNBOar6TM1nzha2SSW++cSQLqfCFMvmvms+t1yfcFhBzFLvmk
HN+CL5Ym/5pnH8InzXrR8sVAxRX3Zuw0+PGKWvzUispd0TzyvIidVmfNlmyG
YXaF5+UuO3NkPXQNDXVLlh/fy4/v9Uft+WxMzzGAG9lcsHREMEll0cN1jWW4
IyljHzoqRtrRZGr5L5wMTi1n54uNuAIpDoNVAGGeTl+G502QvJEDlP7tr9IE
0LiAdFvKO7dI/nlkfMdRodeazbyfDhCKapgoMlhHjh4pdLaJfu5pRcXHMXaw
VyKQxFadlkMl4dSGx24Nliw8Ias3OApBHL5VydpRs/XH3wSZBXQdquXeeBui
VpeNl5fcuW+JnPhkBqoLf7crOpCyiSsZDbxn3WNDFaFZjqWm0kJOXtDb2KVP
Nv8oIqCbJD1JQvWwjclk3RYLSkITQ12vdOULdnDUxcYByu1XQvhHY1Qc8YJy
UuplHeKQ83ps4a0qcBbvOvdU+RmLweJgHHZykAOow+16gGlvvc+myEpYlnTT
4fzcekoOCxo6T3pwxtc83EmwakNly7ONtj63W247XW37mLZY5t4dnBJiUi8r
dRnvHBp1+NX3YSUTShNxbfHoJbI6Ujt9HbKYk7Zb9wVwtmzaq7jlEMeJgg/v
Lq69JMCew0I9DAWZXw/srpkjYE687A9XCClgMYiro7mV9Dwqj+R3lMpYsSN/
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
hL//XydpVwrGKQEA

-->

</rfc>


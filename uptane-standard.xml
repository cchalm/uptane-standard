<?xml version="1.0" encoding="UTF-8"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc2629 version 1.2.9 -->

<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
]>

<?rfc toc="yes"?>
<?rfc sortrefs="yes"?>
<?rfc symrefs="yes"?>

<rfc ipr="noDerivativesTrust200902" docName="uptane-standard-design" category="info">

  <front>
    <title abbrev="UPTANE">Uptane Standard for Design and Implementation</title>

    <author initials="." surname="Members of the Uptane Alliance Community" fullname="Uptane Alliance Community">
      <organization>Uptane Alliance (c/o Prof. Justin Cappos)</organization>
      <address>
        <postal>
          <street>6 MetroTech</street>
          <city>Brooklyn</city>
          <region>NY</region>
          <code>11201</code>
          <country>USA</country>
        </postal>
        <email>uptane-standards@googlegroups.com</email>
      </address>
    </author>

    <date year="2020" month="March" day="03"/>

    <area>TODO</area>
    <workgroup>TODO</workgroup>
    <keyword>Internet-Draft</keyword>

    <abstract>


<t>This document describes a framework for securing ground vehicle software update systems.</t>



    </abstract>


  </front>

  <middle>


<section anchor="introduction" title="Introduction">

<t>Uptane is a secure software update framework for ground vehicles. This document describes procedures to enable programmers for OEMs and suppliers to securely design and implement this framework in a manner that better protects connected units on ground vehicles. Integrating Uptane as outlined in the sections that follow can reduce the ability of attackers to compromise critical systems. It also assures a faster and easier recovery process should a compromise occur.</t>

<t>These instructions specify the components necessary for a compliant implementation. Individual implementors can make their own technological choices within those requirements. This flexibility makes Uptane adaptable to the many customized update solutions used by manufacturers. If implementors wish to have compatible formats, they may use POUFs. POUFs contain a description of implementation choices as well as data binding formats. An implementor who adopts a POUF, as well as the Uptane Standard, will be able to interoperate with other implementations using that POUF.</t>

</section>
<section anchor="terminology" title="Terminology">

<section anchor="conformance-terminology" title="Conformance terminology">

<t>The keywords MUST, MUST NOT, REQUIRED, SHALL, SHALL NOT, SHOULD, SHOULD NOT, RECOMMENDED, MAY, and OPTIONAL in this document are to be interpreted as described in <xref target="RFC2119"/>.</t>

<t>In order to be considered “Uptane-compliant,” an implementation MUST follow all of these rules as specified in the document.</t>

</section>
<section anchor="terminology-1" title="Terminology">

<t><spanx style="emph">Bundle</spanx>: A set of images released by the repository that is meant to be installed by one or more target ECUs on a vehicle during the same update cycle.</t>

<t><spanx style="emph">Bus</spanx>: An internal communications network that interconnects components within a vehicle. A vehicle can have a number of buses that will vary in terms of power, speed and resources.</t>

<t><spanx style="emph">ECU Identifier</spanx>: An attribute used to identify a specific ECU (e.g., such as a unique serial number).</t>

<t><spanx style="emph">ECU Version Manifest</spanx>: Metadata which details the software version currently installed on the ECU.</t>

<t><spanx style="emph">Hardware Identifier</spanx>: An attribute used to identify a model of an ECU.</t>

<t><spanx style="emph">Image</spanx>: File containing software for an ECU to install. May contain a binary image to flash, installation instructions, and other necessary information for the ECU to properly apply the update. Each ECU typically holds only one image, although this may vary in some cases.</t>

<t><spanx style="emph">Metadata</spanx>:  Information describing the characteristics of data including, for example, structural
metadata describing data structures (e.g., data format, syntax, and semantics) and
descriptive metadata describing data contents (e.g., information security labels). As used in Uptane, metadata can be described as information associated with a role or an image that contains the characteristics or parameters thereof (e.g. cryptographic material parameters, file names and versions.)</t>

<t><spanx style="emph">Primary/Secondary ECUs</spanx>: Terms used to describe the control units within a ground vehicle. A primary ECU downloads and verifies update images and metadata for itself and for secondary ECUs, and distributes images and metadata to secondaries. Thus, it requires extra storage space and a means to download images and metadata.  Secondary ECUs receive their update images and metadata from the primary, and only need to verify and install their own metadata and images.</t>

<t><spanx style="emph">POUF</spanx>: A document that contains the protocol, operations, usage, and formats (POUF) of a specific Uptane implementation. The POUF contains decisions about SHOULDs and MAYs in an implementation, as well as descriptions of data binding formats. POUFs MAY be used to create compatible Uptane implementations.</t>

<t><spanx style="emph">Repository</spanx>: A server containing metadata about images. May also contain the images themselves. Other data may be stored on the repository to be accessed by ECUs during the update process.</t>

<t><spanx style="emph">Suppliers</spanx>: Independent companies to which auto manufacturers may outsource the production of ECUs. Tier-1 suppliers directly serve the manufacturers. Tier-2 suppliers are those that perform outsourced work for Tier-1 suppliers.</t>

<t><spanx style="emph">Vehicle Version Manifest</spanx>: A compilation of all ECU version manifests on a vehicle. It serves as a master list of all images currently running on all ECUs in the vehicle.</t>

</section>
<section anchor="uptane-role-terminology" title="Uptane Role terminology">

<t>These terms are defined in greater detail in <xref target="roles"/>.</t>

<t><spanx style="emph">Delegations</spanx>: A process by which the responsibility of signing metadata about images is assigned to another party.<vspace />
<spanx style="emph">Role</spanx>: A party (human or machine) responsible for signing a certain type of metadata. The role controls keys and is responsible for signing metadata entrusted to it with these keys. The roles mechanism of Uptane allows the system to distribute signing responsibilities so that the compromise of one key does not necessarily impact the security of the entire system.</t>

<t><list style="symbols">
  <t><spanx style="emph">Root Role</spanx>: Signs metadata that distributes and revokes public keys used to verify the Root, Timestamp, Snapshot, and Targets role metadata.</t>
  <t><spanx style="emph">Snapshot Role</spanx>: Signs metadata that indicates which images the repository has released at the same time.</t>
  <t><spanx style="emph">Targets Role</spanx>: Signs metadata used to verify the image, such as cryptographic hashes and file size.</t>
  <t><spanx style="emph">Timestamp Role</spanx>: Signs metadata that indicates if there are any new metadata or images on the repository.</t>
</list></t>

</section>
<section anchor="acronyms-and-abbreviations" title="Acronyms and abbreviations">

<t><spanx style="emph">CAN Bus</spanx>: Controller Area Network bus standard</t>

<t><spanx style="emph">CDN</spanx>: Content Delivery Network</t>

<t><spanx style="emph">ECUs</spanx>: Electronic Control Units, the computing units on a vehicle</t>

<t><spanx style="emph">LIN Bus</spanx>: Local Interconnect Bus</t>

<t><spanx style="emph">OBD</spanx>: On-board diagnostics</t>

<t><spanx style="emph">SOTA</spanx>: Software Updates Over-the-Air</t>

<t><spanx style="emph">UDS</spanx>: Unified Diagnostic Services</t>

<t><spanx style="emph">VIN</spanx>: Vehicle Identification Number</t>

</section>
</section>
<section anchor="rationale-for-and-scope-of-uptane-standards" title="Rationale for and scope of Uptane Standards">

<t>This Standards document clarifies the essential components and best practices for the secure design, implementation and deployment of Uptane by OEMs and suppliers. These practices contribute to compromise resilience, or the ability to minimize the extent of the threat posed by any given attack.</t>

<t>However, this specification is intended as an implementation guide, and not as a detailed technical argument about the security properties that Uptane provides.  Readers interested in such documentation should refer to published papers that cover this topic.  <xref target="UPTANEESCAR"/></t>

<section anchor="why-uptane-requires-a-standards-document" title="Why Uptane requires a standards document">

<t>A standards document that can guide the safe design, integration and deployment of Uptane in vehicles is needed at this time because:</t>

<t><list style="symbols">
  <t>The number of connected units on the average vehicle continues to grow, with mainstream cars now containing up to 100 million lines of code. <xref target="USATODAY"/></t>
  <t>The expanded use of software over-the-air strategies creates new attack surfaces for malicious parties. <xref target="CR-OTA"/></t>
  <t>Legacy update strategies, such as SSL/TLS or GPG/RSA, are not feasible for use on vehicle ECUs because they force manufacturers to chose between enhanced security and customizability.</t>
  <t>Conventional strategies are also complicated by the differing resources of the ECUs, which can vary greatly in memory, storage space, and Internet connectivity.</t>
  <t>The design of Uptane makes it possible to offer improved design flexibility, without sacrificing security.</t>
  <t>This added design flexibility, however, could be a liability if the framework is implemented incorrectly.</t>
  <t>Standardization of crucial steps in the design, implementation and use of Uptane can assure that customizability does not impact security or functionality.</t>
</list></t>

</section>
<section anchor="scope-of-standards-coverage" title="Scope of Standards coverage">

<t>This document sets guidelines for implementing Uptane in most systems capable of updating software on connected units in ground vehicles, including passenger vehicles, light-duty trucks, heavy-duty trucks, and motorcycles. Uptane could potentially also be applied to other ground vehicles, such as automated shuttles, recreational vehicles, and military ground vehicles. Uptane could even be applied to domains such as IoT devices, medical devices, and unmanned aerial vehicles. In this section, we define the scope of that applicability by providing sample use cases and possible exceptions, aspects of software update security that are not applicable to Uptane, and the design requirements governing the preparation of these standards.</t>

<section anchor="assumptions" title="Assumptions">

<t>We assume the following system preconditions for Uptane:</t>

<t><list style="symbols">
  <t>Vehicles have the ability to establish connectivity to required backend services. For example, this could be done through cellular, Wi-Fi, or hard-wired mechanisms.</t>
  <t>ECUs are either directly connected to the communication channel, or are indirectly connected via some sort of network gateway.</t>
  <t>ECUs are programmable and provide sufficient performance to be updated.</t>
  <t>ECUs must be able to perform a public key cryptography operation as well as some supporting operations.</t>
  <t>There are state-of-the-art secure servers in place, such as the Director and Image repository servers.</t>
</list></t>

<t>It is important that any bugs detected in Uptane implementations be patched promptly. Failure to do so could interfere with the effectiveness of Uptane’s operations.</t>

</section>
<section anchor="use-cases" title="Use cases">

<t>The following use cases provide a number of scenarios illustrating the manner in which software updates could be accomplished using Uptane.</t>

<section anchor="oems-initializing-uptane-at-the-factory-using-sota" title="OEMs initializing Uptane at the factory using SOTA">

<t>An OEM plans to install Uptane on new vehicles. This entails the following components: code to perform full and partial verification, the latest copy of the relevant metadata, the public keys, and an accurate attestation of the latest time. The OEM then either requires its tier-1 suppliers to provide these materials to the suppliers’ assembly lines or can choose to add the materials later at the OEM’s assembly lines. The OEM’s implementation is Uptane-compliant if:</t>

<t><list style="numbers">
  <t>all primaries perform full verification;</t>
  <t>all secondaries that are updated via OTA perform full or partial verification; and</t>
  <t>all other ECUs that do not perform verification cannot be updated via OTA.</t>
</list></t>

</section>
<section anchor="updating-one-ecu-with-a-complete-image" title="Updating one ECU with a complete image">

<t>A tier-1 supplier completes work on a revised image for an electronic brake control module. This module will control the brakes on all models of an SUV produced by the OEM mentioned above. Assuming supplier delegation is supported by the OEM for this ECU, each tier-1 supplier digitally signs the image, then delivers the signature and all of its metadata, including delegations, and associated images to the OEM. The OEM adds these metadata and images to its image repository, along with information about any dependencies and conflicts between this image and those for other ECUs used in the OEM’s vehicles. The OEM also updates the inventory database, so that the director repository can instruct the ECU on how to install these updated images.</t>

</section>
<section anchor="updating-individual-ecus-on-demand" title="Updating individual ECUs on demand">

<t>An OEM has issued a recall to address a problem with a keyless entry device that has been locking people out of their cars. The OEM prepares an updated flash image in the manner described above. The OEM then ships USB flash drives to vehicle owners and dealerships that allow those parties to update the firmware of their vehicles.</t>

</section>
<section anchor="update-one-ecu-with-multiple-deltas" title="Update one ECU with multiple deltas">

<t>The OEM wants to use delta updates to save over-the-air bytes. The delta images contain only the code and/or data that has changed from the previous image version. To do so, the OEM must first modify the Director repository, using the vehicle version manifest and dependency resolution to determine the differences between the previous and latest images. The OEM then adds the following to the custom Targets metadata used by the Director repository: (1) the algorithm used to apply a delta image, and (2) the Targets metadata about the delta image. The OEM will also check whether the delta images match the Targets metadata from the Director repository.</t>

</section>
</section>
</section>
<section anchor="exceptions" title="Exceptions">

<t>There are a number of factors that could impede the completion of the above scenarios:</t>

<t><list style="symbols">
  <t>ECUs may be lacking the necessary resources to function as designated. These resources could include weaknesses, in terms of CPU or RAM, that render performance of public key cryptography infeasible; a lack of sufficient storage to undo installation of bad software; or an ECU simply may reside on a low-speed network (e.g., LIN).</t>
  <t>ECUs may reside on different network segments, and may not be able to directly reach each other, requiring a gateway to facilitate communication.</t>
  <t>A user may replace OEM-installed ECUs with aftermarket ECUs.</t>
  <t>A vehicle may be able to download only a limited amount of data via a cellular channel, due to limits on a data plan.</t>
  <t>A system may lack sufficient power to download or install software updates.</t>
  <t>Vehicles may be offline for extended periods of time, thus missing required updates (e.g., key rotations).</t>
  <t>OEMs may be unwilling to implement costly security or hardware requirements.</t>
</list></t>

</section>
<section anchor="out-of-scope" title="Out of Scope">

<t>The following topics will not be addressed in this document, as they represent threats outside the scope of Uptane:</t>

<t><list style="symbols">
  <t>Physical attacks, such as manual tampering with ECUs outside the vehicle.</t>
  <t>Compromise of the packaged software, such as malware embedded in a trusted package.</t>
  <t>Compromise of the supply chain (e.g., build system, version control system, packaging process). A number of strategies (e.g., git signing, TPMs, in-toto <xref target="IN-TOTO"/>)  already exist to address this problem. Therefore, there is no need to duplicate those techniques here.</t>
  <t>Problems associated with OBD or UDS programming of ECUs, such as authentication of communications between ECUs.</t>
  <t>Malicious mirrors of package repositories, which may substitute original packages with malicious packages with matching version numbers <xref target="MERCURY"/>.</t>
</list></t>

</section>
<section anchor="design-requirements" title="Design requirements">

<t>The design requirements for this document are governed by the following principal parameters:</t>

<t><list style="symbols">
  <t>to clearly mandate the design and implementation steps that are security critical and must be followed as is, while offering flexibility in the implementation of non-critical steps. In this manner, users can adapt to support different use models and deployment scenarios.</t>
  <t>to ensure that, if Uptane is implemented, the security practices mandated or suggested in this document do not interfere with the functionality of ECUs, vehicles, or the systems that maintain them.</t>
  <t>to delineate best practices to ensure that, should any part of the SOTA mechanism of a vehicle be attacked, an attacker must compromise two or more modules to breach the SOTA mechanism.</t>
</list></t>

</section>
</section>
<section anchor="threat-model-and-attack-strategies" title="Threat model and attack strategies">

<t>The overarching goal of Uptane is to provide a system that is resilient in the face of various types of compromise. In this section, we describe the goals an attacker may have (<xref target="attacker_goals"/>) and the capabilities they may have or could develop (<xref target="capabilities"/>). We then describe and classify types of attacks on the system according to the attacker’s goals (<xref target="threats"/>).</t>

<section anchor="attacker_goals" title="Attacker goals">

<t>We assume that attackers may want to achieve one or more of the following goals, in increasing order of severity:</t>

<t><list style="symbols">
  <t>Read the contents of updates to discover confidential information, reverse-engineer firmware, or compare two firmware images to identify security fixes and hence determine the fixed security vulnerability</t>
  <t>Deny installation of updates to prevent vehicles from fixing software problems</t>
  <t>Cause one or more ECUs in the vehicle to fail, denying use of the vehicle or of certain functions</t>
  <t>Control ECUs within the vehicle, and possibly the vehicle itself</t>
</list></t>

</section>
<section anchor="capabilities" title="Attacker capabilities">

<t>Uptane is designed with resilience to compromise in mind. We assume that attackers may develop one or more of the following capabilities:</t>

<t><list style="symbols">
  <t>Intercept and modify network traffic (i.e., perform man-in-the-middle attacks). This capability may be developed in two domains:
  <list style="symbols">
      <t>Outside the vehicle, intercepting and modifying traffic between the vehicle and software repositories</t>
      <t>Inside the vehicle, intercepting and modifying traffic on one or more vehicle buses (e.g. via an OBD port or using a compromised ECU as a vector)</t>
    </list></t>
  <t>Compromise and control either a Director repository or Image repository server, and any keys stored on that repository, but not both the Director and Image repositories.</t>
  <t>Compromise either a Primary ECU or a Secondary ECU, but not both in the same vehicle</t>
</list></t>

</section>
<section anchor="threats" title="Description of threats">

<t>Uptane’s threat model includes the following types of attacks, organized according to the attacker goals listed in <xref target="attacker_goals"/>.</t>

<section anchor="read_updates" title="Read updates">

<t><list style="symbols">
  <t><spanx style="emph">Eavesdrop attack:</spanx> Read sensitive or confidential information from an update intended to be encrypted for a specific ECU. (Note: Not all implementations will have a need for protecting information in this way.)</t>
</list></t>

</section>
<section anchor="deny_updates" title="Deny installation of updates">

<t>An attacker seeking to deny the installation of updates may attempt one or more of the following strategies, among others:</t>

<t><list style="symbols">
  <t><spanx style="emph">Drop-request attack:</spanx> Block network traffic outside or inside the vehicle.</t>
  <t><spanx style="emph">Slow retrieval attack:</spanx> Slow down network traffic, in the extreme case sending barely enough packets to avoid a timeout. Similar to a drop-request attack, except that both the sender and receiver of the traffic still think network traffic is unimpeded.</t>
  <t><spanx style="emph">Freeze attack:</spanx> Continue to send a properly signed, but old, update bundle to the ECUs, even if newer updates exist.</t>
  <t><spanx style="emph">Partial bundle installation attack:</spanx> Install a valid (signed) update bundle, and then block selected updates within the bundle.</t>
  <t>Conduct a denial of service attack against the Uptane repositories or infrastructure.</t>
</list></t>

</section>
<section anchor="change_functionality" title="Interfere with ECU functionality">

<t>Attackers seeking to interfere with the functionality of vehicle ECUs in order to cause an operational failure or unexpected behavior may do so in one of the following ways:</t>

<t><list style="symbols">
  <t><spanx style="emph">Rollback attack:</spanx> Cause an ECU to install a previously valid software revision that is older than the currently installed version.</t>
  <t><spanx style="emph">Endless data attack:</spanx> Send a large amount of data to an ECU, until it runs out of storage, possibly causing the ECU to fail to operate.</t>
  <t><spanx style="emph">Mix-and-match attack:</spanx> Install a malicious software bundle in which some of the updates do not interoperate properly. This may be accomplished even if all of the individual images being installed are valid, as long as valid versions exist that are mutually incompatible.</t>
</list></t>

</section>
<section anchor="control_ecu" title="Control an ECU or vehicle">

<t>Full control of a vehicle, or one or more ECUs within a vehicle, is the most severe threat.</t>

<t><list style="symbols">
  <t><spanx style="emph">Arbitrary software attack:</spanx> Cause an ECU to install and run arbitrary code of the attacker’s choice.</t>
</list></t>

</section>
</section>
</section>
<section anchor="design" title="Detailed design of Uptane">

<t>Uptane is a secure software update framework for automobiles. We do not specify implementation details. Instead, we describe the components necessary for a compliant implementation and leave it up to individual implementors to make their own technological choices within those requirements.</t>

<t>At a high level, Uptane requires:</t>

<t><list style="symbols">
  <t>Two software repositories:
  <list style="symbols">
      <t>An Image repository containing binary images to install, and signed metadata about those images</t>
      <t>A Director repository connected to an inventory database that can sign metadata on demand for images in the Image repository</t>
    </list></t>
  <t>Repository tools for generating Uptane-specific metadata about images</t>
  <t>A public key infrastructure supporting the required metadata production/signing roles on each repository:
  <list style="symbols">
      <t>Root - Certificate authority for the Uptane ecosystem. Distributes public keys for verifying all the other roles’ metadata</t>
      <t>Timestamp - Indicates whether there are new metadata or images</t>
      <t>Snapshot - Indicates images released by the repository at a point in time, via signing metadata about Targets metadata</t>
      <t>Targets - Indicates metadata about images, such as hashes and file sizes</t>
    </list></t>
  <t>A secure way for ECUs to know the time.</t>
  <t>An ECU capable of downloading images and associated metadata from the Uptane servers.</t>
  <t>An in-vehicle client on a Primary ECU capable of verifying the signatures on all update metadata and downloading updates on behalf of its associated Secondary ECUs. The primary ECU MAY be the same ECU that communicates with the server.</t>
  <t>A client or library on each Secondary ECU capable of performing either full or partial verification of metadata</t>
</list></t>

<section anchor="roles" title="Roles on repositories">

<t>A repository contains images and metadata. Each role has a particular type of metadata associated with it, as described in <xref target="meta_structures"/>.</t>

<section anchor="root_role" title="The Root role">

<t>A repository’s Root role SHALL be responsible for a Certificate Authority as defined in <xref target="RFC3647"/>.
A repository’s Root role SHALL produce and sign Root metadata as described in <xref target="root_meta"/>.
A repository’s Root role SHALL sign the public keys used to verify the metadata produced by the Timestamp, Snapshot, and Targets roles.
A repository’s Root role SHALL revoke keys for the other roles, in case of compromise.</t>

</section>
<section anchor="targets_role" title="The Targets role">

<t>A repository’s Targets role SHALL produce and sign metadata about images and delegations as described in <xref target="targets_meta"/>.</t>

<section anchor="targets_role_delegations" title="Delegations">

<t>The Targets role on the Image repository MAY delegate the responsibility of signing metadata to other, custom-defined roles referred to as delegated targets. If it does, it MUST do so as specified in <xref target="delegations_meta"/>.</t>

<t>Responsibility for signing images or a subset of images MAY be delegated to more than one role and therefore it is possible for two different roles to be trusted for signing a particular image. For this reason, delegations MUST be prioritized.</t>

<t>A particular delegation for a subset of images MAY be designated as <spanx style="strong">terminating</spanx>. For terminating delegations, the client SHALL NOT search any further if it does not find validly signed metadata about those images. Delegations SHOULD NOT be terminating by default; terminating delegations SHOULD only be used when there is a compelling technical reason to do so.</t>

<t>A delegation for a subset of images MAY be a multi-role delegation <xref target="TAP-3"/>. A multi-role delegation indicates that multiple roles are needed to sign a particular image and each of the delegatee roles MUST sign the same metadata.</t>

<t>Delegations only apply to the Image repository. The Targets role on the Director repository MUST NOT delegate metadata signing responsibility.</t>

</section>
</section>
<section anchor="snapshot_role" title="The Snapshot role">

<t>A repository’s Snapshot role SHALL produce and sign metadata about all Targets metadata the repository releases, including the current version number of the top-level Targets metadata, and the version numbers of all delegated Targets metadata, as described in <xref target="snapshot_meta"/>.</t>

</section>
<section anchor="timestamp_role" title="The Timestamp role">

<t>A repository’s Timestamp role SHALL produce and sign metadata indicating whether there are new metadata or images on the repository. It MUST do so by signing the metadata about the Snapshot metadata file.</t>

</section>
</section>
<section anchor="meta_structures" title="Metadata structures">

<t>Uptane’s security guarantees all rely on properly created metadata that follows a designated structure. The Uptane standard <spanx style="strong">does not</spanx> mandate any particular format or encoding for the metadata as a whole. ASN.1 (with any encoding scheme like BER, DER, XER, etc.), JSON, XML, or any other encoding format that is capable of providing the required structure MAY be used.</t>

<t>However, string comparison is required as part of metadata verification. To ensure an accurate basis for comparing strings, all strings MUST be encoded in the Unicode Format for Network Interchange as defined in <xref target="RFC5198"/>, including normalization into Unicode Normalization Form C (<xref target="NFC"/>).</t>

<t>In the Deployment Considerations document (<xref target="DEPLOY"/>), the Uptane Alliance provides some examples of compliant metadata structures in ASN.1 and JSON.</t>

<section anchor="common_metadata" title="Common metadata structures">

<t>Every public key MUST be represented using a public key identifier.  A public key identifier is EITHER all of the following:</t>

<t><list style="symbols">
  <t>The value of the public key itself (which MAY be, for example, formatted as a PEM string)</t>
  <t>The public key cryptographic algorithm used by the key (such as RSA or ECDSA)</t>
  <t>The particular scheme used to verify the signature (such as <spanx style="verb">rsassa-pss-sha256</spanx> or <spanx style="verb">ecdsa-sha2-nistp256</spanx>)</t>
</list></t>

<t>OR a secure hash over at least the above components (such as the keyid mechanism in TUF).</t>

<t>All four Uptane roles (Root, Targets, Snapshot, and Timestamp) share a common structure. They SHALL contain the following two attributes:</t>

<t><list style="symbols">
  <t>A payload of metadata to be signed</t>
  <t>An attribute containing the signature(s) of the payload, where each entry specifies:
  <list style="symbols">
      <t>The public key identifier of the key being used to sign the payload</t>
      <t>A signature with this key over the payload</t>
    </list></t>
</list></t>

<t>The payload differs depending on the role. However, the payload for all roles shares a common structure. It SHALL contain the following four attributes:</t>

<t><list style="symbols">
  <t>An indicator of the type of role (Root, Targets, Snapshot, or Timestamp)</t>
  <t>An expiration date and time</t>
  <t>An integer version number, which SHOULD be incremented each time the metadata file is updated</t>
  <t>The role-specific metadata for the role indicated</t>
</list></t>

<t>The following sections describe the role-specific metadata. All roles SHALL follow the common structures described here.</t>

</section>
<section anchor="root_meta" title="Root metadata">

<t>A repository’s Root metadata distributes the public keys of the top-level Root, Targets, Snapshot, and Timestamp roles, as well as revocations of those keys. It SHALL contain two attributes:</t>

<t><list style="symbols">
  <t>A representation of the public keys for all four roles. Each key SHALL have a unique public key identifier.</t>
  <t>An attribute mapping each role to (1) its public key(s), and (2) the threshold of signatures required for that role</t>
</list></t>

<t>Additionally, it MAY contain a mapping of roles to a list of valid URLs from which the role metadata can be downloaded.  If this mapping of URLs is used, the implementer SHOULD implement this functionality following <xref target="TAP-5"/> to avoid adding unforeseen security risks.</t>

</section>
<section anchor="targets_meta" title="Targets metadata">

<t>The Targets metadata on a repository contains all of the information about images to be installed on ECUs. This includes filenames, hashes, file sizes, and MAY also include other useful information about images, such as what types of hardware are compatible with a particular image.</t>

<t>Targets metadata can also contain metadata about delegations, allowing one Targets role to delegate its authority to another. This means that an individual Targets metadata file might contain only metadata about delegations, only metadata about images, or some combination of the two. The details of how ECUs traverse the delegation tree to find valid metadata about images is specified in <xref target="resolve_delegations"/>.</t>

<section anchor="targets_images_meta" title="Metadata about images">

<t>To be available to install on clients, all images on the repository MUST have their metadata listed in a Targets role.  Each Targets role MAY provide a list of some images on the repository.  This list MUST provide, at a minimum, the following information about each image:</t>

<t><list style="symbols">
  <t>The image filename</t>
  <t>The size of the image in bytes</t>
  <t>One or more hashes of the image file, along with the hashing function used</t>
</list></t>

<section anchor="custom-metadata-about-images" title="Custom metadata about images">

<t>In addition to the required metadata, Targets metadata files MAY contain extra metadata for images on the repository. This metadata can be customized for a particular use case. Examples of use cases for different types of custom metadata can be found in the Deployment Considerations document (<xref target="DEPLOY"/>). However, there are a few important pieces of custom metadata that SHOULD be present in most implementations. In addition, there is one element in the custom metadata that MUST be present in the Targets metadata from the Director.</t>

<t>Custom metadata MAY also contain a demarcated field or section that MUST match whenever two pieces of metadata are checked against each other, such as when Targets metadata from the Director repository is checked against Targets metadata from the Image repository.</t>

<t>The information listed below SHOULD be provided for each image on both the Image repository and the Director repository. If a “MUST match section” is to be implemented, that is where this information SHOULD be placed.</t>

<t><list style="symbols">
  <t>A release counter, to be incremented each time a new version of the image is released. This can be used to prevent rollback attacks even in cases where the Director repository is compromised.</t>
  <t>A hardware identifier, or list of hardware identifiers, representing models of ECUs with which the image is compatible. This can be used to ensure that an ECU cannot be ordered to install an incompatible image, even in cases where the Director repository is compromised.</t>
</list></t>

<t>The following information is CONDITIONALLY REQUIRED for each image on the Director repository IF that image is encrypted:</t>

<t><list style="symbols">
  <t>Information about filenames, hashes, and file size of the encrypted image.</t>
  <t>Information about the encryption method, and other relevant information–for example, a symmetric encryption key encrypted by the ECU’s asymmetric key could be included in the Director repository metadata.</t>
</list></t>

<t>The following information MUST be provided for each image in the Targets metadata from the Director repository:</t>

<t><list style="symbols">
  <t>An ECU identifier (such as a serial number), specifying the ECU that should install the image.</t>
</list></t>

<t>The Director repository MAY provide a download URL for the image file. This may be useful, for example, when the image is on a public CDN and the director wishes to provide a signed URL.</t>

</section>
</section>
<section anchor="delegations_meta" title="Metadata about delegations">

<t>A Targets metadata file on the Image repository (but not the Director repository) MUST be able to delegate signing authority to other entities. For example, it could delegate signing authority for a particular ECU’s firmware to that ECU’s supplier. A metadata file MAY contain any number of delegations and MUST keep the delegations in prioritized order.</t>

<t>A list of delegations MUST provide the following information:</t>

<t><list style="symbols">
  <t>A list of public keys of all delegatees. Each key should have a unique public key identifier and a key type.</t>
  <t>A list of delegations, each of which contains:
  <list style="symbols">
      <t>A list of the filenames to which this role applies. This MAY be expressed using wildcards, or by enumerating a list, or a combination of the two.</t>
      <t>An optional list of the hardware identifiers to which this role applies.  If this is omitted, any hardware identifier will match.</t>
      <t>An indicator of whether or not this is a terminating delegation. (See <xref target="targets_role_delegations"/>.)</t>
      <t>A list of the roles to which this delegation applies. Each role needs to specify:
      <list style="symbols">
          <t>A name for the role (e.g. “supplier1-qa”)</t>
          <t>The key identifiers for each key this role uses</t>
          <t>A threshold of keys that must sign for this role</t>
        </list></t>
    </list></t>
</list></t>

<t>Note that <spanx style="strong">any</spanx> Targets metadata file stored on the Image repository may contain delegations, and these delegations can be in chains of arbitrary length.</t>

</section>
</section>
<section anchor="snapshot_meta" title="Snapshot metadata">

<t>The Snapshot metadata lists version numbers and filenames of all Targets metadata files. It protects against mix-and-match attacks if a delegated supplier key is compromised.</t>

<t>For each Targets metadata file on the repository, the Snapshot metadata SHALL contain the following information:</t>

<t><list style="symbols">
  <t>The filename and version number of the each Targets metadata file on the repository</t>
</list></t>

<t>The Snapshot metadata MAY also list the Root metadata filename and version number. This is not required, particularly for implementations of <xref target="TAP-5"/>, but MAY be included in all cases for backward compatibility.</t>

</section>
<section anchor="timestamp_meta" title="Timestamp metadata">

<t>The Timestamp metadata SHALL contain the following information:</t>

<t><list style="symbols">
  <t>The filename and version number of the latest Snapshot metadata on the repository.</t>
  <t>One or more hashes of the Snapshot metadata file, along with the hashing function used.</t>
</list></t>

</section>
<section anchor="repo_mapping_meta" title="Repository mapping metadata">

<t>As described in the introduction to <xref target="design"/>, Uptane requires a Director repository and an Image repository. However, it is possible to have an Uptane-compliant implementation that has more than two repositories.</t>

<t>Repository mapping metadata informs a Primary ECU about which repositories to trust for images or image paths. <xref target="TAP-4"/> describes how to make use of more complex repository mapping metadata in order to have more than the two required repositories.</t>

<t>Repository mapping metadata, or the equivalent informational content, MUST be present on all Primary ECUs, and MUST contain the following information:</t>

<t><list style="symbols">
  <t>A list of repository names and one or more URLs at which the named repository can be accessed. At a minimum, this MUST include the Director and Image repositories.</t>
  <t>A list of mappings of image paths to repositories, each of which contains:
  <list style="symbols">
      <t>A list of image paths. Image paths MAY be expressed using wildcards, or by enumerating a list, or a combination of the two.</t>
      <t>A list of repositories that MUST sign the Targets metadata for the image paths.</t>
    </list></t>
</list></t>

<t>For example, in the most basic Uptane case, the repository mapping metadata would contain:</t>

<t><list style="symbols">
  <t>The name and URL of the Director repository</t>
  <t>The name and URL of the Image repository</t>
  <t>A single mapping indicating that all images (<spanx style="verb">*</spanx>) MUST be signed by both the Director and Image repository</t>
</list></t>

<t>Note that the metadata need not be in the form of a metadata file. For example, in the basic case where there is only one Director and one Image repository, and all images need to have signed metadata from both repositories, it would be sufficient to have a configuration file with URLs for the two repositories, and a client that always checks for metadata matches between them. In this case, no explicit mapping would be defined, because the mapping is defined as part of the Uptane client implementation.</t>

<t>The <spanx style="emph">Uptane Deployment Considerations</spanx> document (<xref target="DEPLOY"/>) gives more guidance on how to implement repository mapping metadata for more complex use cases. It also discusses strategies for updating repository mapping metadata, if required.</t>

</section>
<section anchor="metadata_filename_rules" title="Rules for filenames in repositories and metadata">

<t>There is a difference between the file name in a metadata file or an ECU, and the file name on a repository. This difference exists in order to avoid race conditions, where metadata and images are read from, and written to, at the same time. For more details, the reader should read the TUF specification <xref target="TUF-spec"/> and PEP 458 <xref target="PEP-458"/>.</t>

<t>Unless stated otherwise, all files SHALL be written to repositories in accordance with the following two rules:</t>

<t><list style="numbers">
  <t>Metadata filenames SHALL be qualified with version numbers. If a metadata file A is specified as FILENAME.EXT in another metadata file B, then it SHALL be written as VERSION.FILENAME.EXT, where VERSION is A’s version number, as defined in <xref target="common_metadata"/>, with one exception: If the version number of the Timestamp metadata file might not be known in advance by a client, it MAY be read from, and written to, a repository using a filename without a version number qualification, i.e. FILENAME.EXT.</t>
  <t>If an image is specified in a Targets metadata file as FILENAME.EXT, it SHALL be written to the repository as HASH.FILENAME.EXT, where HASH is one of the hash digests of the file, as specified in <xref target="targets_images_meta"/>. The file MUST be written to the repository using <spanx style="emph">n</spanx> different filenames, one for each hash digest listed in its corresponding Targets metadata.</t>
</list></t>

<t>For example:</t>

<t><list style="symbols">
  <t>The version number of the Snapshot metadata file is 61, and its filename in the Timestamp metadata is “snapshot.json”. The filename on the repository will be “61.snapshot.json”.</t>
  <t>There is an image with the filename “acme_firmware.bin” specified in the Targets metadata, with a SHA256 of “aaaa” and a SHA512-256 of “bbbb”. It will have two filenames on the repository: “aaaa.acme_firmware.bin” and “bbbb.acme_firmware.bin”.</t>
</list></t>

</section>
</section>
<section anchor="server-repository-implementation-requirements" title="Server / repository implementation requirements">

<t>An Uptane implementation SHALL make the following services available to vehicles:</t>

<t><list style="symbols">
  <t>Image repository</t>
  <t>Director repository</t>
</list></t>

<t>Additionally, an Uptane implementation requires ECUs to have a secure way to know the current time.</t>

<section anchor="image-repository" title="Image repository">

<t>The Image repository exists to allow an OEM and/or its suppliers to upload images and their associated metadata. It makes these images and their metadata available to vehicles. The Image repository is designed to be primarily controlled by human actors, and updated relatively infrequently.</t>

<t>The Image repository SHALL expose an interface permitting the download of metadata and images. This interface SHOULD be public.</t>

<t>The Image repository SHALL require authorization for writing metadata and images.</t>

<t>The Image repository SHALL provide a method for authorized users to upload images and their associated metadata. It SHALL check that a user writing metadata and images is authorized to do so for that specific image by checking the chain of delegations as described in <xref target="delegations_meta"/>.</t>

<t>The Image repository SHALL implement storage which permits authorized users to write an image file using a unique filename, and later read the same file using the same name. It MAY use any filesystem, key-value store, or database that fulfills this requirement.</t>

<t>The Image repository MAY require authentication for read access.</t>

</section>
<section anchor="director_repository" title="Director repository">

<t>The Director repository instructs ECUs as to which images should be installed by producing signed metadata on demand. Unlike the Image repository, it is mostly controlled by automated, online processes. It also consults a private inventory database containing information on vehicles, ECUs, and software revisions.</t>

<t>The Director repository SHALL expose an interface for primaries to upload vehicle version manifests (<xref target="vehicle_version_manifest"/>) and download metadata. This interface SHOULD be public.
The Director MAY encrypt images for ECUs that require them, either by encrypting on-the-fly or by storing encrypted images in the repository.</t>

<t>The Director repository SHALL implement storage which permits an automated service to write generated metadata files. It MAY use any filesystem, key-value store, or database that fulfills this requirement.</t>

<section anchor="directing-installation-of-images-on-vehicles" title="Directing installation of images on vehicles">

<t>A Director repository MUST conform to the following six-step process for directing the installation of software images on a vehicle.</t>

<t><list style="numbers">
  <t>The Director SHOULD first identify the vehicle. This MAY be done when the Director receives a vehicle version manifest sent by a Primary (as described in <xref target="construct_manifest_primary"/>), decodes the manifest, and determines the unique vehicle identifier. Additionally, the Director MAY utilize other mechanisms to uniquely identify a vehicle (e.g., 2-way TLS with unique client certificates).</t>
  <t>Using the vehicle identifier, the Director queries its inventory database (as described in <xref target="inventory_db"/>) for relevant information about each ECU in the vehicle.</t>
  <t>The Director SHALL check the manifest for accuracy compared to the information in the inventory database. If any of the required checks fail, the Director MAY drop the request. An implementer MAY make additional checks if desired. At a minimum, the Director SHALL check the following:
  <list style="symbols">
      <t>Each ECU recorded in the inventory database is also represented in the manifest.</t>
      <t>The signature of the manifest matches the ECU key of the Primary that sent it.</t>
      <t>The signature of each Secondary’s contribution to the manifest matches the ECU key of that Secondary.</t>
    </list></t>
  <t>The Director SHOULD check that the nonce or counter in each ECU Version Report has not been used before to prevent a replay of the ECU Version Report. If the nonce or counter is reused the Director SHOULD drop the request.</t>
  <t>The Director extracts information about currently installed images from the vehicle version manifest. Using this information, it determines if the vehicle is already up-to-date, and if not, determines a set of images that should be installed. The exact process by which this determination takes place is out of scope of this standard. However, the Director MUST take into account <spanx style="emph">dependencies</spanx> and <spanx style="emph">conflicts</spanx> between images and SHOULD consult well-established techniques for dependency resolution.</t>
  <t>The Director MAY encrypt images for ECUs that require it.</t>
  <t>The Director generates new metadata representing the desired set of images to be installed on the vehicle, based on the dependency resolution in step 4. This includes Targets (<xref target="targets_meta"/>), Snapshot (<xref target="snapshot_meta"/>), and Timestamp (<xref target="timestamp_meta"/>) metadata. It then sends this metadata to the Primary as described in <xref target="download_meta_primary"/>.</t>
</list></t>

</section>
<section anchor="inventory_db" title="Inventory Database">

<t>The Director SHALL use a private inventory database to store information about ECUs and vehicles. An implementor MAY use any durable database for this purpose.</t>

<t>The inventory database MUST record the following pieces of information:</t>

<t><list style="symbols">
  <t>Per vehicle:
  <list style="symbols">
      <t>A unique identifier (such as a VIN)</t>
    </list></t>
  <t>Per ECU:
  <list style="symbols">
      <t>A unique identifier (such as a serial number)</t>
      <t>The vehicle identifier the ECU is associated with</t>
      <t>An ECU key (symmetric or asymmetric; for asymmetric keys, only the public part SHOULD be stored)</t>
      <t>The ECU key identifier (as defined in <xref target="common_metadata"/>)</t>
      <t>Whether the ECU is a Primary or a Secondary</t>
    </list></t>
</list></t>

<t>The inventory database MAY record other information about ECUs and vehicles. It SHOULD record a hardware identifier for each ECU to protect against the possibility of directing the ECU to install incompatible firmware.</t>

</section>
</section>
</section>
<section anchor="in-vehicle-implementation-requirements" title="In-vehicle implementation requirements">

<t>An Uptane-compliant ECU SHALL be able to download and verify Image metadata and image binaries before installing a new image and MUST have a secure way of verifying the current time, or a sufficiently recent attestation of the time.</t>

<t>Each ECU in a vehicle receiving over-the-air updates is either a Primary or a Secondary ECU. A Primary ECU collects and delivers vehicle manifests to the Director (<xref target="vehicle_version_manifest"/>) that contain information about which images have been installed on ECUs in the vehicle. It also verifies the time and downloads and verifies the latest metadata and images for itself and for its secondaries. A Secondary ECU verifies the time, and downloads and verifies the latest metadata and images for itself from its associated Primary ECU. It also sends signed information about its installed images to its associated Primary.</t>

<t>All ECUs MUST verify image metadata as specified in <xref target="metadata_verification"/> before installing an image or making it available to other ECUs. A Primary ECU MUST perform full verification (<xref target="full_verification"/>). A Secondary ECU SHOULD perform full verification if possible. If a Secondary cannot perform full verification, it SHALL perform partial verification. See the Uptane Deployment Considerations (<xref target="DEPLOY"/>) for a discussion of how to choose between partial and full verification.</t>

<t>ECUs MUST have a secure source of time. An OEM/Uptane implementor MAY use any external source of time that is demonstrably secure. The Uptane Deployment Considerations (<xref target="DEPLOY"/>) describe one way to implement an external time server to cryptographically attest time, as well as the security properties required. When “loading time” is referenced in procedures in this standard, it should be understood to mean loading into memory the current time (if the ECU has its own secure clock), or the most recent attested time.</t>

<section anchor="build-time-prerequisite-requirements-for-ecus" title="Build-time prerequisite requirements for ECUs">

<t>For an ECU to be capable of receiving Uptane-secured updates, it MUST have the following data provisioned at the time it is manufactured or installed in the vehicle:</t>

<t><list style="numbers">
  <t>A sufficiently recent copy of required Uptane metadata at the time of manufacture or install. This is necessary for the ECU to authenticate that the remote repository is legitmate when it first downloads metadata in the field. See the Uptane Deployment Considerations (<xref target="DEPLOY"/>) for more information.
  <list style="symbols">
      <t>Partial verification Secondary ECUs MUST have the Root and Targets metadata from the Director repository (to reduce the scope of rollback and replay attacks). These ECUs MAY also have metadata from other roles or the Image repository if they will be used by the Secondary.</t>
      <t>Full verification ECUs MUST have a complete set of metadata (Root, Targets, Snapshot, and Timestamp) from both repositories (to prevent rollback and replay attacks), as well as the repository mapping metadata (<xref target="repo_mapping_meta"/>). Delegations are not required.</t>
    </list></t>
  <t>The current time, or a secure attestation of a sufficiently recent time.</t>
  <t>An <spanx style="strong">ECU key</spanx>. This is a private key, unique to the ECU, used to sign ECU version manifests and decrypt images. An ECU key MAY be either a symmetric key or an asymmetric key. If it is an asymmetric key, there MAY be separate keys for encryption and signing. For the purposes of this standard, the set of private keys that an ECU uses is referred to as the ECU key (singular), even if it is actually multiple keys used for different purposes.</t>
</list></t>

</section>
<section anchor="what-the-primary-does" title="What the Primary does">

<t>A Primary downloads, verifies, and distributes the latest time, metadata and images. To do so, it SHALL perform the following seven steps:</t>

<t><list style="numbers">
  <t>Construct and send vehicle version manifest (<xref target="construct_manifest_primary"/>)</t>
  <t>Download and check current time (<xref target="check_time_primary"/>)</t>
  <t>Download and verify metadata (<xref target="download_meta_primary"/>)</t>
  <t>Download and verify images (<xref target="download_images_primary"/>)</t>
  <t>OPTIONAL: Send latest time to secondaries (<xref target="send_time_primary"/>)</t>
  <t>Send metadata to Secondaries (<xref target="send_metadata_primary"/>)</t>
  <t>Send images to Secondaries (<xref target="send_images_primary"/>)</t>
</list></t>

<t>Note that the subsequent sections concerning requirements for a Primary do not prohibit implementing Primary capabilities on an ECU that does not communicate directly with the Uptane repositories. This allows for implementations to have multiple ECUs within the vehicle performing functions equivalent to a Primary.
If multiple such Primaries are included within a vehicle, each Secondary ECU SHALL have a single Primary responsible for providing its updates.</t>

<section anchor="construct_manifest_primary" title="Construct and send vehicle version manifest">

<t>The Primary SHALL build a <spanx style="emph">vehicle version manifest</spanx> as described in <xref target="vehicle_version_manifest"/>.</t>

<t>Once the complete manifest is built, the Primary MAY send the manifest to the Director repository. However, it is not strictly required that the Primary send the manifest until step three. If permitted by the implementation, a Primary MAY send only a diff of the manifest to save bandwidth. If an implementation permits diffs, the Director SHOULD have a way to request a full manifest.</t>

<t>Secondaries MAY send their version report at any time so that it is already stored on the Primary when it wishes to check for updates. Alternatively, the Primary MAY request a version report from each Secondary at the time of the update check.</t>

<section anchor="vehicle_version_manifest" title="Vehicle version manifest">

<t>The vehicle version manifest is a metadata structure that MUST contain the following information:</t>

<t><list style="symbols">
  <t>An attribute containing the signature(s) of the payload, each specified by:
  <list style="symbols">
      <t>The public key identifier of the key being used to sign the payload</t>
      <t>The signing method (e.g. ed25519, rsassa-pss, etc.)</t>
      <t>A hash of the payload to be signed</t>
      <t>The hashing function used (e.g. sha256, sha512-224, etc.)</t>
      <t>The signature of the hash</t>
    </list></t>
  <t>A payload representing the installed versions of each software image on the vehicle. This payload SHALL contain:
  <list style="symbols">
      <t>The vehicle’s unique identifier (e.g. the VIN)</t>
      <t>The Primary ECU’s unique identifier (e.g. the serial number)</t>
      <t>A list of ECU version reports as specified in <xref target="version_report"/></t>
    </list></t>
</list></t>

<t>Note that one of the ECU version reports should be the version report for the Primary itself.</t>

</section>
<section anchor="version_report" title="ECU version report">

<t>An ECU version report is a metadata structure that MUST contain the following information:</t>

<t><list style="symbols">
  <t>An attribute containing the signature(s) of the payload, each specified by:
  <list style="symbols">
      <t>The public key identifier of the key being used to sign the payload</t>
      <t>The signing method (e.g. ed25519, rsassa-pss, etc.)</t>
      <t>A hash of the payload to be signed</t>
      <t>The hashing function used (e.g. sha256, sha512-224, etc.)</t>
      <t>The signature of the hash</t>
    </list></t>
  <t>A payload containing:
  <list style="symbols">
      <t>The ECU’s unique identifier (e.g. the serial number)</t>
      <t>The filename, length, and hashes of its currently installed image (i.e. the non-custom Targets metadata for this particular image)</t>
      <t>An indicator of any detected security attack</t>
      <t>The latest time the ECU can verify at the time this version report was generated</t>
      <t>A nonce or counter to prevent a replay of the ECU version report. This value MUST change each update cycle and MAY be the cryptographic nonce used with a Time Server.</t>
    </list></t>
</list></t>

</section>
</section>
<section anchor="check_time_primary" title="Download and check current time">

<t>The Primary SHALL load the current time from a secure source.</t>

</section>
<section anchor="download_meta_primary" title="Download and verify metadata">

<t>The Primary SHALL download metadata for all targets and perform a full verification on it as specified in <xref target="full_verification"/>.</t>

</section>
<section anchor="download_images_primary" title="Download and verify images">

<t>The Primary SHALL download and verify images for itself and for all of its associated Secondaries. Images SHALL be verified by checking that the hash of the image file matches the hash specified in the Director’s Targets metadata for that image.</t>

<t>There may be several different filenames that all refer to the same image binary, as described in <xref target="metadata_filename_rules"/>. If the primary has received multiple hashes for a given image binary via the Targets role (see <xref target="targets_images_meta"/>) then it SHALL verify every hash for this image despite the fact that just one hash is enough to obtain the image itself.</t>

</section>
<section anchor="send_time_primary" title="Send latest time to Secondaries">

<t>Unless the Secondary ECU has its own way of verifying the time or does not have the capacity to verify a time message, the Primary is CONDITIONALLY REQUIRED to send the time to each ECU. The Secondary will verify the time message, then overwrite its current time with the received time.</t>

</section>
<section anchor="send_metadata_primary" title="Send metadata to Secondaries">

<t>The Primary SHALL send its latest downloaded metadata to all of its associated Secondaries. The metadata it sends to each Secondary MUST include all of the metadata required for verification on that Secondary. For full verification Secondaries, this includes the metadata for all four roles from both repositories, plus any delegated Targets metadata files the Secondary will recurse through to find the proper delegation. For partial verification Secondaries, this includes only the Targets metadata file from the Director repository.</t>

<t>The Primary SHOULD determine the minimal set of metadata files to send to each Secondary by performing delegation resolution as described in <xref target="full_verification"/>.</t>

<t>Each Secondary SHALL store the latest copy of all metadata required for its own verification.</t>

</section>
<section anchor="send_images_primary" title="Send images to Secondaries">

<t>The Primary SHALL send the latest image to each of its associated Secondaries that have storage to receive it.</t>

<t>For Secondaries without storage, the Primary SHOULD wait for a request from the Secondary to stream the new image file to it. The Secondary will send the request once it has verified the metadata sent in the previous step.</t>

</section>
</section>
<section anchor="installing-images-on-primary-or-secondary-ecus" title="Installing images on Primary or Secondary ECUs">

<t>An ECU SHALL perform the following steps when attempting to install a new image:</t>

<t><list style="numbers">
  <t>Verify latest attested time (<xref target="verify_time"/>)</t>
  <t>Verify metadata (<xref target="verify_metadata"/>)</t>
  <t>Download latest image (<xref target="download_image"/>)</t>
  <t>Verify image (<xref target="verify_image"/>)</t>
  <t>Install image (<xref target="install_image"/>)</t>
  <t>Create and send version report (<xref target="create_version_report"/>)</t>
</list></t>

<section anchor="verify_time" title="Load and verify the latest attested time">

<t>The ECU SHALL load and verify the current time, or the most recent securely attested time.</t>

</section>
<section anchor="verify_metadata" title="Verify metadata">

<t>The ECU SHALL verify the latest downloaded metadata (<xref target="metadata_verification"/>) using either full or partial verification. If the metadata verification fails for any reason, the ECU SHALL jump to the final step (<xref target="create_version_report"/>).</t>

</section>
<section anchor="download_image" title="Download latest image">

<t>If the ECU does not have secondary storage, i.e. buffer storage to temporarily store the latest image before installing it, it SHALL download the latest image from the Primary. (If the ECU has secondary storage, it will already have the latest image in its secondary storage as specified in <xref target="send_images_primary"/>, and should skip to the next step.) The ECU MAY first create a backup of its previous working image and store it elsewhere (e.g., the primary).</t>

<t>The filename used to identify the latest known image (i.e., the file to request from the Primary) SHALL be determined as follows:</t>

<t><list style="numbers">
  <t>Load the Targets metadata file from the Director repository.</t>
  <t>Find the Targets metadata associated with this ECU identifier.</t>
  <t>Construct the Image filename using the rule in <xref target="metadata_filename_rules"/>, or use the download URL specified in the Director metadata.</t>
  <t>If there is no Targets metadata about this image, abort the update cycle and report that there is no such image. Additionally, in the case of failure, the ECU SHALL retain its previous Targets metadata instead of using the new Targets metadata. Otherwise, download the image (up to the number of bytes specified in the Targets metadata), and verify that its hashes match the Targets metadata.</t>
</list></t>

<t>When the Primary responds to the download request, the ECU SHALL overwrite its current image with the downloaded image from the Primary.</t>

<t>If any part of this step fails, the ECU SHALL jump to the final step (<xref target="create_version_report"/>).</t>

</section>
<section anchor="verify_image" title="Verify image">

<t>The ECU SHALL verify that the latest image matches the latest metadata as follows:</t>

<t><list style="numbers">
  <t>Load the latest Targets metadata file from the Director.</t>
  <t>Find the Targets metadata associated with this ECU identifier.</t>
  <t>Check that the hardware identifier in the metadata matches the ECUs hardware identifier.</t>
  <t>Check that the image filename is valid for this ECU. This MAY be a comparison against a wildcard path, which restricts the ECUs to which a delegation will apply.</t>
  <t>Check that the release counter of the image in the previous metadata, if it exists, is less than or equal to the release counter in the latest metadata.</t>
  <t>If the image is encrypted, decrypt the image with a decryption key to be chosen as follows:
  <list style="symbols">
      <t>If the ECU key is a symmetric key, the ECU SHALL use the ECU key for image decryption.</t>
      <t>If the ECU key is asymmetric, the ECU SHALL check the Targets metadata for an encrypted symmetric key. If such a key is found, the ECU SHALL decrypt the symmetric key using its ECU key, and use the decrypted symmetric key for image decryption.</t>
      <t>If the ECU key is asymmetric and there is no symmetric key in the target metadata, the ECU SHALL use its ECU key for image decryption.</t>
    </list></t>
  <t>Check that the hash of the image matches the hash in the metadata.</t>
</list></t>

<t>If the ECU has secondary storage, the checks SHOULD be performed on the image in secondary storage before it is installed.</t>

<t>NOTE: See <xref target="DEPLOY"/> for guidance on how to deal with Secondary ECU failures for ECUs that do not have secondary storage.</t>

<t>If any step fails, the ECU SHALL jump to the (<xref target="create_version_report"/>) step.</t>

</section>
<section anchor="install_image" title="Install image">

<t>The ECU SHALL attempt to install the update. This installation SHOULD occur at a time when all pre-conditions are met. These pre-conditions MAY include ensuring the vehicle is in a safe environment for install (e.g., the vehicle is parked when updating a specific ECU). Another pre-condition MAY include ensuring the ECU has a backup of its current image and metadata in case the current installation fails.</t>

</section>
<section anchor="create_version_report" title="Create and send version report">

<t>The ECU SHALL create a version report as described in <xref target="version_report"/>, and send it to the Primary (or simply save it to disk, if the ECU is a Primary). The Primary SHOULD write the version reports it receives to disk and associate them with the Secondaries that sent them.</t>

</section>
</section>
<section anchor="metadata_verification" title="Metadata verification procedures">

<t>A Primary ECU MUST perform full verification of metadata. A Secondary ECU SHOULD perform full verification of metadata. If a Secondary cannot perform full verification, it SHALL perform partial verification instead.</t>

<t>If a step in the following workflows does not succeed (e.g., the update is aborted because a new metadata file was not signed), an ECU SHOULD still be able to update again in the future. Errors raised during the update process SHOULD NOT leave ECUs in an unrecoverable state.</t>

<section anchor="partial_verification" title="Partial verification">

<t>In order to perform partial verification, an ECU SHALL perform the following steps:</t>

<t><list style="numbers">
  <t>Load and verify the current time or the most recent securely attested time.</t>
  <t>Download and check the Targets metadata file from the Director repository, following the procedure in <xref target="check_targets"/>.</t>
</list></t>

</section>
<section anchor="full_verification" title="Full verification">

<t>Full verification of metadata means that the ECU checks that the Targets metadata about images from the Director repository matches the Targets metadata about the same images from the Image repository. This provides resilience to a key compromise in the system.</t>

<t>Full verification MAY be performed by either Primary or Secondary ECUs. In the following instructions, whenever an ECU is directed to download metadata, it applies only to Primary ECUs.</t>

<t>If <xref target="TAP-5"/> is supported and a Primary has an external connection to the Uptane repositories, a Primary ECU SHALL download metadata and images following the rules specified in that TAP.  If <xref target="TAP-5"/> is not supported, or if the Primary does not have an external connection to the Uptane repositories, the download SHOULD follow the <xref target="TUF-spec"/> and the metadata file renaming rules specified in <xref target="metadata_filename_rules"/>.</t>

<t>Before starting full verification, the repository mapping metadata MUST be consulted to determine where to download metadata from. This procedure assumes the basic Uptane case: there are only two repositories (Director and Image), and all image paths are required to be signed by both repositories. If a more complex repository layout is being used, refer to <xref target="DEPLOY"/> for guidance on how to determine where metadata should be downloaded from.</t>

<t>In order to perform full verification, an ECU SHALL perform the following steps:</t>

<t><list style="numbers">
  <t>Load and verify the current time or the most recent securely attested time.</t>
  <t>Download and check the Root metadata file from the Director repository, following the procedure in <xref target="check_root"/>.</t>
  <t>Download and check the Timestamp metadata file from the Director repository, following the procedure in <xref target="check_timestamp"/>.</t>
  <t>Check the previously downloaded Snapshot metadata file from the Directory repository (if available). If the hashes and version number of that file match the hashes and version number listed in the new Timestamp metadata, there are no new updates and the verification process MAY be stopped and considered complete. Otherwise, download and check the Snapshot metadata file from the Director repository, following the procedure in <xref target="check_snapshot"/>.</t>
  <t>Download and check the Targets metadata file from the Director repository, following the procedure in <xref target="check_targets"/>.</t>
  <t>If the Targets metadata from the Directory repository indicates that there are no new targets that are not already currently installed, the verification process MAY be stopped and considered complete. Otherwise, download and check the Root metadata file from the Image repository, following the procedure in <xref target="check_root"/>.</t>
  <t>Download and check the Timestamp metadata file from the Image repository, following the procedure in <xref target="check_timestamp"/>.</t>
  <t>Check the previously downloaded Snapshot metadata file from the Image repository (if available). If the hashes and version number of that file match the hashes and version number listed in the new Timestamp metadata, the ECU MAY skip to the last step. Otherwise, download and check the Snapshot metadata file from the Image repository, following the procedure in <xref target="check_snapshot"/>.</t>
  <t>Download and check the top-level Targets metadata file from the Image repository, following the procedure in <xref target="check_targets"/>.</t>
  <t>Verify that Targets metadata from the Director and Image repositories match. A Primary ECU MUST perform this check on metadata for all images listed in the Targets metadata file from the Director repository downloaded in step 6. A Secondary ECU MAY elect to perform this check only on the metadata for the image it will install. (That is, the target metadata from the Director that contains the ECU identifier of the current ECU.) To check that the metadata for an image matches, complete the following procedure:
  <list style="numbers">
      <t>Locate and download a Targets metadata file from the Image repository that contains an image with exactly the same file name listed in the Director metadata, following the procedure in <xref target="resolve_delegations"/>.</t>
      <t>Check that the Targets metadata from the Image repository matches the Targets metadata from the Director repository:
      <list style="numbers">
          <t>Check that the non-custom metadata (i.e., length and hashes) of the unencrypted or encrypted image are the same in both sets of metadata. Note: the Primary is responsible for validating encrypted images and associated metadata. The target ECU (Primary or Secondary) is responsible for validating the unencrypted image and associated metadata.</t>
          <t>Check that all “MUST match” custom metadata (e.g., hardware identifier and release counter) are the same in both sets of metadata.</t>
          <t>Check that the release counter in the previous Targets metadata file is less than or equal to the release counter in this Targets metadata file.</t>
        </list></t>
    </list></t>
</list></t>

<t>If any step fails, the ECU MUST return an error code indicating the failure. If a check for a specific type of security attack fails (e.g. rollback, freeze, arbitrary software, etc.), the ECU SHOULD return an error code that indicates the type of attack.</t>

<t>If the ECU performing the verification is the Primary ECU, it SHOULD also ensure that the Targets metadata from the Director repository doesn’t contain any ECU identifiers for ECUs not actually present in the vehicle.</t>

</section>
<section anchor="check_root" title="How to check Root metadata">

<t>To properly check Root metadata, an ECU SHOULD:</t>

<t><list style="numbers">
  <t>Load the previous Root metadata file.</t>
  <t>Update to the latest Root metadata file.
  <list style="numbers">
      <t>Let N denote the version number of the latest Root metadata file (which at first could be the same as the previous Root metadata file).</t>
      <t>Try downloading a new version N+1 of the Root metadata file, up to some X number of bytes. The value for X is set by the implementor. For example, X may be tens of kilobytes. The filename used to download the Root metadata file is of the fixed form VERSION_NUMBER.FILENAME.EXT (e.g., 42.root.json). If this file is not available, the current Root metadata file is the latest; continue with step 3.</t>
      <t>Version N+1 of the Root metadata file MUST have been signed by the following: (1) a threshold of keys specified in the latest Root metadata file (version N), and (2) a threshold of keys specified in the new Root metadata file being validated (version N+1). If version N+1 is not signed as required, discard it, abort the update cycle, and report the signature failure. On the next update cycle, begin at version N of the Root metadata file. (Checks for an arbitrary software attack.)</t>
      <t>The version number of the latest Root metadata file (version N) must be less than or equal to the version number of the new Root metadata file (version N+1). Effectively, this means checking that the version number signed in the new Root metadata file is indeed N+1. If the version of the new Root metadata file is less than the latest metadata file, discard it, abort the update cycle, and report the rollback attack. On the next update cycle, begin at step 1 and version N of the Root metadata file. (Checks for a rollback attack.)</t>
      <t>Set the latest Root metadata file to the new Root metadata file.</t>
      <t>Repeat steps 2.1 to 2.6.</t>
    </list></t>
  <t>Check that the current (or latest securely attested) time is lower than the expiration timestamp in the latest Root metadata file. (Checks for a freeze attack.)</t>
  <t>If the Timestamp and/or Snapshot keys have been rotated, delete the previous Timestamp and Snapshot metadata files. (Checks for recovery from fast-forward attacks <xref target="MERCURY"/>.)</t>
</list></t>

</section>
<section anchor="check_timestamp" title="How to check Timestamp metadata">

<t>To properly check Timestamp metadata, an ECU SHOULD:</t>

<t><list style="numbers">
  <t>Download up to Y number of bytes. The value for Y is set by the implementor. For example, Y may be tens of kilobytes. The filename used to download the Timestamp metadata file is of the fixed form FILENAME.EXT (e.g., timestamp.json).</t>
  <t>Check that it has been signed by the threshold of keys specified in the latest Root metadata file. If the new Timestamp metadata file is not properly signed, discard it, abort the update cycle, and report the signature failure. (Checks for an arbitrary software attack.)</t>
  <t>Check that the version number of the previous Timestamp metadata file, if any, is less than or equal to the version number of this Timestamp metadata file. If the new Timestamp metadata file is older than the trusted Timestamp metadata file, discard it, abort the update cycle, and report the potential rollback attack. (Checks for a rollback attack.)</t>
  <t>Check that the current (or latest securely attested) time is lower than the expiration timestamp in this Timestamp metadata file. If the new Timestamp metadata file has expired, discard it, abort the update cycle, and report the potential freeze attack. (Checks for a freeze attack.)</t>
</list></t>

</section>
<section anchor="check_snapshot" title="How to check Snapshot metadata">

<t>To properly check Snapshot metadata, an ECU SHOULD:</t>

<t><list style="numbers">
  <t>Download up to the number of bytes specified in the Timestamp metadata file, constructing the metadata filename as defined in <xref target="metadata_filename_rules"/>.</t>
  <t>The hashes and version number of the new Snapshot metadata file MUST match the hashes and version number listed in Timestamp metadata. If the hashes and version number do not match, discard the new Snapshot metadata, abort the update cycle, and report the failure. (Checks for a mix-and-match attack.)</t>
  <t>Check that it has been signed by the threshold of keys specified in the latest Root metadata file. If the new Snapshot metadata file is not signed as required, discard it, abort the update cycle, and report the signature failure. (Checks for an arbitrary software attack.)</t>
  <t>Check that the version number of the previous Snapshot metadata file, if any, is less than or equal to the version number of this Snapshot metadata file. If this Snapshot metadata file is older than the previous Snapshot metadata file, discard it, abort the update cycle, and report the potential rollback attack. (Checks for a rollback attack.)</t>
  <t>Check that the version number listed by the previous Snapshot metadata file for each Targets metadata file is less than or equal to its version number in this Snapshot metadata file. If this condition is not met, discard the new Snapshot metadata file, abort the update cycle, and report the failure. (Checks for a rollback attack.)</t>
  <t>Check that each Targets metadata filename listed in the previous Snapshot metadata file is also listed in this Snapshot metadata file. If this condition is not met, discard the new Snapshot metadata file, abort the update cycle, and report the failure. (Checks for a rollback attack.)</t>
  <t>Check that the current (or latest securely attested) time is lower than the expiration timestamp in this Snapshot metadata file. If the new Snapshot metadata file is expired, discard it, abort the update cycle, and report the potential freeze attack. (Checks for a freeze attack.)</t>
</list></t>

</section>
<section anchor="check_targets" title="How to check Targets metadata">

<t>To properly check Targets metadata, an ECU SHOULD:</t>

<t><list style="numbers">
  <t>Download up to Z number of bytes, constructing the metadata filename as defined in <xref target="metadata_filename_rules"/>. The value for Z is set by the implementor. For example, Z may be tens of kilobytes.</t>
  <t>The version number of the new Targets metadata file MUST match the version number listed in the latest Snapshot metadata. If the version number does not match, discard it, abort the update cycle, and report the failure. (Checks for a mix-and-match attack.) Skip this step if checking Targets metadata on a partial verification ECU; partial verification ECUs will not have Snapshot metadata.</t>
  <t>Check that the Targets metadata has been signed by the threshold of keys specified in the relevant metadata file (Checks for an arbitrary software attack):
  <list style="numbers">
      <t>If checking top-level Targets metadata, the threshold of keys is specified in the Root metadata.</t>
      <t>If checking delegated Targets metadata, the threshold of keys is specified in the Targets metadata file that delegated authority to this role.</t>
    </list></t>
  <t>Check that the version number of the previous Targets metadata file, if any, is less than or equal to the version number of this Targets metadata file. (Checks for a rollback attack.)</t>
  <t>Check that the current (or latest securely attested) time is lower than the expiration timestamp in this Targets metadata file. (Checks for a freeze attack.)</t>
  <t>If checking Targets metadata from the Director repository, verify that there are no delegations.</t>
  <t>If checking Targets metadata from the Director repository, check that no ECU identifier is represented more than once.</t>
</list></t>

</section>
<section anchor="resolve_delegations" title="How to resolve delegations">

<t>To properly check Targets metadata for an image, an ECU MUST locate the metadata file(s) for the role (or roles) that have the authority to sign the image. This metadata might be located in the top-level Targets metadata, but it also may be delegated to another role or to multiple roles. Therefore, all delegations MUST be resolved using the following recursive procedure, beginning with the top-level Targets metadata file.</t>

<t><list style="numbers">
  <t>Download the current metadata file, and check it following the procedure in <xref target="check_targets"/>. If the file cannot be loaded, or if any verification step fails, abort the delegation resolution, and indicate that Image metadata cannot be found because of a missing or invalid role.</t>
  <t>If the current metadata file contains signed metadata about the image, end the delegation resolution and return the metadata to be checked.</t>
  <t>If the current metadata file was reached via a terminating delegation and does not contain signed metadata about the image, abort the delegation resolution for this image and return an error indicating that image metadata could not be found.</t>
  <t>Search the list of delegations, in listed order. For each delegation:
  <list style="numbers">
      <t>Check if the delegation applies to the image being processed. For the delegation to apply, it MUST include the hardware identifier of the target, and the target name must match one of the delegation’s image paths. If either of these tests fail, move on to the next delegation in the list.</t>
      <t>If the delegation is a multi-role delegation, follow the procedure described in <xref target="multirole_delegations"/>. If the multi-role delegation is terminating and no valid Image metadata is found, abort the delegation resolution and return an error indicating that image metadata could not be found.</t>
      <t>If the delegation is a normal delegation, perform delegation resolution, starting at step 1. Note that this may recurse an arbitrary number of levels deep. If a delegation that applies to the image is found but no image metadata is found in the delegated roles or any of its sub-delegations, simply continue on with the next delegation in the list. The search is only completed/aborted if image metadata or a terminating delegation that applies to the image is found.</t>
    </list></t>
  <t>If the end of the list of delegations in the top-level metadata is reached without finding valid image metadata, return an error indicating that image metadata could not be found.</t>
</list></t>

</section>
<section anchor="multirole_delegations" title="Multi-role delegations">

<t>It is possible to delegate signing authority to multiple delegated roles as described in <xref target="TAP-3"/>. Each multi-role delegation effectively contains a list of ordinary delegations, plus a threshold of those roles that must be in agreement about the non-custom metadata for the image. All multi-role delegations MUST be resolved using the following procedure. Note that there may be sub-delegations inside multi-role delegations.</t>

<t><list style="numbers">
  <t>For each of the roles in the delegation, find and load the image metadata (or error) following the procedure in <xref target="resolve_delegations"/>.</t>
  <t>Inspect the non-custom part of the metadata loaded in step 1:
  <list style="numbers">
      <t>Locate all sets of roles which have agreeing (i.e. identical) non-custom metadata and “MUST match” custom metadata. Discard any set of roles with a size smaller than the threshold of roles that must be in agreement for this delegation.</t>
      <t>Check for a conflict. A conflict exists if there remains more than one agreeing set of roles, each set having different metadata. If a conflict is found, choose and return the metadata from the set of roles which includes the earliest role in the multi-delegation list.</t>
      <t>If there is no conflict, check if there is any single set of roles with matching non-custom metadata. If there is, choose and return the metadata from this set.</t>
      <t>If no agreeing set can be found that meets the agreement threshold, return an error indicating that image metadata could not be found.</t>
    </list></t>
</list></t>

</section>
</section>
</section>
</section>


  </middle>

  <back>

    <references title='Normative References'>





<reference  anchor="RFC2119" target='https://www.rfc-editor.org/info/rfc2119'>
<front>
<title>Key words for use in RFCs to Indicate Requirement Levels</title>
<author initials='S.' surname='Bradner' fullname='S. Bradner'><organization /></author>
<date year='1997' month='March' />
<abstract><t>In many standards track documents several words are used to signify the requirements in the specification.  These words are often capitalized. This document defines these words as they should be interpreted in IETF documents.  This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t></abstract>
</front>
<seriesInfo name='BCP' value='14'/>
<seriesInfo name='RFC' value='2119'/>
<seriesInfo name='DOI' value='10.17487/RFC2119'/>
</reference>



<reference  anchor="RFC3647" target='https://www.rfc-editor.org/info/rfc3647'>
<front>
<title>Internet X.509 Public Key Infrastructure Certificate Policy and Certification Practices Framework</title>
<author initials='S.' surname='Chokhani' fullname='S. Chokhani'><organization /></author>
<author initials='W.' surname='Ford' fullname='W. Ford'><organization /></author>
<author initials='R.' surname='Sabett' fullname='R. Sabett'><organization /></author>
<author initials='C.' surname='Merrill' fullname='C. Merrill'><organization /></author>
<author initials='S.' surname='Wu' fullname='S. Wu'><organization /></author>
<date year='2003' month='November' />
<abstract><t>This document presents a framework to assist the writers of certificate policies or certification practice statements for participants within public key infrastructures, such as certification authorities, policy authorities, and communities of interest that wish to rely on certificates.  In particular, the framework provides a comprehensive list of topics that potentially (at the writer's discretion) need to be covered in a certificate policy or a certification practice statement.  This document supersedes RFC 2527.</t></abstract>
</front>
<seriesInfo name='RFC' value='3647'/>
<seriesInfo name='DOI' value='10.17487/RFC3647'/>
</reference>



<reference  anchor="RFC5198" target='https://www.rfc-editor.org/info/rfc5198'>
<front>
<title>Unicode Format for Network Interchange</title>
<author initials='J.' surname='Klensin' fullname='J. Klensin'><organization /></author>
<author initials='M.' surname='Padlipsky' fullname='M. Padlipsky'><organization /></author>
<date year='2008' month='March' />
<abstract><t>The Internet today is in need of a standardized form for the transmission of internationalized &quot;text&quot; information, paralleling the specifications for the use of ASCII that date from the early days of the ARPANET.  This document specifies that format, using UTF-8 with normalization and specific line-ending sequences.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='5198'/>
<seriesInfo name='DOI' value='10.17487/RFC5198'/>
</reference>


<reference anchor="NFC" target="http://www.unicode.org/reports/tr15/">
  <front>
    <title>Unicode Standard Annex #15: Unicode Normalization Forms</title>
    <author initials="M." surname="Davis">
      <organization></organization>
    </author>
    <author initials="M." surname="Duerst">
      <organization></organization>
    </author>
    <date year="2018" month="October"/>
  </front>
</reference>
<reference anchor="TAP-3" target="https://github.com/theupdateframework/taps/blob/d0818e580c322815a473520f2e8cc5f5eb8df499/tap3.md">
  <front>
    <title>The Update Framework TAP 3 - Multi-role delegations</title>
    <author initials="T.K." surname="Kuppusamy">
      <organization></organization>
    </author>
    <author initials="S." surname="Awwad">
      <organization></organization>
    </author>
    <author initials="E." surname="Cordell">
      <organization></organization>
    </author>
    <author initials="V." surname="Diaz">
      <organization></organization>
    </author>
    <author initials="J." surname="Moshenko">
      <organization></organization>
    </author>
    <author initials="J." surname="Cappos">
      <organization></organization>
    </author>
    <date year="2018" month="January" day="18"/>
  </front>
</reference>
<reference anchor="TAP-4" target="https://github.com/theupdateframework/taps/blob/2cb67d913ec19424d1e354b38f862886fbfd4105/tap4.md">
  <front>
    <title>The Update Framework TAP 4 - Multiple repository consensus on entrusted targets</title>
    <author initials="T.K." surname="Kuppusamy">
      <organization></organization>
    </author>
    <author initials="S." surname="Awwad">
      <organization></organization>
    </author>
    <author initials="E." surname="Cordell">
      <organization></organization>
    </author>
    <author initials="V." surname="Diaz">
      <organization></organization>
    </author>
    <author initials="J." surname="Moshenko">
      <organization></organization>
    </author>
    <author initials="J." surname="Cappos">
      <organization></organization>
    </author>
    <date year="2017" month="December" day="15"/>
  </front>
</reference>
<reference anchor="TAP-5" target="https://github.com/theupdateframework/taps/blob/01726d203c9b9c029d26f6612069ce3180500d9a/tap5.md#downloading-metadata-and-target-files">
  <front>
    <title>The Update Framework TAP 5 - Setting URLs for roles in the root metadata file</title>
    <author initials="T.K." surname="Kuppusamy">
      <organization></organization>
    </author>
    <author initials="S." surname="Awwad">
      <organization></organization>
    </author>
    <author initials="E." surname="Cordell">
      <organization></organization>
    </author>
    <author initials="V." surname="Diaz">
      <organization></organization>
    </author>
    <author initials="J." surname="Moshenko">
      <organization></organization>
    </author>
    <author initials="J." surname="Cappos">
      <organization></organization>
    </author>
    <date year="2018" month="January" day="22"/>
  </front>
</reference>
<reference anchor="TUF-spec" target="https://github.com/theupdateframework/specification/blob/2b4e18472fe25d5b57f36f6fa50104967c8faeaa/tuf-spec.md">
  <front>
    <title>The Update Framework Specification</title>
    <author initials="J." surname="Samuel">
      <organization></organization>
    </author>
    <author initials="N." surname="Mathewson">
      <organization></organization>
    </author>
    <author initials="G." surname="Condra">
      <organization></organization>
    </author>
    <author initials="V." surname="Diaz">
      <organization></organization>
    </author>
    <author initials="T.K." surname="Kuppusamy">
      <organization></organization>
    </author>
    <author initials="S." surname="Awwad">
      <organization></organization>
    </author>
    <author initials="S." surname="Tobias">
      <organization></organization>
    </author>
    <author initials="J." surname="Wright">
      <organization></organization>
    </author>
    <author initials="H." surname="Mehnert">
      <organization></organization>
    </author>
    <author initials="E." surname="Tryzelaar">
      <organization></organization>
    </author>
    <author initials="J." surname="Cappos">
      <organization></organization>
    </author>
    <author initials="R." surname="Dingledine">
      <organization></organization>
    </author>
    <date year="2018" month="September" day="19"/>
  </front>
</reference>


    </references>

    <references title='Informative References'>

<reference anchor="MERCURY" target="https://www.usenix.org/system/files/conference/atc17/atc17-kuppusamy.pdf">
  <front>
    <title>Mercury: Bandwidth-Effective Prevention of Rollback Attacks Against Community Repositories</title>
    <author initials="T.K." surname="Kuppusamy">
      <organization></organization>
    </author>
    <author initials="V." surname="Diaz">
      <organization></organization>
    </author>
    <author initials="J." surname="Cappos">
      <organization></organization>
    </author>
    <date year="2017" month="July" day="12"/>
  </front>
  <seriesInfo name="ISBN" value="978-1-931971-38-6"/>
</reference>
<reference anchor="UPTANEESCAR" target="https://ssl.engineering.nyu.edu/papers/kuppusamy_escar_16.pdf">
  <front>
    <title>Securing Software Updates for Automobiles</title>
    <author initials="T.K." surname="Kuppusamy">
      <organization></organization>
    </author>
    <author initials="A." surname="Brown">
      <organization></organization>
    </author>
    <author initials="S." surname="Awwad">
      <organization></organization>
    </author>
    <author initials="D." surname="McCoy">
      <organization></organization>
    </author>
    <author initials="R." surname="Bielawski">
      <organization></organization>
    </author>
    <author initials="C." surname="Mott">
      <organization></organization>
    </author>
    <author initials="S." surname="Lauzon">
      <organization></organization>
    </author>
    <author initials="A." surname="Weimerskirch">
      <organization></organization>
    </author>
    <author initials="J." surname="Cappos">
      <organization></organization>
    </author>
    <date year="2016" month="October" day="16"/>
  </front>
</reference>
<reference anchor="PEP-458" target="https://www.python.org/dev/peps/pep-0458/">
  <front>
    <title>PEP 458 -- Surviving a Compromise of PyPI</title>
    <author initials="T.K." surname="Kuppusamy">
      <organization></organization>
    </author>
    <author initials="V." surname="Diaz">
      <organization></organization>
    </author>
    <author initials="D." surname="Stufft">
      <organization></organization>
    </author>
    <author initials="J." surname="Cappos">
      <organization></organization>
    </author>
    <date year="2013" month="September" day="27"/>
  </front>
</reference>
<reference anchor="DEPLOY" target="https://docs.google.com/document/d/17wOs-T7mugwte5_Dt-KLGMsp-3_yAARejpFmrAMefSE/">
  <front>
    <title>Uptane Deployment Considerations</title>
    <author initials="." surname="Members of the Uptane Alliance Community">
      <organization></organization>
    </author>
    <date year="n.d."/>
  </front>
</reference>
<reference anchor="USATODAY" target="https://www.usatoday.com/story/tech/columnist/2016/06/28/your-average-car-lot-more-code-driven-than-you-think/86437052/">
  <front>
    <title>Your average car is a lot more code-driven than you think</title>
    <author initials="B." surname="O'Donnell">
      <organization></organization>
    </author>
    <date year="2016" month="June" day="28"/>
  </front>
</reference>
<reference anchor="CR-OTA" target="https://www.consumerreports.org/automotive-technology/automakers-embrace-over-the-air-updates-can-we-trust-digital-car-repair/">
  <front>
    <title>Automakers Embrace Over-the-Air Updates, but Can We Trust Digital Car Repair?</title>
    <author initials="K." surname="Barry">
      <organization></organization>
    </author>
    <date year="2018" month="April" day="20"/>
  </front>
</reference>
<reference anchor="IN-TOTO" target="https://in-toto.github.io/">
  <front>
    <title>in-toto: A framework to secure the integrity of software supply chains</title>
    <author >
      <organization></organization>
    </author>
    <date year="2018" month="October" day="29"/>
  </front>
</reference>


    </references>



  </back>

<!-- ##markdown-source:
H4sIACB1Xl4AA+1923LbSJbgu74CYT+UpCVpS7ZctvthV2XLXZr2bS25qms2
NtwgkZTQJgE2AEpmORwxH7L7c/Mle+6ZiQslu6p6ZiK2H7osAsjLyZPnfhmP
xztN3izc0+T9qkkLl5zB/2dplSXzskqeuzq/KBL4JTldrhZu6YombfKy2Emn
08pdwVdvz49fn+xk5axIlzDKmkYZ1zLKOKMRdmZp4y7KavM0yYt5ubOTr6qn
SVE+d1V+BQNeufq8WtfN4f37T+4f7qSVS58m52+ev9m5LquPF1W5XsnfH90G
fsqeJqdF46rCNePnVTpvdnZoxg/poixgFRtX76zyp8n/asrZKKnLqqncvIZ/
bZb4j/+9s5Oum8uyerqTJGNYUv00eeWWU1fVSTlPmkun0DheLPK0mLnkWblc
rou82cAXScJ73f5OWV2kRf4rgav77u7sXpm8rcr5JPkX2HheJM/S1aqs9+hb
t0zzRQeY9f+4KMuLhSN41JNZuaSXa9ica54mj2APTVWeu9kl/T4r10WDIH9/
dkw/VO6C1vL6F34OK32a/FCV5cfFppBPMtjXwcHh/YOdnaKslnQ2CKW7yV8Y
8knm5snuq/dn56Pk7Mfjly9HyavjX0aJa2YTXPy7F88ODw6e8Dd/nRzdf5K8
/ctpUq/cjJ8+ePTwe3762jV4vMn7IseJCeNgU6u0yosL3Bb8p+aPjg6ePOaP
9OXXuLqFwDd5AX8lz+CF1y+ePaWtNGl1gVC5bJrV03v3rq+vJ2v+dAInc69y
K8CK+l5THRzd4w/4GtzRCewiHBeF+5TcPTh6umXy+g4N4tEK/6eoNUmep1d5
3f11DRjX0M8ZXJCnCcD98fjgPm30/Pht8iBJGzi2qyS7//jgsTuCB/Dz+EF3
izXs8SJvLtdTxIt7gMLrFY45rwBVEcr3mnRV35suyuk9Gezx/dmDw8PHB0fp
w+8fHB3enx+6x7PZ0fzITR9n84dPnuAnDybLLATPOd0NHDl5oUPLUsfJq/Wi
ycdVuXCAJYCnBJ56GDDnk79Mkr+sV6t1nS438bOzSXJ8fZ1m8a8nE7hlFQy+
iH//CYCZp7/GP/7LJHlV1peu+Fh2HvBta4P+/sH44LFB/6FC/3A2ffR99kSg
//C3QV8GO3jgZgdPHh4+zA7cg6OH0weP548fHT5+/Gg+nWcPD+4f4ScPbwv9
hwp9INIJ4nadN0Bu4ToVtSvqNdC1IgHijUTWZbL2/zon8/344HB8cGQnc6Qn
A48OH2WHcjJHv+1kZLD7D2ZPpk9m9w+fZIeP5o8eATV89GTmHhw8vn90/372
JMVPjuBk7mbldbEo0wzo1HjpmhQGTsdANca8gvE8X7j6Vud3BAA4c02DhO/9
u5c10UK8SDXAhRgSkOkm0UkSHPm/zOnRvTo85NN7/8Ju1fShO3j8EM/u/Ysx
MohvOT78Lp/nM6I1csN44O8P5+7wKDuaHn0/fwAHOU+P7h/cf/jk0fezx/PU
pXCO6znNe5tbdhbOMwx6AMFZuly7FhxfA8hSWP11LR/bkz8j5IusSm8B+K8/
V/j1vJzmad1Z5c9VfnHZxD//CKt0l4Wrmg52nFebX90iTattJ24/v8PVFyCq
wNVwHWR4Mj54AiIgCIKBgPHq5N2z9+9+6UcB4t5AyPJPxLzrDVCx5T26XveA
xM1d5UCoupc2s4Pv+f/HHxVMk1U2jxj8K1fN1igX/QBX9TrPmsvxyXzuZrgS
EMncFdBJZOsgCb4rF4tpOvuYHDcN/KdOji9S2GDjRb3knRLb3G2TAbYd3dAl
CyBbOxwfQabjnp798Ppp8uR7kBfGTx4cPPn+YPzg8fhRm27eR9IJP7KcfnL2
7PhdP4jrejFxxQWcl0O5a1Js1hOXre+t0hUIKfcMnB9cPUurDwePOnA9cwBW
JGBn5by5BhleLhETs+N1Uy4BFRffDKbjCQqr18Vt8P45YPLsWbnpoOUPOWDx
df0xj588Q5LWNJ2hX6brX9s3Ftbxs8uXAJWPeSWy9k0k8BFIdeMDPJ23JyBB
HD0exvPVBuBSEJ5n7ureygF7gv8b34evYkkVhkrgx2QMvGNdXeVXCPwUcXNV
lcu8dojCbzdvT39PvATIngHdnDe32vcDvO2H38OPz0/evnwzcL1Be6wnrNsQ
mYe/16hq3svuHXx//aYen3+/XF9cN+7ow/Nm/JeXf35Vr8YPPmyOj9+5v69e
LKvjV25+dtKS41njeu5Wi3KDoyGdrfPMVSyWbhPYb68Lgm4FeunxVrqVNmWW
bmhnNUpl9xpQ0YBuLdbLIq+be4gf9+4/unf4+N6mXFfj9ArWeOHGcM/Gi7IZ
L8sK/gC9Y5yBuuyKcXOZFmN4Ff6RFx/vPX708MH3948Oo/3/AiMlMlICIyV5
DbixQCEChkuC4RIcLoHhEhpuGCw/TJI33z0vQR0SMSFA7/uPxocoOT97N35z
fjwMDRRI4Wwr0b8IzVMiDUh+xwiZolyUFxv+Nf0I5zCG46jSmRuXsB3Ysxun
eTVmQaAGKBXja/gSRdtxloO0kC4IdDAFvBcB5djGTE54zOSNjnmcV0qwRsl0
DegCUPnZJWSYgItAA8OPFZJ8GPi/DwMKrtQPaVVtOpzv4fgQlbvT1+PzN+dv
+qGUw/mWTTkRsScvY7SWx7CXxISgpCmBQwD1dYSvedG4iwqZEyBwrcS4hku+
AI3gEjnYna7SOT4EprwzBmKSTkH3TmfNzs75JWCN3kbQ6epZlU8dIpKfG4l7
raQfTRNFlly5y3wGmohNzoeVMOOuJzzPMs8yEGN3du6iNacqs/WMhKsduXCE
sbKv9kjx/PG0NYgrAwsHwjgDrlbBPwFmrkinsEr48QKGQ4pOo705eVWTzYtA
luPPBmCAYOaNYrkaxfDq1MGiQGhPk2UKV6XC69UkUxDu4d8wFaB4U6NiVsA/
QBdDSkLqWWcTp3SOKSsFDJIU3lw3C+DSmSoGtSOo1TzPHCSW8houfAEyNgCU
MSIFviv4kJIkI3uaeVYBAGpAul3YGSWnTZIu6hLmrAlgcOhpjZvAnbu0BsDA
HDO8lBsGbF0n9WW5XmTwbjB0OQPITRCbXI3YCdi1ljWz9L6hReIXZQHArBMA
DQyWwrh4HjwYEt/GQ5yIOMIoA76XrWHh9qiEzSEA8KbjyHCxQWxIjLbQNmeX
ZQ6TJNc5Uj14raxRc/7HOq9oEEWi+cJ9ygV8OGBtR5Gl8A/EHwAkrh+OG64X
EAvY9a94sILzQOd5syDBZskUhynWc7hfANUK4TyPl36d15c45iVQb7aHNTlO
w+IyECeYDAfZ4IDJ2zfvX8Ag9B/EqiYl3GOUX6kgG4PNNg/odA3EHP9LauU0
L1CZ1alAtCrCtSXXl4AOWblqEBtwylE4RMAr1Xg2gt3AwymiIEMKiVNVrpAL
OwJ+UsJ3VWuFCCxcCOE0TjRBKnHuqmXO7AH+vIsMnVaKTLkJn6EGJ5biOmFb
Jf5/8voN/Ovdyf98f/ru5LnZL+k//OzsxzfvXz7X/+r7z968enXy+jl+QrZO
vABv3p6fvnl9/JKvYUhtkErBRqdMiKtV5fCaI4iFDNHV/fxZLKVfvsDeTuGU
QP2u5MOZSCrw6r//2/9hmI7tEoz+/d/+L6yhfai0Q7n/KQCdpRfE6vWCz1p0
ZU87dM0TAmcE3v0fgBgt3D4ymto1jEQgS9RwSRZw+xmVyTLhzU10XACLpcO7
qkCogXEu+H2437BRFkGY8SUnz94T+UuNa2TMS4i4AUHVizTbwMMJrazGZRUM
3wIvM0tkM8GdQgzLvBx8SchtHRIZufk2L2C7LQHJB92/NCnWKAzi/qdw34TM
ElZfIYFCSALcSFhcldeuGiGY8cABSYBsghgGNw2XDRtNTjNULuEIKt4BUGPA
iDXsjogD3g9+Y4OsT0wOCKJk100uJjD2enaJR5ki3/jH2pFmCBDgVe7pPD8B
ZSGcSIt87upmH4VasR1dwxYvARmBUiz40hpzvZLPgF6DRt0sNsHplYwyMDpO
8iNcbvrkq3a0BKmTEBPAKwOdIlLBpy/yhVP6ReZ/XRNxAHqdyQetB80pm4Dc
AeGiw8DB8LX5Iq0vR/o234+Q8fAdZsrjmY2ZJOBtnFb2iwOuiGYBQFKSovAJ
o+UkOUkBnPTaZoWsBR5flosMkXrBGE/LgikXwGXWF5dML5CAKwbV5RJxrkau
nwBQ9KwALsDh/KKEgujtAFkO5TTAgBp4N6EgnXBezBZrJOQj2ob7lCKlGCW8
/3WVLnbMkhgMSX/rO4DpgnJscKQ1oAcNQP6JwVc7IL048R7+uWMsB67N4PB4
ZHT7ZPAQ5CxFAp9dpFO3qPfgQgrTBBAxERz5kfGKTl1AVNM6Gg3ElnKWp0h7
ic2kZE9NGJsEUfAqCxLV/RAFkS1Fqa4hiQnQxQGQae0gMW1WDUqOK7hQcJwN
30T//ojMtOQsZHlSrlc92YMzflvBIkAZPAMRCnnlhighnPg5kRO9Pbo/EZFQ
Tl6IzGgELJYckY6teHBCS7VS2xrwttZKVYWo4yNvXYZtwwRuMaffRcIPVsnn
n+W13PW6dxgWmumznIXyNXyZNypm1YCZoGgkqBTjcdQrVMhwiJQ4CImouvq+
GeCyxNBDedQh/rHUt22LIJsSSAVSQhDwxhaOIU+Q2rCcz3QkECZtIFYDcAKk
ZiiqEMs0aaCLY6gDlKD9jxIWg5gerWumEQxvlL6SXRxtj8il5wWqG7XkYJR4
8HU/VQYfELaB6AU6g4g0DAaQYsix0BEiInkukCE9bemIiCx5woh4GxVrZ5Uj
lu2l1951E8zMgroRYaMCyIeswMOaNiLQJg5ACoqyAdJ9+azhn0vA3yt87w1R
eRoAaS6sEhHOc7RQfiGJJZ0hQ2CBhbAqEEgEpUTdweWfqZK4j0EJmVu5Ahke
773IWdNknosmjVj6pxXBplhMUPQQRRhhjvPD6cL444NAH83g+syQPxO0VP0I
tQr65DD4hMRS0nIIJQH18Aj95EAmVZ1uT8dM6SeRjXpki2PabS6MFhEWMAhp
jwoUS3k3lvRIx6Qd1CzTLFnBXABh0VHkQL1EUq0LwgociGcxH5kNm5A8Kyj3
Dsl+Wz2onYhtCJbMzVWjviDErUQ8YkGd/HAkpu8/925t2raqvYApfMSMUPUK
BXivdKPBYBCTyc5R4yt8d9KC5RJgJM0G97KPO+Dp8Kdk93IN8CQ5GkQPWPme
n5L1RJsQ2KSr+HJsVmQP9rTznLyKC+MqNapMTB/yenBE20LgTS6RqBOTZYUD
x/HjozoAfLXI6yUuQNVn1FNE/CSLAxF74yg2XwRMvE11yQisJgNv6kZRC6YG
2guvARBNsstRkIXbOGvUYrJW8xj+jeJppcvAU04A4vC5gP0MVlIHXA0nD1kf
C/pXJdoGVuvpAog0AVJpofARnAmHHcH1AoGgAZkM9MwiXdWX+COOcs5ueT4V
Oyhcj763bU1ImGfkb2FU9KQwJHGXaaDBCRhJy2pgVTSXrqJ/qp5diXirqkks
F8F8lwIkkobq/FeZRqFwuz3lcxa/6MKipaVw1/5lFFh4ux2iPtkhYnA8q8pi
s+SVcPRaLvEpO/vPjl8nrFU+47uwgPt3DKTAYpRA90s0Douo4bPnr+V1JPZA
F3Kyg8n7rIbhgCcLINQwNYBCxsYoIjHjEAKvycBnZkCjjjDGy1Nd18sSjVan
gS6LD+CVNz88h8dvivG0xKVleXpRlCS8Im96c36MkG075CKjN+7m/fOzfQpv
IuvAcxsE5KvqCk1FSP9PccfKBVTvY507eU36Jxpp3tEP6UI1N9ATZiXTnpZx
qBYDs/3tpabZIhUxlS4ocGOYjBV9Vd9x5ClgENBguNhkzlKdTWzGbKgdte0k
JLp6r5BfFxDxrumX6FjtglmIXDKRik2oQKqASKEnepTIStTwinwfhBk0DPKO
PjUyN/7VXCLXSQBjWehA9L4g1wxbawGFfyyv3RUaF0h3jIIekFqjkQPEDlKC
upahizXo4ExikCwSq2UGh3cZzaJkEoV7LxYs4k4RqWT9t8nVACIgg5+vYGyU
EN65NEM5g+wtjhgDarZIFPRYRc1jE3Hl5mzvIpoJRCJL2NesIvMV2c5zlJ9A
r4YZPn8OvNhfvtC1/vlyo2sxrSK1m+oxamfnuOdXmSoVEAkxnAeooyb4bXgD
21SjPZ4F6g9KW3H1QOcAUWcpUM6nyFyQL3qjUo8jgBBHPHdmkAKky4s1S5Og
712PmOEuKR4B0GeJTj5ke9eh6Lxe4fsH9+8D+i0WuAv0HdQ8cQaSEsBUPJgA
UF6b+wRyK+5gzWzVLDGh+w3tBBjTiwjBwn5NFJkRFo69AllUriSGSs7yEigo
yi+kCn7+zI5CmvQliFSzjdnLbWDPUs7OXt47f3mGt+rPb/98793Z8Yj4AGLz
HF0RKqXQku04WDgU2LPZHF6atWRlusUkGE+BeDuHgXKXaFPOPPrj2atpX+40
MjGg6BItgo4TDxHiUayaoM12RlYIMZdm+XxOIRbeOqh0gFVr5t6IlGQeIomU
LHHA7pYlqqqRwsz3WsOhFZ/yK1kinqh4rDzGsiMjJ5LDwAMYlLguJB1wp12m
HwX+D0Y5JA11OkPyPCNDncCIJ0NZNssGPr9UIjYjCoCqFuCj0kjm8KETrfaE
jKjJrKxY7cG5lGtoFC6idLWe5XQSbmVKwRYuIAguQEGIs69LyEJ83l6sFFHS
i5FVMl8XM0YDggRSpjPlep69EU2Dg2s7VmsUt4gC8e0k+4suN/D+IQoAW1YX
Hax4RW4VmIQuT2Q3RTNui7bkHSfjyNsK4XIim70AHPBPFxgkNs7WyMIAuB/h
p0uXXm3in8iyUgJSkokerrdClI55VTbMvReir+O5E3clQZKVnc66zNBNLnvc
Q325bhp6BkiAl4Kvnf+EloFnxdem5U2N1oRBXq11ZCXRUpv4tDwH3CHhB62O
GbFI+4HQpyAPL5B6tvyFnlvh0+ybhYujSiazGEUNwjNaw0yxbLoRpkqHSYZb
wlOyDtO0dmfdp5lbqTkbRYKmjui1ElTFU55NyKbOyndfras4vr80kT80uUDs
LdQQssLwisquHit+xmHpCoDQDddpuRIp+2dH12vJMGBHFW2S1b9VRaa8nM1N
eAV4UcQzf1L+Sk6ZlmSFagSJEBHxwyeyfiA16PMmkzWLsxMM2veGcTosI0pZ
SedUka1+5haLNUijo+TnfPwiJ8nuEjNbrmlgU21rpEnEbxDCLmejk5pp/E0U
Z3HksUKzM0bV0OD4Oao9nS9BX2FHAeazIMzVzXUBp3ydbqIFaEwDHTBhDUtq
gN5zJNxIdsQExO5TupaMMZmNtMTQl8B5q0ajNFB0Q31v402aoSGRVw0SNSyc
TDdm9xQOJWodnGPjxuWchYyqseAPMgkS/VotiOXpJUVQPidQia5B7qRQ35Vv
0cfaCEeBVaQq+6GoPV1foLGzYTCbr6HjkgZArNJmRpIqiPwrZETJC5Ci1+zx
zcqEWD6iEUnBGJdqdpHEaZBpgRYj4zvf1RE86N681wvPrmx/Vzwl0PMMHZT1
zBWgN5WwS0Bakkf0ukosCmyOxYsWkQiwP52x0EISOXvheaG8trusI4F4iSQ9
/zUMTmGdAQUrhDx/iyooCN8Ffoanx1Z9NajLl4AuKDy24ncQ8uqi9CDwKuBT
kmFDvJyvEeEQ21HQJJJcmZ7EGvcCd4ti0srsP2gOuUKMUHMCvxnYcpgwonyA
oSxIVEHORbITkD8dmewoJHbhjuFBodTAFBTkxU3bpMtOxitRQ2pnHqVaaYa9
+x0SUrecAnkQcb4i6QWkWLLvYpBGJseuYyzIrClHBCv7rm4NYmv+rm7LSrkG
vYyDQJw5EOaDCdlg2YeCgm90ECHw/6TvBh4hz5CE7hCJA3yJh2EfXOc4/0RO
RxmVhQiiWWyfK4nJ6TjhdwgpfDbtTKsI/l5lKeQDaMUW/yFt3qlDCTXK1iHa
GzXb0smag4Ym8mESZRJvtvNWoWmFYUrq2VuW2Xrh5ALwHxxsoC/g8dEntVrA
yalei1f97P1P4kHwGgfi4ZLVFBRWpsDHJ8yaif3q4n3KFh64kOt4FDawwFOA
yihx6Phug0AiMNE1Qfa8wEBIdyFjS5lYfuGVFLUwvl8ctIK3w99EL58GKWVy
H72HV22dpS7V30C4CrXeqK7Tjo3X4r8M+AZ660uYlI4+ciuTbQTZhrp6ZrkI
ZpiJABSjqU2RJFjx0CxZ4fVEIAb4qg5ufy9DMih7QLFZKTWHeF5RRNaG/FpT
4AijyDCeKU8Mc8FSHwNhoQ2wI9DKQpLMoNKrYa5Nuhn+auQ+7k4DeDIMB8iM
1qOhOQckQ5RDiZ3GJspUIf9LEU1BrFjq7QI6u8AH6FfYiKDNG8KRpgjORTn7
SJqKK1EsxoNg2ptXZP3wAGPplM7FtkIxIXIaAm/hikEMAV+OiHrXlzlok+/P
fpARKGq6Zhs4mxnK64I8bGQgShfwb/qEyRvFY/HJi/kDPxXZnFhbXi1ZY9O9
GAKEBMnF5Gip2X5wLZpUBAVc83WKwjpOUctDjzkgoKD8HBlypptGUY3fVo+b
eFXJJ84ia0ZofK8Ub6odDoqvFwhh71SH40ODD0NbvICYi8RC0sjTJZQwAQI1
xqVn6lF43kXfkUUEeqNY27uoJjq+lhsysHDwJUdSsBPQBWYYNNaG1zVYOo4l
LF09zhFaKF0JRBOV7clwYN6c2HUyHdzh02T3YI91m8VFCRrb5dK8LRx1lIYn
xDRw95A/6UzmbbjBN34LxFPYRHXpZh9BKnREkpo2GixR4u2fwo67ZzNsAzkx
DZXwU703gcjKwqLZfEl0Xq5cpvEuxE8DIYsuqBd0STlkVYVd+6AefFQ08YFd
3tKGsWFiq5EQB2JBoPOInd+/qoI88h9gwi79iII720x8zN+zt+9RQnl3/GrE
m6gQ+6pIucLQwAF9CViL2C//hMYwtJ2iIO+VNLX14YUuMiPTJnlO08yE+T8l
PlauRhmOw4TRL5E5lkYAU8ccn6jaowRivTx9vTcJgem/0qvS2De1uyCbgNhc
4G2RqFRRNPW1IiGB/o943kikYHZOi+ZKp5LOyHTTtHRjXNMx3oNKVkUaIOLw
2Mcm0qKZj8zxZNLqo0SW8udKMARJbJUaW0Q0Dm2Ry5xidZdYOsFCXlA8TM0Q
4JX1bE2j0FfiuqP3UcvhecW0gdMu2CzulW+MFY0XURkPbmtnk9AEIpso53OU
2yXCT9w/gHV5mbFBGfQQREkgZUvgw2xwFnOIMgQ5e8TKqhQ1l7CAdDyZaF0g
sRD65jMeZmXNASjeCnqpQaFRHD1RgjfMq8ko2lZqyb9TM0lSPGIpQSWjwFg6
ErWfUAHeYS8OmgMpNaI2N07sdCRC8fZyU7Oni9M5vR0BHQLwO7qj2TZPyMSS
TTCoBpiQ6T8MPSDOAUOmyAb19MLhFwQXzCsj6ziF7Wn8hHzYP2qYtqPnNV3n
QJkYuUY+aFc0BP2dhyV5iaNUMKAytBZ4f4WMC5K7xl2MkvO3r4jUUbpR8vmz
JC19+bKXAOMAgGcbwDuM1AmkOjoqEewmbNkB/GTZv6KMnqK0ALtsLb4RjUsi
T+Q/0MmFbyM83vJQdSea880PzxHj3j8/M1MXaWxzcaIE5uNLVH1m3kkQx4or
71di8cqcVcu8qkrOApQT8vyNvFNsScFbUq+ndZM36BKGZwBzigOlb2r103kf
WPx7gyE8F3aKfD41AFwyoinwCG7Q865Jli9Sn63WFLUoK4EtuF4I8VcQNHjQ
Y1ZR+CpdGfSNLVxaESspTGbty4ES7y75XkyzN/Jg+UXEMcSuyAuQ2F2GKLkz
xEEW5t5YfF80G1pBy2Lsk5dwdm9/Z/l+ROyDc4Ioa4cEYdZvA+aG8rLo0i1X
r4kbE4YIVtQQL9EI3VY+Xy3wV43aDnSNHxA4EsGv1xcX5iuPD0xMGD2GxMjZ
5FHeO0I0DELcRHQY6NzQKMml7IP9TXimrUCK9h41qwu0XtRhlDahbS8O7vJJ
HFOnqWbZiCxnknfGZx9ETYBEYSkhbPCg+acsOXSn4UwgjpjgfAKyBYjf2Wga
3w1yuFV8wy7KdBF67SOTW2pRaJLCosEcjWIe+rPx8yvEBLjHGFAnjnTdy5Dj
J4jgxkXUMTzSDXs1dj9/1h8/0GtIatUhQ64+DYFrNAGMvqOqSXg8oDO7RbnC
gcLXYRjMWFfziyyGDBYLjDtEnUv3IoxRoxAEJmgSrrJAw9F1flfLhmBKYcI4
Gwdc6Qb5jc93W5uLHUJILiwzEbd2LRlEGOHorlyUOSTo58kXjUhyOZCxCgVq
5AWUUIWMDp3OWOwKCRqGqYhuIZkI6j1lvMvymkNP0JrDqSuYW+gtQCjBIrF2
Yy2XYBr8KLEKVozXptoHxibNhjHKMM8/iQHpEtXRlp6KT4NAhKv1AiiaOL9g
O89dsenoBMF2VlzPwgeokNIGg0a+YuHYNUogKcdQeGj3RNiywJ6jDAzzq2NC
jsWsIhzfIvGnSrRqDpsgScXE9nj0Uejm3ERjclZCjF/R1fh8N0L9MJeYeZYK
ED5YqxXFhU72vMjoygyjp961rWgZLoWQj+P3QCUWlzkZPCxbrUpRO0h284kD
YUxt18AuxiiFXboxJ0zrJd0TK7HNslGJXRYnXOXafNuccL6PwnhbpB1Jnhyq
66ia2fLo1svKQjuJnggFyykehfKRzHVafNNUiMgBaI2rUAoe59+QWlaQJEic
nMJ/JOjZjpN0Q454uyIbxV4sZYvdltBR3DRpnz0DRx/wLapzaMNhv2FyAZkD
vAULqwqQglMKJ9/musxZ7QvWaut7G2T3UH50lAXTmkfTxDHG1yJLWZ4MM4RV
h/p8Vwm53p3vanko7FYsIh3jV4uHjLQCIop3QwxEmAMG/GtabJsHikuU6LYS
ts93Uf/4IH9+oZDtE+CFdVbBneQRngqtx/pnOSWllcNEncmiGYt9PCX7xYFM
oNHGZZKPHmZmTpLd1yXWUXhdNpKxELuNSa/VZFInY0ghADal+2WoFIju/D3e
+FYK//kuEuAAEMeBZFE791Fgjm+J46B/IKQc6NNcAm3aStPC8Lx0iS4Ssusw
fdt/DvAfoyZC1lg9hx/QcN+hc6pYs92jR8XeP0PTeeUauAtXprXDePQ72k3a
Y44U2zGxzElOJWIA4d40pfoNrqDADtTDHFvK06syRy8FmkxgVZPkLF/maOrB
Z0nW3dNIYm/4itt1rtn0xwkBlIhWWYivbBrURPKx5EUXIHDuoJiS9ZNCMPZf
VM796vy+n0kQKGfWUZ6c5aUyb+O7Xy7gH4LJU0rj1nvHmgJFP+UYQII2KEUB
UuZp3rfibpVvI5yxxZyKrQoIKygiWbLLK9iLJ7aQoiKZEhbU5PoMbFAB/+dP
JLASk6DI4l3kLLdL7I6K+qmU4sIPLQLY005Gq3mVWkKrEJLTWKFCGhorVCBC
kD/jQ/Qz3i2TAIKbdRv9LApHzYNUfw5MxVwejQCBrc4logT5WeE+rRhcUwck
JC9ZX+BIk1x4ZPuKAvGQ62j1yzwK6YxxPjVhEjs+Fhs50ICrX1EmoelGgF9c
16QQf0c3W1xdPkSZ8VRrKTHhLzEj8AK9Cm2LK2VBMS+DnzEPq8G8r1pdfmIU
H3khESGpdn/ZGsKRAgy52AQt5VX+iQo0slejB5e9nca2b7fAQmeWBnRF4lBZ
1+IWejXVmS+25zC8Ri+iL9cQOlZFaZg65hIKWkrUxxMiUyh5qeG/fGaaYayW
OTXDLNfNmpzyGESrOZlyIVQaF6Qozf+IN4GffQD1Ay7Ai3UQiBBq+6T4dHSG
doGFEenc6HalIFbUojT3gbOujqtpDsQQJSsF/s2Ii8R2DbPYt+SnVHeRV1S5
5glZD55r7kMnMBr5Kf705RuKEKW+wh0pD4ITWuKmZbmS+gsTwj2QU7qmgm+o
h8NOS4eyBtwYDv7PByrkUCrqbyqQgxQRFnOZAzddoMoxaqdicL7DddmvIag6
AjJLR7QOchjC2g5h8JgUIWCdruP3xNXyJzpLr1gfBWZSgEQ7sCKxHBHCFZ9y
phEPEq7NqZxMEdvbIbtDkGWMyZZUt8oVLirwNDbJsjdVlJxKgSsxZnBhiGVz
6by7x8byucX3LL+SMjSxOjCa2wJvtICNMiHHyTNM/pmztZ5rnpHpQiyNcuyg
hUgSJcDaJ0iGSZFzIi+VaHsSbyLhMLSU72y1sgCfJzimak+a4mj+avEq9+cD
yiCWPxmOcXM9G6SewGNysQKSR43CcPvzedsect2B/BzO3Xu83m3RlzXJpy+k
CL2mCEsOeSuTjwVFmfg0zmOmlEGKQFCtOCyJEHhWup59OVgLot3nsjtjS0ti
Eyn5PkOtNJjWn3YU8WXha0JLo9iscKnKYsuCZKDFXGPEgoXHVSA4yiEsgSHV
CUwPJh7CEQfqDFKHDMvxuF124eoOMSt9SvxF70o0abhjsdzg4kVl3xbHGCZl
k2L+Tm9kJM6Cyktp6Bh22KWTvQU4pDQNZRNfkgmE5p+RF7udD97xsOXsam0V
rcLXP/gaMaaeI8SJVNBsuNiy+YD/bi34uzp4jQtvTYOMec0ajejNsdEbWo/l
6lMJLWwngKu4YRKJiTSWwS8Em29vlDaAz28xOA3YxCHDfYnSLTrsSc6tMsLr
G9fBWeie0LZIK2nHpBHHXgt/glEC+ue7UiZ+4Byjlweg3F/wgN1rFs3ZA32d
WQ+A4+CC6gut1X0IhvvCrp9oeWU/XybCIJ86If431m7QnKWRBHqNFSWZlVJe
ayUCRW2jW9F9LvjXUDoZVcOhum2s0bVrtH3+HOzLA+NdvMiwPINmwZOVaj2N
K7cJGQyWVEopNlTlUH4nYInGzq57XCH69DXpiPAKTcrmN+Vts6FMQxriGhQB
2ZEwtBfqn0ZnDfpUQnQggEyJguO1RwsiyprhMEGs8vyGvWqAFwJ3f59dKyRy
7e/LOvxPcYwxCeFM/q1EIPAG9CeSuXe+ruhy5XaenJCaY94ZqmNmltkmnk4i
tPaFBwmcwdKm6HSYp+tF86ehJevXFM6k1XiuL9liX4kugxffSTyPpX7zMVgS
C4H71jBOORi13fgDsJealQDKAh/tf8XXd2AntbWwIJxisc6JHZYjDjrIJOVI
McBsruGLhN46CqGTkWji/762xk4IfA4D4wJvZS/BmHTJpJCWPuVCa056EmN4
0FveZBOQYpNYhRbX8vcAMY5fvx01RumrE9TZkoBFOI4SRQObTytsxayd5WpM
GmFnfJ9i2A54kXo/njj1fNrhEwaVkFHwGZnaoMxMfxhiZ/EHN4FQMJfsbbfU
RXpqk2ABpID+TzeGGJG84IN57ZyjViDscbcKj0ENv8932xJb4NYxr/LFOq3S
Aq5MTWdAZnJYrBmXOcM/LO3maw1zMQmjst7cKn00WIHQ0in7+0on9/ctokjj
SuRaszsE4eaKWanVxloQwWmvL0sqd3f2enKQ7HL8Z7HxX9WzS3QCLHIQin44
eTdKnuP//RX/j9pVjZJ/OXvzGn559ZJTL+FjlpfCiZdpY5bPUMq3LN1I1/ba
eFASLSzgwX2ttNFVzdk29nlaW4SN7TXUFiiGXmJzwny0aVrndX8HrRHnXfEf
xlxphz7zRDtbveD94kBa+oad1mQS7xPAsTXXly8hfSii7ligPJdbu3Zh8Mjr
F884cORUqOlQ1X4fHwVfcU8B+HAUKqtWp1+Lk7DFVpJ9LWSH7WfLnjsDO2OU
wluPGGKG0uWyLHo/QUspPvygD+GanXBhbG+tUdBb4KolWEb5tLlVVJ0kLXOP
PUGcOTk9//HkXWg7NheA1RkBMWTtA1SDkbi64y5btBlTW8VCGfNFcALt/uSV
4NCejN0f0g6/tNIXRMfB93bVvvHu7Dgh68Xzs2Mbz1MAubg9KpTPGLOx/lbV
oLum41Vdj+vL9PDo0d9w7L+5WQa/4i9jbLOwwgd7Oztv3nmDLppZKEYMLT3I
6JjIcpJBYH/dDfONYSN5kPiN6HL+/gUiL2AegG1dmRmU5I9dqfrF7Kyj4Snb
2UtgqZQdwajUoqQb4UhhscPA+Q4SuVXeZbMryssbDiyfR8rL1IlUytYcX7A3
sLlGoN6t93yMMw2JkZrI6zi4nxK2VG8hq24HQQLMlZHwV/Zs6Cl7LZon2WGr
rT9xsc/kVKgukfpA/vWdc/+HqCe1ZANJvUAi1MQygnJK/huScpH90bHRadS9
x3HabD0MQoH2aZisW3opSUwwJG8MYwkVZFQk4aHcp1UuafbCQDMy/OlEjeMy
HqGEpfHKoiNQZe5ZpcVVJJdTijNEwgX5pTmHTm4qLrjHUq1Mmvajkn3Wjva3
fgWRs6N/yAkSczkPhrjUNxf/SHQuoXDI8eMcOBIZesQyReJiv2XKly4OTNht
405Hzr3dHVc7TFAbAW02GotOo5ZWQLGLZn233LhJlIzetrmnSprYksSWwY9G
VSQ8RWqK9zOjNrlYgqZENk4zMsIlxhQ2NM76IYB6xKlq6PGrsUK2WlfEHmwy
EONRyroMHFLGRUHQf8kGE2BXvvS3LkMuEgd0WAlRdotySz00agdVOsMii1ZN
WgzPmA+GdhqJIrcZaKCcjXtMPHzEd6VXq90VJAoH8BeB1eOjL1+CEJSMTd4Y
EQRn6oKa2CAqftTyEB2lzRvDBLFDLTX0WKW9tuPI/dxOdfZ+t6iYf1mYrZ3q
z0lMGBIMKng9Eh/GKHBgjLT4MGceamodi9wA0vl6MbgA7xu5piRnjTaznKO0
iuoNS1Zxx/QEsGnDhfICwkLCLb0rTjzX40NzWWQI4IB61vPJP2Fma1/UVWMB
uLo1FyAJPbTdHEsE3hKrMMUJuduW2PeCAhHtclRsvlxOyYLkSQZQF00D5rob
CF2gtexiqlIKeg4tLBQSUjmOBjaj13CR25Zpk7Jzr2LTrZl6X/UO4vGcfzB0
56JSV7Bs32eE4wMwMYpseKIHDaniLJ1reaG88tvwwYlpdOBAIYiKRkiAyO1z
CpQKEciHjQCMFPQyrUIGGLH/kQpHrpejlpTRvShEiGkWk/+l6IRcSvkR76Ld
d02HpzRwzPwLojjECxm9imNFxRHwEb5Iko+m1iJ95JMEtYnTofsd2qjwpULg
1ejW8VuP+u9FHXECriUf17AfhLjcwpj4B7172OAZEA8tvAOcM9AjfTke/MCb
xH1uSGvvMtOcapPl36TrxsKrpVTP3XVQ22iVu1n/CojoeBlQUyi1tFy7PnsS
nE+QxYfEzwmTyzUKrGcib8q3aZo+1tRJJQc60MYb4xthl6NlWnF1RaArC06p
YvkymJ+DvdAO7khnACnKw8ejJfIPzIVHjVdiC8O8Zc9+gC1/VS48GY5aIw8P
0DE5MzcPr7tQpKlDUTg8SyIbjL2eGJDnXENUOx4wNcf25fCjBJQmdwIgCnDv
SPbUNJR/spGZyVg75OonwbqDpWISdzZRCZZszNywnvC6HFZPUqkUxapNTMV8
LIelRhRhVwJNhqnisMha4vAKucu6+uHD9OkFHCRgQogXl0ccMsD0v+c5lTGU
a0HuRavi45PZvbBqGwyi93q3GKTtabCcr3dEcadSsN3C56KQQC0t8VsA0tL3
ovD2Onn25vXzU26d9fIX68XVg7JD052+EDRTkFhwvqTYtNlij0gaxdX4MvAa
5C+SYt9gwYs52wIvyyzsJmTFxIJ9j8eRZQ1zDZdLDGufhWOhuuXXIFYzOECq
1GUfkLlNa7WJBO1ZSQ+8Al/X8MF4Ot1PQm5Nt6MIMh+GFNh/dn0Lq7h31UhD
JaM4XjxqST8NKhR5YX7I9RbJYVZjAfQ3M1N4eSaO0GVFpGUNVS+qRzvSpkTN
ffb8tS+dqavBPn6unWTK7mBYxoCgm0UhDh3vP5os+nWEoQiHXU0GGjilPTt7
q4qhSow58ENFRv0jTc6VnKM6mrnWcNkyRke0YhS3VMlGyljxz1pXjFzI0YYj
KwD2AzAPZBRaggonbvCjc6uW8sIFJX2QAdNH8n0r4e6EJQQl+vqvklhldICW
0Sj0cEZmGEHxW9hhpEES/ohi5iSaLtID1SkuBaVF238qdlX9hHaiJNL3quHo
DAoHoRNQTV+8Wu7TSgp0sAfjOl9kM6z8SnxvipQM2/yyg5QVIXaxDWmeOxIJ
XK4kDSJcXx//3LpUs93gRV3mTcNZ6Ju+kThBi+QbW0Vkq1X/LvzFF4nHTQfC
MCbJ7hkoxT6IqROg9GWy13MIZr0KdhVo2rY3H9SHsRFc1YsJpwVUU8+x2B7L
OZN39D4djP+R3tnTAFWxx4fQNQZAiGYQxvxLmyWy5BGKSxRHzXVEfBkKtuRh
nhy/sr8Ph7G/P0DL4v5MHZK2DFr/dYoCNlTFKby3IiHlhfQ+pnto2QKA+BfN
pRjWut71IPAiMK1138ODrDsxDSpn8N2S+9+vy5K519oDq5qw7MlXoV4oaRAo
YbUX6Qzb0tgLPcitfCNMU+2PM9jm8WjTv/OApiRB57tWmMjXLGsI8KYVLnLx
3sVW/C3LUNslh22p1WEU8KbFJq7F7u30ZrzljDuhiqE8hkftbQOoblxjAITK
2lG8j/kHQouuxauENt3um3/AuUjZuy6we5rrbLMY9Qer3M56ZGm/wbVnM3zo
y4GnH+R3E5BaQUJs1fbtxROqZiRpPl86KSsD6d9S/7cbD2bGmFacZCMNnNOi
p3ZunLRjdRR9LCbaKOJM8J1tkOBzrltB+CxRMjeJYslRxKKu9qGRTMPpADsv
qUMHIvjDL1+C7ulSKZTShqTgAy2Zy/R9iml0Z4k+7ZEAE2yWRQBv97v9zq3W
DX56lS5crHilCy3zMeqYoiT9IACY+ifwxdvdJ8/Ag637fp9hRhx5jtIm0Onx
vSz8UBiVth8Ekbdl/s1FCFXHSSTSD5cQ8KsU8NUWw8mnzaXyw9JWw6JjLLdE
KHMajPgHionxCmLENpufBRN02Uuk/vHShUuaGiPVYdEgioFVM98ipOZaZltR
/ZpEeQGab/mjNBd1UNlRD6XZ8nZPVhmGRxQXC++MDcIStfys3vDdv+3/zWt7
oonCEdyqGsUmlN6iEAEqaSAGJrswlVSDiqMUkz4oM4ApLcHsTGpklv7J0cLw
h/biRlY/WvaqJeaI0rRjsMloQbuOkR6bGKplJajUaJScq0dcrCXyguQUYmLs
Xha8apNuWZtGksupYI42G4WlR5IujiS9uCbt0teVYgQsSrxYmKjc2MHbyiU+
bxT2PfLo4eP3gkjDxgfPySpb7WVZ+NiXdwYdFvv9HgvqZSbcDbvccE1UX3ja
3OXbLtVcCakyG/O9kORMIiDWblpjidawtiG1hdKy1VtmoEpuyoJU+qBqZDiC
l+LzVmJW1FaYw23xnx/0iw/VmvO2zn0Mvi8+HNXUsXbR7GxsScRa2tWHUPv3
W659kWyDaSgfPC4+wCEHFZY1841XNLKrr1Q65++mXOeZV3FdoW6NMtWo20yS
rjudmXiUlXRiozjfBk7qcZ2/f9HqawciyPsXFBQEUgjO9vbkbfLw6DE8gH+N
4V/kL35fUHUBah4iVtjrvHbs7mU/oSWa+fXGh5gXUqOGcNNXcogC7OgguevB
q7Z6Eczxj3W6YDc3jdPSCcWpEp/tceweh6v54vTlyevjVyeTk7+e0+qkKWz8
3Q9SVD9vuluEQX46eXd2+ub1JBxMD1ie4cTH37U111En0Lcd3vpF+s+RI1Cr
PD9ls0s7tl9JTI/yEoQ3CAvBRFZyPaTZFR0G9kMUsmTRP9PtiBhecw2wNbVH
e5il7VXKuWmzEKzCFR3DZOeQD6/wRuAopCEd0GVbxznqPS7zfXuVo05+PD77
sff08IH6Yc1GhrXp8wvusuzteqOerLK+KIovE1MPTUgYXhyDdb/YD7zegaOl
1MLEKEcGKwuCKTBEhhq6YQIMhT21oReLZT6muRe5+nVNhNGjA0YRnNCwQB0a
XZSEL+6ozWfy97os7kxivbkbOkIGRADXnUcHk9an1t8orz3iePqiY95JZ8Ap
1AY+Acn3TnxmfaLsSIOcAJkOjx4hJO6k8L87InHAz0cHh2N9NIX/3SFm6StS
cZFCM1C1d/aUB5z0rA6noCF7HkoDPG7kfi/yFcaab1zM9nig85JcFq1WEcWS
cjuvOPRHax2yP7ArNPdJ3a0ow3RoKWYm0MR7EQ2DtPwwG1/TpDgrn+sPdQTr
8z4jpzBs5NMU8ZpyVw3pv4C4HLUOWq/IvxUk2HIUU092P6EAd4BkY2nnI8/8
+8DK16Gz4LDCIjvwpS0QNzHjrsqkcHD7ci78L530pEVH5bDK1JVbcGkLrLlV
ULvHfhgxXoAoXHJpGK7FhALNCi3zjVXC8DXW532SjQUx6udBoAK5YLYvQHBC
fVy/+pxJpJ9xnQg/59YhvceQPcxaYIbGJ236G89drIXU84FVEa6tv2WlRLr8
1NbozMJ0LWybqdt0w+NbqiCVLm/75TqpfL2ZzltA5NUGbZHAxgo++roXWrhL
5+kwcQgVEMTnptRwZA1AKi+jkmwbfGW/4ReczAfSCRcq2rDsKcXYP7rNmJNx
yLlBRo64wsx8vYAPFlJDPaCMQ2DAqULUC8qcz0tZNNuShPL02TU/31V/9Qf/
65dhv7o2EBICmAYOK8EWkeujYGFuapmtuWFsSx23QjqTBET5XIh8V8VnA+uS
2w7EFMWahFLwa86NqcmKFmiH8Em9XjTceii/4jKPnWo/QRJMGCBR+h7Po8BW
2KmRVm+JSRgmV1wRUpuo+Ws91OiGCi7Lww/y8IM+1LLRRvQ8AbiRzEVLRwST
gBQ9XF9yhmubMvahjWKktU6mFsXCUdJUuXa+2IjBD9GfsgbiaBsrndQJfBuG
5I0UoAi7x0r1QKMCUnspMgyZI+6PucZ3/S0MSrqZjdOHqyqqYSjCYGI5WqPQ
0CbCeSAV5Z/GWAhfL4EEp+q07BCJpzY89mtIfSlO1HijoxDE4b5NVtGaNT/+
JgoWoIaqFkETbIhqZNZB1fhORycy1ZMKqIb63S7rwJtNVMnuwAep/kO5oZnD
3FMpPScvjKQIiZTa5ofCAqzYdJCIGYuHTfuarJt8QaFkoqRrU1hu24OjLjYe
UH6/0njjcIyCI3Y4J4le1iG2uJkvhYPNWeAs3nc6YYVxh9HiYBw2cJDxp0Pt
eoBpb33IpkhKmJd0g9rCoHMK8YrqQk96cCaUPPxJsGhDecyzjVZPtz65neK4
fURb1PKgoac4ktTASqXKO4dGxYL1fVjJhCI/gnwefIm0jtROX4fM5yTtVn1u
mi2bDjJ02ZFxouDD7sdVEMrXc1gohyEjC/OHfSM7AuYkiOjwiZMCFoO42pgb
CbKjdEp+R28ZC3ZkCh4eNC6D9R33jKPssCCa/+ZZMSBdB+nDG6I1gchKzrOS
jMiVBg0jIAwVfxIqgo7Dil2rbF1yhaQkc2mbICSYbEaL1ODQHWaixq3u1Ejn
OQC3Z+EdLOvskDIXZk3dc7v6SqsqK9bQyyHa6elEHIZNklRA+fK4bD9hGbf3
Wa/GTTlG1UwsKNhtpRmFH6PmG5aECeM1QxGQt+w+wT6NLQFZj0KdLJwKkYf0
U+71lfu6r75xel5bUYlWOq+/48glcSCuQYAGXiwyux827tynje1b6859M8gH
KpWiIAuQlLo5tqbjeOy+cRGx2r4OhN1jv7V4lffgjEovdVxrJAopJ82XiVT7
lLrJfAEKjNAn53/tb6iYc6uf5GE7A1CtVLvtKl57Pi0WH7ZKt+y1U2Xx+zgE
BphRpMuS6RvrYIuwFSa5h7SsR9cU0ZjG9bKCiminRnufK+39fDfiiy3RlMk8
CYzbdAuM1GuoplbnorM2VWSBlSVkRipmiEiaAbNEq4yNbIF2q3WF6oUljXTW
QJeCmU1LbPQ5Me0wh7fOagL7EAARUvoju386fb0nH8LObvlRHA4eMJ2ulGM0
Ou+0BvNFZZXJ7ProeRQ17K8/segRxdZr+iSOL+G35CX1qhIHJ4bL03nCXd3o
P9EBfg4ab+qGDHPLqLnD8JmSJYCOlAXQW+HXqe1Kvk17o2PNjC+FlyVGMaq/
zlFPVjIv1jVaBZujdBMzG5PF+NQXFr2doTiIqcJZzKnSafAosW4ofLNhoWvn
4jrDObneufAdL5itQwWl12m5MZ8rGll+O9VOQ/PvSIvyaWABdceckfDRbSYv
BuOTQLr2WgMrTqReh518tVIq5sS0W4XEmMR9K47jkq1oTaHYU67OyF26fedM
tTwIcTXad4MlQsqscjRVFy8j0xFBlKS0Tp55W70wqw4XRxKxkjPEAttH7U9e
35Hgxj5D55wt61gZx+o6N3XYsh6BFtd97cw/+n0WQOJdq8xtcFweAMwAxajW
kz1PcmVLdmzKgaGliA1BnJBcLk3eujQdj6KFPYTFqr586btLan3F4ICUrMQg
j0aeBt8dvY2knIMhnZGoqm5UShdwEX9sLWKve2pC+IZHAlFXQznFY+8HkIS6
wY8DB6++01f4d5JgmkAQezOcCBxF03ACjcS6CMmQUJrZZYm2RRVhdVZC5vYq
kbrYMce0jDsgEymiOA7u6H6v7RFrCSXYhLZCFTn+PNGk0MwtyU6TTrVtbFwj
7pbbt7IxZFRif5u3BKaFXwfNzrWcCThhkSpqhsB0V2+tr8lCZn3fuBGL4FFz
MYsOQq5dJHe0RDUOcIfVQIm3yTi1CPScTEuKRSoLoYhXk9bYNwYEi5JLsroU
e91Lpe6CfllS4fgWS0l2c6+topZLfYivCz3HGXZc2bMYWYpnjFiOy0LP5A/Y
VnZMA4MWQZut0VLa6SyKeMO+ed+PYerC4nieQ2lde1qRdX3xhW+14kIgiBKJ
IQ8YojfGwzSeuosXIC3W2DqcxiyrkMJFfIKjdY57uS7okhteq1iLBA89lQum
peBZmzOYMkgiiJo0BJJP4JwJAigBoGXT9qAu3EXeoMGazaV5IzZWz07CgGoO
IXCL7LeQkmVLIVFrz9u+WuVxofXWCVLiRVi1+nbZ8bsUjEVlNuniqY7vs7Sp
nxJZZ8LWd+i65lVoCgjHlUeTBuWv9Rp0Pdd0iXwYR1i1LjBMMVhedFhFh4pK
13qnSret6NaV4PojVAlS3Rz2LnQ6xGxbYOUuVmJpp1Egzwwr41JR0yBJhmKh
zgckXCY+LaG2X/Jl6vOAWMz+vihSWJj53JLsVJ+GByPVH303q1FcPk4kspaz
jCXa0NIyCfVDjVVXmTlOtmYqF2uJWsObg3riZ1olQ0atHXZUboKq7EHKt5aV
BbhrTWynKnzdsXNpR2FOLPVg8ZWEcEfUITHv1CEPra67aBfE/KY93wtMdjOT
PkFWidnXso9LnOgqhXf8rGRNpTUs84ruK/+3ULCRScMiKbfKrIl4zAjVH6wh
EQg9clbLEUabo57QzAieqaOIIe+KYRcrddHd5lfC8Z6H+iVbqGP+DGPgrx/w
r23fipgdXsoBG9XgtxrlH3wp4X3xt2/ecvWFp9yBKwA3t5UzXYeMdPBK3+Lp
09DedtbznekEPd96RaTvy+7CW9kHVIqcooN8PcEZ2uUrqardkljSAA+JkIF4
cZlP8yDSHb/Tl6KWsnRPfTECq/Me9A4Ri8di40P7elrSCVVLuWpyX2Kh5Ubp
7RvokBu2GLHGumEOFNXAM50OiJWNSOa2txZrQMYezVrsNuzqaXQSFQyU7BOF
W7uPh6+RjJKpyH5qZf2ay0idyIbuItvFdA1iBEJZFha4PzTkfo9ZeNiOAWt+
U8x8Xy5i77Y6OFScrxlFFBAZAO0q8oK1zSdbcgmpexiyFWaYIqU2bUrbnYN7
5pF5HlO0WYOVkDgv2sTINwruiK2cC+IT1e84EZFYkL0GTu86z5pLHxwdme40
GgMHqTvuUVLDBZlEmbNWm6yzetfmTkgqQujmvtZpxS4/Yocb0QCloIRwOPFt
xTnmunOVun3tDqbqlkRCosOCFEwOVOyeuV9/a1Ek1bVuVEvHoCgEbohEE0+0
iNpPwzdjEGv5XgzeKZKujIb7uuU+ie6WSZDfWkOYQOHtSNPN71s6WN3VIu1i
FCUXQXDZ4dHRwZNR4gtHS0F4qcrAZaGj1caFk3X43sxlmYVLUY/wvxSFffgw
nKTXQY/DRZWbO+68ToPN2vzwcQhPy6UnrEfHjXLGPdTl5e/qPj8NbQqHJN+O
fhIY5274rOPdCbM4Q7mdb0vdY2RUDOc3vnwJpYIgE6JvMG9rYajEF1Mkb90M
m2Dt7nXHo1sXrYWcEj0v/v9L9p/+knloetB8EzqfX4bhw1xYhHUcXxaBsl6G
gjqSXUo6kiCTsVRUHMhgzutOcdu93vI15DB2DXe5NLMm2wps3ZEaIHcI89FF
uQjZFE3dQvNruKwWUCkH3ImTuSHcJh5SKBYHW/JF4RYUhNDKIzcz6VcVdPiL
mxHwKrgTEmfLoJ1FklMsJvMGPQ5bQnfUuD6xk7G4babl5vKxdb136rYa+Plu
vxbYN3Un3NfqfksYBs2ginLa4/MoSfTpkt0el8q21edaq3dID926+u5APV45
KVg90AWSVK1T/thcwmJ0yFrpCYLYITEKcgPCkDV6pZOTpaJs0A+vdU+1VOFE
M4ClzBz1PwYK0pM/l1jqPhlxVGegTIPAV70ZatDYl3/8xeLXtDHmJVWfpxDc
zOuHQqpYacbE7SKaktqf4ihR1ePdOip4FaUV7nGcjplq5HAddUchoBo944lg
Q6tc2vGhvZ2h8XesV4JMnj6hso/l+uKS3IVTY6CSmBny714zR6hJfL7btXJY
VnFkA+74WXqd/izLV95QYAZyNCvMpI6eElZ+fYmegwsXKxPD1TKb0mt9uiWN
0WC7rF8zWbWDDiqd+QqKIuCg+IA98YtmzzBM8Q6ju9vNQALXjhWo7/rTbnBy
OSdfhz8a/hb3Hsf2PpJG48PKtuIVFVIJCuAHoXRBO4I2nWwFrZLttktQg4VJ
+RaLkoum6jZoGKxRsVqsa+HoQ33SJOe96WJBhQyIEhUqvTtUt52pAro5ozJ2
uKnejrVb9mXBU/2p0NscQZM2YnD4rMaaMsgwyhpdzC3PimxZr0XntDEByZvM
gqp6QURjl5b2M76TeGhB4KaUErmCwepdxHPtxyklIi2nvL9Y/TZSuVa34KlG
ImRJTBwVOFvvUSI1qa6c5daQZYZoAAWkkvs3/ELz6uX9mJTJYV6nucT7m5XE
MMJDlMIkK5fy7z7yijCIQld6aZxtV4cmyS/n+G9j/9HFC2uSo2ial+ua7Gaa
q+vDVnxiTBBSFbtDTQfc6pNAbwTbmdBDtuQ0qbAis98xOy1+Ytothxg57jn4
Ch8T+0JD+aF9EDoT5KUw/PBB4EaIEKTjQcC3H9qw9pKMaa8cTRRe/h3ZlH/p
0SR5Rs0EQ6NvpEqgz4Te+NBSsdELQJfjZUtODFA8hg5p6QYcviL+fNriZlts
742bYBneYkda/LANeVuAAb69iO4W+ljf7mCA1Z5kot6i0bgJgDZsRNTn1POD
LmeB5mbuy9tEq/37ermyfLOcYn3QyLzlyDqKQoRqbR0BwHPqFcJYgKrtrhmF
IW15ukb5OSRTeKvgD8o879BlEWY7YWl5E7gTTRvpfGjkSp0rye5pHIPTt04p
uaC2ZxMIo6GlJkbn+x6NrNdJJhmpbOiqP+Z2UoX71DBV27N4ZdSXObRkJteR
SlSuV8oXjBxiD0gjgDxFI32h3aJ2XI9E8tgC9WJP641riQs1I0XpggIAKfri
bSDS7EQIfodXCPD3vHpnYgJVz5HOpEw/X+pBfotIAuT0hYpIne9bkecsCsXl
zim4wXu6cJjTqCdLkEmOitoNShzRJC3qFVU1H9RMg3IqD5UEcD2SouzZklS5
V21shL9UTeSYMKOLUGzVom1U8jGy0ttKnNReIdKEHmnOunJtMlM5jhYO0bCz
Ury7jks6eBAi6+yUkUneNFYTKrrZgnBrf1OspAy1w7m5BItkrRgVTzngVpRo
rtrb9x1cjp81HzZ2nmYWYW1LFfRvQ6lfa8vjCjMBNxkgYERytQNvEHMCdH3u
i3b9HjwgEiCMNSrhH+CLYqCJKGVolulEUw/dfnnxlkTg97r5cdZiX36FZnC2
CwAK1Ou+j+gqt8bOY7LCttM889YVsQ3kQd/2oAmxpnOkVqOTamOOrH4se6KD
dVnhhzRUqJjRYQ/1CUqErUW2Wr10ulBFgnhUmQ/ZDZXEGXGcJNlm0oK6RGPl
Ll+jKp5BBm2hyQQF0dNW8xgrSTCyaDH/XIzH8iCXfh0S+IpNG4sI9ThYMBAN
pDZ3K7qsfbmUtOsXVqA3mHgyPLiN3R7XZyD3WikxatrqMXQj3ThFS2eh5lXt
CUKAxfFzTJxzrhjCe6aSP9ZLrnfeb9651sDxzCgaVtCBLZUBhnWPIVjxwGK+
77nfbTNyx4Lcuu6TSOIdkB+JZXLeeVCyg9VLH8Ngl6grQaq4S/5In5O7s/P6
zfnJ04TbFWhYMO22p05n5uCW0TWIDaLCxNvZqxJo1S+7e65zO0azhbuwZJsk
O5a8GeqgmLcZqqBtPiM6eKiAe1HHUluDYhlyACUWLOD+fGwnJYUevgbqNfbl
NCm+Cs5a45VbT5EQqw2SOjd16jpwacqkTuf4xlVelQVFdc99BHoofAffAWHH
hmO0MKt/mvpiTQADTIyRupLRwobXpUja1hZi6SMqiSpdpCL1OoIoHb4FhW03
Dny+248G7WM1paYdF9QT8xXj08jPnVu0ltUeAajXGN+04dgnfiPL64+jJEjF
CHM4OVS9Ywir1MPRDlTIG18XRcbmcn4qceBXSy/gdYx2NVcZdkuxYb3q1faD
3JSgZm1kWwijd2+RexWYY78h3yr6+o/Jt1KNQWgPU55O4AWqu3MK0DTzA7C/
mdOQg1GoCuFBo3pEJSW42nIaJ+RzkWgpQMGBDaQzhFCpG0k80Pw3GZ1EMlvh
mnuPn1RVWdVJlWJ7D0wE16spH2lxBRkbCDw2tr9ylkUJc68LzPhF9+OUuq0g
qZP715v18fmuwLONIKdBOeFtoA92fINlNBDat5jmvsYyd9gbpv1t9oBRWBH4
0vlbJEneHCTAw3oneTdl5PPdrmthZ6f7XujiCHoGK50RmcB+G9Dm1Y++LQkn
lFMGjQKhC7re0rFSgs24hiE6mescSxlx9a1UWthpjxpFcC6xNekDg+grXuLB
GmNs8Bw0xkvN9Dimiq0wuda55n6ggppUL7viKJkwdTzQQhptwiRurjLqHsF0
xXf1zrlEJ5MHrsj6NnC9h5mKsPDCWXcSXHVP+HgYoRsI3p2wjyifOMRWsiG1
bRqAOrBg7pgVrZ0pn6yf7E55XCIoNs9+w3YiI4eWFKMV06NO+e9ITaa7WqGu
SwH/3a1tC4XY2fmBJWKgfVXDwWUdpsLa5HDilBZJlrIwgjbmrpRmBj2YRDfH
XxKhIMDg10u5gZ2mE09FpUFxknGv1WUg2e12b9hrtUWQ1hxcrlCjyYOIO2sG
ESctcL3ygT4vi3RDJKYOggVHPmzlNlpFDDDvm7OIzcCGRZDr5zs9J/gfx3T6
c4Pw6253qt/OcSoYE7F6eNah0uu/ndnpwDL/M5tSzTiLTXiAA2W6O+vYRBmi
2PBMCwTsmeFGrKxDfazSJgjiuuEDX5bcrMgdiIX9touSXtKKG0qduiJ2bdY2
0HxXK+EEM8nJdZllk/RbqeNTvC3wvvYQtRTTDTj0h4tLB3a0N2cQRwgi8a7O
y0LxOWkEJMfVSS6reuN6wnFH/4zT3EYJ2iLVP4sMfNO8vzcN6CRo/ye6/+Y8
DR2si7QWB+vvcIm/6Qhud4MBZ8cLkHkHelD+VjSILvJPgQPnFvUA+ruXSVfW
bUVguC0SbbEsuiF1IgjH5/v1lCzyo0nlu0ddMweV9MMqSqFgEq2QOlq1JNky
bEimsQJWXmL3nOunjPoM1z2LDgsu+bTvboKHijboFtrDnOpWhc22gyCyZ498
FmQsTxlmsAuExKqZWvT8jfhaBGztKu6kQVUlJezQV2gnL1h87h2X+A14TcGB
V+3evbSxw47tfxjJO5vZqmxvb6meyP8OOvMHGSM+bohjKTgVJchEsTShdeH9
Pr40gTmLU4mdqaVlCmkHteMGM95eh1lYTyPdkOoPxLnA5I1kK3Sn9ndk4IwL
lhvKIxbv9qn7ezfM1t6nt1H3TWkQjk8YackdIjx0eHeSDqjZONjn4eVQicgt
uXdL0Npqur7kAUfncMCE9sP5St9pPjDUdheOlJls1hVZHB1aLRMsw51EHQqd
eo9EzfTZtoGnAtucU/XXOHdJItY4JUvLocCNrpz7FeNWrMWzZkZKaljoZ5Ly
hz3L5FiOQK50tg6ePvbcBdHFHdExr6O7QVVLciu+SJVryMnibkNM+pmTq4vv
fJk9PJSY6AfOORJ9tcyHNkNtF+9mw+WPWlUMDyUWVzUjimTOnZ3zUgLIF5u+
11sW71ZkhqFsVyIm8+17tmybsEWe/L53leMAtXidwN7Llo+lt8txjxi+K3EN
Wn1pFuaO0oWVgipbVr5nfOI8EB98MUld0+v/dqAL6g4ySjg2qS5hzr+2w5OY
PHKGHB7vX8nk6JpOgn9ZtVpv/lWTkBrHGcQf80UZjNkJ2ovCpnoglgctxz5x
fPtSW8x9eP3+1Q8n76I+ZkouHx5OEIOoWZYK9nltYxKuquA/isSW/kX4c/0T
3Ya8WIuQQETqAR/Kg4nV9t4K/qCqE1Wl9GaySOh5muwe7KEj+BJu02W5oJg0
qpvTiR/bgnOGEGK22z285ZiITT0Dsj1O+CB6rwKMY1CHKJiHHqok9bXuRlRp
EMOBMEK2PxhwFEcDhkm3Rt7f6GI/Na1vp+4CaVbj1zN8IiAOP/NNU7H2UofK
K3nmArsPJ1t6xt3qNJIlZp7BXRnmm/2jD5xL6xxO5nM0lWspCSpjjY6ebo5i
axar+LltMoofyNB5CbNN2u0Zty80EhUCcLUo1Degh69dxkd1G+Sg+3sQ6e63
x5POjIwcR1iMqLkBFSyIug9ITE9AE3znVk5WWQPRP8DPDieP+oIAlYJhMIFM
2zEj70mxQziC8pqqQ8sZuE+rXPoPm9nlRuLShgaLSB4WD73dzcaURnNmrSDa
40lhVTapRMqZFuhFz3CUAYNHHS9KHNIbFnTmad2M4edrRCypagf62KuTd8/e
v/sFdLC9Pgmlx7oVJm6ziapPVumz9fQILGZVYab8y038+Jdb8+NffhM/HrLq
9TLlPi5s0BE+vBPrPpJC1cMCfwvH8/00eq1tkQxg58XT/1486St4Sfca9xP9
njvQopc5KU03RLH2DZ4PDnpbUMJBhbSkqdZkHRlc6jdAeQUyd0HxHx0ifxNF
7oY0/0GU8jcCEu8CDf6NiOhBFNPhG4h0H8XrklYleGYQ7qN3nc9uQ+4ILDfm
RwyhkpVvUw05el6IThW1TNjivpfiozc4APgYB+zt3paT3NY10N3cLVwREgZL
M3l0GVzcrbGon4gly/zTGN4c884GyNc/gaAPt2P+Y9WMryDpXXpzA0nv39Nv
o+j9Y3pNeBiOLWJ+4yr/ucS8m/rRf60E725YvW9C8pVWTYxNbk2sLOAmyPto
aEFaeO8WF1h7rv+mW9yF56MInsOg6PF63ARbbSsXfvVfDj7dXIw/TnjYCpmb
yN9/hOTQoyq1cccUJXHi9qpJnf7zN0sN/9qWGX5nUaClcv3rrVWufx1WubTZ
2rBM0U+FWiLF1hADwcgOnnRsNCZGSLBlS5D4Cuz5KokhOaP4BksFBR5nFqnO
7qlbbG/IPWDHnwaf1OzpthDSLjB2um7OzuTfLslYV9OWge6WIsSeubhPA+AM
x1iMBtaV9ywtkq4mffMM1//5mnn6EZnzt2wC6aTOdau4rXEpHV6/Uifum+03
asS9rskb2UV36X+grnmbJbZpduu0v8ofOGpnT/tguCCSYfIb5wjCRWDgVowJ
eeR9l9olF+HAYy1mbfeiRFmEawN21Bd7cRumFIWrGIci0rwopQNLi+Vg2VQN
wuFydqWU4ZL2ZVavI7oJVg9VKh2cRz0ol/nFJbsNaFa7cdvow5T6dbE0JtzJ
30JMnSh8OxOKRi593T5aL/GtikLbRxSyEMJU49UFsllQNsFHwXCJMCzyZLEw
YoSnEq+WdnZDKNkklgXCC9YWBC1CjUpDfUWUmXJKIlmSI0bwxigtTVhAV3jE
d8JgBc84eyuCSdNbiQFgVDiNG6H5aSkr2rLAqOHJMq8JwpSqycn4TDgPbe29
QPFxTsLSehJxBL215NVARTMSACi4IUJ6zVoHeGIW8IMblnNNejqoHFh2Ok/R
K6mdeuNiahzjZe0ROBjhxj3ccArt8pDBpixiI4opSa1MhJ0S+e/Dg6ICCmcu
rURW0zrUwX2hYiUitFGygQiQqHr510wGYHYiKTIhTCRjSPuZS/khi5Wra+wn
pr1fgg/xvmMZBd8qSzNy2eDUjTPS1pF0Q0YWlC7xUyRYky+TJb2gYLaf9bs6
TBUhvJBEK34V83ippQ63VF+WV1xpPCg0FGxBZd1cG5N7xA/fohLZSMfGRNj8
Iw3Pa1GDdsVT/BS/bMXpWbmrvqEpWCDAYgQWsDG+pa1L7mse3ISqvxNuSozC
AKgKLAy+iMCkoaYDZMyynMyPyjF7KiBQQ7WNlYeMhF4vbxG5R8UM45wpWivE
VgqS68N1hR5xt6Js798e50W4W5f5pl1IwyXPvF5Px9EdlWxsi/WgCiTCo7ah
I9cGZwKQSz6fhrRm9zSpN5+3l0vC2gD5uxkGVBJFjpX6a8yHqE9XXAghptRY
ay5iFU+L9mgtefR7YCQLbK/6bhIlkPdewZ2dU8oM00aanO7Fx2tF4yORyqSZ
NhZ08/YxU/EB3nIqx9l/x52PrQhihw3cQNW5pnGEUVxhNdafGizwIkshkGlM
CMYmXIDozr0njbP1xeJGYd7YRGTRv+pbCmpGDuOrHBaYju8KRpQDsxiYlAU2
Y3CCmLzj+GYyXcbKSEjtWrW0fDgsjoTYtvdNIdaHVEty5WYdePoqVcFsrcj8
g07wOZUH5dha3hNH+HHmKh4gLo+r7zNDnaWLvd5jxE1vCwQGqVdMMxQay3Vq
ZU4uIVTnoOjVS0w0Cp2xIb7dhGkmEgXleuOwdNYqAenni3zWYKaC/lvKKImo
QrmgS7oYoZIWQCXcgraTcKQTEfmz6uWRBctPHXBP6U47JJWauhkDjRtEh3WT
gWojiW1YD9KCOoTWweX3UoexUqsJpItTLTYPHtOxcVur7unRmeO+e1AjmuW2
u2Vz5URj1WAEWF4Ee+zCYPoFo4RzUofLY4Shz+9C7v8fG78QmRcyAQA=

-->

</rfc>


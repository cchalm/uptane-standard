<?xml version="1.0" encoding="UTF-8"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc2629 version 1.2.9 -->

<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
]>

<?rfc toc="yes"?>
<?rfc sortrefs="yes"?>
<?rfc symrefs="yes"?>

<rfc ipr="noDerivativesTrust200902" docName="uptane-standard-design" category="info">

  <front>
    <title abbrev="UPTANE">Uptane Standard for Design and Implementation</title>

    <author initials="." surname="Members of the Uptane Alliance Community" fullname="Uptane Alliance Community">
      <organization>Uptane Alliance (c/o Prof. Justin Cappos)</organization>
      <address>
        <postal>
          <street>6 MetroTech</street>
          <city>Brooklyn</city>
          <region>NY</region>
          <code>11201</code>
          <country>USA</country>
        </postal>
        <email>uptane-standards@googlegroups.com</email>
      </address>
    </author>

    <date year="2020" month="January" day="04"/>

    <area>TODO</area>
    <workgroup>TODO</workgroup>
    <keyword>Internet-Draft</keyword>

    <abstract>


<t>This document describes a framework for securing ground vehicle software update systems.</t>



    </abstract>


  </front>

  <middle>


<section anchor="introduction" title="Introduction">

<t>Uptane is a secure software update framework for ground vehicles. This document describes procedures to enable programmers for OEMs and suppliers to securely design and implement this framework in a manner that better protects connected units on ground vehicles. Integrating Uptane as outlined in the sections that follow can reduce the ability of attackers to compromise critical systems. It also assures a faster and easier recovery process should a compromise occur.</t>

<t>These instructions specify the components necessary for a compliant implementation. Individual implementors can make their own technological choices within those requirements. This flexibility makes Uptane adaptable to the many customized update solutions used by manufacturers. If implementors wish to have compatible formats, they may use POUFs. POUFs contain a description of implementation choices as well as data binding formats. An implementor who adopts a POUF, as well as the Uptane Standard, will be able to interoperate with other implementations using that POUF.</t>

</section>
<section anchor="terminology" title="Terminology">

<section anchor="conformance-terminology" title="Conformance terminology">

<t>The keywords MUST, MUST NOT, REQUIRED, SHALL, SHALL NOT, SHOULD, SHOULD NOT, RECOMMENDED, MAY, and OPTIONAL in this document are to be interpreted as described in <xref target="RFC2119"/>.</t>

<t>In order to be considered “Uptane-compliant,” an implementation MUST follow all of these rules as specified in the document.</t>

</section>
<section anchor="terminology-1" title="Terminology">

<t><spanx style="emph">Bundle</spanx>: A set of images released by the repository that is meant to be installed by one or more target ECUs on a vehicle during the same update cycle.</t>

<t><spanx style="emph">Bus</spanx>: An internal communications network that interconnects components within a vehicle. A vehicle can have a number of buses that will vary in terms of power, speed and resources.</t>

<t><spanx style="emph">ECU Identifier</spanx>: An attribute used to identify a specific ECU (e.g., such as a unique serial number).</t>

<t><spanx style="emph">ECU Version Manifest</spanx>: Metadata which details the software version currently installed on the ECU.</t>

<t><spanx style="emph">Hardware Identifier</spanx>: An attribute used to identify a model of an ECU.</t>

<t><spanx style="emph">Image</spanx>: File containing software for an ECU to install. May contain a binary image to flash, installation instructions, and other necessary information for the ECU to properly apply the update. Each ECU typically holds only one image, although this may vary in some cases.</t>

<t><spanx style="emph">Metadata</spanx>:  Information describing the characteristics of data including, for example, structural
metadata describing data structures (e.g., data format, syntax, and semantics) and
descriptive metadata describing data contents (e.g., information security labels). As used in Uptane, metadata can be described as information associated with a role or an image that contains the characteristics or parameters thereof (e.g. cryptographic material parameters, file names and versions.)</t>

<t><spanx style="emph">Primary/Secondary ECUs</spanx>: Terms used to describe the control units within a ground vehicle. A primary ECU downloads and verifies update images and metadata for itself and for secondary ECUs, and distributes images and metadata to secondaries. Thus, it requires extra storage space and a means to download images and metadata.  Secondary ECUs receive their update images and metadata from the primary, and only need to verify and install their own metadata and images.</t>

<t><spanx style="emph">POUF</spanx>: A document that contains the protocol, operations, usage, and formats (POUF) of a specific Uptane implementation. The POUF contains decisions about SHOULDs and MAYs in an implementation, as well as descriptions of data binding formats. POUFs MAY be used to create compatible Uptane implementations.</t>

<t><spanx style="emph">Repository</spanx>: A server containing metadata about images. May also contain the images themselves. Other data may be stored on the repository to be accessed by ECUs during the update process.</t>

<t><spanx style="emph">Suppliers</spanx>: Independent companies to which auto manufacturers may outsource the production of ECUs. Tier-1 suppliers directly serve the manufacturers. Tier-2 suppliers are those that perform outsourced work for Tier-1 suppliers.</t>

<t><spanx style="emph">Vehicle Version Manifest</spanx>: A compilation of all ECU version manifests on a vehicle. It serves as a master list of all images currently running on all ECUs in the vehicle.</t>

</section>
<section anchor="uptane-role-terminology" title="Uptane Role terminology">

<t>These terms are defined in greater detail in <xref target="roles"/>.</t>

<t><spanx style="emph">Delegations</spanx>: A process by which the responsibility of signing metadata about images is assigned to another party.<vspace />
<spanx style="emph">Role</spanx>: A party (human or machine) responsible for signing a certain type of metadata. The role controls keys and is responsible for signing metadata entrusted to it with these keys. The roles mechanism of Uptane allows the system to distribute signing responsibilities so that the compromise of one key does not necessarily impact the security of the entire system.</t>

<t><list style="symbols">
  <t><spanx style="emph">Root Role</spanx>: Signs metadata that distributes and revokes public keys used to verify the Root, Timestamp, Snapshot, and Targets role metadata.</t>
  <t><spanx style="emph">Snapshot Role</spanx>: Signs metadata that indicates which images the repository has released at the same time.</t>
  <t><spanx style="emph">Targets Role</spanx>: Signs metadata used to verify the image, such as cryptographic hashes and file size.</t>
  <t><spanx style="emph">Timestamp Role</spanx>: Signs metadata that indicates if there are any new metadata or images on the repository.</t>
</list></t>

</section>
<section anchor="acronyms-and-abbreviations" title="Acronyms and abbreviations">

<t><spanx style="emph">CAN Bus</spanx>: Controller Area Network bus standard</t>

<t><spanx style="emph">CDN</spanx>: Content Delivery Network</t>

<t><spanx style="emph">ECUs</spanx>: Electronic Control Units, the computing units on a vehicle</t>

<t><spanx style="emph">LIN Bus</spanx>: Local Interconnect Bus</t>

<t><spanx style="emph">OBD</spanx>: On-board diagnostics</t>

<t><spanx style="emph">SOTA</spanx>: Software Updates Over-the-Air</t>

<t><spanx style="emph">UDS</spanx>: Unified Diagnostic Services</t>

<t><spanx style="emph">VIN</spanx>: Vehicle Identification Number</t>

</section>
</section>
<section anchor="rationale-for-and-scope-of-uptane-standards" title="Rationale for and scope of Uptane Standards">

<t>This Standards document clarifies the essential components and best practices for the secure design, implementation and deployment of Uptane by OEMs and suppliers. These practices contribute to compromise resilience, or the ability to minimize the extent of the threat posed by any given attack.</t>

<t>However, this specification is intended as an implementation guide, and not as a detailed technical argument about the security properties that Uptane provides.  Readers interested in such documentation should refer to published papers that cover this topic.  <xref target="UPTANEESCAR"/></t>

<section anchor="why-uptane-requires-a-standards-document" title="Why Uptane requires a standards document">

<t>A standards document that can guide the safe design, integration and deployment of Uptane in vehicles is needed at this time because:</t>

<t><list style="symbols">
  <t>The number of connected units on the average vehicle continues to grow, with mainstream cars now containing up to 100 million lines of code. <xref target="USATODAY"/></t>
  <t>The expanded use of software over-the-air strategies creates new attack surfaces for malicious parties. <xref target="CR-OTA"/></t>
  <t>Legacy update strategies, such as SSL/TLS or GPG/RSA, are not feasible for use on vehicle ECUs because they force manufacturers to chose between enhanced security and customizability.</t>
  <t>Conventional strategies are also complicated by the differing resources of the ECUs, which can vary greatly in memory, storage space, and Internet connectivity.</t>
  <t>The design of Uptane makes it possible to offer improved design flexibility, without sacrificing security.</t>
  <t>This added design flexibility, however, could be a liability if the framework is implemented incorrectly.</t>
  <t>Standardization of crucial steps in the design, implementation and use of Uptane can assure that customizability does not impact security or functionality.</t>
</list></t>

</section>
<section anchor="scope-of-standards-coverage" title="Scope of Standards coverage">

<t>This document sets guidelines for implementing Uptane in most systems capable of updating software on connected units in ground vehicles, including passenger vehicles, light-duty trucks, heavy-duty trucks, and motorcycles. Uptane could potentially also be applied to other ground vehicles, such as automated shuttles, recreational vehicles, and military ground vehicles. Uptane could even be applied to domains such as IoT devices, medical devices, and unmanned aerial vehicles. In this section, we define the scope of that applicability by providing sample use cases and possible exceptions, aspects of software update security that are not applicable to Uptane, and the design requirements governing the preparation of these standards.</t>

<section anchor="assumptions" title="Assumptions">

<t>We assume the following system preconditions for Uptane:</t>

<t><list style="symbols">
  <t>Vehicles have the ability to establish connectivity to required backend services. For example, this could be done through cellular, Wi-Fi, or hard-wired mechanisms.</t>
  <t>ECUs are either directly connected to the communication channel, or are indirectly connected via some sort of network gateway.</t>
  <t>ECUs are programmable and provide sufficient performance to be updated.</t>
  <t>ECUs must be able to perform a public key cryptography operation as well as some supporting operations.</t>
  <t>There are state-of-the-art secure servers in place, such as the Director and Image repository servers.</t>
</list></t>

<t>It is important that any bugs detected in Uptane implementations be patched promptly. Failure to do so could interfere with the effectiveness of Uptane’s operations.</t>

</section>
<section anchor="use-cases" title="Use cases">

<t>The following use cases provide a number of scenarios illustrating the manner in which software updates could be accomplished using Uptane.</t>

<section anchor="oems-initializing-uptane-at-the-factory-using-sota" title="OEMs initializing Uptane at the factory using SOTA">

<t>An OEM plans to install Uptane on new vehicles. This entails the following components: code to perform full and partial verification, the latest copy of the relevant metadata, the public keys, and an accurate attestation of the latest time. The OEM then either requires its tier-1 suppliers to provide these materials to the suppliers’ assembly lines or can choose to add the materials later at the OEM’s assembly lines. The OEM’s implementation is Uptane-compliant if:</t>

<t><list style="numbers">
  <t>all primaries perform full verification;</t>
  <t>all secondaries that are updated via OTA perform full or partial verification; and</t>
  <t>all other ECUs that do not perform verification cannot be updated via OTA.</t>
</list></t>

</section>
<section anchor="updating-one-ecu-with-a-complete-image" title="Updating one ECU with a complete image">

<t>A tier-1 supplier completes work on a revised image for an electronic brake control module. This module will control the brakes on all models of an SUV produced by the OEM mentioned above. Assuming supplier delegation is supported by the OEM for this ECU, each tier-1 supplier digitally signs the image, then delivers the signature and all of its metadata, including delegations, and associated images to the OEM. The OEM adds these metadata and images to its image repository, along with information about any dependencies and conflicts between this image and those for other ECUs used in the OEM’s vehicles. The OEM also updates the inventory database, so that the director repository can instruct the ECU on how to install these updated images.</t>

</section>
<section anchor="updating-individual-ecus-on-demand" title="Updating individual ECUs on demand">

<t>An OEM has issued a recall to address a problem with a keyless entry device that has been locking people out of their cars. The OEM prepares an updated flash image in the manner described above. The OEM then ships USB flash drives to vehicle owners and dealerships that allow those parties to update the firmware of their vehicles.</t>

</section>
<section anchor="update-one-ecu-with-multiple-deltas" title="Update one ECU with multiple deltas">

<t>The OEM wants to use delta updates to save over-the-air bytes. The delta images contain only the code and/or data that has changed from the previous image version. To do so, the OEM must first modify the Director repository, using the vehicle version manifest and dependency resolution to determine the differences between the previous and latest images. The OEM then adds the following to the custom Targets metadata used by the Director repository: (1) the algorithm used to apply a delta image, and (2) the Targets metadata about the delta image. The OEM will also check whether the delta images match the Targets metadata from the Director repository.</t>

</section>
</section>
</section>
<section anchor="exceptions" title="Exceptions">

<t>There are a number of factors that could impede the completion of the above scenarios:</t>

<t><list style="symbols">
  <t>ECUs may be lacking the necessary resources to function as designated. These resources could include weaknesses, in terms of CPU or RAM, that render performance of public key cryptography infeasible; a lack of sufficient storage to undo installation of bad software; or an ECU simply may reside on a low-speed network (e.g., LIN).</t>
  <t>ECUs may reside on different network segments, and may not be able to directly reach each other, requiring a gateway to facilitate communication.</t>
  <t>A user may replace OEM-installed ECUs with aftermarket ECUs.</t>
  <t>A vehicle may be able to download only a limited amount of data via a cellular channel, due to limits on a data plan.</t>
  <t>A system may lack sufficient power to download or install software updates.</t>
  <t>Vehicles may be offline for extended periods of time, thus missing required updates (e.g., key rotations).</t>
  <t>OEMs may be unwilling to implement costly security or hardware requirements.</t>
</list></t>

</section>
<section anchor="out-of-scope" title="Out of Scope">

<t>The following topics will not be addressed in this document, as they represent threats outside the scope of Uptane:</t>

<t><list style="symbols">
  <t>Physical attacks, such as manual tampering with ECUs outside the vehicle.</t>
  <t>Compromise of the packaged software, such as malware embedded in a trusted package.</t>
  <t>Compromise of the supply chain (e.g., build system, version control system, packaging process). A number of strategies (e.g., git signing, TPMs, in-toto <xref target="IN-TOTO"/>)  already exist to address this problem. Therefore, there is no need to duplicate those techniques here.</t>
  <t>Problems associated with OBD or UDS programming of ECUs, such as authentication of communications between ECUs.</t>
  <t>Malicious mirrors of package repositories, which may substitute original packages with malicious packages with matching version numbers <xref target="MERCURY"/>.</t>
</list></t>

</section>
<section anchor="design-requirements" title="Design requirements">

<t>The design requirements for this document are governed by the following principal parameters:</t>

<t><list style="symbols">
  <t>to clearly mandate the design and implementation steps that are security critical and must be followed as is, while offering flexibility in the implementation of non-critical steps. In this manner, users can adapt to support different use models and deployment scenarios.</t>
  <t>to ensure that, if Uptane is implemented, the security practices mandated or suggested in this document do not interfere with the functionality of ECUs, vehicles, or the systems that maintain them.</t>
  <t>to delineate best practices to ensure that, should any part of the SOTA mechanism of a vehicle be attacked, an attacker must compromise two or more modules to breach the SOTA mechanism.</t>
</list></t>

</section>
</section>
<section anchor="threat-model-and-attack-strategies" title="Threat model and attack strategies">

<t>The overarching goal of Uptane is to provide a system that is resilient in the face of various types of compromise. In this section, we describe the goals an attacker may have (<xref target="attacker_goals"/>) and the capabilities they may have or could develop (<xref target="capabilities"/>). We then describe and classify types of attacks on the system according to the attacker’s goals (<xref target="threats"/>).</t>

<section anchor="attacker_goals" title="Attacker goals">

<t>We assume that attackers may want to achieve one or more of the following goals, in increasing order of severity:</t>

<t><list style="symbols">
  <t>Read the contents of updates to discover confidential information, reverse-engineer firmware, or compare two firmware images to identify security fixes and hence determine the fixed security vulnerability</t>
  <t>Deny installation of updates to prevent vehicles from fixing software problems</t>
  <t>Cause one or more ECUs in the vehicle to fail, denying use of the vehicle or of certain functions</t>
  <t>Control ECUs within the vehicle, and possibly the vehicle itself</t>
</list></t>

</section>
<section anchor="capabilities" title="Attacker capabilities">

<t>Uptane is designed with resilience to compromise in mind. We assume that attackers may develop one or more of the following capabilities:</t>

<t><list style="symbols">
  <t>Intercept and modify network traffic (i.e., perform man-in-the-middle attacks). This capability may be developed in two domains:
  <list style="symbols">
      <t>Outside the vehicle, intercepting and modifying traffic between the vehicle and software repositories</t>
      <t>Inside the vehicle, intercepting and modifying traffic on one or more vehicle buses (e.g. via an OBD port or using a compromised ECU as a vector)</t>
    </list></t>
  <t>Compromise and control either a Director repository or Image repository server, and any keys stored on that repository, but not both the Director and Image repositories.</t>
  <t>Compromise either a Primary ECU or a Secondary ECU, but not both in the same vehicle</t>
</list></t>

</section>
<section anchor="threats" title="Description of threats">

<t>Uptane’s threat model includes the following types of attacks, organized according to the attacker goals listed in <xref target="attacker_goals"/>.</t>

<section anchor="read_updates" title="Read updates">

<t><list style="symbols">
  <t><spanx style="emph">Eavesdrop attack:</spanx> Read sensitive or confidential information from an update intended to be encrypted for a specific ECU. (Note: Not all implementations will have a need for protecting information in this way.)</t>
</list></t>

</section>
<section anchor="deny_updates" title="Deny installation of updates">

<t>An attacker seeking to deny the installation of updates may attempt one or more of the following strategies, among others:</t>

<t><list style="symbols">
  <t><spanx style="emph">Drop-request attack:</spanx> Block network traffic outside or inside the vehicle.</t>
  <t><spanx style="emph">Slow retrieval attack:</spanx> Slow down network traffic, in the extreme case sending barely enough packets to avoid a timeout. Similar to a drop-request attack, except that both the sender and receiver of the traffic still think network traffic is unimpeded.</t>
  <t><spanx style="emph">Freeze attack:</spanx> Continue to send a properly signed, but old, update bundle to the ECUs, even if newer updates exist.</t>
  <t><spanx style="emph">Partial bundle installation attack:</spanx> Install a valid (signed) update bundle, and then block selected updates within the bundle.</t>
  <t>Conduct a denial of service attack against the Uptane repositories or infrastructure.</t>
</list></t>

</section>
<section anchor="change_functionality" title="Interfere with ECU functionality">

<t>Attackers seeking to interfere with the functionality of vehicle ECUs in order to cause an operational failure or unexpected behavior may do so in one of the following ways:</t>

<t><list style="symbols">
  <t><spanx style="emph">Rollback attack:</spanx> Cause an ECU to install a previously valid software revision that is older than the currently installed version.</t>
  <t><spanx style="emph">Endless data attack:</spanx> Send a large amount of data to an ECU, until it runs out of storage, possibly causing the ECU to fail to operate.</t>
  <t><spanx style="emph">Mix-and-match attack:</spanx> Install a malicious software bundle in which some of the updates do not interoperate properly. This may be accomplished even if all of the individual images being installed are valid, as long as valid versions exist that are mutually incompatible.</t>
</list></t>

</section>
<section anchor="control_ecu" title="Control an ECU or vehicle">

<t>Full control of a vehicle, or one or more ECUs within a vehicle, is the most severe threat.</t>

<t><list style="symbols">
  <t><spanx style="emph">Arbitrary software attack:</spanx> Cause an ECU to install and run arbitrary code of the attacker’s choice.</t>
</list></t>

</section>
</section>
</section>
<section anchor="design" title="Detailed design of Uptane">

<t>Uptane is a secure software update framework for automobiles. We do not specify implementation details. Instead, we describe the components necessary for a compliant implementation and leave it up to individual implementors to make their own technological choices within those requirements.</t>

<t>At a high level, Uptane requires:</t>

<t><list style="symbols">
  <t>Two software repositories:
  <list style="symbols">
      <t>An Image repository containing binary images to install, and signed metadata about those images</t>
      <t>A Director repository connected to an inventory database that can sign metadata on demand for images in the Image repository</t>
    </list></t>
  <t>Repository tools for generating Uptane-specific metadata about images</t>
  <t>A public key infrastructure supporting the required metadata production/signing roles on each repository:
  <list style="symbols">
      <t>Root - Certificate authority for the Uptane ecosystem. Distributes public keys for verifying all the other roles’ metadata</t>
      <t>Timestamp - Indicates whether there are new metadata or images</t>
      <t>Snapshot - Indicates images released by the repository at a point in time, via signing metadata about targets metadata</t>
      <t>Targets - Indicates metadata about images, such as hashes and file sizes</t>
    </list></t>
  <t>A secure way for ECUs to know the time.</t>
  <t>An ECU capable of downloading images and associated metadata from the Uptane servers.</t>
  <t>An in-vehicle client on a Primary ECU capable of verifying the signatures on all update metadata and downloading updates on behalf of its associated Secondary ECUs. The primary ECU MAY be the same ECU that communicates with the server.</t>
  <t>A client or library on each Secondary ECU capable of performing either full or partial verification of metadata</t>
</list></t>

<section anchor="roles" title="Roles on repositories">

<t>A repository contains images and metadata. Each role has a particular type of metadata associated with it, as described in <xref target="meta_structures"/>.</t>

<section anchor="root_role" title="The Root role">

<t>A repository’s Root role SHALL be responsible for a Certificate Authority as defined in <xref target="RFC3647"/>.
A repository’s Root role SHALL produce and sign Root metadata as described in <xref target="root_meta"/>.
A repository’s Root role SHALL sign the public keys used to verify the metadata produced by the Timestamp, Snapshot, and Targets roles.
A repository’s Root role SHALL revoke keys for the other roles, in case of compromise.</t>

</section>
<section anchor="targets_role" title="The Targets role">

<t>A repository’s Targets role SHALL produce and sign metadata about images and delegations as described in <xref target="targets_meta"/>.</t>

<section anchor="targets_role_delegations" title="Delegations">

<t>The Targets role on the Image repository MAY delegate the responsibility of signing metadata to other, custom-defined roles referred to as delegated targets. If it does, it MUST do so as specified in <xref target="delegations_meta"/>.</t>

<t>Responsibility for signing images or a subset of images MAY be delegated to more than one role and therefore it is possible for two different roles to be trusted for signing a particular image. For this reason, delegations MUST be prioritized.</t>

<t>A particular delegation for a subset of images MAY be designated as <spanx style="strong">terminating</spanx>. For terminating delegations, the client SHALL NOT search any further if it does not find validly signed metadata about those images. Delegations SHOULD NOT be terminating by default; terminating delegations SHOULD only be used when there is a compelling technical reason to do so.</t>

<t>A delegation for a subset of images MAY be a multi-role delegation <xref target="TAP-3"/>. A multi-role delegation indicates that multiple roles are needed to sign a particular image and each of the delegatee roles MUST sign the same metadata.</t>

<t>Delegations only apply to the Image repository. The Targets role on the Director repository MUST NOT delegate metadata signing responsibility.</t>

</section>
</section>
<section anchor="snapshot_role" title="The Snapshot role">

<t>A repository’s Snapshot role SHALL produce and sign metadata about all Targets metadata the repository releases, including the current version number of the top-level Targets metadata, and the version numbers of all delegated Targets metadata, as described in <xref target="snapshot_meta"/>.</t>

</section>
<section anchor="timestamp_role" title="The Timestamp role">

<t>A repository’s Timestamp role SHALL produce and sign metadata indicating whether there are new metadata or images on the repository. It MUST do so by signing the metadata about the Snapshot metadata file.</t>

</section>
</section>
<section anchor="meta_structures" title="Metadata structures">

<t>Uptane’s security guarantees all rely on properly created metadata that follows a designated structure. The Uptane standard <spanx style="strong">does not</spanx> mandate any particular format or encoding for the metadata as a whole. ASN.1 (with any encoding scheme like BER, DER, XER, etc.), JSON, XML, or any other encoding format that is capable of providing the required structure MAY be used.</t>

<t>However, string comparison is required as part of metadata verification. To ensure an accurate basis for comparing strings, all strings MUST be encoded in the Unicode Format for Network Interchange as defined in <xref target="RFC5198"/>, including normalization into Unicode Normalization Form C (<xref target="NFC"/>).</t>

<t>In the Deployment Considerations document (<xref target="DEPLOY"/>), the Uptane Alliance provides some examples of compliant metadata structures in ASN.1 and JSON.</t>

<section anchor="common_metadata" title="Common metadata structures">

<t>Every public key MUST be represented using a public key identifier.  A public key identifier is EITHER all of the following:</t>

<t><list style="symbols">
  <t>The value of the public key itself (which MAY be, for example, formatted as a PEM string)</t>
  <t>The public key cryptographic algorithm used by the key (such as RSA or ECDSA)</t>
  <t>The particular scheme used to verify the signature (such as <spanx style="verb">rsassa-pss-sha256</spanx> or <spanx style="verb">ecdsa-sha2-nistp256</spanx>)</t>
</list></t>

<t>OR a secure hash over at least the above components (such as the keyid mechanism in TUF).</t>

<t>All four Uptane roles (Root, Targets, Snapshot, and Timestamp) share a common structure. They SHALL contain the following two attributes:</t>

<t><list style="symbols">
  <t>A payload of metadata to be signed</t>
  <t>An attribute containing the signature(s) of the payload, where each entry specifies:
  <list style="symbols">
      <t>The public key identifier of the key being used to sign the payload</t>
      <t>A signature with this key over the payload</t>
    </list></t>
</list></t>

<t>The payload differs depending on the role. However, the payload for all roles shares a common structure. It SHALL contain the following four attributes:</t>

<t><list style="symbols">
  <t>An indicator of the type of role (Root, Targets, Snapshot, or Timestamp)</t>
  <t>An expiration date and time</t>
  <t>An integer version number, which SHOULD be incremented each time the metadata file is updated</t>
  <t>The role-specific metadata for the role indicated</t>
</list></t>

<t>The following sections describe the role-specific metadata. All roles SHALL follow the common structures described here.</t>

</section>
<section anchor="root_meta" title="Root metadata">

<t>A repository’s Root metadata distributes the public keys of the top-level Root, Targets, Snapshot, and Timestamp roles, as well as revocations of those keys. It SHALL contain two attributes:</t>

<t><list style="symbols">
  <t>A representation of the public keys for all four roles. Each key SHALL have a unique public key identifier.</t>
  <t>An attribute mapping each role to (1) its public key(s), and (2) the threshold of signatures required for that role</t>
</list></t>

<t>Additionally, it MAY contain a mapping of roles to a list of valid URLs from which the role metadata can be downloaded.  If this mapping of URLs is used, the implementer SHOULD implement this functionality following <xref target="TAP-5"/> to avoid adding unforeseen security risks.</t>

</section>
<section anchor="targets_meta" title="Targets metadata">

<t>The Targets metadata on a repository contains all of the information about images to be installed on ECUs. This includes filenames, hashes, file sizes, and MAY also include other useful information about images, such as what types of hardware are compatible with a particular image.</t>

<t>Targets metadata can also contain metadata about delegations, allowing one Targets role to delegate its authority to another. This means that an individual Targets metadata file might contain only metadata about delegations, only metadata about images, or some combination of the two. The details of how ECUs traverse the delegation tree to find valid metadata about images is specified in <xref target="resolve_delegations"/>.</t>

<section anchor="targets_images_meta" title="Metadata about images">

<t>To be available to install on clients, all images on the repository MUST have their metadata listed in a Targets role.  Each Targets role MAY provide a list of some images on the repository.  This list MUST provide, at a minimum, the following information about each image:</t>

<t><list style="symbols">
  <t>The image filename</t>
  <t>The size of the image in bytes</t>
  <t>One or more hashes of the image file, along with the hashing function used</t>
</list></t>

<section anchor="custom-metadata-about-images" title="Custom metadata about images">

<t>In addition to the required metadata, Targets metadata files MAY contain extra metadata for images on the repository. This metadata can be customized for a particular use case. Examples of use cases for different types of custom metadata can be found in the Deployment Considerations document (<xref target="DEPLOY"/>). However, there are a few important pieces of custom metadata that SHOULD be present in most implementations. In addition, there is one element in the custom metadata that MUST be present in the Targets metadata from the Director.</t>

<t>Custom metadata MAY also contain a demarcated field or section that MUST match whenever two pieces of metadata are checked against each other, such as when Targets metadata from the Director repository is checked against Targets metadata from the Image repository.</t>

<t>The information listed below SHOULD be provided for each image on both the Image repository and the Director repository. If a “MUST match section” is to be implemented, that is where this information SHOULD be placed.</t>

<t><list style="symbols">
  <t>A release counter, to be incremented each time a new version of the image is released. This can be used to prevent rollback attacks even in cases where the Director repository is compromised.</t>
  <t>A hardware identifier, or list of hardware identifiers, representing models of ECUs with which the image is compatible. This can be used to ensure that an ECU cannot be ordered to install an incompatible image, even in cases where the Director repository is compromised.</t>
</list></t>

<t>The following information is CONDITIONALLY REQUIRED for each image on the Director repository IF that image is encrypted:</t>

<t><list style="symbols">
  <t>Information about filenames, hashes, and file size of the encrypted image.</t>
  <t>Information about the encryption method, and other relevant information–for example, a symmetric encryption key encrypted by the ECU’s asymmetric key could be included in the Director repository metadata.</t>
</list></t>

<t>The following information MUST be provided for each image in the Targets metadata from the Director repository:</t>

<t><list style="symbols">
  <t>An ECU identifier (such as a serial number), specifying the ECU that should install the image.</t>
</list></t>

<t>The Director repository MAY provide a download URL for the image file. This may be useful, for example, when the image is on a public CDN and the director wishes to provide a signed URL.</t>

</section>
</section>
<section anchor="delegations_meta" title="Metadata about delegations">

<t>A Targets metadata file on the Image repository (but not the Director repository) MUST be able to delegate signing authority to other entities. For example, it could delegate signing authority for a particular ECU’s firmware to that ECU’s supplier. A metadata file MAY contain any number of delegations and MUST keep the delegations in prioritized order.</t>

<t>A list of delegations MUST provide the following information:</t>

<t><list style="symbols">
  <t>A list of public keys of all delegatees. Each key should have a unique public key identifier and a key type.</t>
  <t>A list of delegations, each of which contains:
  <list style="symbols">
      <t>A list of the filenames to which this role applies. This MAY be expressed using wildcards, or by enumerating a list, or a combination of the two.</t>
      <t>An optional list of the hardware identifiers to which this role applies.  If this is omitted, any hardware identifier will match.</t>
      <t>An indicator of whether or not this is a terminating delegation. (See <xref target="targets_role_delegations"/>.)</t>
      <t>A list of the roles to which this delegation applies. Each role needs to specify:
      <list style="symbols">
          <t>A name for the role (e.g. “supplier1-qa”)</t>
          <t>The key identifiers for each key this role uses</t>
          <t>A threshold of keys that must sign for this role</t>
        </list></t>
    </list></t>
</list></t>

<t>Note that <spanx style="strong">any</spanx> Targets metadata file stored on the Image repository may contain delegations, and these delegations can be in chains of arbitrary length.</t>

</section>
</section>
<section anchor="snapshot_meta" title="Snapshot metadata">

<t>The Snapshot metadata lists version numbers and filenames of all Targets metadata files. It protects against mix-and-match attacks if a delegated supplier key is compromised.</t>

<t>For each Targets metadata file on the repository, the Snapshot metadata SHALL contain the following information:</t>

<t><list style="symbols">
  <t>The filename and version number of the each Targets metadata file on the repository</t>
</list></t>

<t>The Snapshot metadata MAY also list the Root metadata filename and version number. This is not required, particularly for implementations of <xref target="TAP-5"/>, but MAY be included in all cases for backward compatibility.</t>

</section>
<section anchor="timestamp_meta" title="Timestamp metadata">

<t>The Timestamp metadata SHALL contain the following information:</t>

<t><list style="symbols">
  <t>The filename and version number of the latest Snapshot metadata on the repository.</t>
  <t>One or more hashes of the Snapshot metadata file, along with the hashing function used.</t>
</list></t>

</section>
<section anchor="repo_mapping_meta" title="Repository mapping metadata">

<t>As described in the introduction to <xref target="design"/>, Uptane requires a Director repository and an Image repository. However, it is possible to have an Uptane-compliant implementation that has more than two repositories.</t>

<t>Repository mapping metadata informs a Primary ECU about which repositories to trust for images or image paths. <xref target="TAP-4"/> describes how to make use of more complex repository mapping metadata in order to have more than the two required repositories.</t>

<t>Repository mapping metadata, or the equivalent informational content, MUST be present on all Primary ECUs, and MUST contain the following information:</t>

<t><list style="symbols">
  <t>A list of repository names and one or more URLs at which the named repository can be accessed. At a minimum, this MUST include the Director and Image repositories.</t>
  <t>A list of mappings of image paths to repositories, each of which contains:
  <list style="symbols">
      <t>A list of image paths. Image paths MAY be expressed using wildcards, or by enumerating a list, or a combination of the two.</t>
      <t>A list of repositories that MUST sign the Targets metadata for the image paths.</t>
    </list></t>
</list></t>

<t>For example, in the most basic Uptane case, the repository mapping metadata would contain:</t>

<t><list style="symbols">
  <t>The name and URL of the Director repository</t>
  <t>The name and URL of the Image repository</t>
  <t>A single mapping indicating that all images (<spanx style="verb">*</spanx>) MUST be signed by both the Director and Image repository</t>
</list></t>

<t>Note that the metadata need not be in the form of a metadata file. For example, in the basic case where there is only one Director and one Image repository, and all images need to have signed metadata from both repositories, it would be sufficient to have a configuration file with URLs for the two repositories, and a client that always checks for metadata matches between them. In this case, no explicit mapping would be defined, because the mapping is defined as part of the Uptane client implementation.</t>

<t>The <spanx style="emph">Uptane Deployment Considerations</spanx> document (<xref target="DEPLOY"/>) gives more guidance on how to implement repository mapping metadata for more complex use cases. It also discusses strategies for updating repository mapping metadata, if required.</t>

</section>
<section anchor="metadata_filename_rules" title="Rules for filenames in repositories and metadata">

<t>There is a difference between the file name in a metadata file or an ECU, and the file name on a repository. This difference exists in order to avoid race conditions, where metadata and images are read from, and written to, at the same time. For more details, the reader should read the TUF specification <xref target="TUF-spec"/> and PEP 458 <xref target="PEP-458"/>.</t>

<t>Unless stated otherwise, all files SHALL be written to repositories in accordance with the following two rules:</t>

<t><list style="numbers">
  <t>Metadata filenames SHALL be qualified with version numbers. If a metadata file A is specified as FILENAME.EXT in another metadata file B, then it SHALL be written as VERSION.FILENAME.EXT, where VERSION is A’s version number, as defined in <xref target="common_metadata"/>, with one exception: If the version number of the Timestamp metadata file might not be known in advance by a client, it MAY be read from, and written to, a repository using a filename without a version number qualification, i.e. FILENAME.EXT.</t>
  <t>If an image is specified in a Targets metadata file as FILENAME.EXT, it SHALL be written to the repository as HASH.FILENAME.EXT, where HASH is one of the hash digests of the file, as specified in <xref target="targets_images_meta"/>. The file MUST be written to the repository using <spanx style="emph">n</spanx> different filenames, one for each hash digest listed in its corresponding Targets metadata.</t>
</list></t>

<t>For example:</t>

<t><list style="symbols">
  <t>The version number of the Snapshot metadata file is 61, and its filename in the Timestamp metadata is “snapshot.json”. The filename on the repository will be “61.snapshot.json”.</t>
  <t>There is an image with the filename “acme_firmware.bin” specified in the Targets metadata, with a SHA256 of “aaaa” and a SHA512-256 of “bbbb”. It will have two filenames on the repository: “aaaa.acme_firmware.bin” and “bbbb.acme_firmware.bin”.</t>
</list></t>

</section>
</section>
<section anchor="server-repository-implementation-requirements" title="Server / repository implementation requirements">

<t>An Uptane implementation SHALL make the following services available to vehicles:</t>

<t><list style="symbols">
  <t>Image repository</t>
  <t>Director repository</t>
</list></t>

<t>Additionally, an Uptane implementation requires ECUs to have a secure way to know the current time.</t>

<section anchor="image-repository" title="Image repository">

<t>The Image repository exists to allow an OEM and/or its suppliers to upload images and their associated metadata. It makes these images and their metadata available to vehicles. The Image repository is designed to be primarily controlled by human actors, and updated relatively infrequently.</t>

<t>The Image repository SHALL expose an interface permitting the download of metadata and images. This interface SHOULD be public.</t>

<t>The Image repository SHALL require authorization for writing metadata and images.</t>

<t>The Image repository SHALL provide a method for authorized users to upload images and their associated metadata. It SHALL check that a user writing metadata and images is authorized to do so for that specific image by checking the chain of delegations as described in <xref target="delegations_meta"/>.</t>

<t>The Image repository SHALL implement storage which permits authorized users to write an image file using a unique filename, and later read the same file using the same name. It MAY use any filesystem, key-value store, or database that fulfills this requirement.</t>

<t>The Image repository MAY require authentication for read access.</t>

</section>
<section anchor="director_repository" title="Director repository">

<t>The Director repository instructs ECUs as to which images should be installed by producing signed metadata on demand. Unlike the Image repository, it is mostly controlled by automated, online processes. It also consults a private inventory database containing information on vehicles, ECUs, and software revisions.</t>

<t>The Director repository SHALL expose an interface for primaries to upload vehicle version manifests (<xref target="vehicle_version_manifest"/>) and download metadata. This interface SHOULD be public.
The Director MAY encrypt images for ECUs that require them, either by encrypting on-the-fly or by storing encrypted images in the repository.</t>

<t>The Director repository SHALL implement storage which permits an automated service to write generated metadata files. It MAY use any filesystem, key-value store, or database that fulfills this requirement.</t>

<section anchor="directing-installation-of-images-on-vehicles" title="Directing installation of images on vehicles">

<t>A Director repository MUST conform to the following six-step process for directing the installation of software images on a vehicle.</t>

<t><list style="numbers">
  <t>The Director SHOULD first identify the vehicle. This MAY be done when the Director receives a vehicle version manifest sent by a Primary (as described in <xref target="construct_manifest_primary"/>), decodes the manifest, and determines the unique vehicle identifier. Additionally, the Director MAY utilize other mechanisms to uniquely identify a vehicle (e.g., 2-way TLS with unique client certificates).</t>
  <t>Using the vehicle identifier, the Director queries its inventory database (as described in <xref target="inventory_db"/>) for relevant information about each ECU in the vehicle.</t>
  <t>The Director SHALL check the manifest for accuracy compared to the information in the inventory database. If any of the required checks fail, the Director MAY drop the request. An implementer MAY make additional checks if desired. At a minimum, the Director SHALL check the following:
  <list style="symbols">
      <t>Each ECU recorded in the inventory database is also represented in the manifest.</t>
      <t>The signature of the manifest matches the ECU key of the Primary that sent it.</t>
      <t>The signature of each Secondary’s contribution to the manifest matches the ECU key of that Secondary.</t>
    </list></t>
  <t>The Director SHOULD check that the nonce or counter in each ECU Version Report has not been used before to prevent a replay of the ECU Version Report. If the nonce or counter is reused the Director SHOULD drop the request.</t>
  <t>The Director extracts information about currently installed images from the vehicle version manifest. Using this information, it determines if the vehicle is already up-to-date, and if not, determines a set of images that should be installed. The exact process by which this determination takes place is out of scope of this standard. However, the Director MUST take into account <spanx style="emph">dependencies</spanx> and <spanx style="emph">conflicts</spanx> between images and SHOULD consult well-established techniques for dependency resolution.</t>
  <t>The Director MAY encrypt images for ECUs that require it.</t>
  <t>The Director generates new metadata representing the desired set of images to be installed on the vehicle, based on the dependency resolution in step 4. This includes Targets (<xref target="targets_meta"/>), Snapshot (<xref target="snapshot_meta"/>), and Timestamp (<xref target="timestamp_meta"/>) metadata. It then sends this metadata to the Primary as described in <xref target="download_meta_primary"/>.</t>
</list></t>

</section>
<section anchor="inventory_db" title="Inventory Database">

<t>The Director SHALL use a private inventory database to store information about ECUs and vehicles. An implementor MAY use any durable database for this purpose.</t>

<t>The inventory database MUST record the following pieces of information:</t>

<t><list style="symbols">
  <t>Per vehicle:
  <list style="symbols">
      <t>A unique identifier (such as a VIN)</t>
    </list></t>
  <t>Per ECU:
  <list style="symbols">
      <t>A unique identifier (such as a serial number)</t>
      <t>The vehicle identifier the ECU is associated with</t>
      <t>An ECU key (symmetric or asymmetric; for asymmetric keys, only the public part SHOULD be stored)</t>
      <t>The ECU key identifier (as defined in <xref target="common_metadata"/>)</t>
      <t>Whether the ECU is a Primary or a Secondary</t>
    </list></t>
</list></t>

<t>The inventory database MAY record other information about ECUs and vehicles. It SHOULD record a hardware identifier for each ECU to protect against the possibility of directing the ECU to install incompatible firmware.</t>

</section>
</section>
</section>
<section anchor="in-vehicle-implementation-requirements" title="In-vehicle implementation requirements">

<t>An Uptane-compliant ECU SHALL be able to download and verify Image metadata and image binaries before installing a new image and MUST have a secure way of verifying the current time, or a sufficiently recent attestation of the time.</t>

<t>Each ECU in a vehicle receiving over-the-air updates is either a Primary or a Secondary ECU. A Primary ECU collects and delivers vehicle manifests to the Director (<xref target="vehicle_version_manifest"/>) that contain information about which images have been installed on ECUs in the vehicle. It also verifies the time and downloads and verifies the latest metadata and images for itself and for its secondaries. A Secondary ECU verifies the time, and downloads and verifies the latest metadata and images for itself from its associated Primary ECU. It also sends signed information about its installed images to its associated Primary.</t>

<t>All ECUs MUST verify image metadata as specified in <xref target="metadata_verification"/> before installing an image or making it available to other ECUs. A Primary ECU MUST perform full verification (<xref target="full_verification"/>). A Secondary ECU SHOULD perform full verification if possible. If a Secondary cannot perform full verification, it SHALL perform partial verification. See the Uptane Deployment Considerations (<xref target="DEPLOY"/>) for a discussion of how to choose between partial and full verification.</t>

<t>ECUs MUST have a secure source of time. An OEM/Uptane implementor MAY use any external source of time that is demonstrably secure. The Uptane Deployment Considerations (<xref target="DEPLOY"/>) describe one way to implement an external time server to cryptographically attest time, as well as the security properties required. When “loading time” is referenced in procedures in this standard, it should be understood to mean loading into memory the current time (if the ECU has its own secure clock), or the most recent attested time.</t>

<section anchor="build-time-prerequisite-requirements-for-ecus" title="Build-time prerequisite requirements for ECUs">

<t>For an ECU to be capable of receiving Uptane-secured updates, it MUST have the following data provisioned at the time it is manufactured or installed in the vehicle:</t>

<t><list style="numbers">
  <t>A sufficiently recent copy of required Uptane metadata at the time of manufacture or install. See the Uptane Deployment Considerations (<xref target="DEPLOY"/>) for more information.
  <list style="symbols">
      <t>Partial verification ECUs MUST have the Root and Targets metadata from the Director repository.</t>
      <t>Full verification ECUs MUST have a complete set of metadata (Root, Targets, Snapshot, and Timestamp) from both repositories, as well as the repository mapping metadata (<xref target="repo_mapping_meta"/>).</t>
    </list></t>
  <t>The current time, or a secure attestation of a sufficiently recent time.</t>
  <t>An <spanx style="strong">ECU key</spanx>. This is a private key, unique to the ECU, used to sign ECU version manifests and decrypt images. An ECU key MAY be either a symmetric key or an asymmetric key. If it is an asymmetric key, there MAY be separate keys for encryption and signing. For the purposes of this standard, the set of private keys that an ECU uses is referred to as the ECU key (singular), even if it is actually multiple keys used for different purposes.</t>
</list></t>

</section>
<section anchor="what-the-primary-does" title="What the Primary does">

<t>A Primary downloads, verifies, and distributes the latest time, metadata and images. To do so, it SHALL perform the following seven steps:</t>

<t><list style="numbers">
  <t>Construct and send vehicle version manifest (<xref target="construct_manifest_primary"/>)</t>
  <t>Download and check current time (<xref target="check_time_primary"/>)</t>
  <t>Download and verify metadata (<xref target="download_meta_primary"/>)</t>
  <t>Download and verify images (<xref target="download_images_primary"/>)</t>
  <t>OPTIONAL: Send latest time to secondaries (<xref target="send_time_primary"/>)</t>
  <t>Send metadata to Secondaries (<xref target="send_metadata_primary"/>)</t>
  <t>Send images to Secondaries (<xref target="send_images_primary"/>)</t>
</list></t>

<t>Note that the subsequent sections concerning requirements for a Primary do not prohibit implementing Primary capabilities on an ECU that does not communicate directly with the Uptane repositories. This allows for implementations to have multiple ECUs within the vehicle performing functions equivalent to a Primary.
If multiple such Primaries are included within a vehicle, each Secondary ECU SHALL have a single Primary responsible for providing its updates.</t>

<section anchor="construct_manifest_primary" title="Construct and send vehicle version manifest">

<t>The Primary SHALL build a <spanx style="emph">vehicle version manifest</spanx> as described in <xref target="vehicle_version_manifest"/>.</t>

<t>Once the complete manifest is built, the Primary MAY send the manifest to the Director repository. However, it is not strictly required that the Primary send the manifest until step three. If permitted by the implementation, a Primary MAY send only a diff of the manifest to save bandwidth. If an implementation permits diffs, the Director SHOULD have a way to request a full manifest.</t>

<t>Secondaries MAY send their version report at any time so that it is already stored on the Primary when it wishes to check for updates. Alternatively, the Primary MAY request a version report from each Secondary at the time of the update check.</t>

<section anchor="vehicle_version_manifest" title="Vehicle version manifest">

<t>The vehicle version manifest is a metadata structure that MUST contain the following information:</t>

<t><list style="symbols">
  <t>An attribute containing the signature(s) of the payload, each specified by:
  <list style="symbols">
      <t>The public key identifier of the key being used to sign the payload</t>
      <t>The signing method (e.g. ed25519, rsassa-pss, etc.)</t>
      <t>A hash of the payload to be signed</t>
      <t>The hashing function used (e.g. sha256, sha512-224, etc.)</t>
      <t>The signature of the hash</t>
    </list></t>
  <t>A payload representing the installed versions of each software image on the vehicle. This payload SHALL contain:
  <list style="symbols">
      <t>The vehicle’s unique identifier (e.g. the VIN)</t>
      <t>The Primary ECU’s unique identifier (e.g. the serial number)</t>
      <t>A list of ECU version reports as specified in <xref target="version_report"/></t>
    </list></t>
</list></t>

<t>Note that one of the ECU version reports should be the version report for the Primary itself.</t>

</section>
<section anchor="version_report" title="ECU version report">

<t>An ECU version report is a metadata structure that MUST contain the following information:</t>

<t><list style="symbols">
  <t>An attribute containing the signature(s) of the payload, each specified by:
  <list style="symbols">
      <t>The public key identifier of the key being used to sign the payload</t>
      <t>The signing method (e.g. ed25519, rsassa-pss, etc.)</t>
      <t>A hash of the payload to be signed</t>
      <t>The hashing function used (e.g. sha256, sha512-224, etc.)</t>
      <t>The signature of the hash</t>
    </list></t>
  <t>A payload containing:
  <list style="symbols">
      <t>The ECU’s unique identifier (e.g. the serial number)</t>
      <t>The filename, length, and hashes of its currently installed image (i.e. the non-custom targets metadata for this particular image)</t>
      <t>An indicator of any detected security attack</t>
      <t>The latest time the ECU can verify at the time this version report was generated</t>
      <t>A nonce or counter to prevent a replay of the ECU version report. This value MUST change each update cycle and MAY be the cryptographic nonce used with a Time Server.</t>
    </list></t>
</list></t>

</section>
</section>
<section anchor="check_time_primary" title="Download and check current time">

<t>The Primary SHALL load the current time from a secure source.</t>

</section>
<section anchor="download_meta_primary" title="Download and verify metadata">

<t>The Primary SHALL download metadata for all targets and perform a full verification on it as specified in <xref target="full_verification"/>.</t>

</section>
<section anchor="download_images_primary" title="Download and verify images">

<t>The Primary SHALL download and verify images for itself and for all of its associated Secondaries. Images SHALL be verified by checking that the hash of the image file matches the hash specified in the Director’s Targets metadata for that image.</t>

<t>There may be several different filenames that all refer to the same image binary, as described in <xref target="metadata_filename_rules"/>. If the primary has received multiple hashes for a given image binary via the Targets role (see <xref target="targets_images_meta"/>) then it SHALL verify every hash for this image despite the fact that just one hash is enough to obtain the image itself.</t>

</section>
<section anchor="send_time_primary" title="Send latest time to Secondaries">

<t>Unless the Secondary ECU has its own way of verifying the time or does not have the capacity to verify a time message, the Primary is CONDITIONALLY REQUIRED to send the time to each ECU. The Secondary will verify the time message, then overwrite its current time with the received time.</t>

</section>
<section anchor="send_metadata_primary" title="Send metadata to Secondaries">

<t>The Primary SHALL send its latest downloaded metadata to all of its associated Secondaries. The metadata it sends to each Secondary MUST include all of the metadata required for verification on that Secondary. For full verification Secondaries, this includes the metadata for all four roles from both repositories, plus any delegated Targets metadata files the Secondary will recurse through to find the proper delegation. For partial verification Secondaries, this includes only the Targets metadata file from the Director repository.</t>

<t>The Primary SHOULD determine the minimal set of metadata files to send to each Secondary by performing delegation resolution as described in <xref target="full_verification"/>.</t>

<t>Each Secondary SHALL store the latest copy of all metadata required for its own verification.</t>

</section>
<section anchor="send_images_primary" title="Send images to Secondaries">

<t>The Primary SHALL send the latest image to each of its associated Secondaries that have storage to receive it.</t>

<t>For Secondaries without storage, the Primary SHOULD wait for a request from the Secondary to stream the new image file to it. The Secondary will send the request once it has verified the metadata sent in the previous step.</t>

</section>
</section>
<section anchor="installing-images-on-primary-or-secondary-ecus" title="Installing images on Primary or Secondary ECUs">

<t>An ECU SHALL perform the following steps when attempting to install a new image:</t>

<t><list style="numbers">
  <t>Verify latest attested time (<xref target="verify_time"/>)</t>
  <t>Verify metadata (<xref target="verify_metadata"/>)</t>
  <t>Download latest image (<xref target="download_image"/>)</t>
  <t>Verify image (<xref target="verify_image"/>)</t>
  <t>Install image (<xref target="install_image"/>)</t>
  <t>Create and send version report (<xref target="create_version_report"/>)</t>
</list></t>

<section anchor="verify_time" title="Load and verify the latest attested time">

<t>The ECU SHALL load and verify the current time, or the most recent securely attested time.</t>

</section>
<section anchor="verify_metadata" title="Verify metadata">

<t>The ECU SHALL verify the latest downloaded metadata (<xref target="metadata_verification"/>) using either full or partial verification. If the metadata verification fails for any reason, the ECU SHALL jump to the final step (<xref target="create_version_report"/>).</t>

</section>
<section anchor="download_image" title="Download latest image">

<t>If the ECU does not have secondary storage, i.e. buffer storage to temporarily store the latest image before installing it, it SHALL download the latest image from the Primary. (If the ECU has secondary storage, it will already have the latest image in its secondary storage as specified in <xref target="send_images_primary"/>, and should skip to the next step.) The ECU MAY first create a backup of its previous working image and store it elsewhere (e.g., the primary).</t>

<t>The filename used to identify the latest known image (i.e., the file to request from the Primary) SHALL be determined as follows:</t>

<t><list style="numbers">
  <t>Load the Targets metadata file from the Director repository.</t>
  <t>Find the Targets metadata associated with this ECU identifier.</t>
  <t>Construct the Image filename using the rule in <xref target="metadata_filename_rules"/>, or use the download URL specified in the Director metadata.</t>
  <t>If there is no Targets metadata about this image, abort the update cycle and report that there is no such image. Additionally, in the case of failure, the ECU SHALL retain its previous Targets metadata instead of using the new Targets metadata. Otherwise, download the image (up to the number of bytes specified in the Targets metadata), and verify that its hashes match the Targets metadata.</t>
</list></t>

<t>When the Primary responds to the download request, the ECU SHALL overwrite its current image with the downloaded image from the Primary.</t>

<t>If any part of this step fails, the ECU SHALL jump to the final step (<xref target="create_version_report"/>).</t>

</section>
<section anchor="verify_image" title="Verify image">

<t>The ECU SHALL verify that the latest image matches the latest metadata as follows:</t>

<t><list style="numbers">
  <t>Load the latest Targets metadata file from the Director.</t>
  <t>Find the Targets metadata associated with this ECU identifier.</t>
  <t>Check that the hardware identifier in the metadata matches the ECUs hardware identifier.</t>
  <t>Check that the image filename is valid for this ECU. This MAY be a comparison against a wildcard path, which restricts the ECUs to which a delegation will apply.</t>
  <t>Check that the release counter of the image in the previous metadata, if it exists, is less than or equal to the release counter in the latest metadata.</t>
  <t>If the image is encrypted, decrypt the image with a decryption key to be chosen as follows:
  <list style="symbols">
      <t>If the ECU key is a symmetric key, the ECU SHALL use the ECU key for image decryption.</t>
      <t>If the ECU key is asymmetric, the ECU SHALL check the Targets metadata for an encrypted symmetric key. If such a key is found, the ECU SHALL decrypt the symmetric key using its ECU key, and use the decrypted symmetric key for image decryption.</t>
      <t>If the ECU key is asymmetric and there is no symmetric key in the target metadata, the ECU SHALL use its ECU key for image decryption.</t>
    </list></t>
  <t>Check that the hash of the image matches the hash in the metadata.</t>
</list></t>

<t>If the ECU has secondary storage, the checks SHOULD be performed on the image in secondary storage before it is installed.</t>

<t>NOTE: See <xref target="DEPLOY"/> for guidance on how to deal with Secondary ECU failures for ECUs that do not have secondary storage.</t>

<t>If any step fails, the ECU SHALL jump to the (<xref target="create_version_report"/>) step.</t>

</section>
<section anchor="install_image" title="Install image">

<t>The ECU SHALL attempt to install the update. This installation SHOULD occur at a time when all pre-conditions are met. These pre-conditions MAY include ensuring the vehicle is in a safe environment for install (e.g., the vehicle is parked when updating a specific ECU). Another pre-condition MAY include ensuring the ECU has a backup of its current image and metadata in case the current installation fails.</t>

</section>
<section anchor="create_version_report" title="Create and send version report">

<t>The ECU SHALL create a version report as described in <xref target="version_report"/>, and send it to the Primary (or simply save it to disk, if the ECU is a Primary). The Primary SHOULD write the version reports it receives to disk and associate them with the Secondaries that sent them.</t>

</section>
</section>
<section anchor="metadata_verification" title="Metadata verification procedures">

<t>A Primary ECU MUST perform full verification of metadata. A Secondary ECU SHOULD perform full verification of metadata. If a Secondary cannot perform full verification, it SHALL perform partial verification instead.</t>

<t>If a step in the following workflows does not succeed (e.g., the update is aborted because a new metadata file was not signed), an ECU SHOULD still be able to update again in the future. Errors raised during the update process SHOULD NOT leave ECUs in an unrecoverable state.</t>

<section anchor="partial_verification" title="Partial verification">

<t>In order to perform partial verification, an ECU SHALL perform the following steps:</t>

<t><list style="numbers">
  <t>Load and verify the current time or the most recent securely attested time.</t>
  <t>Download and check the Targets metadata file from the Director repository, following the procedure in <xref target="check_targets"/>.</t>
</list></t>

</section>
<section anchor="full_verification" title="Full verification">

<t>Full verification of metadata means that the ECU checks that the Targets metadata about images from the Director repository matches the Targets metadata about the same images from the Image repository. This provides resilience to a key compromise in the system.</t>

<t>Full verification MAY be performed by either Primary or Secondary ECUs. In the following instructions, whenever an ECU is directed to download metadata, it applies only to Primary ECUs.</t>

<t>If <xref target="TAP-5"/> is supported and a Primary has an external connection to the Uptane repositories, a Primary ECU SHALL download metadata and images following the rules specified in that TAP.  If <xref target="TAP-5"/> is not supported, or if the Primary does not have an external connection to the Uptane repositories, the download SHOULD follow the <xref target="TUF-spec"/> and the metadata file renaming rules specified in <xref target="metadata_filename_rules"/>.</t>

<t>Before starting full verification, the repository mapping metadata MUST be consulted to determine where to download metadata from. This procedure assumes the basic Uptane case: there are only two repositories (Director and Image), and all image paths are required to be signed by both repositories. If a more complex repository layout is being used, refer to <xref target="DEPLOY"/> for guidance on how to determine where metadata should be downloaded from.</t>

<t>In order to perform full verification, an ECU SHALL perform the following steps:</t>

<t><list style="numbers">
  <t>Load and verify the current time or the most recent securely attested time.</t>
  <t>Download and check the Root metadata file from the Director repository, following the procedure in <xref target="check_root"/>.</t>
  <t>Download and check the Timestamp metadata file from the Director repository, following the procedure in <xref target="check_timestamp"/>.</t>
  <t>Check the previously downloaded Snapshot metadata file from the Directory repository (if available). If the hashes and version number of that file match the hashes and version number listed in the new Timestamp metadata, there are no new updates and the verification process MAY be stopped and considered complete. Otherwise, download and check the Snapshot metadata file from the Director repository, following the procedure in <xref target="check_snapshot"/>.</t>
  <t>Download and check the Targets metadata file from the Director repository, following the procedure in <xref target="check_targets"/>.</t>
  <t>If the Targets metadata from the Directory repository indicates that there are no new targets that are not already currently installed, the verification process MAY be stopped and considered complete. Otherwise, download and check the Root metadata file from the Image repository, following the procedure in <xref target="check_root"/>.</t>
  <t>Download and check the Timestamp metadata file from the Image repository, following the procedure in <xref target="check_timestamp"/>.</t>
  <t>Check the previously downloaded Snapshot metadata file from the Image repository (if available). If the hashes and version number of that file match the hashes and version number listed in the new Timestamp metadata, the ECU MAY skip to the last step. Otherwise, download and check the Snapshot metadata file from the Image repository, following the procedure in <xref target="check_snapshot"/>.</t>
  <t>Download and check the top-level Targets metadata file from the Image repository, following the procedure in <xref target="check_targets"/>.</t>
  <t>Verify that Targets metadata from the Director and Image repositories match. A Primary ECU MUST perform this check on metadata for all images listed in the Targets metadata file from the Director repository downloaded in step 6. A Secondary ECU MAY elect to perform this check only on the metadata for the image it will install. (That is, the target metadata from the Director that contains the ECU identifier of the current ECU.) To check that the metadata for an image matches, complete the following procedure:
  <list style="numbers">
      <t>Locate and download a Targets metadata file from the Image repository that contains an image with exactly the same file name listed in the Director metadata, following the procedure in <xref target="resolve_delegations"/>.</t>
      <t>Check that the Targets metadata from the Image repository matches the Targets metadata from the Director repository:
      <list style="numbers">
          <t>Check that the non-custom metadata (i.e., length and hashes) of the unencrypted or encrypted image are the same in both sets of metadata. Note: the Primary is responsible for validating encrypted images and associated metadata. The target ECU (Primary or Secondary) is responsible for validating the unencrypted image and associated metadata.</t>
          <t>Check that all “MUST match” custom metadata (e.g., hardware identifier and release counter) are the same in both sets of metadata.</t>
          <t>Check that the release counter in the previous Targets metadata file is less than or equal to the release counter in this Targets metadata file.</t>
        </list></t>
    </list></t>
</list></t>

<t>If any step fails, the ECU MUST return an error code indicating the failure. If a check for a specific type of security attack fails (e.g. rollback, freeze, arbitrary software, etc.), the ECU SHOULD return an error code that indicates the type of attack.</t>

<t>If the ECU performing the verification is the Primary ECU, it SHOULD also ensure that the Targets metadata from the Director repository doesn’t contain any ECU identifiers for ECUs not actually present in the vehicle.</t>

</section>
<section anchor="check_root" title="How to check Root metadata">

<t>To properly check Root metadata, an ECU SHOULD:</t>

<t><list style="numbers">
  <t>Load the previous Root metadata file.</t>
  <t>Update to the latest Root metadata file.
  <list style="numbers">
      <t>Let N denote the version number of the latest Root metadata file (which at first could be the same as the previous root metadata file).</t>
      <t>Try downloading a new version N+1 of the Root metadata file, up to some X number of bytes. The value for X is set by the implementor. For example, X may be tens of kilobytes. The filename used to download the Root metadata file is of the fixed form VERSION_NUMBER.FILENAME.EXT (e.g., 42.root.json). If this file is not available, the current Root metadata file is the latest; continue with step 3.</t>
      <t>Version N+1 of the Root metadata file MUST have been signed by the following: (1) a threshold of keys specified in the latest Root metadata file (version N), and (2) a threshold of keys specified in the new Root metadata file being validated (version N+1). If version N+1 is not signed as required, discard it, abort the update cycle, and report the signature failure. On the next update cycle, begin at version N of the Root metadata file. (Checks for an arbitrary software attack.)</t>
      <t>The version number of the latest Root metadata file (version N) must be less than or equal to the version number of the new Root metadata file (version N+1). Effectively, this means checking that the version number signed in the new Root metadata file is indeed N+1. If the version of the new Root metadata file is less than the latest metadata file, discard it, abort the update cycle, and report the rollback attack. On the next update cycle, begin at step 1 and version N of the Root metadata file. (Checks for a rollback attack.)</t>
      <t>Set the latest Root metadata file to the new Root metadata file.</t>
      <t>Repeat steps 2.1 to 2.6.</t>
    </list></t>
  <t>Check that the current (or latest securely attested) time is lower than the expiration timestamp in the latest Root metadata file. (Checks for a freeze attack.)</t>
  <t>If the Timestamp and/or Snapshot keys have been rotated, delete the previous Timestamp and Snapshot metadata files. (Checks for recovery from fast-forward attacks <xref target="MERCURY"/>.)</t>
</list></t>

</section>
<section anchor="check_timestamp" title="How to check Timestamp metadata">

<t>To properly check Timestamp metadata, an ECU SHOULD:</t>

<t><list style="numbers">
  <t>Download up to Y number of bytes. The value for Y is set by the implementor. For example, Y may be tens of kilobytes. The filename used to download the Timestamp metadata file is of the fixed form FILENAME.EXT (e.g., timestamp.json).</t>
  <t>Check that it has been signed by the threshold of keys specified in the latest Root metadata file. If the new Timestamp metadata file is not properly signed, discard it, abort the update cycle, and report the signature failure. (Checks for an arbitrary software attack.)</t>
  <t>Check that the version number of the previous Timestamp metadata file, if any, is less than or equal to the version number of this Timestamp metadata file. If the new Timestamp metadata file is older than the trusted Timestamp metadata file, discard it, abort the update cycle, and report the potential rollback attack. (Checks for a rollback attack.)</t>
  <t>Check that the current (or latest securely attested) time is lower than the expiration timestamp in this Timestamp metadata file. If the new Timestamp metadata file has expired, discard it, abort the update cycle, and report the potential freeze attack. (Checks for a freeze attack.)</t>
</list></t>

</section>
<section anchor="check_snapshot" title="How to check Snapshot metadata">

<t>To properly check Snapshot metadata, an ECU SHOULD:</t>

<t><list style="numbers">
  <t>Download up to the number of bytes specified in the Timestamp metadata file, constructing the metadata filename as defined in <xref target="metadata_filename_rules"/>.</t>
  <t>The hashes and version number of the new Snapshot metadata file MUST match the hashes and version number listed in Timestamp metadata. If the hashes and version number do not match, discard the new Snapshot metadata, abort the update cycle, and report the failure. (Checks for a mix-and-match attack.)</t>
  <t>Check that it has been signed by the threshold of keys specified in the latest Root metadata file. If the new Snapshot metadata file is not signed as required, discard it, abort the update cycle, and report the signature failure. (Checks for an arbitrary software attack.)</t>
  <t>Check that the version number of the previous Snapshot metadata file, if any, is less than or equal to the version number of this Snapshot metadata file. If this Snapshot metadata file is older than the previous Snapshot metadata file, discard it, abort the update cycle, and report the potential rollback attack. (Checks for a rollback attack.)</t>
  <t>Check that the version number listed by the previous Snapshot metadata file for each Targets metadata file is less than or equal to its version number in this Snapshot metadata file. If this condition is not met, discard the new Snapshot metadata file, abort the update cycle, and report the failure. (Checks for a rollback attack.)</t>
  <t>Check that each Targets metadata filename listed in the previous Snapshot metadata file is also listed in this Snapshot metadata file. If this condition is not met, discard the new Snapshot metadata file, abort the update cycle, and report the failure. (Checks for a rollback attack.)</t>
  <t>Check that the current (or latest securely attested) time is lower than the expiration timestamp in this Snapshot metadata file. If the new Snapshot metadata file is expired, discard it, abort the update cycle, and report the potential freeze attack. (Checks for a freeze attack.)</t>
</list></t>

</section>
<section anchor="check_targets" title="How to check Targets metadata">

<t>To properly check Targets metadata, an ECU SHOULD:</t>

<t><list style="numbers">
  <t>Download up to Z number of bytes, constructing the metadata filename as defined in <xref target="metadata_filename_rules"/>. The value for Z is set by the implementor. For example, Z may be tens of kilobytes.</t>
  <t>The version number of the new Targets metadata file MUST match the version number listed in the latest Snapshot metadata. If the version number does not match, discard it, abort the update cycle, and report the failure. (Checks for a mix-and-match attack.) Skip this step if checking Targets metadata on a partial verification ECU; partial verification ECUs will not have Snapshot metadata.</t>
  <t>Check that the Targets metadata has been signed by the threshold of keys specified in the relevant metadata file (Checks for an arbitrary software attack):
  <list style="numbers">
      <t>If checking top-level Targets metadata, the threshold of keys is specified in the Root metadata.</t>
      <t>If checking delegated Targets metadata, the threshold of keys is specified in the Targets metadata file that delegated authority to this role.</t>
    </list></t>
  <t>Check that the version number of the previous Targets metadata file, if any, is less than or equal to the version number of this Targets metadata file. (Checks for a rollback attack.)</t>
  <t>Check that the current (or latest securely attested) time is lower than the expiration timestamp in this Targets metadata file. (Checks for a freeze attack.)</t>
  <t>If checking Targets metadata from the Director repository, verify that there are no delegations.</t>
  <t>If checking Targets metadata from the Director repository, check that no ECU identifier is represented more than once.</t>
</list></t>

</section>
<section anchor="resolve_delegations" title="How to resolve delegations">

<t>To properly check Targets metadata for an image, an ECU MUST locate the metadata file(s) for the role (or roles) that have the authority to sign the image. This metadata might be located in the top-level Targets metadata, but it also may be delegated to another role or to multiple roles. Therefore, all delegations MUST be resolved using the following recursive procedure, beginning with the top-level Targets metadata file.</t>

<t><list style="numbers">
  <t>Download the current metadata file, and check it following the procedure in <xref target="check_targets"/>. If the file cannot be loaded, or if any verification step fails, abort the delegation resolution, and indicate that Image metadata cannot be found because of a missing or invalid role.</t>
  <t>If the current metadata file contains signed metadata about the image, end the delegation resolution and return the metadata to be checked.</t>
  <t>If the current metadata file was reached via a terminating delegation and does not contain signed metadata about the image, abort the delegation resolution for this image and return an error indicating that image metadata could not be found.</t>
  <t>Search the list of delegations, in listed order. For each delegation:
  <list style="numbers">
      <t>Check if the delegation applies to the image being processed. For the delegation to apply, it MUST include the hardware identifier of the target, and the target name must match one of the delegation’s image paths. If either of these tests fail, move on to the next delegation in the list.</t>
      <t>If the delegation is a multi-role delegation, follow the procedure described in <xref target="multirole_delegations"/>. If the multi-role delegation is terminating and no valid Image metadata is found, abort the delegation resolution and return an error indicating that image metadata could not be found.</t>
      <t>If the delegation is a normal delegation, perform delegation resolution, starting at step 1. Note that this may recurse an arbitrary number of levels deep. If a delegation that applies to the image is found but no image metadata is found in the delegated roles or any of its sub-delegations, simply continue on with the next delegation in the list. The search is only completed/aborted if image metadata or a terminating delegation that applies to the image is found.</t>
    </list></t>
  <t>If the end of the list of delegations in the top-level metadata is reached without finding valid image metadata, return an error indicating that image metadata could not be found.</t>
</list></t>

</section>
<section anchor="multirole_delegations" title="Multi-role delegations">

<t>It is possible to delegate signing authority to multiple delegated roles as described in <xref target="TAP-3"/>. Each multi-role delegation effectively contains a list of ordinary delegations, plus a threshold of those roles that must be in agreement about the non-custom metadata for the image. All multi-role delegations MUST be resolved using the following procedure. Note that there may be sub-delegations inside multi-role delegations.</t>

<t><list style="numbers">
  <t>For each of the roles in the delegation, find and load the image metadata (or error) following the procedure in <xref target="resolve_delegations"/>.</t>
  <t>Inspect the non-custom part of the metadata loaded in step 1:
  <list style="numbers">
      <t>Locate all sets of roles which have agreeing (i.e. identical) non-custom metadata and “MUST match” custom metadata. Discard any set of roles with a size smaller than the threshold of roles that must be in agreement for this delegation.</t>
      <t>Check for a conflict. A conflict exists if there remains more than one agreeing set of roles, each set having different metadata. If a conflict is found, choose and return the metadata from the set of roles which includes the earliest role in the multi-delegation list.</t>
      <t>If there is no conflict, check if there is any single set of roles with matching non-custom metadata. If there is, choose and return the metadata from this set.</t>
      <t>If no agreeing set can be found that meets the agreement threshold, return an error indicating that image metadata could not be found.</t>
    </list></t>
</list></t>

</section>
</section>
</section>
</section>


  </middle>

  <back>

    <references title='Normative References'>





<reference  anchor="RFC2119" target='https://www.rfc-editor.org/info/rfc2119'>
<front>
<title>Key words for use in RFCs to Indicate Requirement Levels</title>
<author initials='S.' surname='Bradner' fullname='S. Bradner'><organization /></author>
<date year='1997' month='March' />
<abstract><t>In many standards track documents several words are used to signify the requirements in the specification.  These words are often capitalized. This document defines these words as they should be interpreted in IETF documents.  This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t></abstract>
</front>
<seriesInfo name='BCP' value='14'/>
<seriesInfo name='RFC' value='2119'/>
<seriesInfo name='DOI' value='10.17487/RFC2119'/>
</reference>



<reference  anchor="RFC3647" target='https://www.rfc-editor.org/info/rfc3647'>
<front>
<title>Internet X.509 Public Key Infrastructure Certificate Policy and Certification Practices Framework</title>
<author initials='S.' surname='Chokhani' fullname='S. Chokhani'><organization /></author>
<author initials='W.' surname='Ford' fullname='W. Ford'><organization /></author>
<author initials='R.' surname='Sabett' fullname='R. Sabett'><organization /></author>
<author initials='C.' surname='Merrill' fullname='C. Merrill'><organization /></author>
<author initials='S.' surname='Wu' fullname='S. Wu'><organization /></author>
<date year='2003' month='November' />
<abstract><t>This document presents a framework to assist the writers of certificate policies or certification practice statements for participants within public key infrastructures, such as certification authorities, policy authorities, and communities of interest that wish to rely on certificates.  In particular, the framework provides a comprehensive list of topics that potentially (at the writer's discretion) need to be covered in a certificate policy or a certification practice statement.  This document supersedes RFC 2527.</t></abstract>
</front>
<seriesInfo name='RFC' value='3647'/>
<seriesInfo name='DOI' value='10.17487/RFC3647'/>
</reference>



<reference  anchor="RFC5198" target='https://www.rfc-editor.org/info/rfc5198'>
<front>
<title>Unicode Format for Network Interchange</title>
<author initials='J.' surname='Klensin' fullname='J. Klensin'><organization /></author>
<author initials='M.' surname='Padlipsky' fullname='M. Padlipsky'><organization /></author>
<date year='2008' month='March' />
<abstract><t>The Internet today is in need of a standardized form for the transmission of internationalized &quot;text&quot; information, paralleling the specifications for the use of ASCII that date from the early days of the ARPANET.  This document specifies that format, using UTF-8 with normalization and specific line-ending sequences.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='5198'/>
<seriesInfo name='DOI' value='10.17487/RFC5198'/>
</reference>


<reference anchor="NFC" target="http://www.unicode.org/reports/tr15/">
  <front>
    <title>Unicode Standard Annex #15: Unicode Normalization Forms</title>
    <author initials="M." surname="Davis">
      <organization></organization>
    </author>
    <author initials="M." surname="Duerst">
      <organization></organization>
    </author>
    <date year="2018" month="October"/>
  </front>
</reference>
<reference anchor="TAP-3" target="https://github.com/theupdateframework/taps/blob/d0818e580c322815a473520f2e8cc5f5eb8df499/tap3.md">
  <front>
    <title>The Update Framework TAP 3 - Multi-role delegations</title>
    <author initials="T.K." surname="Kuppusamy">
      <organization></organization>
    </author>
    <author initials="S." surname="Awwad">
      <organization></organization>
    </author>
    <author initials="E." surname="Cordell">
      <organization></organization>
    </author>
    <author initials="V." surname="Diaz">
      <organization></organization>
    </author>
    <author initials="J." surname="Moshenko">
      <organization></organization>
    </author>
    <author initials="J." surname="Cappos">
      <organization></organization>
    </author>
    <date year="2018" month="January" day="18"/>
  </front>
</reference>
<reference anchor="TAP-4" target="https://github.com/theupdateframework/taps/blob/2cb67d913ec19424d1e354b38f862886fbfd4105/tap4.md">
  <front>
    <title>The Update Framework TAP 4 - Multiple repository consensus on entrusted targets</title>
    <author initials="T.K." surname="Kuppusamy">
      <organization></organization>
    </author>
    <author initials="S." surname="Awwad">
      <organization></organization>
    </author>
    <author initials="E." surname="Cordell">
      <organization></organization>
    </author>
    <author initials="V." surname="Diaz">
      <organization></organization>
    </author>
    <author initials="J." surname="Moshenko">
      <organization></organization>
    </author>
    <author initials="J." surname="Cappos">
      <organization></organization>
    </author>
    <date year="2017" month="December" day="15"/>
  </front>
</reference>
<reference anchor="TAP-5" target="https://github.com/theupdateframework/taps/blob/01726d203c9b9c029d26f6612069ce3180500d9a/tap5.md#downloading-metadata-and-target-files">
  <front>
    <title>The Update Framework TAP 5 - Setting URLs for roles in the root metadata file</title>
    <author initials="T.K." surname="Kuppusamy">
      <organization></organization>
    </author>
    <author initials="S." surname="Awwad">
      <organization></organization>
    </author>
    <author initials="E." surname="Cordell">
      <organization></organization>
    </author>
    <author initials="V." surname="Diaz">
      <organization></organization>
    </author>
    <author initials="J." surname="Moshenko">
      <organization></organization>
    </author>
    <author initials="J." surname="Cappos">
      <organization></organization>
    </author>
    <date year="2018" month="January" day="22"/>
  </front>
</reference>
<reference anchor="TUF-spec" target="https://github.com/theupdateframework/specification/blob/2b4e18472fe25d5b57f36f6fa50104967c8faeaa/tuf-spec.md">
  <front>
    <title>The Update Framework Specification</title>
    <author initials="J." surname="Samuel">
      <organization></organization>
    </author>
    <author initials="N." surname="Mathewson">
      <organization></organization>
    </author>
    <author initials="G." surname="Condra">
      <organization></organization>
    </author>
    <author initials="V." surname="Diaz">
      <organization></organization>
    </author>
    <author initials="T.K." surname="Kuppusamy">
      <organization></organization>
    </author>
    <author initials="S." surname="Awwad">
      <organization></organization>
    </author>
    <author initials="S." surname="Tobias">
      <organization></organization>
    </author>
    <author initials="J." surname="Wright">
      <organization></organization>
    </author>
    <author initials="H." surname="Mehnert">
      <organization></organization>
    </author>
    <author initials="E." surname="Tryzelaar">
      <organization></organization>
    </author>
    <author initials="J." surname="Cappos">
      <organization></organization>
    </author>
    <author initials="R." surname="Dingledine">
      <organization></organization>
    </author>
    <date year="2018" month="September" day="19"/>
  </front>
</reference>


    </references>

    <references title='Informative References'>

<reference anchor="MERCURY" target="https://www.usenix.org/system/files/conference/atc17/atc17-kuppusamy.pdf">
  <front>
    <title>Mercury: Bandwidth-Effective Prevention of Rollback Attacks Against Community Repositories</title>
    <author initials="T.K." surname="Kuppusamy">
      <organization></organization>
    </author>
    <author initials="V." surname="Diaz">
      <organization></organization>
    </author>
    <author initials="J." surname="Cappos">
      <organization></organization>
    </author>
    <date year="2017" month="July" day="12"/>
  </front>
  <seriesInfo name="ISBN" value="978-1-931971-38-6"/>
</reference>
<reference anchor="UPTANEESCAR" target="https://ssl.engineering.nyu.edu/papers/kuppusamy_escar_16.pdf">
  <front>
    <title>Securing Software Updates for Automobiles</title>
    <author initials="T.K." surname="Kuppusamy">
      <organization></organization>
    </author>
    <author initials="A." surname="Brown">
      <organization></organization>
    </author>
    <author initials="S." surname="Awwad">
      <organization></organization>
    </author>
    <author initials="D." surname="McCoy">
      <organization></organization>
    </author>
    <author initials="R." surname="Bielawski">
      <organization></organization>
    </author>
    <author initials="C." surname="Mott">
      <organization></organization>
    </author>
    <author initials="S." surname="Lauzon">
      <organization></organization>
    </author>
    <author initials="A." surname="Weimerskirch">
      <organization></organization>
    </author>
    <author initials="J." surname="Cappos">
      <organization></organization>
    </author>
    <date year="2016" month="October" day="16"/>
  </front>
</reference>
<reference anchor="PEP-458" target="https://www.python.org/dev/peps/pep-0458/">
  <front>
    <title>PEP 458 -- Surviving a Compromise of PyPI</title>
    <author initials="T.K." surname="Kuppusamy">
      <organization></organization>
    </author>
    <author initials="V." surname="Diaz">
      <organization></organization>
    </author>
    <author initials="D." surname="Stufft">
      <organization></organization>
    </author>
    <author initials="J." surname="Cappos">
      <organization></organization>
    </author>
    <date year="2013" month="September" day="27"/>
  </front>
</reference>
<reference anchor="DEPLOY" target="https://docs.google.com/document/d/17wOs-T7mugwte5_Dt-KLGMsp-3_yAARejpFmrAMefSE/">
  <front>
    <title>Uptane Deployment Considerations</title>
    <author initials="." surname="Members of the Uptane Alliance Community">
      <organization></organization>
    </author>
    <date year="n.d."/>
  </front>
</reference>
<reference anchor="USATODAY" target="https://www.usatoday.com/story/tech/columnist/2016/06/28/your-average-car-lot-more-code-driven-than-you-think/86437052/">
  <front>
    <title>Your average car is a lot more code-driven than you think</title>
    <author initials="B." surname="O'Donnell">
      <organization></organization>
    </author>
    <date year="2016" month="June" day="28"/>
  </front>
</reference>
<reference anchor="CR-OTA" target="https://www.consumerreports.org/automotive-technology/automakers-embrace-over-the-air-updates-can-we-trust-digital-car-repair/">
  <front>
    <title>Automakers Embrace Over-the-Air Updates, but Can We Trust Digital Car Repair?</title>
    <author initials="K." surname="Barry">
      <organization></organization>
    </author>
    <date year="2018" month="April" day="20"/>
  </front>
</reference>
<reference anchor="IN-TOTO" target="https://in-toto.github.io/">
  <front>
    <title>in-toto: A framework to secure the integrity of software supply chains</title>
    <author >
      <organization></organization>
    </author>
    <date year="2018" month="October" day="29"/>
  </front>
</reference>


    </references>



  </back>

<!-- ##markdown-source:
H4sIAAj5EF4AA+1923LbSJbgu74CYT+UpCUpS7Z864dd2ZK7NG1bXkuu6pqN
DTdIJiW0SYANgJJZDkfMh+z+3HzJnntm4kLJrqqemYjthy4LBPJy8uS5X4bD
4Vad1XP3PPmwrNPcJefw/9O0nCazokyOXZVd5gk8SU4Xy7lbuLxO66zIt9Lx
uHTX8NW7i6O3J1vTYpKnCxhlRaMMKxllOKURtiZp7S6Lcv08yfJZsbWVLcvn
SV4cuzK7hgGvXXVRrqr64MGDZw8OttLSpc+Ti7Pjs62bovx0WRarpfz9ya3h
0fR5cprXrsxdPTwu01m9tUUzfkznRQ6rWLtqa5k9T/5XXUwGSVWUdelmFfxr
vcB//O+trXRVXxXl860kGcKSqufJG7cYu7JKillSXzmFxtF8nqX5xCUvi8Vi
lWf1Gr5IEt7r5neK8jLNs18JXO13tyd7RfKuLGaj5F9g41mevEyXy6LaoW/d
Is3mLWBW/+OyKC7njuBRjSbFgl6uYHOufp48hj3UZXHhJlf0fFKs8hpB/uH8
iB6U7pLW8vYX/h1W+jx5URbFp/k6l0+msK/9/YMH+1tbeVEu6GwQSveTvzDk
k6mbJdtvPpxfDJLzH49evx4kb45+GSSunoxw8e9fvTzY33/G3/x1dPjgWfLu
L6dJtXQT/vXh40dP+Ne3rsbjTT7kGU5MGAebWqZlll/ituA/FX90uP/sKX+k
L7/F1c0Fvskr+Ct5CS+8ffXyOW2lTstLhMpVXS+f7+3d3NyMVvzpCE5mr3RL
wIpqry73D/f4A74G93QCuwhHee4+J/f3D59vmLy6R4N4tML/KWqNkuP0Oqva
T1eAcTU9nsIFeZ4A3J8O9x/QRi+O3iUPk7SGY7tOpg+e7j91h/ADPB4+bG+x
gj1eZvXVaox4sQcovFrimLMSUBWhvFeny2pvPC/GezLY0weThwcHT/cP00dP
Hh4ePJgduKeTyeHs0I2fTmePnj3DTx6OFtMQPBd0N3Dk5JUOLUsdJm9W8zob
lsXcAZYAnhJ4qn7AXIz+Mkr+slouV1W6WMe/nY+So5ubdBo/PRnBLSth8Hn8
/CcAZpb+Gj/8l1HypqiuXP6paP3At60J+gf7w/2nBv1HCv2Dyfjxk+kzgf6j
3wZ9GWz/oZvsP3t08Gi67x4ePho/fDp7+vjg6dPHs/Fs+mj/wSF+8uiu0H+k
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
xwhDn9+F3P8/+ApmFJswAQA=

-->

</rfc>


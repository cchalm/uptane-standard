<?xml version="1.0" encoding="UTF-8"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc2629 version 1.2.9 -->

<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
]>

<?rfc toc="yes"?>
<?rfc sortrefs="yes"?>
<?rfc symrefs="yes"?>

<rfc ipr="noDerivativesTrust200902" docName="uptane-standard-design" category="info">

  <front>
    <title abbrev="UPTANE">Uptane IEEE-ISTO Standard for Design and Implementation</title>

    <author initials="." surname="Members of the Uptane Alliance Community" fullname="Uptane Alliance Community">
      <organization>Uptane Alliance (c/o Prof. Justin Cappos)</organization>
      <address>
        <postal>
          <street>6 MetroTech</street>
          <city>Brooklyn</city>
          <region>NY</region>
          <code>11201</code>
          <country>USA</country>
        </postal>
        <email>uptane-standards@googlegroups.com</email>
      </address>
    </author>

    <date year="2019" month="July" day="10"/>

    <area>TODO</area>
    <workgroup>TODO</workgroup>
    <keyword>Internet-Draft</keyword>

    <abstract>


<t>This document describes a framework for securing ground vehicle software update systems.</t>



    </abstract>


  </front>

  <middle>


<section anchor="introduction" title="Introduction">

<t>Uptane is a secure software update framework for ground vehicles. This document describes procedures to enable programmers for OEMs and suppliers to securely design and implement this framework in a manner that better protects connected units on ground vehicles. Integrating Uptane as outlined in the sections that follow can reduce the ability of attackers to compromise critical systems. It also assures a faster and easier recovery process should a compromise occur.</t>

<t>These instructions specify the components necessary for a compliant implementation. Individual implementors can make their own technological choices within those requirements. This flexibility makes Uptane adaptable to the many customized update solutions used by manufacturers. If implementors wish to have compatible formats, they may use POUFs. POUFs contain a description of implementation choices as well as data binding formats. An implementor who adopts a POUF, as well as the Uptane Standard, will be able to interoperate with other implementations using that POUF.</t>

</section>
<section anchor="terminology" title="Terminology">

<section anchor="conformance-terminology" title="Conformance terminology">

<t>The keywords MUST, MUST NOT, REQUIRED, SHALL, SHALL NOT, SHOULD, SHOULD NOT, RECOMMENDED, MAY, and OPTIONAL in this document are to be interpreted as described in <xref target="RFC2119"/>.</t>

<t>In order to be considered “Uptane-compliant,” an implementation MUST follow all of these rules as specified in the document.</t>

</section>
<section anchor="terminology-1" title="Terminology">

<t><spanx style="emph">Bundle</spanx>: A set of images released by the repository that is meant to be installed by one or more target ECUs on a vehicle during the same update cycle.</t>

<t><spanx style="emph">Bus</spanx>: An internal communications network that interconnects components within a vehicle. A vehicle can have a number of buses that will vary in terms of power, speed and resources.</t>

<t><spanx style="emph">ECU Identifier</spanx>: An attribute used to identify a specific ECU (e.g., such as a unique serial number).</t>

<t><spanx style="emph">ECU Version Manifest</spanx>: Metadata which details the software version currently installed on the ECU.</t>

<t><spanx style="emph">Hardware Identifier</spanx>: An attribute used to identify a model of an ECU.</t>

<t><spanx style="emph">Image</spanx>: File containing software for an ECU to install. May contain a binary image to flash, installation instructions, and other necessary information for the ECU to properly apply the update. Each ECU typically holds only one image, although this may vary in some cases.</t>

<t><spanx style="emph">Metadata</spanx>:  Information describing the characteristics of data including, for example, structural
metadata describing data structures (e.g., data format, syntax, and semantics) and
descriptive metadata describing data contents (e.g., information security labels). As used in Uptane, metadata can be described as information associated with a role or an image that contains the characteristics or parameters thereof (e.g. cryptographic material parameters, file names and versions.)</t>

<t><spanx style="emph">Primary/Secondary ECUs</spanx>: Terms used to describe the control units within a ground vehicle. A primary ECU downloads and verifies update images and metadata for itself and for secondary ECUs, and distributes images and metadata to secondaries. Thus, it requires extra storage space and a means to download images and metadata.  Secondary ECUs receive their update images and metadata from the primary, and only need to verify and install their own metadata and images.</t>

<t><spanx style="emph">POUF</spanx>: A document that contains the protocol, operations, usage, and formats (POUF) of a specific Uptane implementation. The POUF contains decisions about SHOULDs and MAYs in an implementation, as well as descriptions of data binding formats. POUFs MAY be used to create compatible Uptane implementations.</t>

<t><spanx style="emph">Repository</spanx>: A server containing metadata about images. May also contain the images themselves. Other data may be stored on the repository to be accessed by ECUs during the update process.</t>

<t><spanx style="emph">Suppliers</spanx>: Independent companies to which auto manufacturers may outsource the production of ECUs. Tier-1 suppliers directly serve the manufacturers. Tier-2 suppliers are those that perform outsourced work for Tier-1 suppliers.</t>

<t><spanx style="emph">Vehicle Version Manifest</spanx>: A compilation of all ECU version manifests on a vehicle. It serves as a master list of all images currently running on all ECUs in the vehicle.</t>

</section>
<section anchor="uptane-role-terminology" title="Uptane Role terminology">

<t>These terms are defined in greater detail in <xref target="roles"/>.</t>

<t><spanx style="emph">Delegations</spanx>: A process by which the responsibility of signing metadata about images is assigned to another party.<vspace />
<spanx style="emph">Role</spanx>: A party (human or machine) responsible for signing a certain type of metadata. The role controls keys and is responsible for signing metadata entrusted to it with these keys. The roles mechanism of Uptane allows the system to distribute signing responsibilities so that the compromise of one key does not necessarily impact the security of the entire system.</t>

<t><list style="symbols">
  <t><spanx style="emph">Root Role</spanx>: Signs metadata that distributes and revokes public keys used to verify the root, timestamp, snapshot, and targets role metadata.</t>
  <t><spanx style="emph">Snapshot Role</spanx>: Signs metadata that indicates which images the repository has released at the same time.</t>
  <t><spanx style="emph">Targets Role</spanx>: Signs metadata used to verify the image, such as cryptographic hashes and file size.</t>
  <t><spanx style="emph">Timestamp Role</spanx>: Signs metadata that indicates if there are any new metadata or images on the repository.</t>
</list></t>

</section>
<section anchor="acronyms-and-abbreviations" title="Acronyms and abbreviations">

<t><spanx style="emph">CAN Bus</spanx>: Controller Area Network bus standard</t>

<t><spanx style="emph">CDN</spanx>: Content Delivery Network</t>

<t><spanx style="emph">ECUs</spanx>: Electronic Control Units, the computing units on a vehicle</t>

<t><spanx style="emph">LIN Bus</spanx>: Local Interconnect Bus</t>

<t><spanx style="emph">OBD</spanx>: On-board diagnostics</t>

<t><spanx style="emph">SOTA</spanx>: Software Updates Over-the-Air</t>

<t><spanx style="emph">UDS</spanx>: Unified Diagnostic Services</t>

<t><spanx style="emph">VIN</spanx>: Vehicle Identification Number</t>

</section>
</section>
<section anchor="rationale-for-and-scope-of-uptane-standards" title="Rationale for and scope of Uptane Standards">

<t>This Standards document clarifies the essential components and best practices for the secure design, implementation and deployment of Uptane by OEMs and suppliers. These practices contribute to compromise resilience, or the ability to minimize the extent of the threat posed by any given attack.</t>

<t>However, this specification is intended as an implementation guide, and not as a detailed technical argument about the security properties that Uptane provides.  Readers interested in such documentation should refer to published papers that cover this topic.  <xref target="UPTANEESCAR"/></t>

<section anchor="why-uptane-requires-a-standards-document" title="Why Uptane requires a standards document">

<t>A standards document that can guide the safe design, integration and deployment of Uptane in vehicles is needed at this time because:</t>

<t><list style="symbols">
  <t>The number of connected units on the average vehicle continues to grow, with mainstream cars now containing up to 100 million lines of code. <xref target="USATODAY"/></t>
  <t>The expanded use of software over-the-air strategies creates new attack surfaces for malicious parties. <xref target="CR-OTA"/></t>
  <t>Legacy update strategies, such as SSL/TLS or GPG/RSA, are not feasible for use on vehicle ECUs because they force manufacturers to chose between enhanced security and customizability.</t>
  <t>Conventional strategies are also complicated by the differing resources of the ECUs, which can vary greatly in memory, storage space, and Internet connectivity.</t>
  <t>The design of Uptane makes it possible to offer improved design flexibility, without sacrificing security.</t>
  <t>This added design flexibility, however, could be a liability if the framework is implemented incorrectly.</t>
  <t>Standardization of crucial steps in the design, implementation and use of Uptane can assure that customizability does not impact security or functionality.</t>
</list></t>

</section>
<section anchor="scope-of-standards-coverage" title="Scope of Standards coverage">

<t>This document sets guidelines for implementing Uptane in most systems capable of updating software on connected units in ground vehicles, including passenger vehicles, light-duty trucks, heavy-duty trucks, and motorcycles. Uptane could potentially also be applied to other ground vehicles, such as automated shuttles, recreational vehicles, and military ground vehicles. Uptane could even be applied to domains such as IoT devices, medical devices, and unmanned aerial vehicles. In this section, we define the scope of that applicability by providing sample use cases and possible exceptions, aspects of software update security that are not applicable to Uptane, and the design requirements governing the preparation of these standards.</t>

<section anchor="assumptions" title="Assumptions">

<t>We assume the following system preconditions for Uptane:</t>

<t><list style="symbols">
  <t>Vehicles have the ability to establish connectivity to required backend services. For example, this could be done through cellular, Wi-Fi, or hard-wired mechanisms.</t>
  <t>ECUs are either directly connected to the communication channel, or are indirectly connected via some sort of network gateway.</t>
  <t>ECUs are programmable and provide sufficient performance to be updated.</t>
  <t>ECUs must be able to perform a public key cryptography operation as well as some supporting operations.</t>
  <t>There are state-of-the-art secure servers in place, such as the Director and Image repository servers.</t>
</list></t>

<t>It is important that any bugs detected in Uptane implementations be patched promptly. Failure to do so could interfere with the effectiveness of Uptane’s operations.</t>

</section>
<section anchor="use-cases" title="Use cases">

<t>The following use cases provide a number of scenarios illustrating the manner in which software updates could be accomplished using Uptane.</t>

<section anchor="oems-initializing-uptane-at-the-factory-using-sota" title="OEMs initializing Uptane at the factory using SOTA">

<t>An OEM plans to install Uptane on new vehicles. This entails the following components: code to perform full and partial verification, the latest copy of the relevant metadata, the public keys, and an accurate attestation of the latest time. The OEM then either requires its tier-1 suppliers to provide these materials to the suppliers’ assembly lines or can choose to add the materials later at the OEM’s assembly lines. The OEM’s implementation is Uptane-compliant if:</t>

<t><list style="numbers">
  <t>all primaries perform full verification;</t>
  <t>all secondaries that are updated via OTA perform full or partial verification; and</t>
  <t>all other ECUs that do not perform verification cannot be updated via OTA.</t>
</list></t>

</section>
<section anchor="updating-one-ecu-with-a-complete-image" title="Updating one ECU with a complete image">

<t>A tier-1 supplier completes work on a revised image for an electronic brake control module. This module will control the brakes on all models of an SUV produced by the OEM mentioned above. Assuming supplier delegation is supported by the OEM for this ECU, each tier-1 supplier digitally signs the image, then delivers the signature and all of its metadata, including delegations, and associated images to the OEM. The OEM adds these metadata and images to its image repository, along with information about any dependencies and conflicts between this image and those for other ECUs used in the OEM’s vehicles. The OEM also updates the inventory database, so that the director repository can instruct the ECU on how to install these updated images.</t>

</section>
<section anchor="updating-individual-ecus-on-demand" title="Updating individual ECUs on demand">

<t>An OEM has issued a recall to address a problem with a keyless entry device that has been locking people out of their cars. The OEM prepares an updated flash image in the manner described above. The OEM then ships USB flash drives to vehicle owners and dealerships that allow those parties to update the firmware of their vehicles.</t>

</section>
<section anchor="update-one-ecu-with-multiple-deltas" title="Update one ECU with multiple deltas">

<t>The OEM wants to use delta updates to save over-the-air bytes. The delta images contain only the code and/or data that has changed from the previous image version. To do so, the OEM must first modify the Director repository, using the vehicle version manifest and dependency resolution to determine the differences between the previous and latest images. The OEM then adds the following to the custom Targets metadata used by the Director repository: (1) the algorithm used to apply a delta image, and (2) the Targets metadata about the delta image. The OEM will also check whether the delta images match the Targets metadata from the Director repository.</t>

</section>
</section>
</section>
<section anchor="exceptions" title="Exceptions">

<t>There are a number of factors that could impede the completion of the above scenarios:</t>

<t><list style="symbols">
  <t>ECUs may be lacking the necessary resources to function as designated. These resources could include weaknesses, in terms of CPU or RAM, that render performance of public key cryptography infeasible; a lack of sufficient storage to undo installation of bad software; or an ECU simply may reside on a low-speed network (e.g., LIN).</t>
  <t>ECUs may reside on different network segments, and may not be able to directly reach each other, requiring a gateway to facilitate communication.</t>
  <t>A user may replace OEM-installed ECUs with aftermarket ECUs.</t>
  <t>A vehicle may be able to download only a limited amount of data via a cellular channel, due to limits on a data plan.</t>
  <t>A system may lack sufficient power to download or install software updates.</t>
  <t>Vehicles may be offline for extended periods of time, thus missing required updates (e.g., key rotations).</t>
  <t>OEMs may be unwilling to implement costly security or hardware requirements.</t>
</list></t>

</section>
<section anchor="out-of-scope" title="Out of Scope">

<t>The following topics will not be addressed in this document, as they represent threats outside the scope of Uptane:</t>

<t><list style="symbols">
  <t>Physical attacks, such as manual tampering with ECUs outside the vehicle.</t>
  <t>Compromise of the supply chain (e.g., build system, version control system, packaging process). A number of strategies (e.g., git signing, TPMs, in-toto <xref target="IN-TOTO"/>)  already exist to address this problem. Therefore, there is no need to duplicate those techniques here.</t>
  <t>Problems associated with OBD or UDS programming of ECUs, such as authentication of communications between ECUs.</t>
  <t>Malicious mirrors of package repositories, which may substitute original packages with malicious packages with matching version numbers <xref target="MERCURY"/>.</t>
</list></t>

</section>
<section anchor="design-requirements" title="Design requirements">

<t>The design requirements for this document are governed by the following principal parameters:</t>

<t><list style="symbols">
  <t>to clearly mandate the design and implementation steps that are security critical and must be followed as is, while offering flexibility in the implementation of non-critical steps. In this manner, users can adapt to support different use models and deployment scenarios.</t>
  <t>to ensure that, if Uptane is implemented, the security practices mandated or suggested in this document do not interfere with the functionality of ECUs, vehicles, or the systems that maintain them.</t>
  <t>to delineate best practices to ensure that, should any part of the SOTA mechanism of a vehicle be attacked, an attacker must compromise two or more modules to breach the SOTA mechanism.</t>
</list></t>

</section>
</section>
<section anchor="threat-model-and-attack-strategies" title="Threat model and attack strategies">

<t>The overarching goal of Uptane is to provide a system that is resilient in the face of various types of compromise. In this section, we describe the goals an attacker may have (<xref target="attacker_goals"/>) and the capabilities they may have or could develop (<xref target="capabilities"/>). We then describe and classify types of attacks on the system according to the attacker’s goals (<xref target="threats"/>).</t>

<section anchor="attacker_goals" title="Attacker goals">

<t>We assume that attackers may want to achieve one or more of the following goals, in increasing order of severity:</t>

<t><list style="symbols">
  <t>Read the contents of updates to discover confidential information, reverse-engineer firmware, or compare two firmware images to identify security fixes and hence determine the fixed security vulnerability</t>
  <t>Deny installation of updates to prevent vehicles from fixing software problems</t>
  <t>Cause one or more ECUs in the vehicle to fail, denying use of the vehicle or of certain functions</t>
  <t>Control ECUs within the vehicle, and possibly the vehicle itself</t>
</list></t>

</section>
<section anchor="capabilities" title="Attacker capabilities">

<t>Uptane is designed with resilience to compromise in mind. We assume that attackers may develop one or more of the following capabilities:</t>

<t><list style="symbols">
  <t>Intercept and modify network traffic (i.e., perform man-in-the-middle attacks). This capability may be developed in two domains:
  <list style="symbols">
      <t>Outside the vehicle, intercepting and modifying traffic between the vehicle and software repositories</t>
      <t>Inside the vehicle, intercepting and modifying traffic on one or more vehicle buses (e.g. via an OBD port or using a compromised ECU as a vector)</t>
    </list></t>
  <t>Compromise and control either a Director repository or Image repository server, and any keys stored on that repository, but not both the Director and Image repositories.</t>
  <t>Compromise either a Primary ECU or a Secondary ECU, but not both in the same vehicle</t>
</list></t>

</section>
<section anchor="threats" title="Description of threats">

<t>Uptane’s threat model includes the following types of attacks, organized according to the attacker goals listed in <xref target="attacker_goals"/>.</t>

<section anchor="read_updates" title="Read updates">

<t><list style="symbols">
  <t><spanx style="emph">Eavesdrop attack:</spanx> Read sensitive or confidential information from an update intended to be encrypted for a specific ECU. (Note: Not all implementations will have a need for protecting information in this way.)</t>
</list></t>

</section>
<section anchor="deny_updates" title="Deny installation of updates">

<t>An attacker seeking to deny the installation of updates may attempt one or more of the following strategies, among others:</t>

<t><list style="symbols">
  <t><spanx style="emph">Drop-request attack:</spanx> Block network traffic outside or inside the vehicle.</t>
  <t><spanx style="emph">Slow retrieval attack:</spanx> Slow down network traffic, in the extreme case sending barely enough packets to avoid a timeout. Similar to a drop-request attack, except that both the sender and receiver of the traffic still think network traffic is unimpeded.</t>
  <t><spanx style="emph">Freeze attack:</spanx> Continue to send a properly signed, but old, update bundle to the ECUs, even if newer updates exist.</t>
  <t><spanx style="emph">Partial bundle installation attack:</spanx> Install a valid (signed) update bundle, and then block selected updates within the bundle.</t>
  <t>Conduct a denial of service attack against the Uptane repositories or infrastructure.</t>
</list></t>

</section>
<section anchor="change_functionality" title="Interfere with ECU functionality">

<t>Attackers seeking to interfere with the functionality of vehicle ECUs in order to cause an operational failure or unexpected behavior may do so in one of the following ways:</t>

<t><list style="symbols">
  <t><spanx style="emph">Rollback attack:</spanx> Cause an ECU to install a previously valid software revision that is older than the currently installed version.</t>
  <t><spanx style="emph">Endless data attack:</spanx> Send a large amount of data to an ECU, until it runs out of storage, possibly causing the ECU to fail to operate.</t>
  <t><spanx style="emph">Mix-and-match attack:</spanx> Install a malicious software bundle in which some of the updates do not interoperate properly. This may be accomplished even if all of the individual images being installed are valid, as long as valid versions exist that are mutually incompatible.</t>
</list></t>

</section>
<section anchor="control_ecu" title="Control an ECU or vehicle">

<t>Full control of a vehicle, or one or more ECUs within a vehicle, is the most severe threat.</t>

<t><list style="symbols">
  <t><spanx style="emph">Arbitrary software attack:</spanx> Cause an ECU to install and run arbitrary code of the attacker’s choice.</t>
</list></t>

</section>
</section>
</section>
<section anchor="design" title="Detailed design of Uptane">

<t>Uptane is a secure software update framework for automobiles. We do not specify implementation details. Instead, we describe the components necessary for a compliant implementation and leave it up to individual implementors to make their own technological choices within those requirements.</t>

<t>At a high level, Uptane requires:</t>

<t><list style="symbols">
  <t>Two software repositories:
  <list style="symbols">
      <t>An Image repository containing binary images to install, and signed metadata about those images</t>
      <t>A Director repository connected to an inventory database that can sign metadata on demand for images in the Image repository</t>
    </list></t>
  <t>Repository tools for generating Uptane-specific metadata about images</t>
  <t>A public key infrastructure supporting the required metadata production/signing roles on each repository:
  <list style="symbols">
      <t>Root - Certificate authority for the Uptane ecosystem. Distributes public keys for verifying all the other roles’ metadata</t>
      <t>Timestamp - Indicates whether there are new metadata or images</t>
      <t>Snapshot - Indicates images released by the repository at a point in time, via signing metadata about targets metadata</t>
      <t>Targets - Indicates metadata about images, such as hashes and file sizes</t>
    </list></t>
  <t>A secure way for ECUs to know the time.</t>
  <t>An ECU capable of downloading images and associated metadata from the Uptane servers.</t>
  <t>An in-vehicle client on a Primary ECU capable of verifying the signatures on all update metadata and downloading updates on behalf of its associated Secondary ECUs. The primary ECU MAY be the same ECU that communicates with the server.</t>
  <t>A client or library on each Secondary ECU capable of performing either full or partial verification of metadata</t>
</list></t>

<section anchor="roles" title="Roles on repositories">

<t>A repository contains images and metadata. Each role has a particular type of metadata associated with it, as described in <xref target="meta_structures"/>.</t>

<section anchor="root_role" title="The Root role">

<t>A repository’s Root role SHALL be responsible for a Certificate Authority as defined in <xref target="RFC3647"/>.
A repository’s Root role SHALL produce and sign Root metadata as described in <xref target="root_meta"/>.
A repository’s Root role SHALL sign the public keys used to verify the metadata produced by the Timestamp, Snapshot, and Targets roles.
A repository’s Root role SHALL revoke keys for the other roles, in case of compromise.</t>

</section>
<section anchor="targets_role" title="The Targets role">

<t>A repository’s Targets role SHALL produce and sign metadata about images and delegations as described in <xref target="targets_meta"/>.</t>

<section anchor="targets_role_delegations" title="Delegations">

<t>The Targets role on the Image repository MAY delegate the responsibility of signing metadata to other, custom-defined roles referred to as delegated targets. If it does, it MUST do so as specified in <xref target="delegations_meta"/>.</t>

<t>Responsibility for signing images or a subset of images MAY be delegated to more than one role and therefore it is possible for two different roles to be trusted for signing a particular image. For this reason, delegations MUST be prioritized.</t>

<t>A particular delegation for a subset of images MAY be designated as <spanx style="strong">terminating</spanx>. For terminating delegations, the client SHALL NOT search any further if it does not find validly signed metadata about those images. Delegations SHOULD NOT be terminating by default; terminating delegations SHOULD only be used when there is a compelling technical reason to do so.</t>

<t>A delegation for a subset of images MAY be a multi-role delegation <xref target="TAP-3"/>. A multi-role delegation indicates that multiple roles are needed to sign a particular image and each of the delegatee roles MUST sign the same metadata.</t>

<t>Delegations only apply to the Image repository. The Targets role on the Director repository MUST NOT delegate metadata signing responsibility.</t>

</section>
</section>
<section anchor="snapshot_role" title="The Snapshot role">

<t>A repository’s Snapshot role SHALL produce and sign metadata about all Targets metadata the repository releases, including the current version number of the top-level Targets metadata, and the version numbers of all delegated Targets metadata, as described in <xref target="snapshot_meta"/>.</t>

</section>
<section anchor="timestamp_role" title="The Timestamp role">

<t>A repository’s Timestamp role SHALL produce and sign metadata indicating whether there are new metadata or images on the repository. It MUST do so by signing the metadata about the Snapshot metadata file.</t>

</section>
</section>
<section anchor="meta_structures" title="Metadata structures">

<t>Uptane’s security guarantees all rely on properly created metadata that follows a designated structure. The Uptane standard <spanx style="strong">does not</spanx> mandate any particular format or encoding for the metadata as a whole. ASN.1 (with any encoding scheme like BER, DER, XER, etc.), JSON, XML, or any other encoding format that is capable of providing the required structure MAY be used.</t>

<t>However, string comparison is required as part of metadata verification. To ensure an accurate basis for comparing strings, all strings MUST be encoded in the Unicode Format for Network Interchange as defined in <xref target="RFC5198"/>, including normalization into Unicode Normalization Form C (<xref target="NFC"/>).</t>

<t>In the Deployment Considerations document, the Uptane Alliance provides some examples of compliant metadata structures in ASN.1 and JSON.</t>

<section anchor="common_metadata" title="Common metadata structures">

<t>Every public key MUST be represented using a public key identifier.  A public key identifier is EITHER all of the following:</t>

<t><list style="symbols">
  <t>The value of the public key itself (which MAY be, for example, formatted as a PEM string)</t>
  <t>The public key cryptographic algorithm used by the key (such as RSA or ECDSA)</t>
  <t>The particular scheme used to verify the signature (such as <spanx style="verb">rsassa-pss-sha256</spanx> or <spanx style="verb">ecdsa-sha2-nistp256</spanx>)</t>
</list></t>

<t>OR a secure hash over at least the above components (such as the keyid mechanism in TUF).</t>

<t>All four Uptane roles (Root, Targets, Snapshot, and Timestamp) share a common structure. They SHALL contain the following two attributes:</t>

<t><list style="symbols">
  <t>A payload of metadata to be signed</t>
  <t>An attribute containing the signature(s) of the payload, where each entry specifies:
  <list style="symbols">
      <t>The public key identifier of the key being used to sign the payload</t>
      <t>A signature with this key over the payload</t>
    </list></t>
</list></t>

<t>The payload differs depending on the role. However, the payload for all roles shares a common structure. It SHALL contain the following four attributes:</t>

<t><list style="symbols">
  <t>An indicator of the type of role (Root, Targets, Snapshot, or Timestamp)</t>
  <t>An expiration date and time</t>
  <t>An integer version number, which SHOULD be incremented each time the metadata file is updated</t>
  <t>The role-specific metadata for the role indicated</t>
</list></t>

<t>The following sections describe the role-specific metadata. All roles SHALL follow the common structures described here.</t>

</section>
<section anchor="root_meta" title="Root metadata">

<t>A repository’s Root metadata distributes the public keys of the top-level Root, Targets, Snapshot, and Timestamp roles, as well as revocations of those keys. It SHALL contain two attributes:</t>

<t><list style="symbols">
  <t>A representation of the public keys for all four roles. Each key SHALL have a unique public key identifier.</t>
  <t>An attribute mapping each role to (1) its public key(s), and (2) the threshold of signatures required for that role</t>
</list></t>

<t>Additionally, it MAY contain a mapping of roles to a list of valid URLs from which the role metadata can be downloaded.  If this mapping of URLs is used, the implementer SHOULD implement this functionality following <xref target="TAP-5"/> to avoid adding unforeseen security risks.</t>

</section>
<section anchor="targets_meta" title="Targets metadata">

<t>The Targets metadata on a repository contains all of the information about images to be installed on ECUs. This includes filenames, hashes, file sizes, and MAY also include other useful information about images, such as what types of hardware are compatible with a particular image.</t>

<t>Targets metadata can also contain metadata about delegations, allowing one Targets role to delegate its authority to another. This means that an individual Targets metadata file might contain only metadata about delegations, only metadata about images, or some combination of the two. The details of how ECUs traverse the delegation tree to find valid metadata about images is specified in <xref target="resolve_delegations"/>.</t>

<section anchor="targets_images_meta" title="Metadata about images">

<t>To be available to install on clients, all images on the repository MUST have their metadata listed in a Targets role.  Each Targets role MAY provide a list of some images on the repository.  This list MUST provide, at a minimum, the following information about each image:</t>

<t><list style="symbols">
  <t>The image filename</t>
  <t>The size of the image in bytes</t>
  <t>One or more hashes of the image file, along with the hashing function used</t>
</list></t>

<section anchor="custom-metadata-about-images" title="Custom metadata about images">

<t>In addition to the required metadata, Targets metadata files MAY contain extra metadata for images on the repository. This metadata can be customized for a particular use case. Examples of use cases for different types of custom metadata can be found in the Deployment Considerations document. However, there are a few important pieces of custom metadata that SHOULD be present in most implementations. In addition, there is one element in the custom metadata that MUST be present in the Targets metadata from the Director.</t>

<t>Custom metadata MAY also contain a demarcated field or section that MUST match whenever two pieces of metadata are checked against each other, such as when Targets metadata from the Director repository is checked against Targets metadata from the Image repository.</t>

<t>The information listed below SHOULD be provided for each image on both the Image repository and the Director repository. If a “MUST match section” is to be implemented, that is where this information SHOULD be placed.</t>

<t><list style="symbols">
  <t>A release counter, to be incremented each time a new version of the image is released. This can be used to prevent rollback attacks even in cases where the Director repository is compromised.</t>
  <t>A hardware identifier, or list of hardware identifiers, representing models of ECUs with which the image is compatible. This can be used to ensure that an ECU cannot be ordered to install an incompatible image, even in cases where the Director repository is compromised.</t>
</list></t>

<t>The following information is CONDITIONALLY REQUIRED for each image on the Director repository IF that image is encrypted:</t>

<t><list style="symbols">
  <t>Information about filenames, hashes, and file size of the encrypted image.</t>
  <t>Information about the encryption method, and other relevant information–for example, a symmetric encryption key encrypted by the ECU’s asymmetric key could be included in the Director repository metadata.</t>
</list></t>

<t>The following information MUST be provided for each image in the Targets metadata from the Director repository:</t>

<t><list style="symbols">
  <t>An ECU identifier (such as a serial number), specifying the ECU that should install the image.</t>
</list></t>

<t>The Director repository MAY provide a download URL for the image file. This may be useful, for example, when the image is on a public CDN and the director wishes to provide a signed URL.</t>

</section>
</section>
<section anchor="delegations_meta" title="Metadata about delegations">

<t>A Targets metadata file on the Image repository (but not the Director repository) MAY delegate signing authority to other entities. For example, it could delegate signing authority for a particular ECU’s firmware to that ECU’s supplier. A metadata file MAY contain more than one delegation and MUST keep the delegations in prioritized order.</t>

<t>A list of delegations MUST provide the following information:</t>

<t><list style="symbols">
  <t>A list of public keys of all delegatees. Each key should have a unique public key identifier and a key type.</t>
  <t>A list of delegations, each of which contains:
  <list style="symbols">
      <t>A list of the filenames to which this role applies. This MAY be expressed using wildcards, or by enumerating a list, or a combination of the two.</t>
      <t>An optional list of the hardware identifiers to which this role applies.  If this is omitted, any hardware identifier will match.</t>
      <t>An indicator of whether or not this is a terminating delegation. (See <xref target="targets_role_delegations"/>.)</t>
      <t>A list of the roles to which this delegation applies. Each role needs to specify:
      <list style="symbols">
          <t>A name for the role (e.g. “supplier1-qa”)</t>
          <t>The key identifiers for each key this role uses</t>
          <t>A threshold of keys that must sign for this role</t>
        </list></t>
    </list></t>
</list></t>

<t>Note that <spanx style="strong">any</spanx> Targets metadata file stored on the Image repository may contain delegations, and these delegations can be in chains of arbitrary length.</t>

</section>
</section>
<section anchor="snapshot_meta" title="Snapshot metadata">

<t>The Snapshot metadata lists version numbers and filenames of all Targets metadata files. It protects against mix-and-match attacks if a delegated supplier key is compromised.</t>

<t>For each Targets metadata file on the repository, the Snapshot metadata SHALL contain the following information:</t>

<t><list style="symbols">
  <t>The filename and version number of the each Targets metadata file on the repository</t>
</list></t>

<t>The Snapshot metadata MAY also list the Root metadata filename and version number. This is not required, particularly for implementations of <xref target="TAP-5"/>, but MAY be included in all cases for backward compatibility.</t>

</section>
<section anchor="timestamp_meta" title="Timestamp metadata">

<t>The Timestamp metadata SHALL contain the following information:</t>

<t><list style="symbols">
  <t>The filename and version number of the latest Snapshot metadata on the repository.</t>
  <t>One or more hashes of the Snapshot metadata file, along with the hashing function used.</t>
</list></t>

</section>
<section anchor="repo_mapping_meta" title="Repository mapping metadata">

<t>As described in the introduction to <xref target="design"/>, Uptane requires a Director repository and an Image repository. However, it is possible to have an Uptane-compliant implementation that has more than two repositories.</t>

<t>Repository mapping metadata informs a Primary ECU about which repositories to trust for images or image paths. <xref target="TAP-4"/> describes how to make use of more complex repository mapping metadata in order to have more than the two required repositories.</t>

<t>Repository mapping metadata, or the equivalent informational content, MUST be present on all Primary ECUs, and MUST contain the following information:</t>

<t><list style="symbols">
  <t>A list of repository names and one or more URLs at which the named repository can be accessed. At a minimum, this MUST include the Director and Image repositories.</t>
  <t>A list of mappings of image paths to repositories, each of which contains:
  <list style="symbols">
      <t>A list of image paths. Image paths MAY be expressed using wildcards, or by enumerating a list, or a combination of the two.</t>
      <t>A list of repositories that MUST sign the Targets metadata for the image paths.</t>
    </list></t>
</list></t>

<t>For example, in the most basic Uptane case, the repository mapping metadata would contain:</t>

<t><list style="symbols">
  <t>The name and URL of the Director repository</t>
  <t>The name and URL of the Image repository</t>
  <t>A single mapping indicating that all images (<spanx style="verb">*</spanx>) MUST be signed by both the Director and Image repository</t>
</list></t>

<t>Note that the metadata need not be in the form of a metadata file. For example, in the basic case where there is only one Director and one Image repository, and all images need to have signed metadata from both repositories, it would be sufficient to have a configuration file with URLs for the two repositories, and a client that always checks for metadata matches between them. In this case, no explicit mapping would be defined, because the mapping is defined as part of the Uptane client implementation.</t>

<t>The <spanx style="emph">Deployment Considerations</spanx> document (<xref target="DEPLOY"/>) gives more guidance on how to implement repository mapping metadata for more complex use cases. It also discusses strategies for updating repository mapping metadata, if required.</t>

</section>
<section anchor="metadata_filename_rules" title="Rules for filenames in repositories and metadata">

<t>There is a difference between the file name in a metadata file or an ECU, and the file name on a repository. This difference exists in order to avoid race conditions, where metadata and images are read from, and written to, at the same time. For more details, the reader should read the TUF specification <xref target="TUF-spec"/> and PEP 458 <xref target="PEP-458"/>.</t>

<t>Unless stated otherwise, all files SHALL be written to repositories in accordance with the following two rules:</t>

<t><list style="numbers">
  <t>Metadata filenames SHALL be qualified with version numbers. If a metadata file A is specified as FILENAME.EXT in another metadata file B, then it SHALL be written as VERSION.FILENAME.EXT, where VERSION is A’s version number, as defined in <xref target="common_metadata"/>, with one exception: If the version number of the Timestamp metadata file might not be known in advance by a client, it MAY be read from, and written to, a repository using a filename without a version number qualification, i.e. FILENAME.EXT.</t>
  <t>If an image is specified in a Targets metadata file as FILENAME.EXT, it SHALL be written to the repository as HASH.FILENAME.EXT, where HASH is one of the hash digests of the file, as specified in <xref target="targets_images_meta"/>. The file MUST be written to the repository using <spanx style="emph">n</spanx> different filenames, one for each hash digest listed in its corresponding Targets metadata.</t>
</list></t>

<t>For example:</t>

<t><list style="symbols">
  <t>The version number of the Snapshot metadata file is 61, and its filename in the Timestamp metadata is “snapshot.json”. The filename on the repository will be “61.snapshot.json”.</t>
  <t>There is an image with the filename “acme_firmware.bin” specified in the Targets metadata, with a SHA256 of “aaaa” and a SHA512-256 of “bbbb”. It will have two filenames on the repository: “aaaa.acme_firmware.bin” and “bbbb.acme_firmware.bin”.</t>
</list></t>

</section>
</section>
<section anchor="server-repository-implementation-requirements" title="Server / repository implementation requirements">

<t>An Uptane implementation SHALL make the following services available to vehicles:</t>

<t><list style="symbols">
  <t>Image repository</t>
  <t>Director repository</t>
</list></t>

<t>Additionally, an Uptane implementation requires ECUs to have a secure way to know the current time.</t>

<section anchor="image-repository" title="Image repository">

<t>The Image repository exists to allow an OEM and/or its suppliers to upload images and their associated metadata. It makes these images and their metadata available to vehicles. The Image repository is designed to be primarily controlled by human actors, and updated relatively infrequently.</t>

<t>The Image repository SHALL expose an interface permitting the download of metadata and images. This interface SHOULD be public.</t>

<t>The Image repository SHALL require authorization for writing metadata and images.</t>

<t>The Image repository SHALL provide a method for authorized users to upload images and their associated metadata. It SHALL check that a user writing metadata and images is authorized to do so for that specific image by checking the chain of delegations as described in <xref target="delegations_meta"/>.</t>

<t>The Image repository SHALL implement storage which permits authorized users to write an image file using a unique filename, and later read the same file using the same name. It MAY use any filesystem, key-value store, or database that fulfills this requirement.</t>

<t>The Image repository MAY require authentication for read access.</t>

</section>
<section anchor="director_repository" title="Director repository">

<t>The Director repository instructs ECUs as to which images should be installed by producing signed metadata on demand. Unlike the Image repository, it is mostly controlled by automated, online processes. It also consults a private inventory database containing information on vehicles, ECUs, and software revisions.</t>

<t>The Director repository SHALL expose an interface for primaries to upload vehicle version manifests (<xref target="vehicle_version_manifest"/>) and download metadata. This interface SHOULD be public.
The Director MAY encrypt images for ECUs that require them, either by encrypting on-the-fly or by storing encrypted images in the repository.</t>

<t>The Director repository SHALL implement storage which permits an automated service to write generated metadata files. It MAY use any filesystem, key-value store, or database that fulfills this requirement.</t>

<section anchor="directing-installation-of-images-on-vehicles" title="Directing installation of images on vehicles">

<t>A Director repository MUST conform to the following six-step process for directing the installation of software images on a vehicle.</t>

<t><list style="numbers">
  <t>The Director SHOULD first identify the vehicle. This MAY be done when the Director receives a vehicle version manifest sent by a Primary (as described in <xref target="construct_manifest_primary"/>), decodes the manifest, and determines the unique vehicle identifier. Additionally, the Director MAY utilize other mechanisms to uniquely identify a vehicle (e.g., 2-way TLS with unique client certificates).</t>
  <t>Using the vehicle identifier, the Director queries its inventory database (as described in <xref target="inventory_db"/>) for relevant information about each ECU in the vehicle.</t>
  <t>The Director SHALL check the manifest for accuracy compared to the information in the inventory database. If any of the required checks fail, the Director MAY drop the request. An implementer MAY make additional checks if desired. At a minimum, the Director SHALL check the following:
  <list style="symbols">
      <t>Each ECU recorded in the inventory database is also represented in the manifest.</t>
      <t>The signature of the manifest matches the ECU key of the Primary that sent it.</t>
      <t>The signature of each Secondary’s contribution to the manifest matches the ECU key of that Secondary.</t>
    </list></t>
  <t>The Director extracts information about currently installed images from the vehicle version manifest. Using this information, it determines if the vehicle is already up-to-date, and if not, determines a set of images that should be installed. The exact process by which this determination takes place is out of scope of this standard. However, the Director MUST take into account <spanx style="emph">dependencies</spanx> and <spanx style="emph">conflicts</spanx> between images and SHOULD consult well-established techniques for dependency resolution.</t>
  <t>The Director MAY encrypt images for ECUs that require it.</t>
  <t>The Director generates new metadata representing the desired set of images to be installed on the vehicle, based on the dependency resolution in step 4. This includes Targets (<xref target="targets_meta"/>), Snapshot (<xref target="snapshot_meta"/>), and Timestamp (<xref target="timestamp_meta"/>) metadata. It then sends this metadata to the Primary as described in <xref target="download_meta_primary"/>.</t>
</list></t>

</section>
<section anchor="inventory_db" title="Inventory Database">

<t>The Director SHALL use a private inventory database to store information about ECUs and vehicles. An implementor MAY use any durable database for this purpose.</t>

<t>The inventory database MUST record the following pieces of information:</t>

<t><list style="symbols">
  <t>Per vehicle:
  <list style="symbols">
      <t>A unique identifier (such as a VIN)</t>
    </list></t>
  <t>Per ECU:
  <list style="symbols">
      <t>A unique identifier (such as a serial number)</t>
      <t>The vehicle identifier the ECU is associated with</t>
      <t>An ECU key (symmetric or asymmetric; for asymmetric keys, only the public part SHOULD be stored)</t>
      <t>The ECU key identifier (as defined in <xref target="common_metadata"/>)</t>
      <t>Whether the ECU is a Primary or a Secondary</t>
    </list></t>
</list></t>

<t>The inventory database MAY record other information about ECUs and vehicles. It SHOULD record a hardware identifier for each ECU to protect against the possibility of directing the ECU to install incompatible firmware.</t>

</section>
</section>
</section>
<section anchor="in-vehicle-implementation-requirements" title="In-vehicle implementation requirements">

<t>An Uptane-compliant ECU SHALL be able to download and verify Image metadata and image binaries before installing a new image and MUST have a secure way of verifying the current time, or a sufficiently recent attestation of the time.</t>

<t>Each ECU in a vehicle receiving over-the-air updates is either a Primary or a Secondary ECU. A Primary ECU collects and delivers vehicle manifests to the Director (<xref target="vehicle_version_manifest"/>) that contain information about which images have been installed on ECUs in the vehicle. It also verifies the time and downloads and verifies the latest metadata and images for itself and for its secondaries. A Secondary ECU verifies the time, and downloads and verifies the latest metadata and images for itself from its associated Primary ECU. It also sends signed information about its installed images to its associated Primary.</t>

<t>All ECUs MUST verify image metadata as specified in <xref target="metadata_verification"/> before installing an image or making it available to other ECUs. A Primary ECU MUST perform full verification (<xref target="full_verification"/>). A Secondary ECU SHOULD perform full verification if possible. If a Secondary cannot perform full verification, it SHALL perform partial verification. See <xref target="DEPLOY">Uptane Deployment Considerations</xref> for a discussion of how to choose between partial and full verification.</t>

<t>ECUs MUST have a secure source of time. An OEM/Uptane implementor MAY use any external source of time that is demonstrably secure. The Uptane deployment considerations (<xref target="DEPLOY"/>) describe one way to implement an external time server to cryptographically attest time, as well as the security properties required. When “loading time” is referenced in procedures in this standard, it should be understood to mean loading into memory the current time (if the ECU has its own secure clock), or the most recent attested time.</t>

<section anchor="build-time-prerequisite-requirements-for-ecus" title="Build-time prerequisite requirements for ECUs">

<t>For an ECU to be capable of receiving Uptane-secured updates, it MUST have the following data provisioned at the time it is manufactured or installed in the vehicle:</t>

<t><list style="numbers">
  <t>A sufficiently recent copy of required Uptane metadata at the time of manufacture or install. See <xref target="DEPLOY">Uptane Deployment Considerations</xref> for more information.
  <list style="symbols">
      <t>Partial verification ECUs MUST have the Root and Targets metadata from the Director repository.</t>
      <t>Full verification ECUs MUST have a complete set of metadata (Root, Targets, Snapshot, and Timestamp) from both repositories, as well as the repository mapping metadata (<xref target="repo_mapping_meta"/>).</t>
    </list></t>
  <t>The current time, or a secure attestation of a sufficiently recent time.</t>
  <t>An <spanx style="strong">ECU key</spanx>. This is a private key, unique to the ECU, used to sign ECU version manifests and decrypt images. An ECU key MAY be either a symmetric key or an asymmetric key. If it is an asymmetric key, there MAY be separate keys for encryption and signing. For the purposes of this standard, the set of private keys that an ECU uses is referred to as the ECU key (singular), even if it is actually multiple keys used for different purposes.</t>
</list></t>

</section>
<section anchor="what-the-primary-does" title="What the Primary does">

<t>A Primary downloads, verifies, and distributes the latest time, metadata and images. To do so, it SHALL perform the following seven steps:</t>

<t><list style="numbers">
  <t>Construct and send vehicle version manifest (<xref target="construct_manifest_primary"/>)</t>
  <t>Download and check current time (<xref target="check_time_primary"/>)</t>
  <t>Download and verify metadata (<xref target="download_meta_primary"/>)</t>
  <t>Download and verify images (<xref target="download_images_primary"/>)</t>
  <t>OPTIONAL: Send latest time to secondaries (<xref target="send_time_primary"/>)</t>
  <t>Send metadata to Secondaries (<xref target="send_metadata_primary"/>)</t>
  <t>Send images to Secondaries (<xref target="send_images_primary"/>)</t>
</list></t>

<t>Note that the subsequent sections concerning requirements for a Primary do not prohibit implementing Primary capabilities on an ECU that does not communicate directly with the Uptane repositories. This allows for implementations to have multiple ECUs within the vehicle performing functions equivalent to a Primary.
If multiple such Primaries are included within a vehicle, each Secondary ECU SHALL have a single Primary responsible for providing its updates.</t>

<section anchor="construct_manifest_primary" title="Construct and send vehicle version manifest">

<t>The Primary SHALL build a <spanx style="emph">vehicle version manifest</spanx> as described in <xref target="vehicle_version_manifest"/>.</t>

<t>Once the complete manifest is built, the Primary MAY send the manifest to the Director repository. However, it is not strictly required that the Primary send the manifest until step three. If permitted by the implementation, a Primary MAY send only a diff of the manifest to save bandwidth. If an implementation permits diffs, the Director SHOULD have a way to request a full manifest.</t>

<t>Secondaries MAY send their version report at any time so that it is already stored on the Primary when it wishes to check for updates. Alternatively, the Primary MAY request a version report from each Secondary at the time of the update check.</t>

<section anchor="vehicle_version_manifest" title="Vehicle version manifest">

<t>The vehicle version manifest is a metadata structure that MUST contain the following information:</t>

<t><list style="symbols">
  <t>An attribute containing the signature(s) of the payload, each specified by:
  <list style="symbols">
      <t>The public key identifier of the key being used to sign the payload</t>
      <t>The signing method (e.g. ed25519, rsassa-pss, etc.)</t>
      <t>A hash of the payload to be signed</t>
      <t>The hashing function used (e.g. sha256, sha512-224, etc.)</t>
      <t>The signature of the hash</t>
    </list></t>
  <t>A payload representing the installed versions of each software image on the vehicle. This payload SHALL contain:
  <list style="symbols">
      <t>The vehicle’s unique identifier (e.g. the VIN)</t>
      <t>The Primary ECU’s unique identifier (e.g. the serial number)</t>
      <t>A list of ECU version reports as specified in <xref target="version_report"/></t>
    </list></t>
</list></t>

<t>Note that one of the ECU version reports should be the version report for the Primary itself.</t>

</section>
<section anchor="version_report" title="ECU version report">

<t>An ECU version report is a metadata structure that MUST contain the following information:</t>

<t><list style="symbols">
  <t>An attribute containing the signature(s) of the payload, each specified by:
  <list style="symbols">
      <t>The public key identifier of the key being used to sign the payload</t>
      <t>The signing method (e.g. ed25519, rsassa-pss, etc.)</t>
      <t>A hash of the payload to be signed</t>
      <t>The hashing function used (e.g. sha256, sha512-224, etc.)</t>
      <t>The signature of the hash</t>
    </list></t>
  <t>A payload containing:
  <list style="symbols">
      <t>The ECU’s unique identifier (e.g. the serial number)</t>
      <t>The filename, length, and hashes of its currently installed image (i.e. the non-custom targets metadata for this particular image)</t>
      <t>An indicator of any detected security attack</t>
      <t>The latest time the ECU can verify at the time this version report was generated</t>
      <t>A cryptographic nonce</t>
    </list></t>
</list></t>

</section>
</section>
<section anchor="check_time_primary" title="Download and check current time">

<t>The Primary SHALL load the current time from a secure source.</t>

</section>
<section anchor="download_meta_primary" title="Download and verify metadata">

<t>The Primary SHALL download metadata for all targets and perform a full verification on it as specified in <xref target="full_verification"/>.</t>

</section>
<section anchor="download_images_primary" title="Download and verify images">

<t>The Primary SHALL download and verify images for itself and for all of its associated Secondaries. Images SHALL be verified by checking that the hash of the image file matches the hash specified in the Director’s Targets metadata for that image.</t>

<t>There may be several different filenames that all refer to the same image binary, as described in <xref target="metadata_filename_rules"/>. If the primary has received multiple hashes for a given image binary via targets role (see <xref target="targets_images_meta"/>) then it SHALL verify every hash for this image despite the fact that just one hash is enough to obtain the image itself.</t>

</section>
<section anchor="send_time_primary" title="Send latest time to Secondaries">

<t>Unless the Secondary ECU has its own way of verifying the time or does not have the capacity to verify a time message, the Primary is CONDITIONALLY REQUIRED to send the time to each ECU. The Secondary will verify the time message, then overwrite its current time with the received time.</t>

</section>
<section anchor="send_metadata_primary" title="Send metadata to Secondaries">

<t>The Primary SHALL send its latest downloaded metadata to all of its associated Secondaries. The metadata it sends to each Secondary MUST include all of the metadata required for verification on that Secondary. For full verification Secondaries, this includes the metadata for all four roles from both repositories, plus any delegated Targets metadata files the Secondary will recurse through to find the proper delegation. For partial verification Secondaries, this includes only the Targets metadata file from the Director repository.</t>

<t>The Primary SHOULD determine the minimal set of metadata files to send to each Secondary by performing delegation resolution as described in <xref target="full_verification"/>.</t>

<t>Each Secondary SHALL store the latest copy of all metadata required for its own verification.</t>

</section>
<section anchor="send_images_primary" title="Send images to Secondaries">

<t>The Primary SHALL send the latest image to each of its associated Secondaries that have storage to receive it.</t>

<t>For Secondaries without storage, the Primary SHOULD wait for a request from the Secondary to stream the new image file to it. The Secondary will send the request once it has verified the metadata sent in the previous step.</t>

</section>
</section>
<section anchor="installing-images-on-primary-or-secondary-ecus" title="Installing images on Primary or Secondary ECUs">

<t>An ECU SHALL perform the following steps when attempting to install a new image:</t>

<t><list style="numbers">
  <t>Verify latest attested time (<xref target="verify_time"/>)</t>
  <t>Verify metadata (<xref target="verify_metadata"/>)</t>
  <t>Download latest image (<xref target="download_image"/>)</t>
  <t>Verify image (<xref target="verify_image"/>)</t>
  <t>Install image (<xref target="install_image"/>)</t>
  <t>Create and send version report (<xref target="create_version_report"/>)</t>
</list></t>

<section anchor="verify_time" title="Load and verify the latest attested time">

<t>The ECU SHALL load and verify the current time, or the most recent securely attested time.</t>

</section>
<section anchor="verify_metadata" title="Verify metadata">

<t>The ECU SHALL verify the latest downloaded metadata (<xref target="metadata_verification"/>) using either full or partial verification. If the metadata verification fails for any reason, the ECU SHALL jump to the fifth step (<xref target="create_version_report"/>).</t>

</section>
<section anchor="download_image" title="Download latest image">

<t>If the ECU does not have secondary storage, i.e. buffer storage to temporarily store the latest image before installing it, it SHALL download the latest image from the Primary. (If the ECU has secondary storage, it will already have the latest image in its secondary storage as specified in <xref target="send_images_primary"/>, and should skip to the next step.) The ECU MAY first create a backup of its previous working image and store it elsewhere (e.g., the primary).</t>

<t>The filename used to identify the latest known image (i.e., the file to request from the Primary) SHALL be determined as follows:</t>

<t><list style="numbers">
  <t>Load the Targets metadata file from the Director repository.</t>
  <t>Find the Targets metadata associated with this ECU identifier.</t>
  <t>Construct the Image filename using the rule in <xref target="metadata_filename_rules"/>, or use the download URL specified in the Director metadata.</t>
  <t>If there is no Targets metadata about this image, abort the update cycle and report that there is no such image. Additionally, in the case of failure, the ECU SHALL retain its previous Targets metadata instead of using the new Targets metadata. Otherwise, download the image (up to the number of bytes specified in the Targets metadata), and verify that its hashes match the Targets metadata.</t>
</list></t>

<t>When the Primary responds to the download request, the ECU SHALL overwrite its current image with the downloaded image from the Primary.</t>

<t>If any part of this step fails, the ECU SHALL jump to the fifth step (<xref target="create_version_report"/>).</t>

</section>
<section anchor="verify_image" title="Verify image">

<t>The ECU SHALL verify that the latest image matches the latest metadata as follows:</t>

<t><list style="numbers">
  <t>Load the latest Targets metadata file from the Director.</t>
  <t>Find the Targets metadata associated with this ECU identifier.</t>
  <t>Check that the hardware identifier in the metadata matches the ECUs hardware identifier.</t>
  <t>Check that the image filename is valid for this ECU. This MAY be a comparison against a wildcard path, which restricts the ECUs to which a delegation will apply.</t>
  <t>Check that the release counter of the image in the previous metadata, if it exists, is less than or equal to the release counter in the latest metadata.</t>
  <t>If the image is encrypted, decrypt the image with a decryption key to be chosen as follows:
  <list style="symbols">
      <t>If the ECU key is a symmetric key, the ECU SHALL use the ECU key for image decryption.</t>
      <t>If the ECU key is asymmetric, the ECU SHALL check the Targets metadata for an encrypted symmetric key. If such a key is found, the ECU SHALL decrypt the symmetric key using its ECU key, and use the decrypted symmetric key for image decryption.</t>
      <t>If the ECU key is asymmetric and there is no symmetric key in the target metadata, the ECU SHALL use its ECU key for image decryption.</t>
    </list></t>
  <t>Check that the hash of the image matches the hash in the metadata.</t>
</list></t>

<t>If the ECU has secondary storage, the checks SHOULD be performed on the image in secondary storage before it is installed.</t>

<t>NOTE: See <xref target="DEPLOY"/> for guidance on how to deal with Secondary ECU failures for ECUs that do not have secondary storage.</t>

<t>If any step fails, the ECU SHALL jump to the (<xref target="create_version_report"/>) step.</t>

</section>
<section anchor="install_image" title="Install image">

<t>The ECU SHALL attempt to install the update. This installation SHOULD occur at a time when all pre-conditions are met. These pre-conditions MAY include ensuring the vehicle is in a safe environment for install (e.g., the vehicle is parked when updating a specific ECU). Another pre-condition MAY include ensuring the ECU has a backup of its current image and metadata in case the current installation fails.</t>

</section>
<section anchor="create_version_report" title="Create and send version report">

<t>The ECU SHALL create a version report as described in <xref target="version_report"/>, and send it to the Primary (or simply save it to disk, if the ECU is a Primary). The Primary SHOULD write the version reports it receives to disk and associate them with the Secondaries that sent them.</t>

</section>
</section>
<section anchor="metadata_verification" title="Metadata verification procedures">

<t>A Primary ECU MUST perform full verification of metadata. A Secondary ECU SHOULD perform full verification of metadata. If a Secondary cannot perform full verification, it SHALL perform partial verification instead.</t>

<t>If a step in the following workflows does not succeed (e.g., the update is aborted because a new metadata file was not signed), an ECU SHOULD still be able to update again in the future. Errors raised during the update process SHOULD NOT leave ECUs in an unrecoverable state.</t>

<section anchor="partial_verification" title="Partial verification">

<t>In order to perform partial verification, an ECU SHALL perform the following steps:</t>

<t><list style="numbers">
  <t>Load and verify the current time or the most recent securely attested time.</t>
  <t>Download and check the Targets metadata file from the Director repository, following the procedure in <xref target="check_targets"/>.</t>
</list></t>

</section>
<section anchor="full_verification" title="Full verification">

<t>Full verification of metadata means that the ECU checks that the Targets metadata about images from the Director repository matches the Targets metadata about the same images from the Image repository. This provides resilience to a key compromise in the system.</t>

<t>Full verification MAY be performed by either Primary or Secondary ECUs. In the following instructions, whenever an ECU is directed to download metadata, it applies only to Primary ECUs.</t>

<t>If <xref target="TAP-5"/> is supported and a Primary has an external connection to the Uptane repositories, a Primary ECU SHALL download metadata and images following the rules specified in that TAP.  If <xref target="TAP-5"/> is not supported, or if the Primary does not have an external connection to the Uptane repositories, the download SHOULD follow the <xref target="TUF-spec"/> and the metadata file renaming rules specified in <xref target="metadata_filename_rules"/>.</t>

<t>Before starting full verification, the repository mapping metadata MUST be consulted to determine where to download metadata from. This procedure assumes the basic Uptane case: there are only two repositories (Director and Image), and all image paths are required to be signed by both repositories. If a more complex repository layout is being used, refer to <xref target="DEPLOY"/> for guidance on how to determine where metadata should be downloaded from.</t>

<t>In order to perform full verification, an ECU SHALL perform the following steps:</t>

<t><list style="numbers">
  <t>Load and verify the current time or the most recent securely attested time.</t>
  <t>Download and check the Root metadata file from the Director repository, following the procedure in <xref target="check_root"/>.</t>
  <t>Download and check the Timestamp metadata file from the Director repository, following the procedure in <xref target="check_timestamp"/>.</t>
  <t>Download and check the Snapshot metadata file from the Director repository, following the procedure in <xref target="check_snapshot"/>.</t>
  <t>Download and check the Targets metadata file from the Director repository, following the procedure in <xref target="check_targets"/>.</t>
  <t>Download and check the Root metadata file from the Image repository, following the procedure in <xref target="check_root"/>.</t>
  <t>Download and check the Timestamp metadata file from the Image repository, following the procedure in <xref target="check_timestamp"/>.</t>
  <t>Download and check the Snapshot metadata file from the Image repository, following the procedure in <xref target="check_snapshot"/>.</t>
  <t>Download and check the top-level Targets metadata file from the Image repository, following the procedure in <xref target="check_targets"/>.</t>
  <t>Verify that Targets metadata from the Director and Image repositories match. A Primary ECU MUST perform this check on metadata for all images listed in the Targets metadata file from the Director repository downloaded in step 6. A Secondary ECU MAY elect to perform this check only on the metadata for the image it will install. (That is, the target metadata from the Director that contains the ECU identifier of the current ECU.) To check that the metadata for an image matches, complete the following procedure:
  <list style="numbers">
      <t>Locate and download a Targets metadata file from the Image repository that contains an image with exactly the same file name listed in the Director metadata, following the procedure in <xref target="resolve_delegations"/>.</t>
      <t>Check that the Targets metadata from the Image repository matches the Targets metadata from the Director repository:
      <list style="numbers">
          <t>Check that the non-custom metadata (i.e., length and hashes) of the unencrypted or encrypted image are the same in both sets of metadata. Note: the Primary is responsible for validating encrypted images and associated metadata. The target ECU (Primary or Secondary) is responsible for validating the unencrypted image and associated metadata.</t>
          <t>Check that all “MUST match” custom metadata (e.g., hardware identifier and release counter) are the same in both sets of metadata.</t>
          <t>Check that the release counter in the previous Targets metadata file is less than or equal to the release counter in this Targets metadata file.</t>
        </list></t>
    </list></t>
</list></t>

<t>If any step fails, the ECU MUST return an error code indicating the failure. If a check for a specific type of security attack fails (e.g. rollback, freeze, arbitrary software, etc.), the ECU SHOULD return an error code that indicates the type of attack.</t>

<t>If the ECU performing the verification is the Primary ECU, it SHOULD also ensure that the Targets metadata from the Director repository doesn’t contain any ECU identifiers for ECUs not actually present in the vehicle.</t>

</section>
<section anchor="check_root" title="How to check Root metadata">

<t>To properly check Root metadata, an ECU SHOULD:</t>

<t><list style="numbers">
  <t>Load the previous Root metadata file.</t>
  <t>Update to the latest Root metadata file.
  <list style="numbers">
      <t>Let N denote the version number of the latest Root metadata file (which at first could be the same as the previous root metadata file).</t>
      <t>Try downloading a new version N+1 of the Root metadata file, up to some X number of bytes. The value for X is set by the implementor. For example, X may be tens of kilobytes. The filename used to download the Root metadata file is of the fixed form VERSION_NUMBER.FILENAME.EXT (e.g., 42.root.json). If this file is not available, the current Root metadata file is the latest; continue with step 3.</t>
      <t>Version N+1 of the Root metadata file MUST have been signed by the following: (1) a threshold of keys specified in the latest Root metadata file (version N), and (2) a threshold of keys specified in the new Root metadata file being validated (version N+1). If version N+1 is not signed as required, discard it, abort the update cycle, and report the signature failure. On the next update cycle, begin at version N of the Root metadata file. (Checks for an arbitrary software attack.)</t>
      <t>The version number of the latest Root metadata file (version N) must be less than or equal to the version number of the new Root metadata file (version N+1). Effectively, this means checking that the version number signed in the new Root metadata file is indeed N+1. If the version of the new Root metadata file is less than the latest metadata file, discard it, abort the update cycle, and report the rollback attack. On the next update cycle, begin at step 0 and version N of the Root metadata file. (Checks for a rollback attack.)</t>
      <t>Set the latest Root metadata file to the new Root metadata file.</t>
      <t>Repeat steps 2.1 to 2.6.</t>
    </list></t>
  <t>Check that the current (or latest securely attested) time is lower than the expiration timestamp in the latest Root metadata file. (Checks for a freeze attack.)</t>
  <t>If the Timestamp and/or Snapshot keys have been rotated, delete the previous Timestamp and Snapshot metadata files. (Checks for recovery from fast-forward attacks <xref target="MERCURY"/>.)</t>
</list></t>

</section>
<section anchor="check_timestamp" title="How to check Timestamp metadata">

<t>To properly check Timestamp metadata, an ECU SHOULD:</t>

<t><list style="numbers">
  <t>Download up to Y number of bytes. The value for Y is set by the implementor. For example, Y may be tens of kilobytes. The filename used to download the Timestamp metadata file is of the fixed form FILENAME.EXT (e.g., timestamp.json).</t>
  <t>Check that it has been signed by the threshold of keys specified in the latest Root metadata file. If the new Timestamp metadata file is not properly signed, discard it, abort the update cycle, and report the signature failure. (Checks for an arbitrary software attack.)</t>
  <t>Check that the version number of the previous Timestamp metadata file, if any, is less than or equal to the version number of this Timestamp metadata file. If the new Timestamp metadata file is older than the trusted Timestamp metadata file, discard it, abort the update cycle, and report the potential rollback attack. (Checks for a rollback attack.)</t>
  <t>Check that the current (or latest securely attested) time is lower than the expiration timestamp in this Timestamp metadata file. If the new Timestamp metadata file has expired, discard it, abort the update cycle, and report the potential freeze attack. (Checks for a freeze attack.)</t>
</list></t>

</section>
<section anchor="check_snapshot" title="How to check Snapshot metadata">

<t>To properly check Snapshot metadata, an ECU SHOULD:</t>

<t><list style="numbers">
  <t>Download up to the number of bytes specified in the Timestamp metadata file, constructing the metadata filename as defined in <xref target="metadata_filename_rules"/>.</t>
  <t>The hashes and version number of the new Snapshot metadata file MUST match the hashes and version number listed in Timestamp metadata. If the hashes and version number do not match, discard the new Snapshot metadata, abort the update cycle, and report the failure. (Checks for a mix-and-match attack.)</t>
  <t>Check that it has been signed by the threshold of keys specified in the latest Root metadata file. If the new Snapshot metadata file is not signed as required, discard it, abort the update cycle, and report the signature failure. (Checks for an arbitrary software attack.)</t>
  <t>Check that the version number of the previous Snapshot metadata file, if any, is less than or equal to the version number of this Snapshot metadata file. If this Snapshot metadata file is older than the previous Snapshot metadata file, discard it, abort the update cycle, and report the potential rollback attack. (Checks for a rollback attack.)</t>
  <t>Check that the version number listed by the previous Snapshot metadata file for each Targets metadata file is less than or equal to its version number in this Snapshot metadata file. If this condition is not met, discard the new Snapshot metadata file, abort the update cycle, and report the failure. (Checks for a rollback attack.)</t>
  <t>Check that each Targets metadata filename listed in the previous Snapshot metadata file is also listed in this Snapshot metadata file. If this condition is not met, discard the new Snapshot metadata file, abort the update cycle, and report the failure. (Checks for a rollback attack.)</t>
  <t>Check that the current (or latest securely attested) time is lower than the expiration timestamp in this Snapshot metadata file. If the new Snapshot metadata file is expired, discard it, abort the update cycle, and report the potential freeze attack. (Checks for a freeze attack.)</t>
</list></t>

</section>
<section anchor="check_targets" title="How to check Targets metadata">

<t>To properly check Targets metadata, an ECU SHOULD:</t>

<t><list style="numbers">
  <t>Download up to Z number of bytes, constructing the metadata filename as defined in <xref target="metadata_filename_rules"/>. The value for Z is set by the implementor. For example, Z may be tens of kilobytes.</t>
  <t>The version number of the new Targets metadata file MUST match the version number listed in the latest Snapshot metadata. If the version number does not match, discard it, abort the update cycle, and report the failure. (Checks for a mix-and-match attack.) Skip this step if checking Targets metadata on a partial-verification ECU; partial-verification ECUs will not have Snapshot metadata.</t>
  <t>Check that the Targets metadata has been signed by the threshold of keys specified in the relevant metadata file (Checks for an arbitrary software attack):
  <list style="numbers">
      <t>If checking top-level Targets metadata, the threshold of keys is specified in the Root metadata.</t>
      <t>If checking delegated Targets metadata, the threshold of keys is specified in the Targets metadata file that delegated authority to this role.</t>
    </list></t>
  <t>Check that the version number of the previous Targets metadata file, if any, is less than or equal to the version number of this Targets metadata file. (Checks for a rollback attack.)</t>
  <t>Check that the current (or latest securely attested) time is lower than the expiration timestamp in this Targets metadata file. (Checks for a freeze attack.)</t>
  <t>If checking Targets metadata from the Director repository, verify that there are no delegations.</t>
  <t>If checking Targets metadata from the Director repository, check that no ECU identifier is represented more than once.</t>
</list></t>

</section>
<section anchor="resolve_delegations" title="How to resolve delegations">

<t>To properly check Targets metadata for an image, an ECU MUST locate the metadata file(s) for the role (or roles) that have the authority to sign the image. This metadata might be located in the top-level Targets metadata, but it also may be delegated to another role or to multiple roles. Therefore, all delegations MUST be resolved using the following recursive procedure, beginning with the top-level Targets metadata file.</t>

<t><list style="numbers">
  <t>Download the current metadata file, and check it following the procedure in <xref target="check_targets"/>. If the file cannot be loaded, or if any verification step fails, abort the delegation resolution, and indicate that Image metadata cannot be found because of a missing or invalid role.</t>
  <t>If the current metadata file contains signed metadata about the image, end the delegation resolution and return the metadata to be checked.</t>
  <t>If the current metadata file was reached via a terminating delegation and does not contain signed metadata about the image, abort the delegation resolution for this image and return an error indicating that image metadata could not be found.</t>
  <t>Search the list of delegations, in listed order. For each delegation:
  <list style="numbers">
      <t>Check if the delegation applies to the image being processed. For the delegation to apply, it MUST include the hardware identifier of the target, and the target name must match one of the delegation’s image paths. If either of these tests fail, move on to the next delegation in the list.</t>
      <t>If the delegation is a multi-role delegation, follow the procedure described in <xref target="multirole_delegations"/>. If the multi-role delegation is terminating and no valid Image metadata is found, abort the delegation resolution and return an error indicating that image metadata could not be found.</t>
      <t>If the delegation is a normal delegation, perform delegation resolution, starting at step 1. Note that this may recurse an arbitrary number of levels deep. If a delegation that applies to the image is found but no image metadata is found in the delegated roles or any of its sub-delegations, simply continue on with the next delegation in the list. The search is only completed/aborted if image metadata or a terminating delegation that applies to the image is found.</t>
    </list></t>
  <t>If the end of the list of delegations in the top-level metadata is reached without finding valid image metadata, return an error indicating that image metadata could not be found.</t>
</list></t>

</section>
<section anchor="multirole_delegations" title="Multi-role delegations">

<t>It is possible to delegate signing authority to multiple delegated roles as described in <xref target="TAP-3"/>. Each multi-role delegation effectively contains a list of ordinary delegations, plus a threshold of those roles that must be in agreement about the non-custom metadata for the image. All multi-role delegations MUST be resolved using the following procedure. Note that there may be sub-delegations inside multi-role delegations.</t>

<t><list style="numbers">
  <t>For each of the roles in the delegation, find and load the image metadata (or error) following the procedure in <xref target="resolve_delegations"/>.</t>
  <t>Inspect the non-custom part of the metadata loaded in step 1:
  <list style="numbers">
      <t>Locate all sets of roles which have agreeing (i.e. identical) non-custom metadata and “MUST match” custom metadata. Discard any set of roles with a size smaller than the threshold of roles that must be in agreement for this delegation.</t>
      <t>Check for a conflict. A conflict exists if there remains more than one agreeing set of roles, each set having different metadata. If a conflict is found, choose and return the metadata from the set of roles which includes the earliest role in the multi-delegation list.</t>
      <t>If there is no conflict, check if there is any single set of roles with matching non-custom metadata. If there is, choose and return the metadata from this set.</t>
      <t>If no agreeing set can be found that meets the agreement threshold, return an error indicating that image metadata could not be found.</t>
    </list></t>
</list></t>

</section>
</section>
</section>
</section>


  </middle>

  <back>

    <references title='Normative References'>





<reference  anchor="RFC2119" target='https://www.rfc-editor.org/info/rfc2119'>
<front>
<title>Key words for use in RFCs to Indicate Requirement Levels</title>
<author initials='S.' surname='Bradner' fullname='S. Bradner'><organization /></author>
<date year='1997' month='March' />
<abstract><t>In many standards track documents several words are used to signify the requirements in the specification.  These words are often capitalized. This document defines these words as they should be interpreted in IETF documents.  This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t></abstract>
</front>
<seriesInfo name='BCP' value='14'/>
<seriesInfo name='RFC' value='2119'/>
<seriesInfo name='DOI' value='10.17487/RFC2119'/>
</reference>



<reference  anchor="RFC3647" target='https://www.rfc-editor.org/info/rfc3647'>
<front>
<title>Internet X.509 Public Key Infrastructure Certificate Policy and Certification Practices Framework</title>
<author initials='S.' surname='Chokhani' fullname='S. Chokhani'><organization /></author>
<author initials='W.' surname='Ford' fullname='W. Ford'><organization /></author>
<author initials='R.' surname='Sabett' fullname='R. Sabett'><organization /></author>
<author initials='C.' surname='Merrill' fullname='C. Merrill'><organization /></author>
<author initials='S.' surname='Wu' fullname='S. Wu'><organization /></author>
<date year='2003' month='November' />
<abstract><t>This document presents a framework to assist the writers of certificate policies or certification practice statements for participants within public key infrastructures, such as certification authorities, policy authorities, and communities of interest that wish to rely on certificates.  In particular, the framework provides a comprehensive list of topics that potentially (at the writer's discretion) need to be covered in a certificate policy or a certification practice statement.  This document supersedes RFC 2527.</t></abstract>
</front>
<seriesInfo name='RFC' value='3647'/>
<seriesInfo name='DOI' value='10.17487/RFC3647'/>
</reference>



<reference  anchor="RFC5198" target='https://www.rfc-editor.org/info/rfc5198'>
<front>
<title>Unicode Format for Network Interchange</title>
<author initials='J.' surname='Klensin' fullname='J. Klensin'><organization /></author>
<author initials='M.' surname='Padlipsky' fullname='M. Padlipsky'><organization /></author>
<date year='2008' month='March' />
<abstract><t>The Internet today is in need of a standardized form for the transmission of internationalized &quot;text&quot; information, paralleling the specifications for the use of ASCII that date from the early days of the ARPANET.  This document specifies that format, using UTF-8 with normalization and specific line-ending sequences.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='5198'/>
<seriesInfo name='DOI' value='10.17487/RFC5198'/>
</reference>


<reference anchor="NFC" target="http://www.unicode.org/reports/tr15/">
  <front>
    <title>Unicode Standard Annex #15: Unicode Normalization Forms</title>
    <author initials="M." surname="Davis">
      <organization></organization>
    </author>
    <author initials="M." surname="Duerst">
      <organization></organization>
    </author>
    <date year="2018" month="October"/>
  </front>
</reference>
<reference anchor="TAP-3" target="https://github.com/theupdateframework/taps/blob/d0818e580c322815a473520f2e8cc5f5eb8df499/tap3.md">
  <front>
    <title>The Update Framework TAP 3 - Multi-role delegations</title>
    <author initials="T.K." surname="Kuppusamy">
      <organization></organization>
    </author>
    <author initials="S." surname="Awwad">
      <organization></organization>
    </author>
    <author initials="E." surname="Cordell">
      <organization></organization>
    </author>
    <author initials="V." surname="Diaz">
      <organization></organization>
    </author>
    <author initials="J." surname="Moshenko">
      <organization></organization>
    </author>
    <author initials="J." surname="Cappos">
      <organization></organization>
    </author>
    <date year="2018" month="January" day="18"/>
  </front>
</reference>
<reference anchor="TAP-4" target="https://github.com/theupdateframework/taps/blob/2cb67d913ec19424d1e354b38f862886fbfd4105/tap4.md">
  <front>
    <title>The Update Framework TAP 4 - Multiple repository consensus on entrusted targets</title>
    <author initials="T.K." surname="Kuppusamy">
      <organization></organization>
    </author>
    <author initials="S." surname="Awwad">
      <organization></organization>
    </author>
    <author initials="E." surname="Cordell">
      <organization></organization>
    </author>
    <author initials="V." surname="Diaz">
      <organization></organization>
    </author>
    <author initials="J." surname="Moshenko">
      <organization></organization>
    </author>
    <author initials="J." surname="Cappos">
      <organization></organization>
    </author>
    <date year="2017" month="December" day="15"/>
  </front>
</reference>
<reference anchor="TAP-5" target="https://github.com/theupdateframework/taps/blob/01726d203c9b9c029d26f6612069ce3180500d9a/tap5.md#downloading-metadata-and-target-files">
  <front>
    <title>The Update Framework TAP 5 - Setting URLs for roles in the root metadata file</title>
    <author initials="T.K." surname="Kuppusamy">
      <organization></organization>
    </author>
    <author initials="S." surname="Awwad">
      <organization></organization>
    </author>
    <author initials="E." surname="Cordell">
      <organization></organization>
    </author>
    <author initials="V." surname="Diaz">
      <organization></organization>
    </author>
    <author initials="J." surname="Moshenko">
      <organization></organization>
    </author>
    <author initials="J." surname="Cappos">
      <organization></organization>
    </author>
    <date year="2018" month="January" day="22"/>
  </front>
</reference>
<reference anchor="TUF-spec" target="https://github.com/theupdateframework/specification/blob/2b4e18472fe25d5b57f36f6fa50104967c8faeaa/tuf-spec.md">
  <front>
    <title>The Update Framework Specification</title>
    <author initials="J." surname="Samuel">
      <organization></organization>
    </author>
    <author initials="N." surname="Mathewson">
      <organization></organization>
    </author>
    <author initials="G." surname="Condra">
      <organization></organization>
    </author>
    <author initials="V." surname="Diaz">
      <organization></organization>
    </author>
    <author initials="T.K." surname="Kuppusamy">
      <organization></organization>
    </author>
    <author initials="S." surname="Awwad">
      <organization></organization>
    </author>
    <author initials="S." surname="Tobias">
      <organization></organization>
    </author>
    <author initials="J." surname="Wright">
      <organization></organization>
    </author>
    <author initials="H." surname="Mehnert">
      <organization></organization>
    </author>
    <author initials="E." surname="Tryzelaar">
      <organization></organization>
    </author>
    <author initials="J." surname="Cappos">
      <organization></organization>
    </author>
    <author initials="R." surname="Dingledine">
      <organization></organization>
    </author>
    <date year="2018" month="September" day="19"/>
  </front>
</reference>


    </references>

    <references title='Informative References'>

<reference anchor="MERCURY" target="https://www.usenix.org/system/files/conference/atc17/atc17-kuppusamy.pdf">
  <front>
    <title>Mercury: Bandwidth-Effective Prevention of Rollback Attacks Against Community Repositories</title>
    <author initials="T.K." surname="Kuppusamy">
      <organization></organization>
    </author>
    <author initials="V." surname="Diaz">
      <organization></organization>
    </author>
    <author initials="J." surname="Cappos">
      <organization></organization>
    </author>
    <date year="2017" month="July" day="12"/>
  </front>
  <seriesInfo name="ISBN" value="978-1-931971-38-6"/>
</reference>
<reference anchor="UPTANEESCAR" target="https://ssl.engineering.nyu.edu/papers/kuppusamy_escar_16.pdf">
  <front>
    <title>Securing Software Updates for Automobiles</title>
    <author initials="T.K." surname="Kuppusamy">
      <organization></organization>
    </author>
    <author initials="A." surname="Brown">
      <organization></organization>
    </author>
    <author initials="S." surname="Awwad">
      <organization></organization>
    </author>
    <author initials="D." surname="McCoy">
      <organization></organization>
    </author>
    <author initials="R." surname="Bielawski">
      <organization></organization>
    </author>
    <author initials="C." surname="Mott">
      <organization></organization>
    </author>
    <author initials="S." surname="Lauzon">
      <organization></organization>
    </author>
    <author initials="A." surname="Weimerskirch">
      <organization></organization>
    </author>
    <author initials="J." surname="Cappos">
      <organization></organization>
    </author>
    <date year="2016" month="October" day="16"/>
  </front>
</reference>
<reference anchor="PEP-458" target="https://www.python.org/dev/peps/pep-0458/">
  <front>
    <title>PEP 458 -- Surviving a Compromise of PyPI</title>
    <author initials="T.K." surname="Kuppusamy">
      <organization></organization>
    </author>
    <author initials="V." surname="Diaz">
      <organization></organization>
    </author>
    <author initials="D." surname="Stufft">
      <organization></organization>
    </author>
    <author initials="J." surname="Cappos">
      <organization></organization>
    </author>
    <date year="2013" month="September" day="27"/>
  </front>
</reference>
<reference anchor="DEPLOY" target="https://uptane.github.io/deployment/introduction.html">
  <front>
    <title>Uptane Deployment Guidelines</title>
    <author initials="." surname="Members of the Uptane Alliance Community">
      <organization></organization>
    </author>
    <date year="n.d."/>
  </front>
</reference>
<reference anchor="USATODAY" target="https://www.usatoday.com/story/tech/columnist/2016/06/28/your-average-car-lot-more-code-driven-than-you-think/86437052/">
  <front>
    <title>Your average car is a lot more code-driven than you think</title>
    <author initials="B." surname="O'Donnell">
      <organization></organization>
    </author>
    <date year="2016" month="June" day="28"/>
  </front>
</reference>
<reference anchor="CR-OTA" target="https://www.consumerreports.org/automotive-technology/automakers-embrace-over-the-air-updates-can-we-trust-digital-car-repair/">
  <front>
    <title>Automakers Embrace Over-the-Air Updates, but Can We Trust Digital Car Repair?</title>
    <author initials="K." surname="Barry">
      <organization></organization>
    </author>
    <date year="2018" month="April" day="20"/>
  </front>
</reference>
<reference anchor="IN-TOTO" target="https://in-toto.github.io/">
  <front>
    <title>in-toto: A framework to secure the integrity of software supply chains</title>
    <author >
      <organization></organization>
    </author>
    <date year="2018" month="October" day="29"/>
  </front>
</reference>


    </references>



  </back>

<!-- ##markdown-source:
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
uhNx8Ot2Y57v5zgVjIlY3T9rX/Hp72d2OvDm+XvqE3/39Foo5pbd/+mM/tvO
O2ac/1mH/U3z/kEn/U1z3+2Ym3I5nANL72sU/537D077F88+fYds2+6+NNJv
b1MdA254QVvk5qphxJDweVdX/NvQPXATSPGmJ20tjqpSYSEQn+4GK6ReJRGj
Lv1WM+oKtTzp7XMuBDDosst1LNqvGeJSSNux4kq50eq9g/mZk9BUF9s/A3Pd
wCVUhezCMIMtvMQ1JmqwcAGsX4uA0a7CUulUGE2iqlwJXjLyh+fe8vjdgtcU
+3QVd2Wkje23TJt378+9WZfY3B83kf/tteb3gs9dWAS7ijmq3Qtqt4yDVeHM
2i7N2XxhqYQG1FITn4SfOmvq0ByBCR3PA9GXcpnDtEJytrCRrVXcNbDfhBVp
DeURi7e7tJmdW2aL9+lMcF1TGoTDE0Za4nU1v9dqXi+2jy4HFnuCA6/Lzh1B
a6tpu8p6/Dj9/mBtePCVrqG8Z6jNFmqplNasKjKoZGiUSbDOahL0nsrUOC5S
tEvc8wyx2MCWChiGaRASkMPZHdqfHW50lWW/o1vemndqkpVkmfhmdKng1bFM
dlXzWrVAkayDpw8dE17wpBgtPbNaHdwNqoCQW/0wqkPk92D/aqpAimbxg6sU
hYcSEn3P94AKqZUM0DZ3cXVWtsv8rOVx8FBCOU2zPUjY2to6LyU+dr7uej0y
6EWOZ0PZtihI1qkPbLgTJBVHZde7ynGAWrwFvakoIxNyZ//KDvlzW9y2jUYA
+WlodGGlOIOtvGoNsmN84twTH1w9NF3T2/+2pwtqr2SQcOhFXcKcf4ujL5g8
cr1pPN6/kUUla1q5wmUVNVX7m+ZXNBknI37K56U3ZismKYgK6YBY7vWU+czh
uwvtIfTx7Yc3L47fB41qlFw+3h8h6Kgbys7I+jHrmISrWtxqEIgt3Ytw5/oT
3Ya8WImQQETqER/KIxJPbwe/V9qFCqs5K0Ag9DxPtvd20M/VanTcCo/ZgHOG
EGKV2N6/45iITR0DsrlB+CAa5z2MY1D7KJj7BvgkdUWbBlQyC6MdMACwO9Zp
EAY7+fl7Rt5PdbGfm+jbcXaBNKtx6+k/ERCHX7p2eFjHpUXllTxzjcjHow1N
ge50GtyoGu5KP9/sHr3nXKJzOJ7N0BKoWelUiRXt2O38q2gWK1q3aTJyj07R
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

-->

</rfc>


<?xml version="1.0" encoding="UTF-8"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc2629 version 1.2.9 -->

<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
]>

<?rfc toc="yes"?>
<?rfc sortrefs="yes"?>
<?rfc symrefs="yes"?>

<rfc ipr="noDerivativesTrust200902" docName="uptane-standard-design" category="info">

  <front>
    <title abbrev="UPTANE">Uptane Standard for Design and Implementation</title>

    <author initials="." surname="Members of the Uptane Community" fullname="Uptane Community">
      <organization>Joint Development Foundation Projects, LLC, Uptane Series (c/o Prof. Justin Cappos)</organization>
      <address>
        <postal>
          <street>6 MetroTech</street>
          <city>Brooklyn</city>
          <region>NY</region>
          <code>11201</code>
          <country>USA</country>
        </postal>
        <email>uptane-standards@googlegroups.com</email>
      </address>
    </author>

    <date year="2021" month="November" day="23"/>

    <area>TODO</area>
    <workgroup>TODO</workgroup>
    <keyword>Internet-Draft</keyword>

    <abstract>


<t>This document describes a framework for securing ground vehicle software update systems.</t>



    </abstract>


  </front>

  <middle>


<section anchor="introduction" title="Introduction">

<t>Uptane is a secure software update framework for ground vehicles. This document describes procedures to enable programmers for OEMs and suppliers to securely design and implement this framework in a manner that better protects connected units on ground vehicles. Integrating Uptane as outlined in the sections that follow can reduce the ability of attackers to compromise critical systems. It also assures a faster and easier recovery process should a compromise occur.</t>

<t>These instructions specify the components necessary for a compliant implementation. Individual implementers can make their own technological choices within those requirements. This flexibility makes Uptane adaptable to the many customized update solutions used by manufacturers. If implementers wish to have compatible formats, they may use POUFs. POUFs contain a description of implementation choices as well as data binding formats. An implementer who adopts a POUF, as well as the Uptane Standard, will be able to interoperate with other implementations using that POUF.</t>

</section>
<section anchor="terminology" title="Terminology">

<t>With the exception of the Conformance terminology and Uptane role terminology presented on this page, please refer to the <eref target="https://uptane.github.io/deployment-considerations/glossary.html">glossary</eref> in the Deployment Best Practices volume for definitions of all terms used in this Standard.</t>

<section anchor="conformance-terminology" title="Conformance terminology">

<t>The keywords MUST, MUST NOT, REQUIRED, SHALL, SHALL NOT, SHOULD, SHOULD NOT, RECOMMENDED, MAY, and OPTIONAL in this document are to be interpreted as described in <xref target="RFC2119"/>. Given the importance of interpreting these terms correctly, we present these definitions here. Note that when referring to actions in the Standard that mandate compliance, the word SHALL will be used, rather than the word MUST. Hence, MUST and MUST NOT are not included in these definitions.</t>

<t><spanx style="emph">SHALL</spanx> This word or the term “REQUIRED” mean that the definition is an absolute requirement of the specification.
<spanx style="emph">SHALL NOT</spanx> This phrase means that the definition is an absolute prohibition of the specification.
<spanx style="emph">SHOULD</spanx> This word or the adjective “RECOMMENDED” mean that, in particular circumstances, there may exist valid reasons to ignore a particular item, but the full implications must be understood and carefully weighed before choosing a different course.
<spanx style="emph">SHOULD NOT</spanx> This phrase or the phrase “NOT RECOMMENDED” mean that there may exist valid reasons in particular circumstances when the particular behavior is acceptable or even useful, but the full implications should be understood and the case carefully weighed before implementing any behavior described with this label.
<spanx style="emph">MAY</spanx> This word or the adjective “OPTIONAL,” mean that an item is truly optional.</t>

<t>In order to be considered Uptane-compliant, an implementation SHALL follow all of these rules as specified in the document.</t>

<t>Note that, following the recommendations of <xref target="RFC2119"/> imperatives of the type defined here “must be used with care and sparingly.  In particular, they MUST only be used where it is actually required for interoperation or to limit behavior which has potential for causing harm (e.g., limiting retransmisssions)</t>

</section>
<section anchor="uptane-role-terminology" title="Uptane role terminology">

<t>These terms are defined in greater detail in <xref target="roles"/>.</t>

<t><spanx style="emph">Delegation</spanx>: A process by which the responsibility of signing metadata about images is assigned to another party.
<spanx style="emph">Role</spanx>: A party (human or machine) responsible for signing a certain type of metadata. The role controls keys and is responsible for signing metadata entrusted to it with these keys. The roles mechanism of Uptane allows the system to distribute signing responsibilities so that the compromise of one key does not necessarily impact the security of the entire system.</t>

<t><list style="symbols">
  <t><spanx style="emph">Root role</spanx>: Signs metadata that distributes and revokes public keys used to verify the Root, Timestamp, Snapshot, and Targets role metadata.</t>
  <t><spanx style="emph">Snapshot role</spanx>: Signs metadata that indicates which images the repository has released at the same time.</t>
  <t><spanx style="emph">Targets role</spanx>: Signs metadata used to verify the image, such as cryptographic hashes and file size.</t>
  <t><spanx style="emph">Timestamp role</spanx>: Signs metadata that indicates if there are any new metadata or images on the repository.</t>
</list></t>

</section>
<section anchor="acronyms-and-abbreviations" title="Acronyms and abbreviations">

<t><spanx style="emph">CDN</spanx>: Content Delivery Network</t>

<t><spanx style="emph">ECUs</spanx>: Electronic Control Units, the computing units on a vehicle</t>

<t><spanx style="emph">LIN Bus</spanx>: Local Interconnect Bus</t>

<t><spanx style="emph">OBD</spanx>: On-board diagnostics</t>

<t><spanx style="emph">SOTA</spanx>: Software Updates Over-the-Air</t>

<t><spanx style="emph">UDS</spanx>: Unified Diagnostic Services</t>

<t><spanx style="emph">VIN</spanx>: Vehicle Identification Number</t>

</section>
</section>
<section anchor="rationale-for-and-scope-of-the-uptane-standard" title="Rationale for and scope of the Uptane Standard">

<t>This Standard document provides the essential components for the secure design, implementation, and deployment of Uptane by OEMs and suppliers. These guidelines contribute to compromise resilience, or the ability to minimize the extent of the threat posed by any given attack.</t>

<t>However, this specification is intended as an implementation guide, and not as a detailed technical argument about the security properties that Uptane provides.  Readers interested in such documentation should refer to published papers that cover this topic.  <xref target="UPTANEESCAR"/></t>

<section anchor="why-uptane-requires-a-standards-document" title="Why Uptane requires a standards document">

<t>A standards document that can guide the safe design, integration, and deployment of Uptane in vehicles is needed at this time because:</t>

<t><list style="symbols">
  <t>The number of connected units on the average vehicle continues to grow, with mainstream cars now containing up to 100 million lines of code. <xref target="USATODAY"/></t>
  <t>The expanded use of software over-the-air strategies creates new attack surfaces for malicious parties. <xref target="CR-OTA"/></t>
  <t>Legacy update strategies, such as SSL/TLS or GPG/RSA, are not feasible for use on vehicle ECUs because they force manufacturers to chose between enhanced security and customizability.</t>
  <t>Conventional strategies are also complicated by the differing resources of the ECUs, which can vary greatly in memory, storage space, and Internet connectivity.</t>
  <t>The design of Uptane makes it possible to offer improved design flexibility without sacrificing security.</t>
  <t>This added design flexibility, however, could be a liability if the framework is implemented incorrectly.</t>
  <t>Standardization of crucial steps in the design, implementation, and use of Uptane can assure that customizability does not impact security or functionality.</t>
</list></t>

</section>
<section anchor="scope-of-standard-coverage" title="Scope of Standard coverage">

<t>This document sets guidelines for implementing Uptane in most systems capable of updating software on connected units in ground vehicles, including passenger vehicles, light-duty trucks, heavy-duty trucks, and motorcycles. Uptane could potentially also be applied to other ground vehicles, such as automated shuttles, recreational vehicles, and military ground vehicles. Uptane could even be applied to domains such as IoT devices, medical devices, and autonomous aerial vehicles. In this section, we define the scope of that applicability by providing sample use cases and possible exceptions, aspects of software update security that are not applicable to Uptane, and the design requirements governing the preparation of these standards.</t>

<section anchor="assumptions" title="Assumptions">

<t>We assume the following system preconditions for Uptane:</t>

<t><list style="symbols">
  <t>Vehicles have the ability to establish connectivity to required backend services. For example, this could be done through cellular, Wi-Fi, or hard-wired mechanisms.</t>
  <t>ECUs are either directly connected to the communication channel, or are indirectly connected via some sort of network gateway.</t>
  <t>ECUs are programmable and provide sufficient performance to be updated.</t>
  <t>ECUs must be able to perform public key cryptography operations and calculate hashes of images and metadata files.</t>
  <t>There are state-of-the-art secure servers in place, such as the Director and Image repository servers.</t>
</list></t>

<t>It is important that any bugs detected in Uptane implementations be patched promptly. Failure to do so could interfere with the effectiveness of Uptane’s operations.</t>

</section>
<section anchor="use-cases" title="Use cases">

<t>The following use cases provide a number of scenarios illustrating the manner in which software updates could be accomplished using Uptane.</t>

<section anchor="oems-initializing-uptane-at-the-factory-using-sota" title="OEMs initializing Uptane at the factory using SOTA">

<t>An OEM plans to install Uptane on new vehicles. This entails the following components: code to perform full and partial verification, the latest copy of the relevant metadata, the public keys, and an accurate attestation of the latest time. The OEM then either requires its tier-1 suppliers to provide these materials to the suppliers’ assembly lines or can choose to add the materials later at the OEM’s assembly lines. The OEM’s in-vehicle implementation is Uptane-compliant if:</t>

<t><list style="numbers">
  <t>all Primaries perform full verification;</t>
  <t>all Secondaries that are updated via OTA at least perform partial verification; and</t>
  <t>all other ECUs that do not perform any type of verification cannot be updated via OTA.</t>
</list></t>

</section>
<section anchor="updating-one-ecu-with-a-complete-image" title="Updating one ECU with a complete image">

<t>A tier-1 supplier completes work on a revised image for an electronic brake control module. This module will control the brakes on all models of an SUV produced by the OEM mentioned above. Assuming supplier delegation is supported by the OEM for this ECU, each tier-1 supplier digitally signs the image, then delivers the signature, all of its metadata, including delegations, and associated images to the OEM. The OEM adds these metadata and images to its Image repository, along with information about any dependencies and conflicts between this image and those for other ECUs used in the OEM’s vehicles. The OEM also updates the inventory database, so that the Director repository can instruct the ECU on how to install these updated images.</t>

</section>
<section anchor="updating-individual-ecus-on-demand" title="Updating individual ECUs on demand">

<t>An OEM has issued a recall to address a problem with a keyless entry device that has been locking people out of their cars. The OEM prepares an updated flash image in the manner described above. The OEM then ships USB flash drives to vehicle owners and dealerships that allow those parties to update the firmware of their vehicles.</t>

</section>
<section anchor="update-one-ecu-with-multiple-deltas" title="Update one ECU with multiple deltas">

<t>The OEM wants to use delta updates to save over-the-air bytes. The delta images contain only the code and/or data that has changed from the previous image version. To do so, the OEM must first modify the Director repository, using the vehicle version manifest and dependency resolution to determine the differences between the previous and latest images. The OEM then adds the following to the custom Targets metadata used by the Director repository: (1) the algorithm used to apply a delta image, and (2) the Targets metadata about the delta image. The OEM will also check whether the delta images match the Targets metadata from the Director repository.</t>

</section>
</section>
</section>
<section anchor="exceptions" title="Exceptions">

<t>There are a number of factors that could impede the completion of the above scenarios:</t>

<t><list style="symbols">
  <t>ECUs may be lacking the necessary resources to function as designated. These insufficient resources could include limited CPU or RAM inadequate for performance of public key cryptography; a lack of sufficient storage to undo installation of bad software; or a location on a low-speed network (e.g., LIN).</t>
  <t>ECUs may reside on different network segments, and may not be able to directly reach each other, requiring a gateway to facilitate communication.</t>
  <t>A user may replace OEM-installed ECUs with aftermarket ECUs.</t>
  <t>A vehicle may be able to download only a limited amount of data via a cellular channel due to limits on a data plan.</t>
  <t>A system may lack sufficient power to download or install software updates.</t>
  <t>Vehicles may be offline for extended periods of time, thus missing required updates (e.g., key rotations).</t>
  <t>OEMs may be unwilling to implement costly security or hardware requirements.</t>
</list></t>

</section>
<section anchor="out-of-scope" title="Out of scope">

<t>The following topics will not be addressed in this document, as they represent threats outside the scope of Uptane:</t>

<t><list style="symbols">
  <t>Physical attacks, such as manual tampering with ECUs outside the vehicle.</t>
  <t>Compromise of the packaged software, such as malware embedded in a trusted package.</t>
  <t>Compromise of the supply chain (e.g., build system, version control system, packaging process). A number of strategies (e.g., git signing, TPMs, in-toto <xref target="IN-TOTO"/>)  already exist to address this problem. Therefore, there is no need to duplicate those techniques here.</t>
  <t>Problems associated with OBD or UDS programming of ECUs, such as authentication of communications between ECUs.</t>
  <t>Malicious mirrors of package repositories, which may substitute original packages with malicious packages with matching version numbers <xref target="MERCURY"/>.</t>
</list></t>

</section>
<section anchor="design-requirements" title="Design requirements">

<t>The design requirements for this document are governed by the following principal parameters:</t>

<t><list style="symbols">
  <t>to clearly mandate the design and implementation steps that are security critical and must be followed as is, while offering flexibility in the implementation of non-critical steps. In this manner, users can adapt to support different use models and deployment scenarios.</t>
  <t>to ensure that, if Uptane is implemented, the security practices mandated or suggested in this document do not interfere with the functionality of ECUs, vehicles, or the systems that maintain them.</t>
  <t>to delineate guidelines to ensure that, should any part of the SOTA mechanism of a vehicle be attacked, an attacker must compromise two or more modules to breach the SOTA mechanism.</t>
</list></t>

</section>
</section>
<section anchor="threat-model-and-attack-strategies" title="Threat model and attack strategies">

<t>The overarching goal of Uptane is to provide a system that is resilient in the face of various types of compromise. In this section, we describe the goals an attacker may have (<xref target="attacker_goals"/>) and the capabilities they may have or could develop (<xref target="capabilities"/>). We then describe and classify types of attacks on the system according to the attacker’s goals (<xref target="threats"/>).</t>

<section anchor="attacker_goals" title="Attacker goals">

<t>We assume that attackers may want to achieve one or more of the following goals, in increasing order of severity:</t>

<t><list style="symbols">
  <t>Read the contents of updates to discover confidential information, reverse-engineer firmware, or compare two firmware images to identify security fixes and hence determine the fixed security vulnerability.</t>
  <t>Deny installation of updates to prevent vehicles from fixing software problems.</t>
  <t>Cause one or more ECUs in the vehicle to fail, denying use of the vehicle or of certain functions.</t>
  <t>Control ECUs within the vehicle, and possibly the vehicle itself.</t>
</list></t>

</section>
<section anchor="capabilities" title="Attacker capabilities">

<t>Uptane is designed with resilience to compromise in mind. We assume that attackers may develop one or more of the following capabilities:</t>

<t><list style="symbols">
  <t>Intercept and modify network traffic (i.e., perform man-in-the-middle attacks). This capability may be developed in two domains:
  <list style="symbols">
      <t>Outside the vehicle, intercepting and modifying traffic between the vehicle and software repositories.</t>
      <t>Inside the vehicle, intercepting and modifying traffic on one or more vehicle buses (e.g., via an OBD port or using a compromised ECU as a vector).</t>
    </list></t>
  <t>Compromise and control either a Director repository or Image repository server, and any keys stored on that repository, but not both the Director and Image repositories.</t>
  <t>Compromise either a Primary ECU or a Secondary ECU, but not both in the same vehicle.</t>
</list></t>

</section>
<section anchor="threats" title="Description of threats">

<t>Uptane’s threat model includes the following types of attacks, organized according to the attacker goals listed in <xref target="attacker_goals"/>.</t>

<section anchor="read_updates" title="Read updates">

<t><list style="symbols">
  <t><spanx style="emph">Eavesdrop attack:</spanx> Read sensitive or confidential information from an update intended to be encrypted for a specific ECU. (Note: Not all implementations will have a need to protect information in this way.)</t>
</list></t>

</section>
<section anchor="deny_updates" title="Deny installation of updates">

<t>An attacker seeking to deny the installation of updates may attempt one or more of the following strategies:</t>

<t><list style="symbols">
  <t><spanx style="emph">Drop-request attack:</spanx> Block network traffic outside or inside the vehicle.</t>
  <t><spanx style="emph">Slow retrieval attack:</spanx> Slow down network traffic, in the extreme case sending barely enough packets to avoid a timeout. Similar to a drop-request attack, except that both the sender and receiver of the traffic still think network traffic is unimpeded.</t>
  <t><spanx style="emph">Freeze attack:</spanx> Continue to send a properly signed, but old, update bundle to the ECUs, even if newer updates exist.</t>
  <t><spanx style="emph">Partial bundle installation attack:</spanx> Install a valid (signed) update bundle, and then block selected updates within the bundle.</t>
  <t>Conduct a denial of service attack against the Uptane repositories or infrastructure.</t>
</list></t>

</section>
<section anchor="change_functionality" title="Interfere with ECU functionality">

<t>Attackers seeking to interfere with the functionality of vehicle ECUs in order to cause an operational failure or unexpected behavior may do so in one of the following ways:</t>

<t><list style="symbols">
  <t><spanx style="emph">Rollback attack:</spanx> Cause an ECU to install a previously valid software revision that is older than the currently installed version.</t>
  <t><spanx style="emph">Endless data attack:</spanx> Send a large amount of data to an ECU until it runs out of storage, possibly causing the ECU to fail to operate.</t>
  <t><spanx style="emph">Mix-and-match attack:</spanx> Install a malicious software bundle in which some of the updates do not interoperate properly. This may be accomplished even if all of the individual images being installed are valid, as long as valid versions exist that are mutually incompatible.</t>
</list></t>

</section>
<section anchor="control_ecu" title="Control an ECU or vehicle">

<t>Full control of a vehicle, or one or more ECUs within a vehicle, is the most severe threat.</t>

<t><list style="symbols">
  <t><spanx style="emph">Arbitrary software attack:</spanx> Cause an ECU to install and run arbitrary code of the attacker’s choice.</t>
</list></t>

</section>
</section>
</section>
<section anchor="design" title="Detailed design of Uptane">

<t>Uptane does not specify implementation details. Instead, this Standard describes the components necessary for a compliant implementation and leaves it up to individual implementers to make their own technological choices within those requirements.</t>

<t>At a high level, Uptane requires:</t>

<t><list style="symbols">
  <t>Two software repositories:
  <list style="symbols">
      <t>An Image repository containing binary images to install and signed metadata about those images.</t>
      <t>A Director repository connected to an inventory database that can sign metadata on demand for images in the Image repository.</t>
    </list></t>
  <t>Repository tools for generating Uptane-specific metadata about images.</t>
  <t>A public key infrastructure supporting the required metadata production and signing roles on each repository:
  <list style="symbols">
      <t>Root - The certificate authority for the Uptane ecosystem. Distributes public keys for verifying all the other roles’ metadata.</t>
      <t>Timestamp - Indicates whether there are new metadata or images.</t>
      <t>Snapshot - Indicates images released by the repository at a point in time via signing metadata about Targets metadata.</t>
      <t>Targets - Indicates metadata about images, such as hashes and file sizes.</t>
    </list></t>
  <t>A secure way for ECUs to know the time.</t>
  <t>An ECU capable of downloading images and associated metadata from the Uptane servers.</t>
  <t>An in-vehicle client on a Primary ECU capable of verifying the signatures on all update metadata and downloading updates on behalf of its associated Secondary ECUs. The Primary ECU MAY be the same ECU that communicates with the server.</t>
  <t>A client or library on each Secondary ECU capable of performing either full or partial verification of metadata.</t>
</list></t>

<section anchor="roles" title="Roles on repositories">

<t>A repository contains images and metadata. Each role has a particular type of metadata associated with it, as described in <xref target="meta_structures"/>.</t>

<section anchor="root_role" title="The Root role">

<t>A repository’s Root role SHALL be responsible for a Certificate Authority as defined in <xref target="RFC3647"/>.
A repository’s Root role SHALL produce and sign Root metadata as described in <xref target="root_meta"/>.
A repository’s Root role SHALL sign the public keys used to verify the metadata produced by the Timestamp, Snapshot, and Targets roles.
A repository’s Root role SHALL revoke keys for the other roles if they are compromised.</t>

</section>
<section anchor="targets_role" title="The Targets role">

<t>A repository’s Targets role SHALL produce and sign metadata about images and delegations as described in <xref target="targets_meta"/>.</t>

<section anchor="targets_role_delegations" title="Delegations">

<t>The Targets role on the Image repository MAY delegate the responsibility of signing metadata to other, custom-defined roles referred to as delegated targets. If it does, it MUST do so as specified in <xref target="delegations_meta"/>.</t>

<t>As responsibility for signing images or a subset of images MAY be delegated to more than one role, it is possible that two different roles will be trusted to sign a particular image. For this reason, delegations MUST be prioritized.</t>

<t>A particular delegation for a subset of images MAY be designated as <spanx style="strong">terminating</spanx>. For terminating delegations, the client SHALL NOT search any further if it does not find validly signed metadata about those images. Delegations SHOULD NOT be terminating by default; terminating delegations SHOULD only be used when there is a compelling technical reason to do so.</t>

<t>A delegation for a subset of images MAY be a multi-role delegation <xref target="TAP-3"/>. A multi-role delegation indicates that multiple roles are needed to sign a particular image and each of the delegatee roles MUST sign the same metadata.</t>

<t>Delegations only apply to the Image repository. The Targets role on the Director repository MUST NOT delegate metadata signing responsibility.</t>

</section>
</section>
<section anchor="snapshot_role" title="The Snapshot role">

<t>A repository’s Snapshot role SHALL produce and sign metadata about all Targets metadata the repository releases, including the current version number of the top-level Targets metadata, and the version numbers of all delegated Targets metadata, as described in <xref target="snapshot_meta"/>.</t>

</section>
<section anchor="timestamp_role" title="The Timestamp role">

<t>A repository’s Timestamp role SHALL produce and sign metadata indicating whether there are new metadata or images on the repository. It MUST do so by signing the metadata about the Snapshot metadata file.</t>

</section>
</section>
<section anchor="meta_structures" title="Metadata structures">

<t>Uptane’s security guarantees all rely on properly created metadata that follows a designated structure. The Uptane Standard <spanx style="strong">does not</spanx> mandate any particular format or encoding for the metadata as a whole. ASN.1 (with any encoding scheme like BER, DER, XER, etc.), JSON, XML, or any other encoding format that is capable of providing the required structure MAY be used.</t>

<t>However, string comparison is required as part of metadata verification. To ensure an accurate basis for comparing strings, all strings MUST be encoded in the Unicode Format for Network Interchange as defined in <xref target="RFC5198"/>, including normalization into Unicode Normalization Form C (<xref target="NFC"/>).</t>

<t>In the <spanx style="emph">Deployment Best Practices</spanx> (<xref target="DEPLOY"/>), Joint Development Foundation Projects, LLC, Uptane Series provides some examples of compliant metadata structures in ASN.1 and JSON.</t>

<section anchor="common_metadata" title="Common metadata structures">

<t>Every public key MUST be represented using a public key identifier.  A public key identifier is EITHER all of the following:</t>

<t><list style="symbols">
  <t>The value of the public key itself (which MAY be, for example, formatted as a PEM string)</t>
  <t>The public key cryptographic algorithm used by the key (such as RSA or ECDSA)</t>
  <t>The particular scheme used to verify the signature (such as <spanx style="verb">rsassa-pss-sha256</spanx> or <spanx style="verb">ecdsa-sha2-nistp256</spanx>)</t>
</list></t>

<t>OR a secure hash over at least the above components (such as the keyid mechanism in TUF).</t>

<t>All four Uptane roles (Root, Targets, Snapshot, and Timestamp) share a common structure. They SHALL contain the following two attributes:</t>

<t><list style="symbols">
  <t>A payload of metadata to be signed</t>
  <t>An attribute containing the signature(s) of the payload, where each entry specifies:
  <list style="symbols">
      <t>The public key identifier of the key being used to sign the payload</t>
      <t>A signature with this key over the payload</t>
    </list></t>
</list></t>

<t>The payload differs depending on the role. However, the payload for all roles shares a common structure. It SHALL contain the following four attributes:</t>

<t><list style="symbols">
  <t>An indicator of the type of role (Root, Targets, Snapshot, or Timestamp)</t>
  <t>An expiration date and time</t>
  <t>An integer version number, which SHOULD be incremented each time the metadata file is updated</t>
  <t>The role-specific metadata for the role indicated</t>
</list></t>

<t>The following sections describe the role-specific metadata. All roles SHALL follow the common structures described here.</t>

</section>
<section anchor="root_meta" title="Root metadata">

<t>A repository’s Root metadata distributes the public keys of the top-level Root, Targets, Snapshot, and Timestamp roles, as well as revocations of those keys. It SHALL contain two attributes:</t>

<t><list style="symbols">
  <t>A representation of the public keys for all four roles. Each key SHALL have a unique public key identifier.</t>
  <t>An attribute mapping each role to (1) its public key(s), and (2) the threshold of signatures required for that role.</t>
</list></t>

</section>
<section anchor="targets_meta" title="Targets metadata">

<t>The Targets metadata on a repository contains all of the information about images to be installed on ECUs. This includes filenames, hashes, and file sizes. It MAY also include other useful information, such as what types of hardware are compatible with a particular image.</t>

<t>Targets metadata can also contain metadata about delegations, allowing one Targets role to delegate its authority to another. This means that an individual Targets metadata file might contain only metadata about delegations, only metadata about images, or some combination of the two. The details of how ECUs traverse the delegation tree to find valid metadata about images is specified in <xref target="resolve_delegations"/>.</t>

<section anchor="targets_images_meta" title="Metadata about images">

<t>To be available to install on clients, all images on the repository MUST have their metadata listed in a Targets role.  Each Targets role MAY provide a list of some images on the repository.  This list MUST provide, at a minimum, the following information about each image:</t>

<t><list style="symbols">
  <t>The image filename</t>
  <t>The size of the image in bytes</t>
  <t>One or more hashes of the image file, along with the hashing function used</t>
</list></t>

<t>If there are no images included in the Targets metadata from the Director repository, then the metadata SHOULD include a vehicle identifier in order to avoid a replay attack.</t>

<section anchor="custom-metadata-about-images" title="Custom metadata about images">

<t>In addition to what is required, Targets metadata files MAY contain extra metadata for images on the repository. This metadata can be customized for a particular use case. Examples of use cases for different types of custom metadata can be found in the <spanx style="emph">Deployment Best Practices</spanx> document (<xref target="DEPLOY"/>). However, there are a few important pieces of custom metadata that SHOULD be present in most implementations. In addition, there is one element in the custom metadata that MUST be present in the Targets metadata from the Director.</t>

<t>Custom metadata MAY also contain a demarcated field or section that MUST match whenever two pieces of metadata are checked against each other, such as when Targets metadata from the Director repository is checked against Targets metadata from the Image repository.</t>

<t>The information listed below SHOULD be provided for each image on both the Image repository and the Director repository. If a “MUST match section” is to be implemented, that is where this information SHOULD be placed.</t>

<t><list style="symbols">
  <t>A release counter, to be incremented each time a new version of the image is released. This can be used to prevent rollback attacks even in cases where the Director repository is compromised.</t>
  <t>A hardware identifier, or list of hardware identifiers, representing models of ECUs with which the image is compatible. This can be used to ensure that an ECU cannot be ordered to install an incompatible image, even in cases where the Director repository is compromised.</t>
</list></t>

<t>The following information is CONDITIONALLY REQUIRED for each image on the Director repository IF that image is encrypted:</t>

<t><list style="symbols">
  <t>Information about filenames, hashes, and file size of the encrypted image.</t>
  <t>Information about the encryption method, and other relevant information–for example, a symmetric encryption key encrypted by the ECU’s asymmetric key could be included in the Director repository metadata.</t>
</list></t>

<t>The following information MUST be provided from the Director repository for each image in the Targets metadata:</t>

<t><list style="symbols">
  <t>An ECU identifier (such as a serial number), specifying the ECU that should install the image.</t>
</list></t>

<t>The Director repository MAY provide a download URL for the image file. This may be useful, for example, when the image is on a public CDN and the Director wishes to provide a signed URL.</t>

</section>
</section>
<section anchor="delegations_meta" title="Metadata about delegations">

<t>A Targets metadata file on the Image repository (but not the Director repository) MUST be able to delegate signing authority to other entities. For example, it could delegate signing authority for a particular ECU’s firmware to that ECU’s supplier. A metadata file MAY contain any number of delegations and MUST keep the delegations in prioritized order.</t>

<t>Any metadata file with delegations MUST provide the following information:</t>

<t><list style="symbols">
  <t>A list of public keys of all delegatees. Each key should have a unique public key identifier and a key type.</t>
  <t>A list of delegations, each of which contains:
  <list style="symbols">
      <t>A list of the filenames to which this role applies. This MAY be expressed using wildcards, or by enumerating a list, or a combination of the two.</t>
      <t>An optional list of the hardware identifiers to which this role applies.  If this is omitted, any hardware identifier will match.</t>
      <t>An indicator of whether or not this is a terminating delegation. (See <xref target="targets_role_delegations"/>.)</t>
      <t>A list of the roles to which this delegation applies. Each role needs to specify:
      <list style="symbols">
          <t>A name for the role (e.g., “supplier1-qa”)</t>
          <t>The key identifiers for each key this role uses</t>
          <t>A threshold of keys that must sign for this role</t>
        </list></t>
    </list></t>
</list></t>

<t>Note that <spanx style="strong">any</spanx> Targets metadata file stored on the Image repository may contain delegations, and these delegations can be in chains of arbitrary length.</t>

</section>
</section>
<section anchor="snapshot_meta" title="Snapshot metadata">

<t>The Snapshot metadata lists version numbers and filenames of all Targets metadata files. It protects against mix-and-match attacks if a delegated supplier key is compromised.</t>

<t>For each Targets metadata file on the repository, the Snapshot metadata SHALL contain the following information:</t>

<t><list style="symbols">
  <t>The filename and version number of the Targets metadata file.</t>
</list></t>

<t>The Snapshot metadata MAY also list the Root metadata filename and version number for the purpose of backwards compatibility. Historically, this was a requirement in TUF, but it is no longer required and does not provide a significant security benefit.</t>

</section>
<section anchor="timestamp_meta" title="Timestamp metadata">

<t>The Timestamp metadata SHALL contain the following information:</t>

<t><list style="symbols">
  <t>The filename and version number of the latest Snapshot metadata on the repository.</t>
  <t>One or more hashes of the Snapshot metadata file, along with the hashing function used.</t>
</list></t>

</section>
<section anchor="repo_mapping_meta" title="Repository mapping metadata">

<t>As described in the introduction to <xref target="design"/>, Uptane requires a Director repository and an Image repository. However, it is possible to have an Uptane-compliant implementation that has more than two repositories.</t>

<t>Repository mapping metadata informs a Primary ECU about which repositories to trust for images or image paths. <xref target="TAP-4"/> describes how to make use of more complex repository mapping metadata in order to have more than the two required repositories.</t>

<t>Repository mapping metadata, or the equivalent informational content, MUST be present on all Primary ECUs, and MUST contain the following information:</t>

<t><list style="symbols">
  <t>A list of repository names and one or more URLs at which the named repository can be accessed. At a minimum, this MUST include the Director and Image repositories.</t>
  <t>A list of mappings of image paths to repositories, each of which contains:
  <list style="symbols">
      <t>A list of image paths. Image paths MAY be expressed using wildcards, or by enumerating a list, or a combination of the two.</t>
      <t>A list of repositories that MUST provide signed Targets metadata for images stored at those paths.</t>
    </list></t>
</list></t>

<t>For example, in the most basic Uptane case, the repository mapping metadata would contain:</t>

<t><list style="symbols">
  <t>The name and URL of the Director repository.</t>
  <t>The name and URL of the Image repository.</t>
  <t>A single mapping indicating that all images (<spanx style="verb">*</spanx>) MUST be signed by both the Director and Image repository.</t>
</list></t>

<t>Note that the metadata need not be in the form of a metadata file. For example, in the basic case where there is only one Director and one Image repository, and all images need to have signed metadata from both repositories, it would be sufficient to have a configuration file with URLs for the two repositories and a client that always checks for metadata matches between them. In this case, no explicit mapping would be defined, because the mapping is defined as part of the Uptane client implementation.</t>

<t>The <spanx style="emph">Uptane Deployment Best Practices</spanx> document (<xref target="DEPLOY"/>) provides more guidance on how to implement repository mapping metadata for more complex use cases. It also discusses strategies for updating repository mapping metadata, if required.</t>

</section>
<section anchor="metadata_filename_rules" title="Rules for filenames in repositories and metadata">

<t>There is a difference between the filename in a metadata file or an ECU, and the filename on a repository. This difference exists in order to avoid race conditions, where metadata and images are read from, and written to, at the same time. For more details, the reader should read the TUF specification <xref target="TUF-spec"/> and PEP 458 <xref target="PEP-458"/>.</t>

<t>Unless stated otherwise, all files SHALL be written to repositories in accordance with the following two rules:</t>

<t><list style="numbers">
  <t>Metadata filenames SHALL be qualified with version numbers. If a metadata file A is specified as FILENAME.EXT in another metadata file B, then it SHALL be written as VERSION.FILENAME.EXT, where VERSION is A’s version number, as defined in <xref target="common_metadata"/>, with one exception: If the version number of the Timestamp metadata file might not be known in advance by a client, it MAY be read from, and written to, a repository using a filename without a version number qualification, i.e., FILENAME.EXT.</t>
  <t>If an image is specified in a Targets metadata file as FILENAME.EXT, it SHALL be written to the repository as HASH.FILENAME.EXT, where HASH is one of the hash digests of the file, as specified in <xref target="targets_images_meta"/>. The file MUST be written to the repository using <spanx style="emph">n</spanx> different filenames, one for each hash digest listed in its corresponding Targets metadata.</t>
</list></t>

<t>For example:</t>

<t><list style="symbols">
  <t>The version number of the Snapshot metadata file is 61, and its filename in the Timestamp metadata is <spanx style="emph">snapshot.json</spanx>. The filename on the repository will be <spanx style="emph">61.snapshot.json</spanx>.</t>
  <t>There is an image with the <spanx style="emph">filename acme_firmware.bin</spanx> specified in the Targets metadata, with a SHA3-256 of <spanx style="emph">aaaa</spanx> and a SHA-512/224 of <spanx style="emph">bbbb</spanx>. It will have two filenames on the repository: <spanx style="emph">aaaa.acme_firmware.bin</spanx> and <spanx style="emph">bbbb.acme_firmware.bin</spanx>.</t>
</list></t>

</section>
</section>
<section anchor="server-repository-implementation-requirements" title="Server / repository implementation requirements">

<t>An Uptane implementation SHALL make the following services available to vehicles:</t>

<t><list style="symbols">
  <t>Image repository</t>
  <t>Director repository</t>
</list></t>

<t>Additionally, an Uptane implementation requires ECUs to have a secure way to know the current time.</t>

<section anchor="image-repository" title="Image repository">

<t>The Image repository exists to allow an OEM and/or its suppliers to upload images and their associated metadata. It makes these images and their metadata available to vehicles. The Image repository is designed to be primarily controlled by human actors, and updated relatively infrequently.</t>

<t>The Image repository SHALL expose an interface permitting the download of metadata and images. This interface SHOULD be public.</t>

<t>The Image repository SHALL require authorization for writing metadata and images.</t>

<t>The Image repository SHALL provide a method for authorized users to upload images and their associated metadata. It SHALL check that a user writing metadata and images is authorized to do so for that specific image by checking the chain of delegations as described in <xref target="delegations_meta"/>.</t>

<t>The Image repository SHALL implement storage which permits authorized users to write an image file using a unique filename, and later read the same file using the same name. It MAY use any filesystem, key-value store, or database that fulfills this requirement.</t>

<t>The Image repository MAY require authentication for read access.</t>

</section>
<section anchor="director_repository" title="Director repository">

<t>The Director repository instructs ECUs as to which images should be installed by producing signed metadata on demand. Unlike the Image repository, it is mostly controlled by automated, online processes. It also consults a private inventory database containing information on vehicles, ECUs, and software revisions.</t>

<t>The Director repository SHALL expose an interface for Primaries to upload vehicle version manifests (<xref target="vehicle_version_manifest"/>) and download metadata. This interface SHOULD be public.
The Director MAY encrypt images for ECUs that require them, either by encrypting on-the-fly or by storing encrypted images on the repository.</t>

<t>The Director repository SHALL implement storage which permits an automated service to write generated metadata files. It MAY use any filesystem, key-value store, or database that fulfills this requirement.</t>

<section anchor="directing-installation-of-images-on-vehicles" title="Directing installation of images on vehicles">

<t>A Director repository MUST conform to the following six-step process for directing the installation of software images on a vehicle.</t>

<t><list style="numbers">
  <t>The Director SHOULD first identify the vehicle. This MAY be done when the Director receives a vehicle version manifest sent by a Primary (as described in <xref target="construct_manifest_primary"/>), decodes the manifest, and determines the unique vehicle identifier. Additionally, the Director MAY utilize other mechanisms to uniquely identify a vehicle (e.g., 2-way TLS with unique client certificates).</t>
  <t>Using the vehicle identifier, the Director queries its inventory database (as described in <xref target="inventory_db"/>) for relevant information about each ECU in the vehicle.</t>
  <t>The Director SHALL check the manifest for accuracy compared to the information in the inventory database. If any of the required checks fail, the Director MAY drop the request. An implementer MAY make additional checks if desired. At a minimum, the Director SHALL check the following:
  <list style="symbols">
      <t>Each ECU recorded in the inventory database is also represented in the manifest.</t>
      <t>The signature of the manifest matches the ECU key of the Primary that sent it.</t>
      <t>The signature of each Secondary’s contribution to the manifest matches the ECU key of that Secondary.</t>
    </list></t>
  <t>The Director SHOULD check that the nonce or counter in each ECU version report has not been used before to prevent a replay of the ECU version report. If the nonce or counter is reused the Director SHOULD drop the request.</t>
  <t>The Director extracts information about currently installed images from the vehicle version manifest. Using this information, it determines if the vehicle is already up-to-date, and if not, determines a set of images that should be installed. The exact process by which this determination takes place is out of scope for this Standard. However, the Director MUST take into account <spanx style="emph">dependencies</spanx> and <spanx style="emph">conflicts</spanx> between images and SHOULD consult well-established techniques for dependency resolution.</t>
  <t>The Director MAY encrypt images for ECUs that require it.</t>
  <t>The Director generates new metadata representing the desired set of images to be installed on the vehicle, based on the dependency resolution in step 4. This includes Targets (<xref target="targets_meta"/>), Snapshot (<xref target="snapshot_meta"/>), and Timestamp (<xref target="timestamp_meta"/>) metadata. It then sends this metadata to the Primary as described in <xref target="download_meta_primary"/>.</t>
</list></t>

</section>
<section anchor="inventory_db" title="Inventory Database">

<t>The Director SHALL use a private inventory database to store information about ECUs and vehicles. An implementer MAY use any durable database for this purpose.</t>

<t>The inventory database MUST record the following pieces of information:</t>

<t><list style="symbols">
  <t>Per vehicle:
  <list style="symbols">
      <t>A unique identifier (such as a VIN)</t>
    </list></t>
  <t>Per ECU:
  <list style="symbols">
      <t>A unique identifier (such as a serial number)</t>
      <t>The vehicle identifier the ECU is associated with</t>
      <t>An ECU key (symmetric or asymmetric; for asymmetric keys, only the public part SHOULD be stored)</t>
      <t>The ECU key identifier (as defined in <xref target="common_metadata"/>)</t>
      <t>Whether the ECU is a Primary or a Secondary</t>
    </list></t>
</list></t>

<t>The inventory database MAY record other information about ECUs and vehicles. It SHOULD record a hardware identifier for each ECU to protect against the possibility of directing the ECU to install incompatible firmware.</t>

</section>
</section>
</section>
<section anchor="in-vehicle-implementation-requirements" title="In-vehicle implementation requirements">

<t>An Uptane-compliant ECU SHALL be able to download and verify image metadata and image binaries before installing a new image and MUST have a secure way of verifying the current time, or a sufficiently recent attestation of the time.</t>

<t>All ECUs SHALL monitor the download speed of image metadata and image binaries to detect and respond to a slow retrieval attack. If the download is slower than a pre-defined threshold, the ECU SHOULD send an alert to the Director repository, for example as part of the next vehicle version manifest.</t>

<t>Each ECU receiving over-the-air updates in a vehicle is either a Primary or a Secondary ECU. A Primary ECU collects and delivers to the Director vehicle manifests (<xref target="vehicle_version_manifest"/>) that contain information about which images have been installed on ECUs in the vehicle. It also verifies the time, and downloads and verifies the latest metadata and images for itself and for its Secondaries. A Secondary ECU verifies the time, and downloads and verifies the latest metadata and images for itself from its associated Primary ECU. It also sends signed information about its installed images to its associated Primary.</t>

<t>All ECUs MUST verify image metadata as specified in <xref target="metadata_verification"/> before installing an image or making it available to other ECUs. A Primary ECU MUST perform full verification (<xref target="full_verification"/>). A Secondary ECU SHOULD perform full verification if possible. If a Secondary cannot perform full verification, it SHALL, at the very least, perform partial verification. In addition, it MAY also perform some steps from the full verification process. See the <spanx style="emph">Uptane Deployment Best Practices</spanx> document (<xref target="DEPLOY"/>) for a discussion of how to choose between partial and full verification.</t>

<t>ECUs MUST have a secure source of time. An OEM/Uptane implementer MAY use any external source of time that is demonstrably secure. The <spanx style="emph">Uptane Deployment Best Practices</spanx> document (<xref target="DEPLOY"/>) describes one way to implement an external time server to cryptographically attest time, as well as the security properties required.</t>

<section anchor="build-time-prerequisite-requirements-for-ecus" title="Build-time prerequisite requirements for ECUs">

<t>For an ECU to be capable of receiving Uptane-secured updates, it MUST have the following data provisioned at the time it is manufactured or installed in the vehicle:</t>

<t><list style="numbers">
  <t>A sufficiently recent copy of required Uptane metadata at the time of manufacture or install. This is necessary for the ECU to authenticate that the remote repository is legitimate when it first downloads metadata in the field. See <spanx style="emph">Uptane Deployment Best Practices</spanx> (<xref target="DEPLOY"/>) for more information.
  <list style="symbols">
      <t>Partial verification Secondary ECUs MUST have the Root and Targets metadata from the Director repository (to reduce the scope of rollback and replay attacks). These ECUs MAY also have metadata from other roles or the Image repository if they will be used by the Secondary.</t>
      <t>Full verification ECUs MUST have a complete set of metadata (Root, Targets, Snapshot, and Timestamp) from both repositories (to prevent rollback and replay attacks), as well as the repository mapping metadata (<xref target="repo_mapping_meta"/>). Delegations are not required.</t>
    </list></t>
  <t>The current time, or a secure attestation of a sufficiently recent time.</t>
  <t>An <spanx style="strong">ECU key</spanx>. This is a private key, unique to the ECU, used to sign ECU version reports and decrypt images. An ECU key MAY be either a symmetric key or an asymmetric key. If it is an asymmetric key, there MAY be separate keys for encryption and signing. For the purposes of this Standard, the set of private keys that an ECU uses is referred to as the ECU key (singular), even if it is actually multiple keys used for different purposes. Note that while signing keys are required to be unique to the ECU to avoid replay attacks, the secret keys used to decrypt images need not be unique.</t>
</list></t>

</section>
<section anchor="what-the-primary-does" title="What the Primary does">

<t>A Primary downloads, verifies, and distributes the latest time, metadata, and images. To do so, it SHALL perform the following seven steps:</t>

<t><list style="numbers">
  <t>Construct and send vehicle version manifest (<xref target="construct_manifest_primary"/>)</t>
  <t>Download and check current time (<xref target="check_time_primary"/>)</t>
  <t>Download and verify metadata (<xref target="download_meta_primary"/>)</t>
  <t>Download and verify images (<xref target="download_images_primary"/>)</t>
  <t>OPTIONAL: Send latest time to Secondaries (<xref target="send_time_primary"/>)</t>
  <t>Send metadata to Secondaries (<xref target="send_metadata_primary"/>)</t>
  <t>Send images to Secondaries (<xref target="send_images_primary"/>)</t>
</list></t>

<t>Note that the subsequent sections concerning requirements for a Primary do not prohibit implementing Primary capabilities on an ECU that does not communicate directly with the Uptane repositories. This allows for implementations to have multiple ECUs within the vehicle performing functions equivalent to a Primary.
If multiple such Primaries are included within a vehicle, each Primary SHOULD have a designated set of Secondaries and each Secondary SHALL have at least one Primary responsible for providing its updates</t>

<section anchor="construct_manifest_primary" title="Construct and send vehicle version manifest">

<t>The Primary SHALL build a <spanx style="emph">vehicle version manifest</spanx> as described in <xref target="vehicle_version_manifest"/>.</t>

<t>Once the complete manifest is built, the Primary MAY send the manifest to the Director repository. However, it is not strictly required that the Primary send the manifest until step three. If permitted by the implementation, a Primary MAY send only a diff of the manifest to save bandwidth. If an implementation permits diffs, the Director SHOULD have a way to request a full manifest.</t>

<t>Secondaries MAY send their version report at any time so that it is already stored on the Primary when it wishes to check for updates. Alternatively, the Primary MAY request a version report from each Secondary at the time of the update check.</t>

<section anchor="vehicle_version_manifest" title="Vehicle version manifest">

<t>The vehicle version manifest is a metadata structure that MUST contain the following information:</t>

<t><list style="symbols">
  <t>An attribute containing the signature(s) of the payload, each specified by:
  <list style="symbols">
      <t>The public key identifier of the key being used to sign the payload</t>
      <t>The signing method (i.e., ed25519, rsassa-pss, etc.)</t>
      <t>A hash of the payload to be signed</t>
      <t>The hashing function used (i.e., SHA3-256, SHA-512/224, etc.)</t>
      <t>The signature of the hash</t>
    </list></t>
  <t>A payload representing the installed versions of each software image on the vehicle. This payload SHALL contain:
  <list style="symbols">
      <t>The vehicle’s unique identifier (e.g., the VIN)</t>
      <t>The Primary ECU’s unique identifier (e.g., the serial number)</t>
      <t>A list of ECU version reports as specified in <xref target="version_report"/></t>
    </list></t>
</list></t>

<t>Note that one of the ECU version reports should be the version report for the Primary itself.</t>

</section>
<section anchor="version_report" title="ECU version report">

<t>An ECU version report is a metadata structure that MUST contain the following information:</t>

<t><list style="symbols">
  <t>An attribute containing the signature(s) of the payload, each specified by:
  <list style="symbols">
      <t>The public key identifier of the key being used to sign the payload</t>
      <t>The signing method (i.e., ed25519, rsassa-pss, etc.)</t>
      <t>A hash of the payload to be signed</t>
      <t>The hashing function used (i.e., SHA3-256, SHA-512/224, etc.)</t>
      <t>The signature of the hash</t>
    </list></t>
  <t>A payload containing:
  <list style="symbols">
      <t>The ECU’s unique identifier (e.g., the serial number)</t>
      <t>The filename, length, and hashes of its currently installed image (i.e., the non-custom Targets metadata for this particular image)</t>
      <t>An indicator of any detected security attack</t>
      <t>The latest time the ECU can verify at the time this version report was generated</t>
      <t>A nonce or counter to prevent a replay of the ECU version report. This value MUST change each update cycle. It MAY be a cryptographic nonce used with a time server as described in <spanx style="emph">Uptane Deployment Best Practices</spanx>  (<xref target="DEPLOY"/>).</t>
    </list></t>
</list></t>

</section>
</section>
<section anchor="check_time_primary" title="Download and check current time">

<t>The Primary SHALL load the current time from a secure source.</t>

</section>
<section anchor="download_meta_primary" title="Download and verify metadata">

<t>The Primary SHALL download metadata for all targets and perform a full verification on it as specified in <xref target="full_verification"/>.</t>

</section>
<section anchor="download_images_primary" title="Download and verify images">

<t>The Primary SHALL download and verify images for itself and for all of its associated Secondaries. Images SHALL be verified by checking that the hash of the image file matches the hash specified in the Director’s Targets metadata for that image.</t>

<t>There may be several different filenames that all refer to the same image binary, as described in <xref target="metadata_filename_rules"/>. If the Primary has received multiple hashes for a given image binary via the Targets role (see <xref target="targets_images_meta"/>) then it SHALL verify every hash for this image even though the image is identified by a single hash as part of its filename.</t>

</section>
<section anchor="send_time_primary" title="Send latest time to Secondaries">

<t>Unless the Secondary ECU has its own way of verifying the time or does not have the capacity to verify a time message, the Primary is CONDITIONALLY REQUIRED to send the time to each ECU. The Secondary will verify the time message, then overwrite its current time with the received time.</t>

</section>
<section anchor="send_metadata_primary" title="Send metadata to Secondaries">

<t>The Primary SHALL send its latest downloaded metadata to all of its associated Secondaries. The metadata it sends to each Secondary MUST include all of the metadata required for verification on that Secondary. For full verification Secondaries, this includes the metadata for all four roles from both repositories, plus any delegated Targets metadata files the Secondary will recurse through to find the proper delegation. For partial verification Secondaries, this MAY include fewer metadata files; at a minimum, it includes only the Targets metadata file from the Director repository.</t>

<t>The Primary SHOULD determine the minimal set of metadata files to send to each Secondary by performing delegation resolution as described in <xref target="full_verification"/>.</t>

<t>Each Secondary SHALL store the latest copy of all metadata required for its own verification.</t>

</section>
<section anchor="send_images_primary" title="Send images to Secondaries">

<t>The Primary SHALL send the latest image to each of its associated Secondaries that have sufficient storage to receive it.</t>

<t>For Secondaries without sufficient storage to store a copy of the image, the Primary SHOULD wait for a request from the Secondary to stream the new image file to it. The Secondary will send the request once it has verified the metadata sent in the previous step.</t>

</section>
</section>
<section anchor="installing-images-on-primary-or-secondary-ecus" title="Installing images on Primary or Secondary ECUs">

<t>An ECU SHALL perform the following steps when attempting to install a new image:</t>

<t><list style="numbers">
  <t>Verify latest attested time. This is optional if the ECU does not have the capacity to verify a time message (<xref target="verify_time"/>)</t>
  <t>Verify metadata (<xref target="verify_metadata"/>)</t>
  <t>Download latest image (<xref target="download_image"/>)</t>
  <t>Verify image (<xref target="verify_image"/>)</t>
  <t>Install image (<xref target="install_image"/>)</t>
  <t>Create and send version report (<xref target="create_version_report"/>)</t>
</list></t>

<section anchor="verify_time" title="Load and verify the latest attested time">

<t>IF the ECU has the capability to verify a time message, the ECU is CONDITIONALLY REQUIRED to load and verify the current time, or the most recent securely attested time.</t>

</section>
<section anchor="verify_metadata" title="Verify metadata">

<t>The ECU SHALL verify the latest downloaded metadata (<xref target="metadata_verification"/>) using either full or partial verification. If the metadata verification fails for any reason, the ECU SHALL jump to the final step (<xref target="create_version_report"/>).</t>

</section>
<section anchor="download_image" title="Download latest image">

<t>If the ECU has limited secondary storage, i.e., insufficient buffer storage to temporarily store the latest image before installing it, it SHALL download the latest image from the Primary. (If the ECU has sufficient secondary storage, it will already have the latest image in its secondary storage as specified in <xref target="send_images_primary"/>, and should skip to the next step.) The ECU MAY first create a backup of its previous working image and store it elsewhere (e.g., the Primary).</t>

<t>The filename used to identify the latest known image (i.e., the file to request from the Primary) SHALL be determined as follows:</t>

<t><list style="numbers">
  <t>Load the Targets metadata file from the Director repository.</t>
  <t>Find the Targets metadata associated with this ECU identifier.</t>
  <t>Construct the Image filename using the rule in <xref target="metadata_filename_rules"/>, or use the download URL specified in the Director metadata.</t>
  <t>If there is no Targets metadata about this image, abort the update cycle and report that there is no such image. Additionally, in the case of failure, the ECU SHALL retain its previous Targets metadata instead of using the new Targets metadata. Otherwise, download the image (up to the number of bytes specified in the Targets metadata) and verify it according to <xref target="verify_image"/>.</t>
</list></t>

<t>When the Primary responds to the download request, the ECU SHALL overwrite its current image with the downloaded image from the Primary.</t>

<t>If any part of this step fails, the ECU SHALL jump to the final step (<xref target="create_version_report"/>).</t>

</section>
<section anchor="verify_image" title="Verify image">

<t>The ECU SHALL verify that the latest image matches the latest metadata as follows:</t>

<t><list style="numbers">
  <t>Load the latest Targets metadata file from the Director.</t>
  <t>Find the Targets metadata associated with this ECU identifier.</t>
  <t>Check that the hardware identifier in the metadata matches the ECU’s hardware identifier.</t>
  <t>Check that the image filename is valid for this ECU. This MAY be a comparison against a wildcard path, which restricts the ECUs to which a delegation will apply.</t>
  <t>Check that the release counter of the image in the previous metadata, if it exists, is less than or equal to the release counter in the latest metadata.</t>
  <t>If the image is encrypted, decrypt the image with a decryption key to be chosen as follows:
  <list style="symbols">
      <t>If the ECU key is a symmetric key, the ECU SHALL use the ECU key for image decryption.</t>
      <t>If the ECU key is asymmetric, the ECU SHALL check the Targets metadata for an encrypted symmetric key. If such a key is found, the ECU SHALL decrypt the symmetric key using its ECU key, and use the decrypted symmetric key for image decryption.</t>
      <t>If the ECU key is asymmetric and there is no symmetric key in the Targets metadata, the ECU SHALL use its ECU key for image decryption.</t>
    </list></t>
  <t>Check that all hashes listed in the metadata match the corresponding hashes of the image.</t>
</list></t>

<t>If the ECU has enough secondary storage capacity to store the image, the checks SHOULD be performed on the image in secondary storage before it is installed.</t>

<t>When checking hashes, the ECU SHALL additionally check that the length of the image matches the length listed in the metadata.</t>

<t>NOTE: See <xref target="DEPLOY"/> for guidance on how to deal with Secondary ECU failures for ECUs that have limited secondary storage.</t>

<t>If any step fails, the ECU SHALL jump to the final step (<xref target="create_version_report"/>).</t>

</section>
<section anchor="install_image" title="Install image">

<t>The ECU SHALL attempt to install the update. This installation SHOULD occur at a time when all pre-conditions are met. These pre-conditions MAY include ensuring the vehicle is in a safe environment for install (e.g., the vehicle is parked when updating a specific ECU). Another pre-condition MAY include ensuring the ECU has a backup of its current image and metadata in case the current installation fails.</t>

</section>
<section anchor="create_version_report" title="Create and send version report">

<t>The ECU SHALL create a version report as described in <xref target="version_report"/>, and send it to the Primary (or simply save it to disk, if the ECU is a Primary). The Primary SHOULD write the version reports it receives to disk and associate them with the Secondaries that sent them.</t>

</section>
</section>
<section anchor="metadata_verification" title="Metadata verification procedures">

<t>A Primary ECU MUST perform full verification of metadata. A Secondary ECU SHOULD perform full verification of metadata. If a Secondary cannot perform full verification, it SHALL, at the very least, perform partial verification.</t>

<t>If a step in the following workflows does not succeed (e.g., the update is aborted because a new metadata file was not signed), an ECU SHOULD still be able to update again in the future. Errors raised during the update process SHOULD NOT leave ECUs in an unrecoverable state.</t>

<section anchor="partial_verification" title="Partial verification">

<t>In order to perform partial verification, an ECU SHALL perform the following steps:</t>

<t><list style="numbers">
  <t>Load and verify the current time or the most recent securely attested time.</t>
  <t>Download and check the Targets metadata file from the Director repository, following the procedure in <xref target="check_targets"/>.</t>
</list></t>

<t>Note that this verification procedure is the smallest set of Uptane checks permissible for an Uptane Secondary ECU. An ECU MAY additionally implement more metadata checks.</t>

<t>For example, an ECU MAY also fetch and verify Root metadata from the Director (following the procedure in <xref target="check_root"/>) before checking Targets metadata. Performing this additional check would provide the ECU with a secure way to receive and validate a rotation of the Director’s Targets key.</t>

<t>See <xref target="DEPLOY"/> for more discussion on this topic.</t>

</section>
<section anchor="full_verification" title="Full verification">

<t>Full verification of metadata means that the ECU checks that the Targets metadata about images from the Director repository matches the Targets metadata about the same images from the Image repository. This provides resilience to a key compromise in the system.</t>

<t>Full verification MUST be performed by Primary ECUs and SHOULD be performed by Secondary ECUs. In the following instructions, whenever an ECU is directed to download metadata, it applies only to Primary ECUs.</t>

<t>Before starting full verification, the repository mapping metadata MUST be consulted to determine where to download metadata from. This procedure assumes the basic Uptane case: there are only two repositories (Director and Image), and all image paths are required to be signed by both repositories. If a more complex repository layout is being used, refer to <xref target="DEPLOY"/> for guidance on how to determine where metadata should be downloaded from.</t>

<t>In order to perform full verification, an ECU SHALL perform the following steps:</t>

<t><list style="numbers">
  <t>Load and verify the current time or the most recent securely attested time.</t>
  <t>Download and check the Root metadata file from the Director repository, following the procedure in <xref target="check_root"/>.</t>
  <t>Download and check the Timestamp metadata file from the Director repository, following the procedure in <xref target="check_timestamp"/>.</t>
  <t>Check the previously downloaded Snapshot metadata file from the Directory repository (if available). If the hashes and version number of that file match the hashes and version number listed in the new Timestamp metadata, there are no new updates and the verification process MAY be stopped and considered complete. Otherwise, download and check the Snapshot metadata file from the Director repository, following the procedure in <xref target="check_snapshot"/>.</t>
  <t>Download and check the Targets metadata file from the Director repository, following the procedure in <xref target="check_targets"/>.</t>
  <t>If the Targets metadata from the Directory repository indicates that there are no new targets that are not already currently installed, the verification process MAY be stopped and considered complete. Otherwise, download and check the Root metadata file from the Image repository, following the procedure in <xref target="check_root"/>.</t>
  <t>Download and check the Timestamp metadata file from the Image repository, following the procedure in <xref target="check_timestamp"/>.</t>
  <t>Check the previously downloaded Snapshot metadata file from the Image repository (if available). If the hashes and version number of that file match the hashes and version number listed in the new Timestamp metadata, the ECU MAY skip to the last step. Otherwise, download and check the Snapshot metadata file from the Image repository, following the procedure in <xref target="check_snapshot"/>.</t>
  <t>Download and check the top-level Targets metadata file from the Image repository, following the procedure in <xref target="check_targets"/>.</t>
  <t>Verify that Targets metadata from the Director and Image repositories match. A Primary ECU MUST perform this check on metadata for all images listed in the Targets metadata file from the Director repository downloaded in step 6. A Secondary ECU MAY elect to perform this check only on the metadata for the image it will install. (That is, the image metadata from the Director that contains the ECU identifier of the current ECU.) To check that the metadata for an image matches, complete the following procedure:
  <list style="numbers">
      <t>Locate and download a Targets metadata file from the Image repository that contains an image with exactly the same filename listed in the Director metadata, following the procedure in <xref target="resolve_delegations"/>.</t>
      <t>Check that the Targets metadata from the Image repository matches the Targets metadata from the Director repository:
      <list style="numbers">
          <t>Check that the non-custom metadata (i.e., length and hashes) of the unencrypted or encrypted image are the same in both sets of metadata. Note: the Primary is responsible for validating encrypted images and associated metadata. The target ECU (Primary or Secondary) is responsible for validating the unencrypted image and associated metadata.</t>
          <t>Check that all MUST match custom metadata (e.g., hardware identifier and release counter) are the same in both sets of metadata.</t>
          <t>Check that the release counter in the previous Targets metadata file is less than or equal to the release counter in this Targets metadata file.</t>
        </list></t>
    </list></t>
</list></t>

<t>If any step fails, the ECU MUST return an error code indicating the failure. If a check for a specific type of security attack fails (i.e., rollback, freeze, arbitrary software, etc.), the ECU SHOULD return an error code that indicates the type of attack.</t>

</section>
<section anchor="check_root" title="How to check Root metadata">

<t>To properly check Root metadata, an ECU SHOULD:</t>

<t><list style="numbers">
  <t>Load the previous Root metadata file.</t>
  <t>Update to the latest Root metadata file.
  <list style="numbers">
      <t>Let N denote the version number of the latest Root metadata file (which at first could be the same as the previous Root metadata file).</t>
      <t>Try downloading a new version N+1 of the Root metadata file, up to some X number of bytes. The value for X is set by the implementer. For example, X may be tens of kilobytes. The filename used to download the Root metadata file is of the fixed form VERSION_NUMBER.FILENAME.EXT (e.g., 42.root.json). If this file is not available, the current Root metadata file is the latest; continue with step 3.</t>
      <t>Version N+1 of the Root metadata file MUST have been signed by the following: (1) a threshold of unique keys specified in the latest Root metadata file (version N), and (2) a threshold of unique keys specified in the new Root metadata file being validated (version N+1). If version N+1 is not signed as required, discard it, abort the update cycle, and report the signature failure. On the next update cycle, begin at version N of the Root metadata file. (Checks for an arbitrary software attack.)</t>
      <t>The version number of the latest Root metadata file (version N) must be less than or equal to the version number of the new Root metadata file (version N+1). Effectively, this means checking that the version number signed in the new Root metadata file is indeed N+1. If the version of the new Root metadata file is less than the latest metadata file, discard it, abort the update cycle, and report the rollback attack. On the next update cycle, begin at step 1 and version N of the Root metadata file. (Checks for a rollback attack.)</t>
      <t>Set the latest Root metadata file to the new Root metadata file.</t>
      <t>Repeat steps 2.1 to 2.6.</t>
    </list></t>
  <t>Check that the current (or latest securely attested) time is lower than the expiration timestamp in the latest Root metadata file. (Checks for a freeze attack.)</t>
  <t>If the Timestamp and/or Snapshot keys have been rotated, delete the previous Timestamp and Snapshot metadata files. (Checks for recovery from fast-forward attacks <xref target="MERCURY"/>.)</t>
</list></t>

</section>
<section anchor="check_timestamp" title="How to check Timestamp metadata">

<t>To properly check Timestamp metadata, an ECU SHOULD:</t>

<t><list style="numbers">
  <t>Download up to Y number of bytes. The value for Y is set by the implementer. For example, Y may be tens of kilobytes. The filename used to download the Timestamp metadata file is of the fixed form FILENAME.EXT (e.g., timestamp.json).</t>
  <t>Check that it has been signed by the threshold of unique keys specified in the latest Root metadata file. If the new Timestamp metadata file is not properly signed, discard it, abort the update cycle, and report the signature failure. (Checks for an arbitrary software attack.)</t>
  <t>Check that the version number of the previous Timestamp metadata file, if any, is less than or equal to the version number of this Timestamp metadata file. If the new Timestamp metadata file is older than the trusted Timestamp metadata file, discard it, abort the update cycle, and report the potential rollback attack. (Checks for a rollback attack.)</t>
  <t>Check that the current (or latest securely attested) time is lower than the expiration timestamp in this Timestamp metadata file. If the new Timestamp metadata file has expired, discard it, abort the update cycle, and report the potential freeze attack. (Checks for a freeze attack.)</t>
</list></t>

</section>
<section anchor="check_snapshot" title="How to check Snapshot metadata">

<t>To properly check Snapshot metadata, an ECU SHOULD:</t>

<t><list style="numbers">
  <t>Download up to the number of bytes specified in the Timestamp metadata file, constructing the metadata filename as defined in <xref target="metadata_filename_rules"/>.</t>
  <t>The hashes and version number of the new Snapshot metadata file MUST match the hashes and version number listed in the Timestamp metadata. If the hashes and version number do not match, discard the new Snapshot metadata, abort the update cycle, and report the failure. (Checks for a mix-and-match attack.)</t>
  <t>Check that it has been signed by the threshold of unique keys specified in the latest Root metadata file. If the new Snapshot metadata file is not signed as required, discard it, abort the update cycle, and report the signature failure. (Checks for an arbitrary software attack.)</t>
  <t>Check that the version number of the previous Snapshot metadata file, if any, is less than or equal to the version number of this Snapshot metadata file. If this Snapshot metadata file is older than the previous Snapshot metadata file, discard it, abort the update cycle, and report the potential rollback attack. (Checks for a rollback attack.)</t>
  <t>Check that the version number listed by the previous Snapshot metadata file for each Targets metadata file is less than or equal to its version number in this Snapshot metadata file. If this condition is not met, discard the new Snapshot metadata file, abort the update cycle, and report the failure. (Checks for a rollback attack.)</t>
  <t>Check that each Targets metadata filename listed in the previous Snapshot metadata file is also listed in this Snapshot metadata file. If this condition is not met, discard the new Snapshot metadata file, abort the update cycle, and report the failure. (Checks for a rollback attack.)</t>
  <t>Check that the current (or latest securely attested) time is lower than the expiration timestamp in this Snapshot metadata file. If the new Snapshot metadata file is expired, discard it, abort the update cycle, and report the potential freeze attack. (Checks for a freeze attack.)</t>
</list></t>

</section>
<section anchor="check_targets" title="How to check Targets metadata">

<t>To properly check Targets metadata, an ECU SHOULD:</t>

<t><list style="numbers">
  <t>Download up to Z number of bytes, constructing the metadata filename as defined in <xref target="metadata_filename_rules"/>. The value for Z is set by the implementer. For example, Z may be tens of kilobytes.</t>
  <t>The version number of the new Targets metadata file MUST match the version number listed in the latest Snapshot metadata. If the version number does not match, discard it, abort the update cycle, and report the failure. (Checks for a mix-and-match attack.) This step MAY be skipped when checking Targets metadata on a partial verification ECU, as these ECUs might not have Snapshot metadata.</t>
  <t>Check that the Targets metadata has been signed by the threshold of unique keys specified in the relevant metadata file. (Checks for an arbitrary software attack.):
  <list style="numbers">
      <t>If checking top-level Targets metadata, the threshold of keys is specified in the Root metadata.</t>
      <t>If checking delegated Targets metadata, the threshold of keys is specified in the Targets metadata file that delegated authority to this role.</t>
    </list></t>
  <t>Check that the version number of the previous Targets metadata file, if any, is less than or equal to the version number of this Targets metadata file. (Checks for a rollback attack.)</t>
  <t>Check that the current (or latest securely attested) time is lower than the expiration timestamp in this Targets metadata file. (Checks for a freeze attack.)</t>
  <t>If checking Targets metadata from the Director repository, verify that there are no delegations.</t>
  <t>If checking Targets metadata from the Director repository, check that no ECU identifier is represented more than once.</t>
  <t>If checking Targets metadata from the Director repository, and the ECU performing the verification is the Primary ECU, check that all listed ECU identifiers correspond to ECUs that are actually present in the vehicle.</t>
</list></t>

</section>
<section anchor="resolve_delegations" title="How to resolve delegations">

<t>To properly check Targets metadata for an image, an ECU MUST locate the metadata file(s) for the role (or roles) that have the authority to sign the image. This metadata might be located in the top-level Targets metadata, but it may also be delegated to another role or to multiple roles. Therefore, all delegations MUST be resolved using the following recursive procedure, beginning with the top-level Targets metadata file.</t>

<t><list style="numbers">
  <t>Download and check the current metadata file, following the procedure in <xref target="check_targets"/>. If the file cannot be loaded, or if any verification step fails, abort the delegation resolution, and indicate that image metadata cannot be found because of a missing or invalid role.</t>
  <t>If the current metadata file contains signed metadata about the image, end the delegation resolution and return the metadata to be checked.</t>
  <t>If the current metadata file was reached via a terminating delegation and does not contain signed metadata about the image, abort the delegation resolution for this image and return an error indicating that image metadata could not be found.</t>
  <t>Search the list of delegations, in listed order. For each delegation:
  <list style="numbers">
      <t>Check if the delegation applies to the image being processed. For the delegation to apply, it MUST include the hardware identifier of the target, and the target name MUST match one of the delegation’s image paths. If either of these tests fail, move on to the next delegation in the list.</t>
      <t>If the delegation is a multi-role delegation, follow the procedure described in <xref target="multirole_delegations"/>. If the multi-role delegation is terminating and no valid image metadata is found, abort the delegation resolution and return an error indicating that image metadata could not be found.</t>
      <t>If the delegation is a normal delegation, perform delegation resolution, starting at step 1. Note that this may recurse an arbitrary number of levels deep. If a delegation that applies to the image is found but no image metadata is found in the delegated roles or any of its sub-delegations, simply continue on with the next delegation in the list. The search is only completed or aborted if image metadata or a terminating delegation that applies to the image is found.</t>
    </list></t>
  <t>If the end of the list of delegations in the top-level metadata is reached without finding valid image metadata, return an error indicating that image metadata could not be found.</t>
</list></t>

</section>
<section anchor="multirole_delegations" title="Multi-role delegations">

<t>It is possible to delegate signing authority to multiple delegated roles as described in <xref target="TAP-3"/>. Each multi-role delegation effectively contains a list of ordinary delegations, plus a threshold of those roles that must be in agreement about the non-custom metadata for the image. All multi-role delegations MUST be resolved using the following procedure. Note that there may be sub-delegations inside multi-role delegations.</t>

<t><list style="numbers">
  <t>For each of the roles in the delegation, find and load the image metadata following the procedure in <xref target="resolve_delegations"/>.</t>
  <t>Inspect the non-custom part of the metadata loaded in step 1:
  <list style="numbers">
      <t>Locate all sets of roles that have agreeing (i.e., identical) non-custom metadata and “MUST match” custom metadata. Discard any set of roles with a size smaller than the threshold of roles that must be in agreement for this delegation.</t>
      <t>Check for a conflict. A conflict exists if there is more than one agreeing set of roles, yet each set has different metadata. If a conflict is found, choose and return the metadata from the set of roles which includes the earliest role in the multi-delegation list.</t>
      <t>If there is no conflict, check if there is any single set of roles with matching non-custom metadata. If there is, choose and return the metadata from this set.</t>
      <t>If no agreeing set can be found that meets the agreement threshold, return an error indicating that image metadata could not be found.</t>
    </list></t>
</list></t>

</section>
</section>
</section>
</section>


  </middle>

  <back>

    <references title='Normative References'>





<reference  anchor="RFC2119" target='https://www.rfc-editor.org/info/rfc2119'>
<front>
<title>Key words for use in RFCs to Indicate Requirement Levels</title>
<author initials='S.' surname='Bradner' fullname='S. Bradner'><organization /></author>
<date year='1997' month='March' />
<abstract><t>In many standards track documents several words are used to signify the requirements in the specification.  These words are often capitalized. This document defines these words as they should be interpreted in IETF documents.  This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t></abstract>
</front>
<seriesInfo name='BCP' value='14'/>
<seriesInfo name='RFC' value='2119'/>
<seriesInfo name='DOI' value='10.17487/RFC2119'/>
</reference>



<reference  anchor="RFC3647" target='https://www.rfc-editor.org/info/rfc3647'>
<front>
<title>Internet X.509 Public Key Infrastructure Certificate Policy and Certification Practices Framework</title>
<author initials='S.' surname='Chokhani' fullname='S. Chokhani'><organization /></author>
<author initials='W.' surname='Ford' fullname='W. Ford'><organization /></author>
<author initials='R.' surname='Sabett' fullname='R. Sabett'><organization /></author>
<author initials='C.' surname='Merrill' fullname='C. Merrill'><organization /></author>
<author initials='S.' surname='Wu' fullname='S. Wu'><organization /></author>
<date year='2003' month='November' />
<abstract><t>This document presents a framework to assist the writers of certificate policies or certification practice statements for participants within public key infrastructures, such as certification authorities, policy authorities, and communities of interest that wish to rely on certificates.  In particular, the framework provides a comprehensive list of topics that potentially (at the writer's discretion) need to be covered in a certificate policy or a certification practice statement.  This document supersedes RFC 2527.</t></abstract>
</front>
<seriesInfo name='RFC' value='3647'/>
<seriesInfo name='DOI' value='10.17487/RFC3647'/>
</reference>



<reference  anchor="RFC5198" target='https://www.rfc-editor.org/info/rfc5198'>
<front>
<title>Unicode Format for Network Interchange</title>
<author initials='J.' surname='Klensin' fullname='J. Klensin'><organization /></author>
<author initials='M.' surname='Padlipsky' fullname='M. Padlipsky'><organization /></author>
<date year='2008' month='March' />
<abstract><t>The Internet today is in need of a standardized form for the transmission of internationalized &quot;text&quot; information, paralleling the specifications for the use of ASCII that date from the early days of the ARPANET.  This document specifies that format, using UTF-8 with normalization and specific line-ending sequences.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='5198'/>
<seriesInfo name='DOI' value='10.17487/RFC5198'/>
</reference>


<reference anchor="NFC" target="https://www.unicode.org/reports/tr15/">
  <front>
    <title>Unicode Standard Annex #15: Unicode Normalization Forms</title>
    <author initials="M." surname="Davis">
      <organization></organization>
    </author>
    <author initials="M." surname="Duerst">
      <organization></organization>
    </author>
    <date year="2018" month="October"/>
  </front>
</reference>
<reference anchor="TAP-3" target="https://github.com/theupdateframework/taps/blob/d0818e580c322815a473520f2e8cc5f5eb8df499/tap3.md">
  <front>
    <title>The Update Framework TAP 3 - Multi-role delegations</title>
    <author initials="T.K." surname="Kuppusamy">
      <organization></organization>
    </author>
    <author initials="S." surname="Awwad">
      <organization></organization>
    </author>
    <author initials="E." surname="Cordell">
      <organization></organization>
    </author>
    <author initials="V." surname="Diaz">
      <organization></organization>
    </author>
    <author initials="J." surname="Moshenko">
      <organization></organization>
    </author>
    <author initials="J." surname="Cappos">
      <organization></organization>
    </author>
    <date year="2018" month="January" day="18"/>
  </front>
</reference>
<reference anchor="TAP-4" target="https://github.com/theupdateframework/taps/blob/2cb67d913ec19424d1e354b38f862886fbfd4105/tap4.md">
  <front>
    <title>The Update Framework TAP 4 - Multiple repository consensus on entrusted targets</title>
    <author initials="T.K." surname="Kuppusamy">
      <organization></organization>
    </author>
    <author initials="S." surname="Awwad">
      <organization></organization>
    </author>
    <author initials="E." surname="Cordell">
      <organization></organization>
    </author>
    <author initials="V." surname="Diaz">
      <organization></organization>
    </author>
    <author initials="J." surname="Moshenko">
      <organization></organization>
    </author>
    <author initials="J." surname="Cappos">
      <organization></organization>
    </author>
    <date year="2017" month="December" day="15"/>
  </front>
</reference>
<reference anchor="TUF-spec" target="https://github.com/theupdateframework/specification/blob/2b4e18472fe25d5b57f36f6fa50104967c8faeaa/tuf-spec.md">
  <front>
    <title>The Update Framework Specification</title>
    <author initials="J." surname="Samuel">
      <organization></organization>
    </author>
    <author initials="N." surname="Mathewson">
      <organization></organization>
    </author>
    <author initials="G." surname="Condra">
      <organization></organization>
    </author>
    <author initials="V." surname="Diaz">
      <organization></organization>
    </author>
    <author initials="T.K." surname="Kuppusamy">
      <organization></organization>
    </author>
    <author initials="S." surname="Awwad">
      <organization></organization>
    </author>
    <author initials="S." surname="Tobias">
      <organization></organization>
    </author>
    <author initials="J." surname="Wright">
      <organization></organization>
    </author>
    <author initials="H." surname="Mehnert">
      <organization></organization>
    </author>
    <author initials="E." surname="Tryzelaar">
      <organization></organization>
    </author>
    <author initials="J." surname="Cappos">
      <organization></organization>
    </author>
    <author initials="R." surname="Dingledine">
      <organization></organization>
    </author>
    <date year="2018" month="September" day="19"/>
  </front>
</reference>


    </references>

    <references title='Informative References'>

<reference anchor="MERCURY" target="https://www.usenix.org/system/files/conference/atc17/atc17-kuppusamy.pdf">
  <front>
    <title>Mercury: Bandwidth-Effective Prevention of Rollback Attacks Against Community Repositories</title>
    <author initials="T.K." surname="Kuppusamy">
      <organization></organization>
    </author>
    <author initials="V." surname="Diaz">
      <organization></organization>
    </author>
    <author initials="J." surname="Cappos">
      <organization></organization>
    </author>
    <date year="2017" month="July" day="12"/>
  </front>
  <seriesInfo name="ISBN" value="978-1-931971-38-6"/>
</reference>
<reference anchor="UPTANEESCAR" target="https://ssl.engineering.nyu.edu/papers/kuppusamy_escar_16.pdf">
  <front>
    <title>Securing Software Updates for Automobiles</title>
    <author initials="T.K." surname="Kuppusamy">
      <organization></organization>
    </author>
    <author initials="A." surname="Brown">
      <organization></organization>
    </author>
    <author initials="S." surname="Awwad">
      <organization></organization>
    </author>
    <author initials="D." surname="McCoy">
      <organization></organization>
    </author>
    <author initials="R." surname="Bielawski">
      <organization></organization>
    </author>
    <author initials="C." surname="Mott">
      <organization></organization>
    </author>
    <author initials="S." surname="Lauzon">
      <organization></organization>
    </author>
    <author initials="A." surname="Weimerskirch">
      <organization></organization>
    </author>
    <author initials="J." surname="Cappos">
      <organization></organization>
    </author>
    <date year="2016" month="October" day="16"/>
  </front>
</reference>
<reference anchor="PEP-458" target="https://www.python.org/dev/peps/pep-0458/">
  <front>
    <title>PEP 458 -- Surviving a Compromise of PyPI</title>
    <author initials="T.K." surname="Kuppusamy">
      <organization></organization>
    </author>
    <author initials="V." surname="Diaz">
      <organization></organization>
    </author>
    <author initials="D." surname="Stufft">
      <organization></organization>
    </author>
    <author initials="J." surname="Cappos">
      <organization></organization>
    </author>
    <date year="2013" month="September" day="27"/>
  </front>
</reference>
<reference anchor="DEPLOY" target="https://uptane.github.io/deployment-considerations/index.html">
  <front>
    <title>Uptane Deployment Best Practices</title>
    <author initials="." surname="Members of the Uptane Community">
      <organization></organization>
    </author>
    <date year="n.d."/>
  </front>
</reference>
<reference anchor="USATODAY" target="https://www.usatoday.com/story/tech/columnist/2016/06/28/your-average-car-lot-more-code-driven-than-you-think/86437052/">
  <front>
    <title>Your average car is a lot more code-driven than you think</title>
    <author initials="B." surname="O'Donnell">
      <organization></organization>
    </author>
    <date year="2016" month="June" day="28"/>
  </front>
</reference>
<reference anchor="CR-OTA" target="https://www.consumerreports.org/automotive-technology/automakers-embrace-over-the-air-updates-can-we-trust-digital-car-repair/">
  <front>
    <title>Automakers Embrace Over-the-Air Updates, but Can We Trust Digital Car Repair?</title>
    <author initials="K." surname="Barry">
      <organization></organization>
    </author>
    <date year="2018" month="April" day="20"/>
  </front>
</reference>
<reference anchor="IN-TOTO" target="https://in-toto.io/">
  <front>
    <title>in-toto: A framework to secure the integrity of software supply chains</title>
    <author >
      <organization></organization>
    </author>
    <date year="2018" month="October" day="29"/>
  </front>
</reference>


    </references>



  </back>

<!-- ##markdown-source:
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
OPlHMAEA

-->

</rfc>


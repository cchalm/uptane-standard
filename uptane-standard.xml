<?xml version="1.0" encoding="UTF-8"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc2629 version 1.2.9 -->

<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
]>

<?rfc toc="yes"?>
<?rfc sortrefs="yes"?>
<?rfc symrefs="yes"?>

<rfc ipr="noDerivativesTrust200902" docName="uptane-standard-design" category="info">

  <front>
    <title abbrev="UPTANE">Uptane Standard for Design and Implementation</title>

    <author initials="." surname="Members of the Uptane Alliance Community" fullname="Uptane Alliance Community">
      <organization>Uptane Alliance (c/o Prof. Justin Cappos)</organization>
      <address>
        <postal>
          <street>6 MetroTech</street>
          <city>Brooklyn</city>
          <region>NY</region>
          <code>11201</code>
          <country>USA</country>
        </postal>
        <email>uptane-standards@googlegroups.com</email>
      </address>
    </author>

    <date year="2020" month="March" day="16"/>

    <area>TODO</area>
    <workgroup>TODO</workgroup>
    <keyword>Internet-Draft</keyword>

    <abstract>


<t>This document describes a framework for securing ground vehicle software update systems.</t>



    </abstract>


  </front>

  <middle>


<section anchor="introduction" title="Introduction">

<t>Uptane is a secure software update framework for ground vehicles. This document describes procedures to enable programmers for OEMs and suppliers to securely design and implement this framework in a manner that better protects connected units on ground vehicles. Integrating Uptane as outlined in the sections that follow can reduce the ability of attackers to compromise critical systems. It also assures a faster and easier recovery process should a compromise occur.</t>

<t>These instructions specify the components necessary for a compliant implementation. Individual implementors can make their own technological choices within those requirements. This flexibility makes Uptane adaptable to the many customized update solutions used by manufacturers. If implementors wish to have compatible formats, they may use POUFs. POUFs contain a description of implementation choices as well as data binding formats. An implementor who adopts a POUF, as well as the Uptane Standard, will be able to interoperate with other implementations using that POUF.</t>

</section>
<section anchor="terminology" title="Terminology">

<section anchor="conformance-terminology" title="Conformance terminology">

<t>The keywords MUST, MUST NOT, REQUIRED, SHALL, SHALL NOT, SHOULD, SHOULD NOT, RECOMMENDED, MAY, and OPTIONAL in this document are to be interpreted as described in <xref target="RFC2119"/>.</t>

<t>In order to be considered “Uptane-compliant,” an implementation MUST follow all of these rules as specified in the document.</t>

</section>
<section anchor="terminology-1" title="Terminology">

<t><spanx style="emph">Bundle</spanx>: A set of images released by the repository that is meant to be installed by one or more target ECUs on a vehicle during the same update cycle.</t>

<t><spanx style="emph">Bus</spanx>: An internal communications network that interconnects components within a vehicle. A vehicle can have a number of buses that will vary in terms of power, speed and resources.</t>

<t><spanx style="emph">ECU Identifier</spanx>: An attribute used to identify a specific ECU (e.g., such as a unique serial number).</t>

<t><spanx style="emph">ECU Version Manifest</spanx>: Metadata which details the software version currently installed on the ECU.</t>

<t><spanx style="emph">Hardware Identifier</spanx>: An attribute used to identify a model of an ECU.</t>

<t><spanx style="emph">Image</spanx>: File containing software for an ECU to install. May contain a binary image to flash, installation instructions, and other necessary information for the ECU to properly apply the update. Each ECU typically holds only one image, although this may vary in some cases.</t>

<t><spanx style="emph">Metadata</spanx>:  Information describing the characteristics of data including, for example, structural
metadata describing data structures (e.g., data format, syntax, and semantics) and
descriptive metadata describing data contents (e.g., information security labels). As used in Uptane, metadata can be described as information associated with a role or an image that contains the characteristics or parameters thereof (e.g. cryptographic material parameters, file names and versions.)</t>

<t><spanx style="emph">Primary/Secondary ECUs</spanx>: Terms used to describe the control units within a ground vehicle. A primary ECU downloads and verifies update images and metadata for itself and for secondary ECUs, and distributes images and metadata to secondaries. Thus, it requires extra storage space and a means to download images and metadata.  Secondary ECUs receive their update images and metadata from the primary, and only need to verify and install their own metadata and images.</t>

<t><spanx style="emph">POUF</spanx>: A document that contains the protocol, operations, usage, and formats (POUF) of a specific Uptane implementation. The POUF contains decisions about SHOULDs and MAYs in an implementation, as well as descriptions of data binding formats. POUFs MAY be used to create compatible Uptane implementations.</t>

<t><spanx style="emph">Repository</spanx>: A server containing metadata about images. May also contain the images themselves. Other data may be stored on the repository to be accessed by ECUs during the update process.</t>

<t><spanx style="emph">Suppliers</spanx>: Independent companies to which auto manufacturers may outsource the production of ECUs. Tier-1 suppliers directly serve the manufacturers. Tier-2 suppliers are those that perform outsourced work for Tier-1 suppliers.</t>

<t><spanx style="emph">Vehicle Version Manifest</spanx>: A compilation of all ECU version manifests on a vehicle. It serves as a master list of all images currently running on all ECUs in the vehicle.</t>

</section>
<section anchor="uptane-role-terminology" title="Uptane Role terminology">

<t>These terms are defined in greater detail in <xref target="roles"/>.</t>

<t><spanx style="emph">Delegations</spanx>: A process by which the responsibility of signing metadata about images is assigned to another party.<vspace />
<spanx style="emph">Role</spanx>: A party (human or machine) responsible for signing a certain type of metadata. The role controls keys and is responsible for signing metadata entrusted to it with these keys. The roles mechanism of Uptane allows the system to distribute signing responsibilities so that the compromise of one key does not necessarily impact the security of the entire system.</t>

<t><list style="symbols">
  <t><spanx style="emph">Root Role</spanx>: Signs metadata that distributes and revokes public keys used to verify the Root, Timestamp, Snapshot, and Targets role metadata.</t>
  <t><spanx style="emph">Snapshot Role</spanx>: Signs metadata that indicates which images the repository has released at the same time.</t>
  <t><spanx style="emph">Targets Role</spanx>: Signs metadata used to verify the image, such as cryptographic hashes and file size.</t>
  <t><spanx style="emph">Timestamp Role</spanx>: Signs metadata that indicates if there are any new metadata or images on the repository.</t>
</list></t>

</section>
<section anchor="acronyms-and-abbreviations" title="Acronyms and abbreviations">

<t><spanx style="emph">CAN Bus</spanx>: Controller Area Network bus standard</t>

<t><spanx style="emph">CDN</spanx>: Content Delivery Network</t>

<t><spanx style="emph">ECUs</spanx>: Electronic Control Units, the computing units on a vehicle</t>

<t><spanx style="emph">LIN Bus</spanx>: Local Interconnect Bus</t>

<t><spanx style="emph">OBD</spanx>: On-board diagnostics</t>

<t><spanx style="emph">SOTA</spanx>: Software Updates Over-the-Air</t>

<t><spanx style="emph">UDS</spanx>: Unified Diagnostic Services</t>

<t><spanx style="emph">VIN</spanx>: Vehicle Identification Number</t>

</section>
</section>
<section anchor="rationale-for-and-scope-of-uptane-standards" title="Rationale for and scope of Uptane Standards">

<t>This Standards document clarifies the essential components and best practices for the secure design, implementation and deployment of Uptane by OEMs and suppliers. These practices contribute to compromise resilience, or the ability to minimize the extent of the threat posed by any given attack.</t>

<t>However, this specification is intended as an implementation guide, and not as a detailed technical argument about the security properties that Uptane provides.  Readers interested in such documentation should refer to published papers that cover this topic.  <xref target="UPTANEESCAR"/></t>

<section anchor="why-uptane-requires-a-standards-document" title="Why Uptane requires a standards document">

<t>A standards document that can guide the safe design, integration and deployment of Uptane in vehicles is needed at this time because:</t>

<t><list style="symbols">
  <t>The number of connected units on the average vehicle continues to grow, with mainstream cars now containing up to 100 million lines of code. <xref target="USATODAY"/></t>
  <t>The expanded use of software over-the-air strategies creates new attack surfaces for malicious parties. <xref target="CR-OTA"/></t>
  <t>Legacy update strategies, such as SSL/TLS or GPG/RSA, are not feasible for use on vehicle ECUs because they force manufacturers to chose between enhanced security and customizability.</t>
  <t>Conventional strategies are also complicated by the differing resources of the ECUs, which can vary greatly in memory, storage space, and Internet connectivity.</t>
  <t>The design of Uptane makes it possible to offer improved design flexibility, without sacrificing security.</t>
  <t>This added design flexibility, however, could be a liability if the framework is implemented incorrectly.</t>
  <t>Standardization of crucial steps in the design, implementation and use of Uptane can assure that customizability does not impact security or functionality.</t>
</list></t>

</section>
<section anchor="scope-of-standards-coverage" title="Scope of Standards coverage">

<t>This document sets guidelines for implementing Uptane in most systems capable of updating software on connected units in ground vehicles, including passenger vehicles, light-duty trucks, heavy-duty trucks, and motorcycles. Uptane could potentially also be applied to other ground vehicles, such as automated shuttles, recreational vehicles, and military ground vehicles. Uptane could even be applied to domains such as IoT devices, medical devices, and unmanned aerial vehicles. In this section, we define the scope of that applicability by providing sample use cases and possible exceptions, aspects of software update security that are not applicable to Uptane, and the design requirements governing the preparation of these standards.</t>

<section anchor="assumptions" title="Assumptions">

<t>We assume the following system preconditions for Uptane:</t>

<t><list style="symbols">
  <t>Vehicles have the ability to establish connectivity to required backend services. For example, this could be done through cellular, Wi-Fi, or hard-wired mechanisms.</t>
  <t>ECUs are either directly connected to the communication channel, or are indirectly connected via some sort of network gateway.</t>
  <t>ECUs are programmable and provide sufficient performance to be updated.</t>
  <t>ECUs must be able to perform a public key cryptography operation as well as some supporting operations.</t>
  <t>There are state-of-the-art secure servers in place, such as the Director and Image repository servers.</t>
</list></t>

<t>It is important that any bugs detected in Uptane implementations be patched promptly. Failure to do so could interfere with the effectiveness of Uptane’s operations.</t>

</section>
<section anchor="use-cases" title="Use cases">

<t>The following use cases provide a number of scenarios illustrating the manner in which software updates could be accomplished using Uptane.</t>

<section anchor="oems-initializing-uptane-at-the-factory-using-sota" title="OEMs initializing Uptane at the factory using SOTA">

<t>An OEM plans to install Uptane on new vehicles. This entails the following components: code to perform full and partial verification, the latest copy of the relevant metadata, the public keys, and an accurate attestation of the latest time. The OEM then either requires its tier-1 suppliers to provide these materials to the suppliers’ assembly lines or can choose to add the materials later at the OEM’s assembly lines. The OEM’s implementation is Uptane-compliant if:</t>

<t><list style="numbers">
  <t>all primaries perform full verification;</t>
  <t>all secondaries that are updated via OTA perform full or partial verification; and</t>
  <t>all other ECUs that do not perform verification cannot be updated via OTA.</t>
</list></t>

</section>
<section anchor="updating-one-ecu-with-a-complete-image" title="Updating one ECU with a complete image">

<t>A tier-1 supplier completes work on a revised image for an electronic brake control module. This module will control the brakes on all models of an SUV produced by the OEM mentioned above. Assuming supplier delegation is supported by the OEM for this ECU, each tier-1 supplier digitally signs the image, then delivers the signature and all of its metadata, including delegations, and associated images to the OEM. The OEM adds these metadata and images to its image repository, along with information about any dependencies and conflicts between this image and those for other ECUs used in the OEM’s vehicles. The OEM also updates the inventory database, so that the director repository can instruct the ECU on how to install these updated images.</t>

</section>
<section anchor="updating-individual-ecus-on-demand" title="Updating individual ECUs on demand">

<t>An OEM has issued a recall to address a problem with a keyless entry device that has been locking people out of their cars. The OEM prepares an updated flash image in the manner described above. The OEM then ships USB flash drives to vehicle owners and dealerships that allow those parties to update the firmware of their vehicles.</t>

</section>
<section anchor="update-one-ecu-with-multiple-deltas" title="Update one ECU with multiple deltas">

<t>The OEM wants to use delta updates to save over-the-air bytes. The delta images contain only the code and/or data that has changed from the previous image version. To do so, the OEM must first modify the Director repository, using the vehicle version manifest and dependency resolution to determine the differences between the previous and latest images. The OEM then adds the following to the custom Targets metadata used by the Director repository: (1) the algorithm used to apply a delta image, and (2) the Targets metadata about the delta image. The OEM will also check whether the delta images match the Targets metadata from the Director repository.</t>

</section>
</section>
</section>
<section anchor="exceptions" title="Exceptions">

<t>There are a number of factors that could impede the completion of the above scenarios:</t>

<t><list style="symbols">
  <t>ECUs may be lacking the necessary resources to function as designated. These resources could include weaknesses, in terms of CPU or RAM, that render performance of public key cryptography infeasible; a lack of sufficient storage to undo installation of bad software; or an ECU simply may reside on a low-speed network (e.g., LIN).</t>
  <t>ECUs may reside on different network segments, and may not be able to directly reach each other, requiring a gateway to facilitate communication.</t>
  <t>A user may replace OEM-installed ECUs with aftermarket ECUs.</t>
  <t>A vehicle may be able to download only a limited amount of data via a cellular channel, due to limits on a data plan.</t>
  <t>A system may lack sufficient power to download or install software updates.</t>
  <t>Vehicles may be offline for extended periods of time, thus missing required updates (e.g., key rotations).</t>
  <t>OEMs may be unwilling to implement costly security or hardware requirements.</t>
</list></t>

</section>
<section anchor="out-of-scope" title="Out of Scope">

<t>The following topics will not be addressed in this document, as they represent threats outside the scope of Uptane:</t>

<t><list style="symbols">
  <t>Physical attacks, such as manual tampering with ECUs outside the vehicle.</t>
  <t>Compromise of the packaged software, such as malware embedded in a trusted package.</t>
  <t>Compromise of the supply chain (e.g., build system, version control system, packaging process). A number of strategies (e.g., git signing, TPMs, in-toto <xref target="IN-TOTO"/>)  already exist to address this problem. Therefore, there is no need to duplicate those techniques here.</t>
  <t>Problems associated with OBD or UDS programming of ECUs, such as authentication of communications between ECUs.</t>
  <t>Malicious mirrors of package repositories, which may substitute original packages with malicious packages with matching version numbers <xref target="MERCURY"/>.</t>
</list></t>

</section>
<section anchor="design-requirements" title="Design requirements">

<t>The design requirements for this document are governed by the following principal parameters:</t>

<t><list style="symbols">
  <t>to clearly mandate the design and implementation steps that are security critical and must be followed as is, while offering flexibility in the implementation of non-critical steps. In this manner, users can adapt to support different use models and deployment scenarios.</t>
  <t>to ensure that, if Uptane is implemented, the security practices mandated or suggested in this document do not interfere with the functionality of ECUs, vehicles, or the systems that maintain them.</t>
  <t>to delineate best practices to ensure that, should any part of the SOTA mechanism of a vehicle be attacked, an attacker must compromise two or more modules to breach the SOTA mechanism.</t>
</list></t>

</section>
</section>
<section anchor="threat-model-and-attack-strategies" title="Threat model and attack strategies">

<t>The overarching goal of Uptane is to provide a system that is resilient in the face of various types of compromise. In this section, we describe the goals an attacker may have (<xref target="attacker_goals"/>) and the capabilities they may have or could develop (<xref target="capabilities"/>). We then describe and classify types of attacks on the system according to the attacker’s goals (<xref target="threats"/>).</t>

<section anchor="attacker_goals" title="Attacker goals">

<t>We assume that attackers may want to achieve one or more of the following goals, in increasing order of severity:</t>

<t><list style="symbols">
  <t>Read the contents of updates to discover confidential information, reverse-engineer firmware, or compare two firmware images to identify security fixes and hence determine the fixed security vulnerability</t>
  <t>Deny installation of updates to prevent vehicles from fixing software problems</t>
  <t>Cause one or more ECUs in the vehicle to fail, denying use of the vehicle or of certain functions</t>
  <t>Control ECUs within the vehicle, and possibly the vehicle itself</t>
</list></t>

</section>
<section anchor="capabilities" title="Attacker capabilities">

<t>Uptane is designed with resilience to compromise in mind. We assume that attackers may develop one or more of the following capabilities:</t>

<t><list style="symbols">
  <t>Intercept and modify network traffic (i.e., perform man-in-the-middle attacks). This capability may be developed in two domains:
  <list style="symbols">
      <t>Outside the vehicle, intercepting and modifying traffic between the vehicle and software repositories</t>
      <t>Inside the vehicle, intercepting and modifying traffic on one or more vehicle buses (e.g. via an OBD port or using a compromised ECU as a vector)</t>
    </list></t>
  <t>Compromise and control either a Director repository or Image repository server, and any keys stored on that repository, but not both the Director and Image repositories.</t>
  <t>Compromise either a Primary ECU or a Secondary ECU, but not both in the same vehicle</t>
</list></t>

</section>
<section anchor="threats" title="Description of threats">

<t>Uptane’s threat model includes the following types of attacks, organized according to the attacker goals listed in <xref target="attacker_goals"/>.</t>

<section anchor="read_updates" title="Read updates">

<t><list style="symbols">
  <t><spanx style="emph">Eavesdrop attack:</spanx> Read sensitive or confidential information from an update intended to be encrypted for a specific ECU. (Note: Not all implementations will have a need for protecting information in this way.)</t>
</list></t>

</section>
<section anchor="deny_updates" title="Deny installation of updates">

<t>An attacker seeking to deny the installation of updates may attempt one or more of the following strategies, among others:</t>

<t><list style="symbols">
  <t><spanx style="emph">Drop-request attack:</spanx> Block network traffic outside or inside the vehicle.</t>
  <t><spanx style="emph">Slow retrieval attack:</spanx> Slow down network traffic, in the extreme case sending barely enough packets to avoid a timeout. Similar to a drop-request attack, except that both the sender and receiver of the traffic still think network traffic is unimpeded.</t>
  <t><spanx style="emph">Freeze attack:</spanx> Continue to send a properly signed, but old, update bundle to the ECUs, even if newer updates exist.</t>
  <t><spanx style="emph">Partial bundle installation attack:</spanx> Install a valid (signed) update bundle, and then block selected updates within the bundle.</t>
  <t>Conduct a denial of service attack against the Uptane repositories or infrastructure.</t>
</list></t>

</section>
<section anchor="change_functionality" title="Interfere with ECU functionality">

<t>Attackers seeking to interfere with the functionality of vehicle ECUs in order to cause an operational failure or unexpected behavior may do so in one of the following ways:</t>

<t><list style="symbols">
  <t><spanx style="emph">Rollback attack:</spanx> Cause an ECU to install a previously valid software revision that is older than the currently installed version.</t>
  <t><spanx style="emph">Endless data attack:</spanx> Send a large amount of data to an ECU, until it runs out of storage, possibly causing the ECU to fail to operate.</t>
  <t><spanx style="emph">Mix-and-match attack:</spanx> Install a malicious software bundle in which some of the updates do not interoperate properly. This may be accomplished even if all of the individual images being installed are valid, as long as valid versions exist that are mutually incompatible.</t>
</list></t>

</section>
<section anchor="control_ecu" title="Control an ECU or vehicle">

<t>Full control of a vehicle, or one or more ECUs within a vehicle, is the most severe threat.</t>

<t><list style="symbols">
  <t><spanx style="emph">Arbitrary software attack:</spanx> Cause an ECU to install and run arbitrary code of the attacker’s choice.</t>
</list></t>

</section>
</section>
</section>
<section anchor="design" title="Detailed design of Uptane">

<t>Uptane is a secure software update framework for automobiles. We do not specify implementation details. Instead, we describe the components necessary for a compliant implementation and leave it up to individual implementors to make their own technological choices within those requirements.</t>

<t>At a high level, Uptane requires:</t>

<t><list style="symbols">
  <t>Two software repositories:
  <list style="symbols">
      <t>An Image repository containing binary images to install, and signed metadata about those images</t>
      <t>A Director repository connected to an inventory database that can sign metadata on demand for images in the Image repository</t>
    </list></t>
  <t>Repository tools for generating Uptane-specific metadata about images</t>
  <t>A public key infrastructure supporting the required metadata production/signing roles on each repository:
  <list style="symbols">
      <t>Root - Certificate authority for the Uptane ecosystem. Distributes public keys for verifying all the other roles’ metadata</t>
      <t>Timestamp - Indicates whether there are new metadata or images</t>
      <t>Snapshot - Indicates images released by the repository at a point in time, via signing metadata about Targets metadata</t>
      <t>Targets - Indicates metadata about images, such as hashes and file sizes</t>
    </list></t>
  <t>A secure way for ECUs to know the time.</t>
  <t>An ECU capable of downloading images and associated metadata from the Uptane servers.</t>
  <t>An in-vehicle client on a Primary ECU capable of verifying the signatures on all update metadata and downloading updates on behalf of its associated Secondary ECUs. The primary ECU MAY be the same ECU that communicates with the server.</t>
  <t>A client or library on each Secondary ECU capable of performing either full or partial verification of metadata</t>
</list></t>

<section anchor="roles" title="Roles on repositories">

<t>A repository contains images and metadata. Each role has a particular type of metadata associated with it, as described in <xref target="meta_structures"/>.</t>

<section anchor="root_role" title="The Root role">

<t>A repository’s Root role SHALL be responsible for a Certificate Authority as defined in <xref target="RFC3647"/>.
A repository’s Root role SHALL produce and sign Root metadata as described in <xref target="root_meta"/>.
A repository’s Root role SHALL sign the public keys used to verify the metadata produced by the Timestamp, Snapshot, and Targets roles.
A repository’s Root role SHALL revoke keys for the other roles, in case of compromise.</t>

</section>
<section anchor="targets_role" title="The Targets role">

<t>A repository’s Targets role SHALL produce and sign metadata about images and delegations as described in <xref target="targets_meta"/>.</t>

<section anchor="targets_role_delegations" title="Delegations">

<t>The Targets role on the Image repository MAY delegate the responsibility of signing metadata to other, custom-defined roles referred to as delegated targets. If it does, it MUST do so as specified in <xref target="delegations_meta"/>.</t>

<t>Responsibility for signing images or a subset of images MAY be delegated to more than one role and therefore it is possible for two different roles to be trusted for signing a particular image. For this reason, delegations MUST be prioritized.</t>

<t>A particular delegation for a subset of images MAY be designated as <spanx style="strong">terminating</spanx>. For terminating delegations, the client SHALL NOT search any further if it does not find validly signed metadata about those images. Delegations SHOULD NOT be terminating by default; terminating delegations SHOULD only be used when there is a compelling technical reason to do so.</t>

<t>A delegation for a subset of images MAY be a multi-role delegation <xref target="TAP-3"/>. A multi-role delegation indicates that multiple roles are needed to sign a particular image and each of the delegatee roles MUST sign the same metadata.</t>

<t>Delegations only apply to the Image repository. The Targets role on the Director repository MUST NOT delegate metadata signing responsibility.</t>

</section>
</section>
<section anchor="snapshot_role" title="The Snapshot role">

<t>A repository’s Snapshot role SHALL produce and sign metadata about all Targets metadata the repository releases, including the current version number of the top-level Targets metadata, and the version numbers of all delegated Targets metadata, as described in <xref target="snapshot_meta"/>.</t>

</section>
<section anchor="timestamp_role" title="The Timestamp role">

<t>A repository’s Timestamp role SHALL produce and sign metadata indicating whether there are new metadata or images on the repository. It MUST do so by signing the metadata about the Snapshot metadata file.</t>

</section>
</section>
<section anchor="meta_structures" title="Metadata structures">

<t>Uptane’s security guarantees all rely on properly created metadata that follows a designated structure. The Uptane standard <spanx style="strong">does not</spanx> mandate any particular format or encoding for the metadata as a whole. ASN.1 (with any encoding scheme like BER, DER, XER, etc.), JSON, XML, or any other encoding format that is capable of providing the required structure MAY be used.</t>

<t>However, string comparison is required as part of metadata verification. To ensure an accurate basis for comparing strings, all strings MUST be encoded in the Unicode Format for Network Interchange as defined in <xref target="RFC5198"/>, including normalization into Unicode Normalization Form C (<xref target="NFC"/>).</t>

<t>In the Deployment Considerations document (<xref target="DEPLOY"/>), the Uptane Alliance provides some examples of compliant metadata structures in ASN.1 and JSON.</t>

<section anchor="common_metadata" title="Common metadata structures">

<t>Every public key MUST be represented using a public key identifier.  A public key identifier is EITHER all of the following:</t>

<t><list style="symbols">
  <t>The value of the public key itself (which MAY be, for example, formatted as a PEM string)</t>
  <t>The public key cryptographic algorithm used by the key (such as RSA or ECDSA)</t>
  <t>The particular scheme used to verify the signature (such as <spanx style="verb">rsassa-pss-sha256</spanx> or <spanx style="verb">ecdsa-sha2-nistp256</spanx>)</t>
</list></t>

<t>OR a secure hash over at least the above components (such as the keyid mechanism in TUF).</t>

<t>All four Uptane roles (Root, Targets, Snapshot, and Timestamp) share a common structure. They SHALL contain the following two attributes:</t>

<t><list style="symbols">
  <t>A payload of metadata to be signed</t>
  <t>An attribute containing the signature(s) of the payload, where each entry specifies:
  <list style="symbols">
      <t>The public key identifier of the key being used to sign the payload</t>
      <t>A signature with this key over the payload</t>
    </list></t>
</list></t>

<t>The payload differs depending on the role. However, the payload for all roles shares a common structure. It SHALL contain the following four attributes:</t>

<t><list style="symbols">
  <t>An indicator of the type of role (Root, Targets, Snapshot, or Timestamp)</t>
  <t>An expiration date and time</t>
  <t>An integer version number, which SHOULD be incremented each time the metadata file is updated</t>
  <t>The role-specific metadata for the role indicated</t>
</list></t>

<t>The following sections describe the role-specific metadata. All roles SHALL follow the common structures described here.</t>

</section>
<section anchor="root_meta" title="Root metadata">

<t>A repository’s Root metadata distributes the public keys of the top-level Root, Targets, Snapshot, and Timestamp roles, as well as revocations of those keys. It SHALL contain two attributes:</t>

<t><list style="symbols">
  <t>A representation of the public keys for all four roles. Each key SHALL have a unique public key identifier.</t>
  <t>An attribute mapping each role to (1) its public key(s), and (2) the threshold of signatures required for that role</t>
</list></t>

<t>Additionally, it MAY contain a mapping of roles to a list of valid URLs from which the role metadata can be downloaded.  If this mapping of URLs is used, the implementer SHOULD implement this functionality following <xref target="TAP-5"/> to avoid adding unforeseen security risks.</t>

</section>
<section anchor="targets_meta" title="Targets metadata">

<t>The Targets metadata on a repository contains all of the information about images to be installed on ECUs. This includes filenames, hashes, file sizes, and MAY also include other useful information about images, such as what types of hardware are compatible with a particular image.</t>

<t>Targets metadata can also contain metadata about delegations, allowing one Targets role to delegate its authority to another. This means that an individual Targets metadata file might contain only metadata about delegations, only metadata about images, or some combination of the two. The details of how ECUs traverse the delegation tree to find valid metadata about images is specified in <xref target="resolve_delegations"/>.</t>

<section anchor="targets_images_meta" title="Metadata about images">

<t>To be available to install on clients, all images on the repository MUST have their metadata listed in a Targets role.  Each Targets role MAY provide a list of some images on the repository.  This list MUST provide, at a minimum, the following information about each image:</t>

<t><list style="symbols">
  <t>The image filename</t>
  <t>The size of the image in bytes</t>
  <t>One or more hashes of the image file, along with the hashing function used</t>
</list></t>

<section anchor="custom-metadata-about-images" title="Custom metadata about images">

<t>In addition to the required metadata, Targets metadata files MAY contain extra metadata for images on the repository. This metadata can be customized for a particular use case. Examples of use cases for different types of custom metadata can be found in the Deployment Considerations document (<xref target="DEPLOY"/>). However, there are a few important pieces of custom metadata that SHOULD be present in most implementations. In addition, there is one element in the custom metadata that MUST be present in the Targets metadata from the Director.</t>

<t>Custom metadata MAY also contain a demarcated field or section that MUST match whenever two pieces of metadata are checked against each other, such as when Targets metadata from the Director repository is checked against Targets metadata from the Image repository.</t>

<t>The information listed below SHOULD be provided for each image on both the Image repository and the Director repository. If a “MUST match section” is to be implemented, that is where this information SHOULD be placed.</t>

<t><list style="symbols">
  <t>A release counter, to be incremented each time a new version of the image is released. This can be used to prevent rollback attacks even in cases where the Director repository is compromised.</t>
  <t>A hardware identifier, or list of hardware identifiers, representing models of ECUs with which the image is compatible. This can be used to ensure that an ECU cannot be ordered to install an incompatible image, even in cases where the Director repository is compromised.</t>
</list></t>

<t>The following information is CONDITIONALLY REQUIRED for each image on the Director repository IF that image is encrypted:</t>

<t><list style="symbols">
  <t>Information about filenames, hashes, and file size of the encrypted image.</t>
  <t>Information about the encryption method, and other relevant information–for example, a symmetric encryption key encrypted by the ECU’s asymmetric key could be included in the Director repository metadata.</t>
</list></t>

<t>The following information MUST be provided for each image in the Targets metadata from the Director repository:</t>

<t><list style="symbols">
  <t>An ECU identifier (such as a serial number), specifying the ECU that should install the image.</t>
</list></t>

<t>The Director repository MAY provide a download URL for the image file. This may be useful, for example, when the image is on a public CDN and the director wishes to provide a signed URL.</t>

</section>
</section>
<section anchor="delegations_meta" title="Metadata about delegations">

<t>A Targets metadata file on the Image repository (but not the Director repository) MUST be able to delegate signing authority to other entities. For example, it could delegate signing authority for a particular ECU’s firmware to that ECU’s supplier. A metadata file MAY contain any number of delegations and MUST keep the delegations in prioritized order.</t>

<t>A list of delegations MUST provide the following information:</t>

<t><list style="symbols">
  <t>A list of public keys of all delegatees. Each key should have a unique public key identifier and a key type.</t>
  <t>A list of delegations, each of which contains:
  <list style="symbols">
      <t>A list of the filenames to which this role applies. This MAY be expressed using wildcards, or by enumerating a list, or a combination of the two.</t>
      <t>An optional list of the hardware identifiers to which this role applies.  If this is omitted, any hardware identifier will match.</t>
      <t>An indicator of whether or not this is a terminating delegation. (See <xref target="targets_role_delegations"/>.)</t>
      <t>A list of the roles to which this delegation applies. Each role needs to specify:
      <list style="symbols">
          <t>A name for the role (e.g. “supplier1-qa”)</t>
          <t>The key identifiers for each key this role uses</t>
          <t>A threshold of keys that must sign for this role</t>
        </list></t>
    </list></t>
</list></t>

<t>Note that <spanx style="strong">any</spanx> Targets metadata file stored on the Image repository may contain delegations, and these delegations can be in chains of arbitrary length.</t>

</section>
</section>
<section anchor="snapshot_meta" title="Snapshot metadata">

<t>The Snapshot metadata lists version numbers and filenames of all Targets metadata files. It protects against mix-and-match attacks if a delegated supplier key is compromised.</t>

<t>For each Targets metadata file on the repository, the Snapshot metadata SHALL contain the following information:</t>

<t><list style="symbols">
  <t>The filename and version number of the each Targets metadata file on the repository</t>
</list></t>

<t>The Snapshot metadata MAY also list the Root metadata filename and version number. This is not required, particularly for implementations of <xref target="TAP-5"/>, but MAY be included in all cases for backward compatibility.</t>

</section>
<section anchor="timestamp_meta" title="Timestamp metadata">

<t>The Timestamp metadata SHALL contain the following information:</t>

<t><list style="symbols">
  <t>The filename and version number of the latest Snapshot metadata on the repository.</t>
  <t>One or more hashes of the Snapshot metadata file, along with the hashing function used.</t>
</list></t>

</section>
<section anchor="repo_mapping_meta" title="Repository mapping metadata">

<t>As described in the introduction to <xref target="design"/>, Uptane requires a Director repository and an Image repository. However, it is possible to have an Uptane-compliant implementation that has more than two repositories.</t>

<t>Repository mapping metadata informs a Primary ECU about which repositories to trust for images or image paths. <xref target="TAP-4"/> describes how to make use of more complex repository mapping metadata in order to have more than the two required repositories.</t>

<t>Repository mapping metadata, or the equivalent informational content, MUST be present on all Primary ECUs, and MUST contain the following information:</t>

<t><list style="symbols">
  <t>A list of repository names and one or more URLs at which the named repository can be accessed. At a minimum, this MUST include the Director and Image repositories.</t>
  <t>A list of mappings of image paths to repositories, each of which contains:
  <list style="symbols">
      <t>A list of image paths. Image paths MAY be expressed using wildcards, or by enumerating a list, or a combination of the two.</t>
      <t>A list of repositories that MUST sign the Targets metadata for the image paths.</t>
    </list></t>
</list></t>

<t>For example, in the most basic Uptane case, the repository mapping metadata would contain:</t>

<t><list style="symbols">
  <t>The name and URL of the Director repository</t>
  <t>The name and URL of the Image repository</t>
  <t>A single mapping indicating that all images (<spanx style="verb">*</spanx>) MUST be signed by both the Director and Image repository</t>
</list></t>

<t>Note that the metadata need not be in the form of a metadata file. For example, in the basic case where there is only one Director and one Image repository, and all images need to have signed metadata from both repositories, it would be sufficient to have a configuration file with URLs for the two repositories, and a client that always checks for metadata matches between them. In this case, no explicit mapping would be defined, because the mapping is defined as part of the Uptane client implementation.</t>

<t>The <spanx style="emph">Uptane Deployment Considerations</spanx> document (<xref target="DEPLOY"/>) gives more guidance on how to implement repository mapping metadata for more complex use cases. It also discusses strategies for updating repository mapping metadata, if required.</t>

</section>
<section anchor="metadata_filename_rules" title="Rules for filenames in repositories and metadata">

<t>There is a difference between the file name in a metadata file or an ECU, and the file name on a repository. This difference exists in order to avoid race conditions, where metadata and images are read from, and written to, at the same time. For more details, the reader should read the TUF specification <xref target="TUF-spec"/> and PEP 458 <xref target="PEP-458"/>.</t>

<t>Unless stated otherwise, all files SHALL be written to repositories in accordance with the following two rules:</t>

<t><list style="numbers">
  <t>Metadata filenames SHALL be qualified with version numbers. If a metadata file A is specified as FILENAME.EXT in another metadata file B, then it SHALL be written as VERSION.FILENAME.EXT, where VERSION is A’s version number, as defined in <xref target="common_metadata"/>, with one exception: If the version number of the Timestamp metadata file might not be known in advance by a client, it MAY be read from, and written to, a repository using a filename without a version number qualification, i.e. FILENAME.EXT.</t>
  <t>If an image is specified in a Targets metadata file as FILENAME.EXT, it SHALL be written to the repository as HASH.FILENAME.EXT, where HASH is one of the hash digests of the file, as specified in <xref target="targets_images_meta"/>. The file MUST be written to the repository using <spanx style="emph">n</spanx> different filenames, one for each hash digest listed in its corresponding Targets metadata.</t>
</list></t>

<t>For example:</t>

<t><list style="symbols">
  <t>The version number of the Snapshot metadata file is 61, and its filename in the Timestamp metadata is “snapshot.json”. The filename on the repository will be “61.snapshot.json”.</t>
  <t>There is an image with the filename “acme_firmware.bin” specified in the Targets metadata, with a SHA256 of “aaaa” and a SHA512-256 of “bbbb”. It will have two filenames on the repository: “aaaa.acme_firmware.bin” and “bbbb.acme_firmware.bin”.</t>
</list></t>

</section>
</section>
<section anchor="server-repository-implementation-requirements" title="Server / repository implementation requirements">

<t>An Uptane implementation SHALL make the following services available to vehicles:</t>

<t><list style="symbols">
  <t>Image repository</t>
  <t>Director repository</t>
</list></t>

<t>Additionally, an Uptane implementation requires ECUs to have a secure way to know the current time.</t>

<section anchor="image-repository" title="Image repository">

<t>The Image repository exists to allow an OEM and/or its suppliers to upload images and their associated metadata. It makes these images and their metadata available to vehicles. The Image repository is designed to be primarily controlled by human actors, and updated relatively infrequently.</t>

<t>The Image repository SHALL expose an interface permitting the download of metadata and images. This interface SHOULD be public.</t>

<t>The Image repository SHALL require authorization for writing metadata and images.</t>

<t>The Image repository SHALL provide a method for authorized users to upload images and their associated metadata. It SHALL check that a user writing metadata and images is authorized to do so for that specific image by checking the chain of delegations as described in <xref target="delegations_meta"/>.</t>

<t>The Image repository SHALL implement storage which permits authorized users to write an image file using a unique filename, and later read the same file using the same name. It MAY use any filesystem, key-value store, or database that fulfills this requirement.</t>

<t>The Image repository MAY require authentication for read access.</t>

</section>
<section anchor="director_repository" title="Director repository">

<t>The Director repository instructs ECUs as to which images should be installed by producing signed metadata on demand. Unlike the Image repository, it is mostly controlled by automated, online processes. It also consults a private inventory database containing information on vehicles, ECUs, and software revisions.</t>

<t>The Director repository SHALL expose an interface for primaries to upload vehicle version manifests (<xref target="vehicle_version_manifest"/>) and download metadata. This interface SHOULD be public.
The Director MAY encrypt images for ECUs that require them, either by encrypting on-the-fly or by storing encrypted images in the repository.</t>

<t>The Director repository SHALL implement storage which permits an automated service to write generated metadata files. It MAY use any filesystem, key-value store, or database that fulfills this requirement.</t>

<section anchor="directing-installation-of-images-on-vehicles" title="Directing installation of images on vehicles">

<t>A Director repository MUST conform to the following six-step process for directing the installation of software images on a vehicle.</t>

<t><list style="numbers">
  <t>The Director SHOULD first identify the vehicle. This MAY be done when the Director receives a vehicle version manifest sent by a Primary (as described in <xref target="construct_manifest_primary"/>), decodes the manifest, and determines the unique vehicle identifier. Additionally, the Director MAY utilize other mechanisms to uniquely identify a vehicle (e.g., 2-way TLS with unique client certificates).</t>
  <t>Using the vehicle identifier, the Director queries its inventory database (as described in <xref target="inventory_db"/>) for relevant information about each ECU in the vehicle.</t>
  <t>The Director SHALL check the manifest for accuracy compared to the information in the inventory database. If any of the required checks fail, the Director MAY drop the request. An implementer MAY make additional checks if desired. At a minimum, the Director SHALL check the following:
  <list style="symbols">
      <t>Each ECU recorded in the inventory database is also represented in the manifest.</t>
      <t>The signature of the manifest matches the ECU key of the Primary that sent it.</t>
      <t>The signature of each Secondary’s contribution to the manifest matches the ECU key of that Secondary.</t>
    </list></t>
  <t>The Director SHOULD check that the nonce or counter in each ECU Version Report has not been used before to prevent a replay of the ECU Version Report. If the nonce or counter is reused the Director SHOULD drop the request.</t>
  <t>The Director extracts information about currently installed images from the vehicle version manifest. Using this information, it determines if the vehicle is already up-to-date, and if not, determines a set of images that should be installed. The exact process by which this determination takes place is out of scope of this standard. However, the Director MUST take into account <spanx style="emph">dependencies</spanx> and <spanx style="emph">conflicts</spanx> between images and SHOULD consult well-established techniques for dependency resolution.</t>
  <t>The Director MAY encrypt images for ECUs that require it.</t>
  <t>The Director generates new metadata representing the desired set of images to be installed on the vehicle, based on the dependency resolution in step 4. This includes Targets (<xref target="targets_meta"/>), Snapshot (<xref target="snapshot_meta"/>), and Timestamp (<xref target="timestamp_meta"/>) metadata. It then sends this metadata to the Primary as described in <xref target="download_meta_primary"/>.</t>
</list></t>

</section>
<section anchor="inventory_db" title="Inventory Database">

<t>The Director SHALL use a private inventory database to store information about ECUs and vehicles. An implementor MAY use any durable database for this purpose.</t>

<t>The inventory database MUST record the following pieces of information:</t>

<t><list style="symbols">
  <t>Per vehicle:
  <list style="symbols">
      <t>A unique identifier (such as a VIN)</t>
    </list></t>
  <t>Per ECU:
  <list style="symbols">
      <t>A unique identifier (such as a serial number)</t>
      <t>The vehicle identifier the ECU is associated with</t>
      <t>An ECU key (symmetric or asymmetric; for asymmetric keys, only the public part SHOULD be stored)</t>
      <t>The ECU key identifier (as defined in <xref target="common_metadata"/>)</t>
      <t>Whether the ECU is a Primary or a Secondary</t>
    </list></t>
</list></t>

<t>The inventory database MAY record other information about ECUs and vehicles. It SHOULD record a hardware identifier for each ECU to protect against the possibility of directing the ECU to install incompatible firmware.</t>

</section>
</section>
</section>
<section anchor="in-vehicle-implementation-requirements" title="In-vehicle implementation requirements">

<t>An Uptane-compliant ECU SHALL be able to download and verify Image metadata and image binaries before installing a new image and MUST have a secure way of verifying the current time, or a sufficiently recent attestation of the time.</t>

<t>Each ECU in a vehicle receiving over-the-air updates is either a Primary or a Secondary ECU. A Primary ECU collects and delivers vehicle manifests to the Director (<xref target="vehicle_version_manifest"/>) that contain information about which images have been installed on ECUs in the vehicle. It also verifies the time and downloads and verifies the latest metadata and images for itself and for its secondaries. A Secondary ECU verifies the time, and downloads and verifies the latest metadata and images for itself from its associated Primary ECU. It also sends signed information about its installed images to its associated Primary.</t>

<t>All ECUs MUST verify image metadata as specified in <xref target="metadata_verification"/> before installing an image or making it available to other ECUs. A Primary ECU MUST perform full verification (<xref target="full_verification"/>). A Secondary ECU SHOULD perform full verification if possible. If a Secondary cannot perform full verification, it SHALL perform partial verification. See the Uptane Deployment Considerations (<xref target="DEPLOY"/>) for a discussion of how to choose between partial and full verification.</t>

<t>ECUs MUST have a secure source of time. An OEM/Uptane implementor MAY use any external source of time that is demonstrably secure. The Uptane Deployment Considerations (<xref target="DEPLOY"/>) describe one way to implement an external time server to cryptographically attest time, as well as the security properties required. When “loading time” is referenced in procedures in this standard, it should be understood to mean loading into memory the current time (if the ECU has its own secure clock), or the most recent attested time.</t>

<section anchor="build-time-prerequisite-requirements-for-ecus" title="Build-time prerequisite requirements for ECUs">

<t>For an ECU to be capable of receiving Uptane-secured updates, it MUST have the following data provisioned at the time it is manufactured or installed in the vehicle:</t>

<t><list style="numbers">
  <t>A sufficiently recent copy of required Uptane metadata at the time of manufacture or install. This is necessary for the ECU to authenticate that the remote repository is legitmate when it first downloads metadata in the field. See the Uptane Deployment Considerations (<xref target="DEPLOY"/>) for more information.
  <list style="symbols">
      <t>Partial verification Secondary ECUs MUST have the Root and Targets metadata from the Director repository (to reduce the scope of rollback and replay attacks). These ECUs MAY also have metadata from other roles or the Image repository if they will be used by the Secondary.</t>
      <t>Full verification ECUs MUST have a complete set of metadata (Root, Targets, Snapshot, and Timestamp) from both repositories (to prevent rollback and replay attacks), as well as the repository mapping metadata (<xref target="repo_mapping_meta"/>). Delegations are not required.</t>
    </list></t>
  <t>The current time, or a secure attestation of a sufficiently recent time.</t>
  <t>An <spanx style="strong">ECU key</spanx>. This is a private key, unique to the ECU, used to sign ECU version manifests and decrypt images. An ECU key MAY be either a symmetric key or an asymmetric key. If it is an asymmetric key, there MAY be separate keys for encryption and signing. For the purposes of this standard, the set of private keys that an ECU uses is referred to as the ECU key (singular), even if it is actually multiple keys used for different purposes.</t>
</list></t>

</section>
<section anchor="what-the-primary-does" title="What the Primary does">

<t>A Primary downloads, verifies, and distributes the latest time, metadata and images. To do so, it SHALL perform the following seven steps:</t>

<t><list style="numbers">
  <t>Construct and send vehicle version manifest (<xref target="construct_manifest_primary"/>)</t>
  <t>Download and check current time (<xref target="check_time_primary"/>)</t>
  <t>Download and verify metadata (<xref target="download_meta_primary"/>)</t>
  <t>Download and verify images (<xref target="download_images_primary"/>)</t>
  <t>OPTIONAL: Send latest time to secondaries (<xref target="send_time_primary"/>)</t>
  <t>Send metadata to Secondaries (<xref target="send_metadata_primary"/>)</t>
  <t>Send images to Secondaries (<xref target="send_images_primary"/>)</t>
</list></t>

<t>Note that the subsequent sections concerning requirements for a Primary do not prohibit implementing Primary capabilities on an ECU that does not communicate directly with the Uptane repositories. This allows for implementations to have multiple ECUs within the vehicle performing functions equivalent to a Primary.
If multiple such Primaries are included within a vehicle, each Secondary ECU SHALL have a single Primary responsible for providing its updates.</t>

<section anchor="construct_manifest_primary" title="Construct and send vehicle version manifest">

<t>The Primary SHALL build a <spanx style="emph">vehicle version manifest</spanx> as described in <xref target="vehicle_version_manifest"/>.</t>

<t>Once the complete manifest is built, the Primary MAY send the manifest to the Director repository. However, it is not strictly required that the Primary send the manifest until step three. If permitted by the implementation, a Primary MAY send only a diff of the manifest to save bandwidth. If an implementation permits diffs, the Director SHOULD have a way to request a full manifest.</t>

<t>Secondaries MAY send their version report at any time so that it is already stored on the Primary when it wishes to check for updates. Alternatively, the Primary MAY request a version report from each Secondary at the time of the update check.</t>

<section anchor="vehicle_version_manifest" title="Vehicle version manifest">

<t>The vehicle version manifest is a metadata structure that MUST contain the following information:</t>

<t><list style="symbols">
  <t>An attribute containing the signature(s) of the payload, each specified by:
  <list style="symbols">
      <t>The public key identifier of the key being used to sign the payload</t>
      <t>The signing method (e.g. ed25519, rsassa-pss, etc.)</t>
      <t>A hash of the payload to be signed</t>
      <t>The hashing function used (e.g. sha256, sha512-224, etc.)</t>
      <t>The signature of the hash</t>
    </list></t>
  <t>A payload representing the installed versions of each software image on the vehicle. This payload SHALL contain:
  <list style="symbols">
      <t>The vehicle’s unique identifier (e.g. the VIN)</t>
      <t>The Primary ECU’s unique identifier (e.g. the serial number)</t>
      <t>A list of ECU version reports as specified in <xref target="version_report"/></t>
    </list></t>
</list></t>

<t>Note that one of the ECU version reports should be the version report for the Primary itself.</t>

</section>
<section anchor="version_report" title="ECU version report">

<t>An ECU version report is a metadata structure that MUST contain the following information:</t>

<t><list style="symbols">
  <t>An attribute containing the signature(s) of the payload, each specified by:
  <list style="symbols">
      <t>The public key identifier of the key being used to sign the payload</t>
      <t>The signing method (e.g. ed25519, rsassa-pss, etc.)</t>
      <t>A hash of the payload to be signed</t>
      <t>The hashing function used (e.g. sha256, sha512-224, etc.)</t>
      <t>The signature of the hash</t>
    </list></t>
  <t>A payload containing:
  <list style="symbols">
      <t>The ECU’s unique identifier (e.g. the serial number)</t>
      <t>The filename, length, and hashes of its currently installed image (i.e. the non-custom Targets metadata for this particular image)</t>
      <t>An indicator of any detected security attack</t>
      <t>The latest time the ECU can verify at the time this version report was generated</t>
      <t>A nonce or counter to prevent a replay of the ECU version report. This value MUST change each update cycle and MAY be the cryptographic nonce used with a Time Server.</t>
    </list></t>
</list></t>

</section>
</section>
<section anchor="check_time_primary" title="Download and check current time">

<t>The Primary SHALL load the current time from a secure source.</t>

</section>
<section anchor="download_meta_primary" title="Download and verify metadata">

<t>The Primary SHALL download metadata for all targets and perform a full verification on it as specified in <xref target="full_verification"/>.</t>

</section>
<section anchor="download_images_primary" title="Download and verify images">

<t>The Primary SHALL download and verify images for itself and for all of its associated Secondaries. Images SHALL be verified by checking that the hash of the image file matches the hash specified in the Director’s Targets metadata for that image.</t>

<t>There may be several different filenames that all refer to the same image binary, as described in <xref target="metadata_filename_rules"/>. If the primary has received multiple hashes for a given image binary via the Targets role (see <xref target="targets_images_meta"/>) then it SHALL verify every hash for this image despite the fact that just one hash is enough to obtain the image itself.</t>

</section>
<section anchor="send_time_primary" title="Send latest time to Secondaries">

<t>Unless the Secondary ECU has its own way of verifying the time or does not have the capacity to verify a time message, the Primary is CONDITIONALLY REQUIRED to send the time to each ECU. The Secondary will verify the time message, then overwrite its current time with the received time.</t>

</section>
<section anchor="send_metadata_primary" title="Send metadata to Secondaries">

<t>The Primary SHALL send its latest downloaded metadata to all of its associated Secondaries. The metadata it sends to each Secondary MUST include all of the metadata required for verification on that Secondary. For full verification Secondaries, this includes the metadata for all four roles from both repositories, plus any delegated Targets metadata files the Secondary will recurse through to find the proper delegation. For partial verification Secondaries, this includes only the Targets metadata file from the Director repository.</t>

<t>The Primary SHOULD determine the minimal set of metadata files to send to each Secondary by performing delegation resolution as described in <xref target="full_verification"/>.</t>

<t>Each Secondary SHALL store the latest copy of all metadata required for its own verification.</t>

</section>
<section anchor="send_images_primary" title="Send images to Secondaries">

<t>The Primary SHALL send the latest image to each of its associated Secondaries that have storage to receive it.</t>

<t>For Secondaries without storage, the Primary SHOULD wait for a request from the Secondary to stream the new image file to it. The Secondary will send the request once it has verified the metadata sent in the previous step.</t>

</section>
</section>
<section anchor="installing-images-on-primary-or-secondary-ecus" title="Installing images on Primary or Secondary ECUs">

<t>An ECU SHALL perform the following steps when attempting to install a new image:</t>

<t><list style="numbers">
  <t>Verify latest attested time (<xref target="verify_time"/>)</t>
  <t>Verify metadata (<xref target="verify_metadata"/>)</t>
  <t>Download latest image (<xref target="download_image"/>)</t>
  <t>Verify image (<xref target="verify_image"/>)</t>
  <t>Install image (<xref target="install_image"/>)</t>
  <t>Create and send version report (<xref target="create_version_report"/>)</t>
</list></t>

<section anchor="verify_time" title="Load and verify the latest attested time">

<t>The ECU SHALL load and verify the current time, or the most recent securely attested time.</t>

</section>
<section anchor="verify_metadata" title="Verify metadata">

<t>The ECU SHALL verify the latest downloaded metadata (<xref target="metadata_verification"/>) using either full or partial verification. If the metadata verification fails for any reason, the ECU SHALL jump to the final step (<xref target="create_version_report"/>).</t>

</section>
<section anchor="download_image" title="Download latest image">

<t>If the ECU does not have secondary storage, i.e. buffer storage to temporarily store the latest image before installing it, it SHALL download the latest image from the Primary. (If the ECU has secondary storage, it will already have the latest image in its secondary storage as specified in <xref target="send_images_primary"/>, and should skip to the next step.) The ECU MAY first create a backup of its previous working image and store it elsewhere (e.g., the primary).</t>

<t>The filename used to identify the latest known image (i.e., the file to request from the Primary) SHALL be determined as follows:</t>

<t><list style="numbers">
  <t>Load the Targets metadata file from the Director repository.</t>
  <t>Find the Targets metadata associated with this ECU identifier.</t>
  <t>Construct the Image filename using the rule in <xref target="metadata_filename_rules"/>, or use the download URL specified in the Director metadata.</t>
  <t>If there is no Targets metadata about this image, abort the update cycle and report that there is no such image. Additionally, in the case of failure, the ECU SHALL retain its previous Targets metadata instead of using the new Targets metadata. Otherwise, download the image (up to the number of bytes specified in the Targets metadata), and verify that its hashes match the Targets metadata.</t>
</list></t>

<t>When the Primary responds to the download request, the ECU SHALL overwrite its current image with the downloaded image from the Primary.</t>

<t>If any part of this step fails, the ECU SHALL jump to the final step (<xref target="create_version_report"/>).</t>

</section>
<section anchor="verify_image" title="Verify image">

<t>The ECU SHALL verify that the latest image matches the latest metadata as follows:</t>

<t><list style="numbers">
  <t>Load the latest Targets metadata file from the Director.</t>
  <t>Find the Targets metadata associated with this ECU identifier.</t>
  <t>Check that the hardware identifier in the metadata matches the ECUs hardware identifier.</t>
  <t>Check that the image filename is valid for this ECU. This MAY be a comparison against a wildcard path, which restricts the ECUs to which a delegation will apply.</t>
  <t>Check that the release counter of the image in the previous metadata, if it exists, is less than or equal to the release counter in the latest metadata.</t>
  <t>If the image is encrypted, decrypt the image with a decryption key to be chosen as follows:
  <list style="symbols">
      <t>If the ECU key is a symmetric key, the ECU SHALL use the ECU key for image decryption.</t>
      <t>If the ECU key is asymmetric, the ECU SHALL check the Targets metadata for an encrypted symmetric key. If such a key is found, the ECU SHALL decrypt the symmetric key using its ECU key, and use the decrypted symmetric key for image decryption.</t>
      <t>If the ECU key is asymmetric and there is no symmetric key in the target metadata, the ECU SHALL use its ECU key for image decryption.</t>
    </list></t>
  <t>Check that the hash of the image matches the hash in the metadata.</t>
</list></t>

<t>If the ECU has secondary storage, the checks SHOULD be performed on the image in secondary storage before it is installed.</t>

<t>NOTE: See <xref target="DEPLOY"/> for guidance on how to deal with Secondary ECU failures for ECUs that do not have secondary storage.</t>

<t>If any step fails, the ECU SHALL jump to the (<xref target="create_version_report"/>) step.</t>

</section>
<section anchor="install_image" title="Install image">

<t>The ECU SHALL attempt to install the update. This installation SHOULD occur at a time when all pre-conditions are met. These pre-conditions MAY include ensuring the vehicle is in a safe environment for install (e.g., the vehicle is parked when updating a specific ECU). Another pre-condition MAY include ensuring the ECU has a backup of its current image and metadata in case the current installation fails.</t>

</section>
<section anchor="create_version_report" title="Create and send version report">

<t>The ECU SHALL create a version report as described in <xref target="version_report"/>, and send it to the Primary (or simply save it to disk, if the ECU is a Primary). The Primary SHOULD write the version reports it receives to disk and associate them with the Secondaries that sent them.</t>

</section>
</section>
<section anchor="metadata_verification" title="Metadata verification procedures">

<t>A Primary ECU MUST perform full verification of metadata. A Secondary ECU SHOULD perform full verification of metadata. If a Secondary cannot perform full verification, it SHALL perform partial verification instead.</t>

<t>If a step in the following workflows does not succeed (e.g., the update is aborted because a new metadata file was not signed), an ECU SHOULD still be able to update again in the future. Errors raised during the update process SHOULD NOT leave ECUs in an unrecoverable state.</t>

<section anchor="partial_verification" title="Partial verification">

<t>In order to perform partial verification, an ECU SHALL perform the following steps:</t>

<t><list style="numbers">
  <t>Load and verify the current time or the most recent securely attested time.</t>
  <t>Download and check the Targets metadata file from the Director repository, following the procedure in <xref target="check_targets"/>.</t>
</list></t>

</section>
<section anchor="full_verification" title="Full verification">

<t>Full verification of metadata means that the ECU checks that the Targets metadata about images from the Director repository matches the Targets metadata about the same images from the Image repository. This provides resilience to a key compromise in the system.</t>

<t>Full verification MAY be performed by either Primary or Secondary ECUs. In the following instructions, whenever an ECU is directed to download metadata, it applies only to Primary ECUs.</t>

<t>If <xref target="TAP-5"/> is supported and a Primary has an external connection to the Uptane repositories, a Primary ECU SHALL download metadata and images following the rules specified in that TAP.  If <xref target="TAP-5"/> is not supported, or if the Primary does not have an external connection to the Uptane repositories, the download SHOULD follow the <xref target="TUF-spec"/> and the metadata file renaming rules specified in <xref target="metadata_filename_rules"/>.</t>

<t>Before starting full verification, the repository mapping metadata MUST be consulted to determine where to download metadata from. This procedure assumes the basic Uptane case: there are only two repositories (Director and Image), and all image paths are required to be signed by both repositories. If a more complex repository layout is being used, refer to <xref target="DEPLOY"/> for guidance on how to determine where metadata should be downloaded from.</t>

<t>In order to perform full verification, an ECU SHALL perform the following steps:</t>

<t><list style="numbers">
  <t>Load and verify the current time or the most recent securely attested time.</t>
  <t>Download and check the Root metadata file from the Director repository, following the procedure in <xref target="check_root"/>.</t>
  <t>Download and check the Timestamp metadata file from the Director repository, following the procedure in <xref target="check_timestamp"/>.</t>
  <t>Check the previously downloaded Snapshot metadata file from the Directory repository (if available). If the hashes and version number of that file match the hashes and version number listed in the new Timestamp metadata, there are no new updates and the verification process MAY be stopped and considered complete. Otherwise, download and check the Snapshot metadata file from the Director repository, following the procedure in <xref target="check_snapshot"/>.</t>
  <t>Download and check the Targets metadata file from the Director repository, following the procedure in <xref target="check_targets"/>.</t>
  <t>If the Targets metadata from the Directory repository indicates that there are no new targets that are not already currently installed, the verification process MAY be stopped and considered complete. Otherwise, download and check the Root metadata file from the Image repository, following the procedure in <xref target="check_root"/>.</t>
  <t>Download and check the Timestamp metadata file from the Image repository, following the procedure in <xref target="check_timestamp"/>.</t>
  <t>Check the previously downloaded Snapshot metadata file from the Image repository (if available). If the hashes and version number of that file match the hashes and version number listed in the new Timestamp metadata, the ECU MAY skip to the last step. Otherwise, download and check the Snapshot metadata file from the Image repository, following the procedure in <xref target="check_snapshot"/>.</t>
  <t>Download and check the top-level Targets metadata file from the Image repository, following the procedure in <xref target="check_targets"/>.</t>
  <t>Verify that Targets metadata from the Director and Image repositories match. A Primary ECU MUST perform this check on metadata for all images listed in the Targets metadata file from the Director repository downloaded in step 6. A Secondary ECU MAY elect to perform this check only on the metadata for the image it will install. (That is, the target metadata from the Director that contains the ECU identifier of the current ECU.) To check that the metadata for an image matches, complete the following procedure:
  <list style="numbers">
      <t>Locate and download a Targets metadata file from the Image repository that contains an image with exactly the same file name listed in the Director metadata, following the procedure in <xref target="resolve_delegations"/>.</t>
      <t>Check that the Targets metadata from the Image repository matches the Targets metadata from the Director repository:
      <list style="numbers">
          <t>Check that the non-custom metadata (i.e., length and hashes) of the unencrypted or encrypted image are the same in both sets of metadata. Note: the Primary is responsible for validating encrypted images and associated metadata. The target ECU (Primary or Secondary) is responsible for validating the unencrypted image and associated metadata.</t>
          <t>Check that all “MUST match” custom metadata (e.g., hardware identifier and release counter) are the same in both sets of metadata.</t>
          <t>Check that the release counter in the previous Targets metadata file is less than or equal to the release counter in this Targets metadata file.</t>
        </list></t>
    </list></t>
</list></t>

<t>If any step fails, the ECU MUST return an error code indicating the failure. If a check for a specific type of security attack fails (e.g. rollback, freeze, arbitrary software, etc.), the ECU SHOULD return an error code that indicates the type of attack.</t>

</section>
<section anchor="check_root" title="How to check Root metadata">

<t>To properly check Root metadata, an ECU SHOULD:</t>

<t><list style="numbers">
  <t>Load the previous Root metadata file.</t>
  <t>Update to the latest Root metadata file.
  <list style="numbers">
      <t>Let N denote the version number of the latest Root metadata file (which at first could be the same as the previous Root metadata file).</t>
      <t>Try downloading a new version N+1 of the Root metadata file, up to some X number of bytes. The value for X is set by the implementor. For example, X may be tens of kilobytes. The filename used to download the Root metadata file is of the fixed form VERSION_NUMBER.FILENAME.EXT (e.g., 42.root.json). If this file is not available, the current Root metadata file is the latest; continue with step 3.</t>
      <t>Version N+1 of the Root metadata file MUST have been signed by the following: (1) a threshold of keys specified in the latest Root metadata file (version N), and (2) a threshold of keys specified in the new Root metadata file being validated (version N+1). If version N+1 is not signed as required, discard it, abort the update cycle, and report the signature failure. On the next update cycle, begin at version N of the Root metadata file. (Checks for an arbitrary software attack.)</t>
      <t>The version number of the latest Root metadata file (version N) must be less than or equal to the version number of the new Root metadata file (version N+1). Effectively, this means checking that the version number signed in the new Root metadata file is indeed N+1. If the version of the new Root metadata file is less than the latest metadata file, discard it, abort the update cycle, and report the rollback attack. On the next update cycle, begin at step 1 and version N of the Root metadata file. (Checks for a rollback attack.)</t>
      <t>Set the latest Root metadata file to the new Root metadata file.</t>
      <t>Repeat steps 2.1 to 2.6.</t>
    </list></t>
  <t>Check that the current (or latest securely attested) time is lower than the expiration timestamp in the latest Root metadata file. (Checks for a freeze attack.)</t>
  <t>If the Timestamp and/or Snapshot keys have been rotated, delete the previous Timestamp and Snapshot metadata files. (Checks for recovery from fast-forward attacks <xref target="MERCURY"/>.)</t>
</list></t>

</section>
<section anchor="check_timestamp" title="How to check Timestamp metadata">

<t>To properly check Timestamp metadata, an ECU SHOULD:</t>

<t><list style="numbers">
  <t>Download up to Y number of bytes. The value for Y is set by the implementor. For example, Y may be tens of kilobytes. The filename used to download the Timestamp metadata file is of the fixed form FILENAME.EXT (e.g., timestamp.json).</t>
  <t>Check that it has been signed by the threshold of keys specified in the latest Root metadata file. If the new Timestamp metadata file is not properly signed, discard it, abort the update cycle, and report the signature failure. (Checks for an arbitrary software attack.)</t>
  <t>Check that the version number of the previous Timestamp metadata file, if any, is less than or equal to the version number of this Timestamp metadata file. If the new Timestamp metadata file is older than the trusted Timestamp metadata file, discard it, abort the update cycle, and report the potential rollback attack. (Checks for a rollback attack.)</t>
  <t>Check that the current (or latest securely attested) time is lower than the expiration timestamp in this Timestamp metadata file. If the new Timestamp metadata file has expired, discard it, abort the update cycle, and report the potential freeze attack. (Checks for a freeze attack.)</t>
</list></t>

</section>
<section anchor="check_snapshot" title="How to check Snapshot metadata">

<t>To properly check Snapshot metadata, an ECU SHOULD:</t>

<t><list style="numbers">
  <t>Download up to the number of bytes specified in the Timestamp metadata file, constructing the metadata filename as defined in <xref target="metadata_filename_rules"/>.</t>
  <t>The hashes and version number of the new Snapshot metadata file MUST match the hashes and version number listed in Timestamp metadata. If the hashes and version number do not match, discard the new Snapshot metadata, abort the update cycle, and report the failure. (Checks for a mix-and-match attack.)</t>
  <t>Check that it has been signed by the threshold of keys specified in the latest Root metadata file. If the new Snapshot metadata file is not signed as required, discard it, abort the update cycle, and report the signature failure. (Checks for an arbitrary software attack.)</t>
  <t>Check that the version number of the previous Snapshot metadata file, if any, is less than or equal to the version number of this Snapshot metadata file. If this Snapshot metadata file is older than the previous Snapshot metadata file, discard it, abort the update cycle, and report the potential rollback attack. (Checks for a rollback attack.)</t>
  <t>Check that the version number listed by the previous Snapshot metadata file for each Targets metadata file is less than or equal to its version number in this Snapshot metadata file. If this condition is not met, discard the new Snapshot metadata file, abort the update cycle, and report the failure. (Checks for a rollback attack.)</t>
  <t>Check that each Targets metadata filename listed in the previous Snapshot metadata file is also listed in this Snapshot metadata file. If this condition is not met, discard the new Snapshot metadata file, abort the update cycle, and report the failure. (Checks for a rollback attack.)</t>
  <t>Check that the current (or latest securely attested) time is lower than the expiration timestamp in this Snapshot metadata file. If the new Snapshot metadata file is expired, discard it, abort the update cycle, and report the potential freeze attack. (Checks for a freeze attack.)</t>
</list></t>

</section>
<section anchor="check_targets" title="How to check Targets metadata">

<t>To properly check Targets metadata, an ECU SHOULD:</t>

<t><list style="numbers">
  <t>Download up to Z number of bytes, constructing the metadata filename as defined in <xref target="metadata_filename_rules"/>. The value for Z is set by the implementor. For example, Z may be tens of kilobytes.</t>
  <t>The version number of the new Targets metadata file MUST match the version number listed in the latest Snapshot metadata. If the version number does not match, discard it, abort the update cycle, and report the failure. (Checks for a mix-and-match attack.) Skip this step if checking Targets metadata on a partial verification ECU; partial verification ECUs will not have Snapshot metadata.</t>
  <t>Check that the Targets metadata has been signed by the threshold of keys specified in the relevant metadata file (Checks for an arbitrary software attack):
  <list style="numbers">
      <t>If checking top-level Targets metadata, the threshold of keys is specified in the Root metadata.</t>
      <t>If checking delegated Targets metadata, the threshold of keys is specified in the Targets metadata file that delegated authority to this role.</t>
    </list></t>
  <t>Check that the version number of the previous Targets metadata file, if any, is less than or equal to the version number of this Targets metadata file. (Checks for a rollback attack.)</t>
  <t>Check that the current (or latest securely attested) time is lower than the expiration timestamp in this Targets metadata file. (Checks for a freeze attack.)</t>
  <t>If checking Targets metadata from the Director repository, verify that there are no delegations.</t>
  <t>If checking Targets metadata from the Director repository, check that no ECU identifier is represented more than once.</t>
  <t>If checking Targets metadata from the Director repository, and the ECU performing the verification is the Primary ECU, check that all listed ECU identifiers correspond to ECUs that are actually present in the vehicle.</t>
</list></t>

</section>
<section anchor="resolve_delegations" title="How to resolve delegations">

<t>To properly check Targets metadata for an image, an ECU MUST locate the metadata file(s) for the role (or roles) that have the authority to sign the image. This metadata might be located in the top-level Targets metadata, but it also may be delegated to another role or to multiple roles. Therefore, all delegations MUST be resolved using the following recursive procedure, beginning with the top-level Targets metadata file.</t>

<t><list style="numbers">
  <t>Download the current metadata file, and check it following the procedure in <xref target="check_targets"/>. If the file cannot be loaded, or if any verification step fails, abort the delegation resolution, and indicate that Image metadata cannot be found because of a missing or invalid role.</t>
  <t>If the current metadata file contains signed metadata about the image, end the delegation resolution and return the metadata to be checked.</t>
  <t>If the current metadata file was reached via a terminating delegation and does not contain signed metadata about the image, abort the delegation resolution for this image and return an error indicating that image metadata could not be found.</t>
  <t>Search the list of delegations, in listed order. For each delegation:
  <list style="numbers">
      <t>Check if the delegation applies to the image being processed. For the delegation to apply, it MUST include the hardware identifier of the target, and the target name must match one of the delegation’s image paths. If either of these tests fail, move on to the next delegation in the list.</t>
      <t>If the delegation is a multi-role delegation, follow the procedure described in <xref target="multirole_delegations"/>. If the multi-role delegation is terminating and no valid Image metadata is found, abort the delegation resolution and return an error indicating that image metadata could not be found.</t>
      <t>If the delegation is a normal delegation, perform delegation resolution, starting at step 1. Note that this may recurse an arbitrary number of levels deep. If a delegation that applies to the image is found but no image metadata is found in the delegated roles or any of its sub-delegations, simply continue on with the next delegation in the list. The search is only completed/aborted if image metadata or a terminating delegation that applies to the image is found.</t>
    </list></t>
  <t>If the end of the list of delegations in the top-level metadata is reached without finding valid image metadata, return an error indicating that image metadata could not be found.</t>
</list></t>

</section>
<section anchor="multirole_delegations" title="Multi-role delegations">

<t>It is possible to delegate signing authority to multiple delegated roles as described in <xref target="TAP-3"/>. Each multi-role delegation effectively contains a list of ordinary delegations, plus a threshold of those roles that must be in agreement about the non-custom metadata for the image. All multi-role delegations MUST be resolved using the following procedure. Note that there may be sub-delegations inside multi-role delegations.</t>

<t><list style="numbers">
  <t>For each of the roles in the delegation, find and load the image metadata (or error) following the procedure in <xref target="resolve_delegations"/>.</t>
  <t>Inspect the non-custom part of the metadata loaded in step 1:
  <list style="numbers">
      <t>Locate all sets of roles which have agreeing (i.e. identical) non-custom metadata and “MUST match” custom metadata. Discard any set of roles with a size smaller than the threshold of roles that must be in agreement for this delegation.</t>
      <t>Check for a conflict. A conflict exists if there remains more than one agreeing set of roles, each set having different metadata. If a conflict is found, choose and return the metadata from the set of roles which includes the earliest role in the multi-delegation list.</t>
      <t>If there is no conflict, check if there is any single set of roles with matching non-custom metadata. If there is, choose and return the metadata from this set.</t>
      <t>If no agreeing set can be found that meets the agreement threshold, return an error indicating that image metadata could not be found.</t>
    </list></t>
</list></t>

</section>
</section>
</section>
</section>


  </middle>

  <back>

    <references title='Normative References'>





<reference  anchor="RFC2119" target='https://www.rfc-editor.org/info/rfc2119'>
<front>
<title>Key words for use in RFCs to Indicate Requirement Levels</title>
<author initials='S.' surname='Bradner' fullname='S. Bradner'><organization /></author>
<date year='1997' month='March' />
<abstract><t>In many standards track documents several words are used to signify the requirements in the specification.  These words are often capitalized. This document defines these words as they should be interpreted in IETF documents.  This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t></abstract>
</front>
<seriesInfo name='BCP' value='14'/>
<seriesInfo name='RFC' value='2119'/>
<seriesInfo name='DOI' value='10.17487/RFC2119'/>
</reference>



<reference  anchor="RFC3647" target='https://www.rfc-editor.org/info/rfc3647'>
<front>
<title>Internet X.509 Public Key Infrastructure Certificate Policy and Certification Practices Framework</title>
<author initials='S.' surname='Chokhani' fullname='S. Chokhani'><organization /></author>
<author initials='W.' surname='Ford' fullname='W. Ford'><organization /></author>
<author initials='R.' surname='Sabett' fullname='R. Sabett'><organization /></author>
<author initials='C.' surname='Merrill' fullname='C. Merrill'><organization /></author>
<author initials='S.' surname='Wu' fullname='S. Wu'><organization /></author>
<date year='2003' month='November' />
<abstract><t>This document presents a framework to assist the writers of certificate policies or certification practice statements for participants within public key infrastructures, such as certification authorities, policy authorities, and communities of interest that wish to rely on certificates.  In particular, the framework provides a comprehensive list of topics that potentially (at the writer's discretion) need to be covered in a certificate policy or a certification practice statement.  This document supersedes RFC 2527.</t></abstract>
</front>
<seriesInfo name='RFC' value='3647'/>
<seriesInfo name='DOI' value='10.17487/RFC3647'/>
</reference>



<reference  anchor="RFC5198" target='https://www.rfc-editor.org/info/rfc5198'>
<front>
<title>Unicode Format for Network Interchange</title>
<author initials='J.' surname='Klensin' fullname='J. Klensin'><organization /></author>
<author initials='M.' surname='Padlipsky' fullname='M. Padlipsky'><organization /></author>
<date year='2008' month='March' />
<abstract><t>The Internet today is in need of a standardized form for the transmission of internationalized &quot;text&quot; information, paralleling the specifications for the use of ASCII that date from the early days of the ARPANET.  This document specifies that format, using UTF-8 with normalization and specific line-ending sequences.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='5198'/>
<seriesInfo name='DOI' value='10.17487/RFC5198'/>
</reference>


<reference anchor="NFC" target="http://www.unicode.org/reports/tr15/">
  <front>
    <title>Unicode Standard Annex #15: Unicode Normalization Forms</title>
    <author initials="M." surname="Davis">
      <organization></organization>
    </author>
    <author initials="M." surname="Duerst">
      <organization></organization>
    </author>
    <date year="2018" month="October"/>
  </front>
</reference>
<reference anchor="TAP-3" target="https://github.com/theupdateframework/taps/blob/d0818e580c322815a473520f2e8cc5f5eb8df499/tap3.md">
  <front>
    <title>The Update Framework TAP 3 - Multi-role delegations</title>
    <author initials="T.K." surname="Kuppusamy">
      <organization></organization>
    </author>
    <author initials="S." surname="Awwad">
      <organization></organization>
    </author>
    <author initials="E." surname="Cordell">
      <organization></organization>
    </author>
    <author initials="V." surname="Diaz">
      <organization></organization>
    </author>
    <author initials="J." surname="Moshenko">
      <organization></organization>
    </author>
    <author initials="J." surname="Cappos">
      <organization></organization>
    </author>
    <date year="2018" month="January" day="18"/>
  </front>
</reference>
<reference anchor="TAP-4" target="https://github.com/theupdateframework/taps/blob/2cb67d913ec19424d1e354b38f862886fbfd4105/tap4.md">
  <front>
    <title>The Update Framework TAP 4 - Multiple repository consensus on entrusted targets</title>
    <author initials="T.K." surname="Kuppusamy">
      <organization></organization>
    </author>
    <author initials="S." surname="Awwad">
      <organization></organization>
    </author>
    <author initials="E." surname="Cordell">
      <organization></organization>
    </author>
    <author initials="V." surname="Diaz">
      <organization></organization>
    </author>
    <author initials="J." surname="Moshenko">
      <organization></organization>
    </author>
    <author initials="J." surname="Cappos">
      <organization></organization>
    </author>
    <date year="2017" month="December" day="15"/>
  </front>
</reference>
<reference anchor="TAP-5" target="https://github.com/theupdateframework/taps/blob/01726d203c9b9c029d26f6612069ce3180500d9a/tap5.md#downloading-metadata-and-target-files">
  <front>
    <title>The Update Framework TAP 5 - Setting URLs for roles in the root metadata file</title>
    <author initials="T.K." surname="Kuppusamy">
      <organization></organization>
    </author>
    <author initials="S." surname="Awwad">
      <organization></organization>
    </author>
    <author initials="E." surname="Cordell">
      <organization></organization>
    </author>
    <author initials="V." surname="Diaz">
      <organization></organization>
    </author>
    <author initials="J." surname="Moshenko">
      <organization></organization>
    </author>
    <author initials="J." surname="Cappos">
      <organization></organization>
    </author>
    <date year="2018" month="January" day="22"/>
  </front>
</reference>
<reference anchor="TUF-spec" target="https://github.com/theupdateframework/specification/blob/2b4e18472fe25d5b57f36f6fa50104967c8faeaa/tuf-spec.md">
  <front>
    <title>The Update Framework Specification</title>
    <author initials="J." surname="Samuel">
      <organization></organization>
    </author>
    <author initials="N." surname="Mathewson">
      <organization></organization>
    </author>
    <author initials="G." surname="Condra">
      <organization></organization>
    </author>
    <author initials="V." surname="Diaz">
      <organization></organization>
    </author>
    <author initials="T.K." surname="Kuppusamy">
      <organization></organization>
    </author>
    <author initials="S." surname="Awwad">
      <organization></organization>
    </author>
    <author initials="S." surname="Tobias">
      <organization></organization>
    </author>
    <author initials="J." surname="Wright">
      <organization></organization>
    </author>
    <author initials="H." surname="Mehnert">
      <organization></organization>
    </author>
    <author initials="E." surname="Tryzelaar">
      <organization></organization>
    </author>
    <author initials="J." surname="Cappos">
      <organization></organization>
    </author>
    <author initials="R." surname="Dingledine">
      <organization></organization>
    </author>
    <date year="2018" month="September" day="19"/>
  </front>
</reference>


    </references>

    <references title='Informative References'>

<reference anchor="MERCURY" target="https://www.usenix.org/system/files/conference/atc17/atc17-kuppusamy.pdf">
  <front>
    <title>Mercury: Bandwidth-Effective Prevention of Rollback Attacks Against Community Repositories</title>
    <author initials="T.K." surname="Kuppusamy">
      <organization></organization>
    </author>
    <author initials="V." surname="Diaz">
      <organization></organization>
    </author>
    <author initials="J." surname="Cappos">
      <organization></organization>
    </author>
    <date year="2017" month="July" day="12"/>
  </front>
  <seriesInfo name="ISBN" value="978-1-931971-38-6"/>
</reference>
<reference anchor="UPTANEESCAR" target="https://ssl.engineering.nyu.edu/papers/kuppusamy_escar_16.pdf">
  <front>
    <title>Securing Software Updates for Automobiles</title>
    <author initials="T.K." surname="Kuppusamy">
      <organization></organization>
    </author>
    <author initials="A." surname="Brown">
      <organization></organization>
    </author>
    <author initials="S." surname="Awwad">
      <organization></organization>
    </author>
    <author initials="D." surname="McCoy">
      <organization></organization>
    </author>
    <author initials="R." surname="Bielawski">
      <organization></organization>
    </author>
    <author initials="C." surname="Mott">
      <organization></organization>
    </author>
    <author initials="S." surname="Lauzon">
      <organization></organization>
    </author>
    <author initials="A." surname="Weimerskirch">
      <organization></organization>
    </author>
    <author initials="J." surname="Cappos">
      <organization></organization>
    </author>
    <date year="2016" month="October" day="16"/>
  </front>
</reference>
<reference anchor="PEP-458" target="https://www.python.org/dev/peps/pep-0458/">
  <front>
    <title>PEP 458 -- Surviving a Compromise of PyPI</title>
    <author initials="T.K." surname="Kuppusamy">
      <organization></organization>
    </author>
    <author initials="V." surname="Diaz">
      <organization></organization>
    </author>
    <author initials="D." surname="Stufft">
      <organization></organization>
    </author>
    <author initials="J." surname="Cappos">
      <organization></organization>
    </author>
    <date year="2013" month="September" day="27"/>
  </front>
</reference>
<reference anchor="DEPLOY" target="https://docs.google.com/document/d/17wOs-T7mugwte5_Dt-KLGMsp-3_yAARejpFmrAMefSE/">
  <front>
    <title>Uptane Deployment Considerations</title>
    <author initials="." surname="Members of the Uptane Alliance Community">
      <organization></organization>
    </author>
    <date year="n.d."/>
  </front>
</reference>
<reference anchor="USATODAY" target="https://www.usatoday.com/story/tech/columnist/2016/06/28/your-average-car-lot-more-code-driven-than-you-think/86437052/">
  <front>
    <title>Your average car is a lot more code-driven than you think</title>
    <author initials="B." surname="O'Donnell">
      <organization></organization>
    </author>
    <date year="2016" month="June" day="28"/>
  </front>
</reference>
<reference anchor="CR-OTA" target="https://www.consumerreports.org/automotive-technology/automakers-embrace-over-the-air-updates-can-we-trust-digital-car-repair/">
  <front>
    <title>Automakers Embrace Over-the-Air Updates, but Can We Trust Digital Car Repair?</title>
    <author initials="K." surname="Barry">
      <organization></organization>
    </author>
    <date year="2018" month="April" day="20"/>
  </front>
</reference>
<reference anchor="IN-TOTO" target="https://in-toto.github.io/">
  <front>
    <title>in-toto: A framework to secure the integrity of software supply chains</title>
    <author >
      <organization></organization>
    </author>
    <date year="2018" month="October" day="29"/>
  </front>
</reference>


    </references>



  </back>

<!-- ##markdown-source:
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
MJh+wSjhnFTi8hhh6PO7kPv/B4oYGbkZMgEA

-->

</rfc>


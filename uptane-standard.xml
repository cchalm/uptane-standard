<?xml version="1.0" encoding="UTF-8"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc2629 version 1.2.9 -->

<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
]>

<?rfc toc="yes"?>
<?rfc sortrefs="yes"?>
<?rfc symrefs="yes"?>

<rfc ipr="noDerivativesTrust200902" docName="uptane-standard-design" category="info">

  <front>
    <title abbrev="UPTANE">Uptane Standard for Design and Implementation v.1.1.0</title>

    <author initials="." surname="Members of the Uptane Community" fullname="Uptane Community">
      <organization>Joint Development Foundation Projects, LLC, Uptane Series (c/o Prof. Justin Cappos)</organization>
      <address>
        <postal>
          <street>6 MetroTech</street>
          <city>Brooklyn</city>
          <region>NY</region>
          <code>11201</code>
          <country>USA</country>
        </postal>
        <email>uptane-standards@googlegroups.com</email>
      </address>
    </author>

    <date year="2021" month="January" day="08"/>

    <area>TODO</area>
    <workgroup>TODO</workgroup>
    <keyword>Internet-Draft</keyword>

    <abstract>


<t>This document describes a framework for securing ground vehicle software update systems.</t>



    </abstract>


  </front>

  <middle>


<section anchor="introduction" title="Introduction">

<t>Uptane is a secure software update framework for ground vehicles. This document describes procedures to enable programmers for OEMs and suppliers to securely design and implement this framework in a manner that better protects connected units on ground vehicles. Integrating Uptane as outlined in the sections that follow can reduce the ability of attackers to compromise critical systems. It also assures a faster and easier recovery process should a compromise occur.</t>

<t>These instructions specify the components necessary for a compliant implementation. Individual implementers can make their own technological choices within those requirements. This flexibility makes Uptane adaptable to the many customized update solutions used by manufacturers. If implementers wish to have compatible formats, they may use POUFs. POUFs contain a description of implementation choices as well as data binding formats. An implementer who adopts a POUF, as well as the Uptane Standard, will be able to interoperate with other implementations using that POUF.</t>

</section>
<section anchor="terminology" title="Terminology">

<section anchor="conformance-terminology" title="Conformance terminology">

<t>The keywords MUST, MUST NOT, REQUIRED, SHALL, SHALL NOT, SHOULD, SHOULD NOT, RECOMMENDED, MAY, and OPTIONAL in this document are to be interpreted as described in <xref target="RFC2119"/>.</t>

<t>In order to be considered Uptane-compliant, an implementation MUST follow all of these rules as specified in the document.</t>

</section>
<section anchor="terminology-1" title="Terminology">

<t><spanx style="emph">Bundle</spanx>: A set of images released by the repository that is meant to be installed by one or more ECUs on a vehicle during the same update cycle.</t>

<t><spanx style="emph">Bus</spanx>: An internal communications network that interconnects components within a vehicle. A vehicle can have a number of buses that will vary in terms of power, speed, and resources.</t>

<t><spanx style="emph">ECU Identifier</spanx>: An attribute used to identify a specific ECU (e.g., a unique serial number).</t>

<t><spanx style="emph">ECU Version Manifest</spanx>: Metadata which details the software version currently installed on the ECU.</t>

<t><spanx style="emph">Hardware Identifier</spanx>: An attribute used to identify a model of an ECU.</t>

<t><spanx style="emph">Image</spanx>: File containing software for an ECU to install. May contain a binary image to flash, installation instructions, and other necessary information for the ECU to properly apply the update. Each ECU typically holds only one image, although this may vary in some cases.</t>

<t><spanx style="emph">Metadata</spanx>:  Information describing the characteristics of data including, for example, structural
metadata describing data structures (e.g., data format, syntax, and semantics) and
descriptive metadata describing data contents (e.g., information security labels). As used in Uptane, metadata can be described as information associated with a role or an image that contains the characteristics or parameters thereof (e.g., cryptographic material parameters, filenames, and versions.)</t>

<t><spanx style="emph">Primary/Secondary ECUs</spanx>: Terms used to describe the control units within a ground vehicle. A Primary ECU downloads and verifies update images and metadata for itself and for Secondary ECUs, and distributes images and metadata to Secondaries. Thus, it requires extra storage space and a means to download images and metadata.  Secondary ECUs receive their update images and metadata from the Primary, and only need to verify and install their own metadata and images.</t>

<t><spanx style="emph">POUF</spanx>: A document that contains the protocol, operations, usage, and formats (POUF) of a specific Uptane implementation. The POUF contains decisions about SHOULDs and MAYs in an implementation, as well as descriptions of data binding formats. POUFs MAY be used to create compatible Uptane implementations.</t>

<t><spanx style="emph">Repository</spanx>: A server containing metadata about images. May also contain the images themselves. Other data may be stored on the repository to be accessed by ECUs during the update process.</t>

<t><spanx style="emph">Suppliers</spanx>: Independent companies to which vehicle manufacturers may outsource the production of ECUs. Tier-1 suppliers directly serve the manufacturers. Tier-2 suppliers are those that perform outsourced work for Tier-1 suppliers.</t>

<t><spanx style="emph">Vehicle Version Manifest</spanx>: A compilation of all ECU version reports on a vehicle. It serves as a master list of all images currently running on all ECUs in the vehicle.</t>

</section>
<section anchor="uptane-role-terminology" title="Uptane role terminology">

<t>These terms are defined in greater detail in <xref target="roles"/>.</t>

<t><spanx style="emph">Delegation</spanx>: A process by which the responsibility of signing metadata about images is assigned to another party.
<spanx style="emph">Role</spanx>: A party (human or machine) responsible for signing a certain type of metadata. The role controls keys and is responsible for signing metadata entrusted to it with these keys. The roles mechanism of Uptane allows the system to distribute signing responsibilities so that the compromise of one key does not necessarily impact the security of the entire system.</t>

<t><list style="symbols">
  <t><spanx style="emph">Root role</spanx>: Signs metadata that distributes and revokes public keys used to verify the Root, Timestamp, Snapshot, and Targets role metadata.</t>
  <t><spanx style="emph">Snapshot role</spanx>: Signs metadata that indicates which images the repository has released at the same time.</t>
  <t><spanx style="emph">Targets role</spanx>: Signs metadata used to verify the image, such as cryptographic hashes and file size.</t>
  <t><spanx style="emph">Timestamp role</spanx>: Signs metadata that indicates if there are any new metadata or images on the repository.</t>
</list></t>

</section>
<section anchor="acronyms-and-abbreviations" title="Acronyms and abbreviations">

<t><spanx style="emph">CDN</spanx>: Content Delivery Network</t>

<t><spanx style="emph">ECUs</spanx>: Electronic Control Units, the computing units on a vehicle</t>

<t><spanx style="emph">LIN Bus</spanx>: Local Interconnect Bus</t>

<t><spanx style="emph">OBD</spanx>: On-board diagnostics</t>

<t><spanx style="emph">SOTA</spanx>: Software Updates Over-the-Air</t>

<t><spanx style="emph">UDS</spanx>: Unified Diagnostic Services</t>

<t><spanx style="emph">VIN</spanx>: Vehicle Identification Number</t>

</section>
</section>
<section anchor="rationale-for-and-scope-of-the-uptane-standard" title="Rationale for and scope of the Uptane Standard">

<t>This Standard document provides the essential components for the secure design, implementation, and deployment of Uptane by OEMs and suppliers. These guidelines contribute to compromise resilience, or the ability to minimize the extent of the threat posed by any given attack.</t>

<t>However, this specification is intended as an implementation guide, and not as a detailed technical argument about the security properties that Uptane provides.  Readers interested in such documentation should refer to published papers that cover this topic.  <xref target="UPTANEESCAR"/></t>

<section anchor="why-uptane-requires-a-standards-document" title="Why Uptane requires a standards document">

<t>A standards document that can guide the safe design, integration, and deployment of Uptane in vehicles is needed at this time because:</t>

<t><list style="symbols">
  <t>The number of connected units on the average vehicle continues to grow, with mainstream cars now containing up to 100 million lines of code. <xref target="USATODAY"/></t>
  <t>The expanded use of software over-the-air strategies creates new attack surfaces for malicious parties. <xref target="CR-OTA"/></t>
  <t>Legacy update strategies, such as SSL/TLS or GPG/RSA, are not feasible for use on vehicle ECUs because they force manufacturers to chose between enhanced security and customizability.</t>
  <t>Conventional strategies are also complicated by the differing resources of the ECUs, which can vary greatly in memory, storage space, and Internet connectivity.</t>
  <t>The design of Uptane makes it possible to offer improved design flexibility without sacrificing security.</t>
  <t>This added design flexibility, however, could be a liability if the framework is implemented incorrectly.</t>
  <t>Standardization of crucial steps in the design, implementation, and use of Uptane can assure that customizability does not impact security or functionality.</t>
</list></t>

</section>
<section anchor="scope-of-standard-coverage" title="Scope of Standard coverage">

<t>This document sets guidelines for implementing Uptane in most systems capable of updating software on connected units in ground vehicles, including passenger vehicles, light-duty trucks, heavy-duty trucks, and motorcycles. Uptane could potentially also be applied to other ground vehicles, such as automated shuttles, recreational vehicles, and military ground vehicles. Uptane could even be applied to domains such as IoT devices, medical devices, and autonomous aerial vehicles. In this section, we define the scope of that applicability by providing sample use cases and possible exceptions, aspects of software update security that are not applicable to Uptane, and the design requirements governing the preparation of these standards.</t>

<section anchor="assumptions" title="Assumptions">

<t>We assume the following system preconditions for Uptane:</t>

<t><list style="symbols">
  <t>Vehicles have the ability to establish connectivity to required backend services. For example, this could be done through cellular, Wi-Fi, or hard-wired mechanisms.</t>
  <t>ECUs are either directly connected to the communication channel, or are indirectly connected via some sort of network gateway.</t>
  <t>ECUs are programmable and provide sufficient performance to be updated.</t>
  <t>ECUs must be able to perform public key cryptography operations and calculate hashes of images and metadata files.</t>
  <t>There are state-of-the-art secure servers in place, such as the Director and Image repository servers.</t>
</list></t>

<t>It is important that any bugs detected in Uptane implementations be patched promptly. Failure to do so could interfere with the effectiveness of Uptane’s operations.</t>

</section>
<section anchor="use-cases" title="Use cases">

<t>The following use cases provide a number of scenarios illustrating the manner in which software updates could be accomplished using Uptane.</t>

<section anchor="oems-initializing-uptane-at-the-factory-using-sota" title="OEMs initializing Uptane at the factory using SOTA">

<t>An OEM plans to install Uptane on new vehicles. This entails the following components: code to perform full and partial verification, the latest copy of the relevant metadata, the public keys, and an accurate attestation of the latest time. The OEM then either requires its tier-1 suppliers to provide these materials to the suppliers’ assembly lines or can choose to add the materials later at the OEM’s assembly lines. The OEM’s in-vehicle implementation is Uptane-compliant if:</t>

<t><list style="numbers">
  <t>all Primaries perform full verification;</t>
  <t>all Secondaries that are updated via OTA at least perform partial verification; and</t>
  <t>all other ECUs that do not perform any type of verification cannot be updated via OTA.</t>
</list></t>

</section>
<section anchor="updating-one-ecu-with-a-complete-image" title="Updating one ECU with a complete image">

<t>A tier-1 supplier completes work on a revised image for an electronic brake control module. This module will control the brakes on all models of an SUV produced by the OEM mentioned above. Assuming supplier delegation is supported by the OEM for this ECU, each tier-1 supplier digitally signs the image, then delivers the signature, all of its metadata, including delegations, and associated images to the OEM. The OEM adds these metadata and images to its Image repository, along with information about any dependencies and conflicts between this image and those for other ECUs used in the OEM’s vehicles. The OEM also updates the inventory database, so that the Director repository can instruct the ECU on how to install these updated images.</t>

</section>
<section anchor="updating-individual-ecus-on-demand" title="Updating individual ECUs on demand">

<t>An OEM has issued a recall to address a problem with a keyless entry device that has been locking people out of their cars. The OEM prepares an updated flash image in the manner described above. The OEM then ships USB flash drives to vehicle owners and dealerships that allow those parties to update the firmware of their vehicles.</t>

</section>
<section anchor="update-one-ecu-with-multiple-deltas" title="Update one ECU with multiple deltas">

<t>The OEM wants to use delta updates to save over-the-air bytes. The delta images contain only the code and/or data that has changed from the previous image version. To do so, the OEM must first modify the Director repository, using the vehicle version manifest and dependency resolution to determine the differences between the previous and latest images. The OEM then adds the following to the custom Targets metadata used by the Director repository: (1) the algorithm used to apply a delta image, and (2) the Targets metadata about the delta image. The OEM will also check whether the delta images match the Targets metadata from the Director repository.</t>

</section>
</section>
</section>
<section anchor="exceptions" title="Exceptions">

<t>There are a number of factors that could impede the completion of the above scenarios:</t>

<t><list style="symbols">
  <t>ECUs may be lacking the necessary resources to function as designated. These insufficient resources could include limited CPU or RAM inadequate for performance of public key cryptography; a lack of sufficient storage to undo installation of bad software; or a location on a low-speed network (e.g., LIN).</t>
  <t>ECUs may reside on different network segments, and may not be able to directly reach each other, requiring a gateway to facilitate communication.</t>
  <t>A user may replace OEM-installed ECUs with aftermarket ECUs.</t>
  <t>A vehicle may be able to download only a limited amount of data via a cellular channel due to limits on a data plan.</t>
  <t>A system may lack sufficient power to download or install software updates.</t>
  <t>Vehicles may be offline for extended periods of time, thus missing required updates (e.g., key rotations).</t>
  <t>OEMs may be unwilling to implement costly security or hardware requirements.</t>
</list></t>

</section>
<section anchor="out-of-scope" title="Out of scope">

<t>The following topics will not be addressed in this document, as they represent threats outside the scope of Uptane:</t>

<t><list style="symbols">
  <t>Physical attacks, such as manual tampering with ECUs outside the vehicle.</t>
  <t>Compromise of the packaged software, such as malware embedded in a trusted package.</t>
  <t>Compromise of the supply chain (e.g., build system, version control system, packaging process). A number of strategies (e.g., git signing, TPMs, in-toto <xref target="IN-TOTO"/>)  already exist to address this problem. Therefore, there is no need to duplicate those techniques here.</t>
  <t>Problems associated with OBD or UDS programming of ECUs, such as authentication of communications between ECUs.</t>
  <t>Malicious mirrors of package repositories, which may substitute original packages with malicious packages with matching version numbers <xref target="MERCURY"/>.</t>
</list></t>

</section>
<section anchor="design-requirements" title="Design requirements">

<t>The design requirements for this document are governed by the following principal parameters:</t>

<t><list style="symbols">
  <t>to clearly mandate the design and implementation steps that are security critical and must be followed as is, while offering flexibility in the implementation of non-critical steps. In this manner, users can adapt to support different use models and deployment scenarios.</t>
  <t>to ensure that, if Uptane is implemented, the security practices mandated or suggested in this document do not interfere with the functionality of ECUs, vehicles, or the systems that maintain them.</t>
  <t>to delineate guidelines to ensure that, should any part of the SOTA mechanism of a vehicle be attacked, an attacker must compromise two or more modules to breach the SOTA mechanism.</t>
</list></t>

</section>
</section>
<section anchor="threat-model-and-attack-strategies" title="Threat model and attack strategies">

<t>The overarching goal of Uptane is to provide a system that is resilient in the face of various types of compromise. In this section, we describe the goals an attacker may have (<xref target="attacker_goals"/>) and the capabilities they may have or could develop (<xref target="capabilities"/>). We then describe and classify types of attacks on the system according to the attacker’s goals (<xref target="threats"/>).</t>

<section anchor="attacker_goals" title="Attacker goals">

<t>We assume that attackers may want to achieve one or more of the following goals, in increasing order of severity:</t>

<t><list style="symbols">
  <t>Read the contents of updates to discover confidential information, reverse-engineer firmware, or compare two firmware images to identify security fixes and hence determine the fixed security vulnerability.</t>
  <t>Deny installation of updates to prevent vehicles from fixing software problems.</t>
  <t>Cause one or more ECUs in the vehicle to fail, denying use of the vehicle or of certain functions.</t>
  <t>Control ECUs within the vehicle, and possibly the vehicle itself.</t>
</list></t>

</section>
<section anchor="capabilities" title="Attacker capabilities">

<t>Uptane is designed with resilience to compromise in mind. We assume that attackers may develop one or more of the following capabilities:</t>

<t><list style="symbols">
  <t>Intercept and modify network traffic (i.e., perform man-in-the-middle attacks). This capability may be developed in two domains:
  <list style="symbols">
      <t>Outside the vehicle, intercepting and modifying traffic between the vehicle and software repositories.</t>
      <t>Inside the vehicle, intercepting and modifying traffic on one or more vehicle buses (e.g., via an OBD port or using a compromised ECU as a vector).</t>
    </list></t>
  <t>Compromise and control either a Director repository or Image repository server, and any keys stored on that repository, but not both the Director and Image repositories.</t>
  <t>Compromise either a Primary ECU or a Secondary ECU, but not both in the same vehicle.</t>
</list></t>

</section>
<section anchor="threats" title="Description of threats">

<t>Uptane’s threat model includes the following types of attacks, organized according to the attacker goals listed in <xref target="attacker_goals"/>.</t>

<section anchor="read_updates" title="Read updates">

<t><list style="symbols">
  <t><spanx style="emph">Eavesdrop attack:</spanx> Read sensitive or confidential information from an update intended to be encrypted for a specific ECU. (Note: Not all implementations will have a need for protecting information in this way.)</t>
</list></t>

</section>
<section anchor="deny_updates" title="Deny installation of updates">

<t>An attacker seeking to deny the installation of updates may attempt one or more of the following strategies:</t>

<t><list style="symbols">
  <t><spanx style="emph">Drop-request attack:</spanx> Block network traffic outside or inside the vehicle.</t>
  <t><spanx style="emph">Slow retrieval attack:</spanx> Slow down network traffic, in the extreme case sending barely enough packets to avoid a timeout. Similar to a drop-request attack, except that both the sender and receiver of the traffic still think network traffic is unimpeded.</t>
  <t><spanx style="emph">Freeze attack:</spanx> Continue to send a properly signed, but old, update bundle to the ECUs, even if newer updates exist.</t>
  <t><spanx style="emph">Partial bundle installation attack:</spanx> Install a valid (signed) update bundle, and then block selected updates within the bundle.</t>
  <t>Conduct a denial of service attack against the Uptane repositories or infrastructure.</t>
</list></t>

</section>
<section anchor="change_functionality" title="Interfere with ECU functionality">

<t>Attackers seeking to interfere with the functionality of vehicle ECUs in order to cause an operational failure or unexpected behavior may do so in one of the following ways:</t>

<t><list style="symbols">
  <t><spanx style="emph">Rollback attack:</spanx> Cause an ECU to install a previously valid software revision that is older than the currently installed version.</t>
  <t><spanx style="emph">Endless data attack:</spanx> Send a large amount of data to an ECU until it runs out of storage, possibly causing the ECU to fail to operate.</t>
  <t><spanx style="emph">Mix-and-match attack:</spanx> Install a malicious software bundle in which some of the updates do not interoperate properly. This may be accomplished even if all of the individual images being installed are valid, as long as valid versions exist that are mutually incompatible.</t>
</list></t>

</section>
<section anchor="control_ecu" title="Control an ECU or vehicle">

<t>Full control of a vehicle, or one or more ECUs within a vehicle, is the most severe threat.</t>

<t><list style="symbols">
  <t><spanx style="emph">Arbitrary software attack:</spanx> Cause an ECU to install and run arbitrary code of the attacker’s choice.</t>
</list></t>

</section>
</section>
</section>
<section anchor="design" title="Detailed design of Uptane">

<t>Uptane does not specify implementation details. Instead, this Standard describes the components necessary for a compliant implementation and leaves it up to individual implementers to make their own technological choices within those requirements.</t>

<t>At a high level, Uptane requires:</t>

<t><list style="symbols">
  <t>Two software repositories:
  <list style="symbols">
      <t>An Image repository containing binary images to install and signed metadata about those images.</t>
      <t>A Director repository connected to an inventory database that can sign metadata on demand for images in the Image repository.</t>
    </list></t>
  <t>Repository tools for generating Uptane-specific metadata about images.</t>
  <t>A public key infrastructure supporting the required metadata production and signing roles on each repository:
  <list style="symbols">
      <t>Root - The certificate authority for the Uptane ecosystem. Distributes public keys for verifying all the other roles’ metadata.</t>
      <t>Timestamp - Indicates whether there are new metadata or images.</t>
      <t>Snapshot - Indicates images released by the repository at a point in time via signing metadata about Targets metadata.</t>
      <t>Targets - Indicates metadata about images, such as hashes and file sizes.</t>
    </list></t>
  <t>A secure way for ECUs to know the time.</t>
  <t>An ECU capable of downloading images and associated metadata from the Uptane servers.</t>
  <t>An in-vehicle client on a Primary ECU capable of verifying the signatures on all update metadata and downloading updates on behalf of its associated Secondary ECUs. The Primary ECU MAY be the same ECU that communicates with the server.</t>
  <t>A client or library on each Secondary ECU capable of performing either full or partial verification of metadata.</t>
</list></t>

<section anchor="roles" title="Roles on repositories">

<t>A repository contains images and metadata. Each role has a particular type of metadata associated with it, as described in <xref target="meta_structures"/>.</t>

<section anchor="root_role" title="The Root role">

<t>A repository’s Root role SHALL be responsible for a Certificate Authority as defined in <xref target="RFC3647"/>.
A repository’s Root role SHALL produce and sign Root metadata as described in <xref target="root_meta"/>.
A repository’s Root role SHALL sign the public keys used to verify the metadata produced by the Timestamp, Snapshot, and Targets roles.
A repository’s Root role SHALL revoke keys for the other roles if they are compromised.</t>

</section>
<section anchor="targets_role" title="The Targets role">

<t>A repository’s Targets role SHALL produce and sign metadata about images and delegations as described in <xref target="targets_meta"/>.</t>

<section anchor="targets_role_delegations" title="Delegations">

<t>The Targets role on the Image repository MAY delegate the responsibility of signing metadata to other, custom-defined roles referred to as delegated targets. If it does, it MUST do so as specified in <xref target="delegations_meta"/>.</t>

<t>Responsibility for signing images or a subset of images MAY be delegated to more than one role and therefore it is possible for two different roles to be trusted for signing a particular image. For this reason, delegations MUST be prioritized.</t>

<t>A particular delegation for a subset of images MAY be designated as <spanx style="strong">terminating</spanx>. For terminating delegations, the client SHALL NOT search any further if it does not find validly signed metadata about those images. Delegations SHOULD NOT be terminating by default; terminating delegations SHOULD only be used when there is a compelling technical reason to do so.</t>

<t>A delegation for a subset of images MAY be a multi-role delegation <xref target="TAP-3"/>. A multi-role delegation indicates that multiple roles are needed to sign a particular image and each of the delegatee roles MUST sign the same metadata.</t>

<t>Delegations only apply to the Image repository. The Targets role on the Director repository MUST NOT delegate metadata signing responsibility.</t>

</section>
</section>
<section anchor="snapshot_role" title="The Snapshot role">

<t>A repository’s Snapshot role SHALL produce and sign metadata about all Targets metadata the repository releases, including the current version number of the top-level Targets metadata, and the version numbers of all delegated Targets metadata, as described in <xref target="snapshot_meta"/>.</t>

</section>
<section anchor="timestamp_role" title="The Timestamp role">

<t>A repository’s Timestamp role SHALL produce and sign metadata indicating whether there are new metadata or images on the repository. It MUST do so by signing the metadata about the Snapshot metadata file.</t>

</section>
</section>
<section anchor="meta_structures" title="Metadata structures">

<t>Uptane’s security guarantees all rely on properly created metadata that follows a designated structure. The Uptane Standard <spanx style="strong">does not</spanx> mandate any particular format or encoding for the metadata as a whole. ASN.1 (with any encoding scheme like BER, DER, XER, etc.), JSON, XML, or any other encoding format that is capable of providing the required structure MAY be used.</t>

<t>However, string comparison is required as part of metadata verification. To ensure an accurate basis for comparing strings, all strings MUST be encoded in the Unicode Format for Network Interchange as defined in <xref target="RFC5198"/>, including normalization into Unicode Normalization Form C (<xref target="NFC"/>).</t>

<t>In the <spanx style="emph">Deployment Best Practices</spanx> (<xref target="DEPLOY"/>), Joint Development Foundation Projects, LLC, Uptane Series provides some examples of compliant metadata structures in ASN.1 and JSON.</t>

<section anchor="common_metadata" title="Common metadata structures">

<t>Every public key MUST be represented using a public key identifier.  A public key identifier is EITHER all of the following:</t>

<t><list style="symbols">
  <t>The value of the public key itself (which MAY be, for example, formatted as a PEM string)</t>
  <t>The public key cryptographic algorithm used by the key (such as RSA or ECDSA)</t>
  <t>The particular scheme used to verify the signature (such as <spanx style="verb">rsassa-pss-sha256</spanx> or <spanx style="verb">ecdsa-sha2-nistp256</spanx>)</t>
</list></t>

<t>OR a secure hash over at least the above components (such as the keyid mechanism in TUF).</t>

<t>All four Uptane roles (Root, Targets, Snapshot, and Timestamp) share a common structure. They SHALL contain the following two attributes:</t>

<t><list style="symbols">
  <t>A payload of metadata to be signed</t>
  <t>An attribute containing the signature(s) of the payload, where each entry specifies:
  <list style="symbols">
      <t>The public key identifier of the key being used to sign the payload</t>
      <t>A signature with this key over the payload</t>
    </list></t>
</list></t>

<t>The payload differs depending on the role. However, the payload for all roles shares a common structure. It SHALL contain the following four attributes:</t>

<t><list style="symbols">
  <t>An indicator of the type of role (Root, Targets, Snapshot, or Timestamp)</t>
  <t>An expiration date and time</t>
  <t>An integer version number, which SHOULD be incremented each time the metadata file is updated</t>
  <t>The role-specific metadata for the role indicated</t>
</list></t>

<t>The following sections describe the role-specific metadata. All roles SHALL follow the common structures described here.</t>

</section>
<section anchor="root_meta" title="Root metadata">

<t>A repository’s Root metadata distributes the public keys of the top-level Root, Targets, Snapshot, and Timestamp roles, as well as revocations of those keys. It SHALL contain two attributes:</t>

<t><list style="symbols">
  <t>A representation of the public keys for all four roles. Each key SHALL have a unique public key identifier.</t>
  <t>An attribute mapping each role to (1) its public key(s), and (2) the threshold of signatures required for that role.</t>
</list></t>

</section>
<section anchor="targets_meta" title="Targets metadata">

<t>The Targets metadata on a repository contains all of the information about images to be installed on ECUs. This includes filenames, hashes, file sizes, and MAY also include other useful information, such as what types of hardware are compatible with a particular image.</t>

<t>Targets metadata can also contain metadata about delegations, allowing one Targets role to delegate its authority to another. This means that an individual Targets metadata file might contain only metadata about delegations, only metadata about images, or some combination of the two. The details of how ECUs traverse the delegation tree to find valid metadata about images is specified in <xref target="resolve_delegations"/>.</t>

<section anchor="targets_images_meta" title="Metadata about images">

<t>To be available to install on clients, all images on the repository MUST have their metadata listed in a Targets role.  Each Targets role MAY provide a list of some images on the repository.  This list MUST provide, at a minimum, the following information about each image:</t>

<t><list style="symbols">
  <t>The image filename</t>
  <t>The size of the image in bytes</t>
  <t>One or more hashes of the image file, along with the hashing function used</t>
</list></t>

<section anchor="custom-metadata-about-images" title="Custom metadata about images">

<t>In addition to the required metadata, Targets metadata files MAY contain extra metadata for images on the repository. This metadata can be customized for a particular use case. Examples of use cases for different types of custom metadata can be found in the <spanx style="emph">Deployment Best Practices</spanx> document (<xref target="DEPLOY"/>). However, there are a few important pieces of custom metadata that SHOULD be present in most implementations. In addition, there is one element in the custom metadata that MUST be present in the Targets metadata from the Director.</t>

<t>Custom metadata MAY also contain a demarcated field or section that MUST match whenever two pieces of metadata are checked against each other, such as when Targets metadata from the Director repository is checked against Targets metadata from the Image repository.</t>

<t>The information listed below SHOULD be provided for each image on both the Image repository and the Director repository. If a “MUST match section” is to be implemented, that is where this information SHOULD be placed.</t>

<t><list style="symbols">
  <t>A release counter, to be incremented each time a new version of the image is released. This can be used to prevent rollback attacks even in cases where the Director repository is compromised.</t>
  <t>A hardware identifier, or list of hardware identifiers, representing models of ECUs with which the image is compatible. This can be used to ensure that an ECU cannot be ordered to install an incompatible image, even in cases where the Director repository is compromised.</t>
</list></t>

<t>The following information is CONDITIONALLY REQUIRED for each image on the Director repository IF that image is encrypted:</t>

<t><list style="symbols">
  <t>Information about filenames, hashes, and file size of the encrypted image.</t>
  <t>Information about the encryption method, and other relevant information–for example, a symmetric encryption key encrypted by the ECU’s asymmetric key could be included in the Director repository metadata.</t>
</list></t>

<t>The following information MUST be provided from the Director repository for each image in the Targets metadata:</t>

<t><list style="symbols">
  <t>An ECU identifier (such as a serial number), specifying the ECU that should install the image.</t>
</list></t>

<t>The Director repository MAY provide a download URL for the image file. This may be useful, for example, when the image is on a public CDN and the Director wishes to provide a signed URL.</t>

</section>
</section>
<section anchor="delegations_meta" title="Metadata about delegations">

<t>A Targets metadata file on the Image repository (but not the Director repository) MUST be able to delegate signing authority to other entities. For example, it could delegate signing authority for a particular ECU’s firmware to that ECU’s supplier. A metadata file MAY contain any number of delegations and MUST keep the delegations in prioritized order.</t>

<t>Any metadata file with delegations MUST provide the following information:</t>

<t><list style="symbols">
  <t>A list of public keys of all delegatees. Each key should have a unique public key identifier and a key type.</t>
  <t>A list of delegations, each of which contains:
  <list style="symbols">
      <t>A list of the filenames to which this role applies. This MAY be expressed using wildcards, or by enumerating a list, or a combination of the two.</t>
      <t>An optional list of the hardware identifiers to which this role applies.  If this is omitted, any hardware identifier will match.</t>
      <t>An indicator of whether or not this is a terminating delegation. (See <xref target="targets_role_delegations"/>.)</t>
      <t>A list of the roles to which this delegation applies. Each role needs to specify:
      <list style="symbols">
          <t>A name for the role (e.g., “supplier1-qa”)</t>
          <t>The key identifiers for each key this role uses</t>
          <t>A threshold of keys that must sign for this role</t>
        </list></t>
    </list></t>
</list></t>

<t>Note that <spanx style="strong">any</spanx> Targets metadata file stored on the Image repository may contain delegations, and these delegations can be in chains of arbitrary length.</t>

</section>
</section>
<section anchor="snapshot_meta" title="Snapshot metadata">

<t>The Snapshot metadata lists version numbers and filenames of all Targets metadata files. It protects against mix-and-match attacks if a delegated supplier key is compromised.</t>

<t>For each Targets metadata file on the repository, the Snapshot metadata SHALL contain the following information:</t>

<t><list style="symbols">
  <t>The filename and version number of the Targets metadata file.</t>
</list></t>

<t>The Snapshot metadata MAY also list the Root metadata filename and version number for the purpose of backward compatibility. Historically, this was a requirement in TUF, but it is no longer required and does not provide a significant security benefit.</t>

</section>
<section anchor="timestamp_meta" title="Timestamp metadata">

<t>The Timestamp metadata SHALL contain the following information:</t>

<t><list style="symbols">
  <t>The filename and version number of the latest Snapshot metadata on the repository.</t>
  <t>One or more hashes of the Snapshot metadata file, along with the hashing function used.</t>
</list></t>

</section>
<section anchor="repo_mapping_meta" title="Repository mapping metadata">

<t>As described in the introduction to <xref target="design"/>, Uptane requires a Director repository and an Image repository. However, it is possible to have an Uptane-compliant implementation that has more than two repositories.</t>

<t>Repository mapping metadata informs a Primary ECU about which repositories to trust for images or image paths. <xref target="TAP-4"/> describes how to make use of more complex repository mapping metadata in order to have more than the two required repositories.</t>

<t>Repository mapping metadata, or the equivalent informational content, MUST be present on all Primary ECUs, and MUST contain the following information:</t>

<t><list style="symbols">
  <t>A list of repository names and one or more URLs at which the named repository can be accessed. At a minimum, this MUST include the Director and Image repositories.</t>
  <t>A list of mappings of image paths to repositories, each of which contains:
  <list style="symbols">
      <t>A list of image paths. Image paths MAY be expressed using wildcards, or by enumerating a list, or a combination of the two.</t>
      <t>A list of repositories that MUST provide signed Targets metadata for images stored at those paths.</t>
    </list></t>
</list></t>

<t>For example, in the most basic Uptane case, the repository mapping metadata would contain:</t>

<t><list style="symbols">
  <t>The name and URL of the Director repository.</t>
  <t>The name and URL of the Image repository.</t>
  <t>A single mapping indicating that all images (<spanx style="verb">*</spanx>) MUST be signed by both the Director and Image repository.</t>
</list></t>

<t>Note that the metadata need not be in the form of a metadata file. For example, in the basic case where there is only one Director and one Image repository, and all images need to have signed metadata from both repositories, it would be sufficient to have a configuration file with URLs for the two repositories and a client that always checks for metadata matches between them. In this case, no explicit mapping would be defined, because the mapping is defined as part of the Uptane client implementation.</t>

<t>The <spanx style="emph">Uptane Deployment Best Practices</spanx> document (<xref target="DEPLOY"/>) provides more guidance on how to implement repository mapping metadata for more complex use cases. It also discusses strategies for updating repository mapping metadata, if required.</t>

</section>
<section anchor="metadata_filename_rules" title="Rules for filenames in repositories and metadata">

<t>There is a difference between the filename in a metadata file or an ECU, and the filename on a repository. This difference exists in order to avoid race conditions, where metadata and images are read from, and written to, at the same time. For more details, the reader should read the TUF specification <xref target="TUF-spec"/> and PEP 458 <xref target="PEP-458"/>.</t>

<t>Unless stated otherwise, all files SHALL be written to repositories in accordance with the following two rules:</t>

<t><list style="numbers">
  <t>Metadata filenames SHALL be qualified with version numbers. If a metadata file A is specified as FILENAME.EXT in another metadata file B, then it SHALL be written as VERSION.FILENAME.EXT, where VERSION is A’s version number, as defined in <xref target="common_metadata"/>, with one exception: If the version number of the Timestamp metadata file might not be known in advance by a client, it MAY be read from, and written to, a repository using a filename without a version number qualification, i.e., FILENAME.EXT.</t>
  <t>If an image is specified in a Targets metadata file as FILENAME.EXT, it SHALL be written to the repository as HASH.FILENAME.EXT, where HASH is one of the hash digests of the file, as specified in <xref target="targets_images_meta"/>. The file MUST be written to the repository using <spanx style="emph">n</spanx> different filenames, one for each hash digest listed in its corresponding Targets metadata.</t>
</list></t>

<t>For example:</t>

<t><list style="symbols">
  <t>The version number of the Snapshot metadata file is 61, and its filename in the Timestamp metadata is <spanx style="emph">snapshot.json</spanx>. The filename on the repository will be <spanx style="emph">61.snapshot.json</spanx>.</t>
  <t>There is an image with the <spanx style="emph">filename acme_firmware.bin</spanx> specified in the Targets metadata, with a SHA3-256 of <spanx style="emph">aaaa</spanx> and a SHA-512/224 of <spanx style="emph">bbbb</spanx>. It will have two filenames on the repository: <spanx style="emph">aaaa.acme_firmware.bin</spanx> and <spanx style="emph">bbbb.acme_firmware.bin</spanx>.</t>
</list></t>

</section>
</section>
<section anchor="server-repository-implementation-requirements" title="Server / repository implementation requirements">

<t>An Uptane implementation SHALL make the following services available to vehicles:</t>

<t><list style="symbols">
  <t>Image repository</t>
  <t>Director repository</t>
</list></t>

<t>Additionally, an Uptane implementation requires ECUs to have a secure way to know the current time.</t>

<section anchor="image-repository" title="Image repository">

<t>The Image repository exists to allow an OEM and/or its suppliers to upload images and their associated metadata. It makes these images and their metadata available to vehicles. The Image repository is designed to be primarily controlled by human actors, and updated relatively infrequently.</t>

<t>The Image repository SHALL expose an interface permitting the download of metadata and images. This interface SHOULD be public.</t>

<t>The Image repository SHALL require authorization for writing metadata and images.</t>

<t>The Image repository SHALL provide a method for authorized users to upload images and their associated metadata. It SHALL check that a user writing metadata and images is authorized to do so for that specific image by checking the chain of delegations as described in <xref target="delegations_meta"/>.</t>

<t>The Image repository SHALL implement storage which permits authorized users to write an image file using a unique filename, and later read the same file using the same name. It MAY use any filesystem, key-value store, or database that fulfills this requirement.</t>

<t>The Image repository MAY require authentication for read access.</t>

</section>
<section anchor="director_repository" title="Director repository">

<t>The Director repository instructs ECUs as to which images should be installed by producing signed metadata on demand. Unlike the Image repository, it is mostly controlled by automated, online processes. It also consults a private inventory database containing information on vehicles, ECUs, and software revisions.</t>

<t>The Director repository SHALL expose an interface for Primaries to upload vehicle version manifests (<xref target="vehicle_version_manifest"/>) and download metadata. This interface SHOULD be public.
The Director MAY encrypt images for ECUs that require them, either by encrypting on-the-fly or by storing encrypted images on the repository.</t>

<t>The Director repository SHALL implement storage which permits an automated service to write generated metadata files. It MAY use any filesystem, key-value store, or database that fulfills this requirement.</t>

<section anchor="directing-installation-of-images-on-vehicles" title="Directing installation of images on vehicles">

<t>A Director repository MUST conform to the following six-step process for directing the installation of software images on a vehicle.</t>

<t><list style="numbers">
  <t>The Director SHOULD first identify the vehicle. This MAY be done when the Director receives a vehicle version manifest sent by a Primary (as described in <xref target="construct_manifest_primary"/>), decodes the manifest, and determines the unique vehicle identifier. Additionally, the Director MAY utilize other mechanisms to uniquely identify a vehicle (e.g., 2-way TLS with unique client certificates).</t>
  <t>Using the vehicle identifier, the Director queries its inventory database (as described in <xref target="inventory_db"/>) for relevant information about each ECU in the vehicle.</t>
  <t>The Director SHALL check the manifest for accuracy compared to the information in the inventory database. If any of the required checks fail, the Director MAY drop the request. An implementer MAY make additional checks if desired. At a minimum, the Director SHALL check the following:
  <list style="symbols">
      <t>Each ECU recorded in the inventory database is also represented in the manifest.</t>
      <t>The signature of the manifest matches the ECU key of the Primary that sent it.</t>
      <t>The signature of each Secondary’s contribution to the manifest matches the ECU key of that Secondary.</t>
    </list></t>
  <t>The Director SHOULD check that the nonce or counter in each ECU version report has not been used before to prevent a replay of the ECU version report. If the nonce or counter is reused the Director SHOULD drop the request.</t>
  <t>The Director extracts information about currently installed images from the vehicle version manifest. Using this information, it determines if the vehicle is already up-to-date, and if not, determines a set of images that should be installed. The exact process by which this determination takes place is out of scope of this Standard. However, the Director MUST take into account <spanx style="emph">dependencies</spanx> and <spanx style="emph">conflicts</spanx> between images and SHOULD consult well-established techniques for dependency resolution.</t>
  <t>The Director MAY encrypt images for ECUs that require it.</t>
  <t>The Director generates new metadata representing the desired set of images to be installed on the vehicle, based on the dependency resolution in step 4. This includes Targets (<xref target="targets_meta"/>), Snapshot (<xref target="snapshot_meta"/>), and Timestamp (<xref target="timestamp_meta"/>) metadata. It then sends this metadata to the Primary as described in <xref target="download_meta_primary"/>.</t>
</list></t>

</section>
<section anchor="inventory_db" title="Inventory Database">

<t>The Director SHALL use a private inventory database to store information about ECUs and vehicles. An implementer MAY use any durable database for this purpose.</t>

<t>The inventory database MUST record the following pieces of information:</t>

<t><list style="symbols">
  <t>Per vehicle:
  <list style="symbols">
      <t>A unique identifier (such as a VIN)</t>
    </list></t>
  <t>Per ECU:
  <list style="symbols">
      <t>A unique identifier (such as a serial number)</t>
      <t>The vehicle identifier the ECU is associated with</t>
      <t>An ECU key (symmetric or asymmetric; for asymmetric keys, only the public part SHOULD be stored)</t>
      <t>The ECU key identifier (as defined in <xref target="common_metadata"/>)</t>
      <t>Whether the ECU is a Primary or a Secondary</t>
    </list></t>
</list></t>

<t>The inventory database MAY record other information about ECUs and vehicles. It SHOULD record a hardware identifier for each ECU to protect against the possibility of directing the ECU to install incompatible firmware.</t>

</section>
</section>
</section>
<section anchor="in-vehicle-implementation-requirements" title="In-vehicle implementation requirements">

<t>An Uptane-compliant ECU SHALL be able to download and verify image metadata and image binaries before installing a new image and MUST have a secure way of verifying the current time, or a sufficiently recent attestation of the time.</t>

<t>All ECUs SHOULD monitor the download speed of image metadata and image binaries to detect and respond to a slow retrieval attack. If the download is slower than a pre-defined threshold, the ECU SHOULD send an alert to the Director repository, for example as part of the next vehicle version manifest.</t>

<t>Each ECU receiving over-the-air updates in a vehicle is either a Primary or a Secondary ECU. A Primary ECU collects and delivers vehicle manifests to the Director (<xref target="vehicle_version_manifest"/>) that contain information about which images have been installed on ECUs in the vehicle. It also verifies the time and downloads and verifies the latest metadata and images for itself and for its Secondaries. A Secondary ECU verifies the time, and downloads and verifies the latest metadata and images for itself from its associated Primary ECU. It also sends signed information about its installed images to its associated Primary.</t>

<t>All ECUs MUST verify image metadata as specified in <xref target="metadata_verification"/> before installing an image or making it available to other ECUs. A Primary ECU MUST perform full verification (<xref target="full_verification"/>). A Secondary ECU SHOULD perform full verification if possible. If a Secondary cannot perform full verification, it SHALL, at the very least, perform partial verification. In addition, it MAY also perform some steps from the full verification process. See the <spanx style="emph">Uptane Deployment Best Practices</spanx> document (<xref target="DEPLOY"/>) for a discussion of how to choose between partial and full verification.</t>

<t>ECUs MUST have a secure source of time. An OEM/Uptane implementer MAY use any external source of time that is demonstrably secure. The <spanx style="emph">Uptane Deployment Best Practices</spanx> document (<xref target="DEPLOY"/>) describes one way to implement an external time server to cryptographically attest time, as well as the security properties required.</t>

<section anchor="build-time-prerequisite-requirements-for-ecus" title="Build-time prerequisite requirements for ECUs">

<t>For an ECU to be capable of receiving Uptane-secured updates, it MUST have the following data provisioned at the time it is manufactured or installed in the vehicle:</t>

<t><list style="numbers">
  <t>A sufficiently recent copy of required Uptane metadata at the time of manufacture or install. This is necessary for the ECU to authenticate that the remote repository is legitimate when it first downloads metadata in the field. See <spanx style="emph">Uptane Deployment Best Practices</spanx> (<xref target="DEPLOY"/>) for more information.
  <list style="symbols">
      <t>Partial verification Secondary ECUs MUST have the Root and Targets metadata from the Director repository (to reduce the scope of rollback and replay attacks). These ECUs MAY also have metadata from other roles or the Image repository if they will be used by the Secondary.</t>
      <t>Full verification ECUs MUST have a complete set of metadata (Root, Targets, Snapshot, and Timestamp) from both repositories (to prevent rollback and replay attacks), as well as the repository mapping metadata (<xref target="repo_mapping_meta"/>). Delegations are not required.</t>
    </list></t>
  <t>The current time, or a secure attestation of a sufficiently recent time.</t>
  <t>An <spanx style="strong">ECU key</spanx>. This is a private key, unique to the ECU, used to sign ECU version reports and decrypt images. An ECU key MAY be either a symmetric key or an asymmetric key. If it is an asymmetric key, there MAY be separate keys for encryption and signing. For the purposes of this Standard, the set of private keys that an ECU uses is referred to as the ECU key (singular), even if it is actually multiple keys used for different purposes.</t>
</list></t>

</section>
<section anchor="what-the-primary-does" title="What the Primary does">

<t>A Primary downloads, verifies, and distributes the latest time, metadata, and images. To do so, it SHALL perform the following seven steps:</t>

<t><list style="numbers">
  <t>Construct and send vehicle version manifest (<xref target="construct_manifest_primary"/>)</t>
  <t>Download and check current time (<xref target="check_time_primary"/>)</t>
  <t>Download and verify metadata (<xref target="download_meta_primary"/>)</t>
  <t>Download and verify images (<xref target="download_images_primary"/>)</t>
  <t>OPTIONAL: Send latest time to Secondaries (<xref target="send_time_primary"/>)</t>
  <t>Send metadata to Secondaries (<xref target="send_metadata_primary"/>)</t>
  <t>Send images to Secondaries (<xref target="send_images_primary"/>)</t>
</list></t>

<t>Note that the subsequent sections concerning requirements for a Primary do not prohibit implementing Primary capabilities on an ECU that does not communicate directly with the Uptane repositories. This allows for implementations to have multiple ECUs within the vehicle performing functions equivalent to a Primary.
If multiple such Primaries are included within a vehicle, each Secondary ECU SHALL have a single Primary responsible for providing its updates.</t>

<section anchor="construct_manifest_primary" title="Construct and send vehicle version manifest">

<t>The Primary SHALL build a <spanx style="emph">vehicle version manifest</spanx> as described in <xref target="vehicle_version_manifest"/>.</t>

<t>Once the complete manifest is built, the Primary MAY send the manifest to the Director repository. However, it is not strictly required that the Primary send the manifest until step three. If permitted by the implementation, a Primary MAY send only a diff of the manifest to save bandwidth. If an implementation permits diffs, the Director SHOULD have a way to request a full manifest.</t>

<t>Secondaries MAY send their version report at any time so that it is already stored on the Primary when it wishes to check for updates. Alternatively, the Primary MAY request a version report from each Secondary at the time of the update check.</t>

<section anchor="vehicle_version_manifest" title="Vehicle version manifest">

<t>The vehicle version manifest is a metadata structure that MUST contain the following information:</t>

<t><list style="symbols">
  <t>An attribute containing the signature(s) of the payload, each specified by:
  <list style="symbols">
      <t>The public key identifier of the key being used to sign the payload</t>
      <t>The signing method (i.e., ed25519, rsassa-pss, etc.)</t>
      <t>A hash of the payload to be signed</t>
      <t>The hashing function used (i.e., SHA3-256, SHA-512/224, etc.)</t>
      <t>The signature of the hash</t>
    </list></t>
  <t>A payload representing the installed versions of each software image on the vehicle. This payload SHALL contain:
  <list style="symbols">
      <t>The vehicle’s unique identifier (e.g., the VIN)</t>
      <t>The Primary ECU’s unique identifier (e.g., the serial number)</t>
      <t>A list of ECU version reports as specified in <xref target="version_report"/></t>
    </list></t>
</list></t>

<t>Note that one of the ECU version reports should be the version report for the Primary itself.</t>

</section>
<section anchor="version_report" title="ECU version report">

<t>An ECU version report is a metadata structure that MUST contain the following information:</t>

<t><list style="symbols">
  <t>An attribute containing the signature(s) of the payload, each specified by:
  <list style="symbols">
      <t>The public key identifier of the key being used to sign the payload</t>
      <t>The signing method (i.e., ed25519, rsassa-pss, etc.)</t>
      <t>A hash of the payload to be signed</t>
      <t>The hashing function used (i.e., SHA3-256, SHA-512/224, etc.)</t>
      <t>The signature of the hash</t>
    </list></t>
  <t>A payload containing:
  <list style="symbols">
      <t>The ECU’s unique identifier (e.g., the serial number)</t>
      <t>The filename, length, and hashes of its currently installed image (i.e., the non-custom Targets metadata for this particular image)</t>
      <t>An indicator of any detected security attack</t>
      <t>The latest time the ECU can verify at the time this version report was generated</t>
      <t>A nonce or counter to prevent a replay of the ECU version report. This value MUST change each update cycle. It MAY be a cryptographic nonce used with a time server as described in <spanx style="emph">Uptane Deployment Best Practices</spanx>  (<xref target="DEPLOY"/>).</t>
    </list></t>
</list></t>

</section>
</section>
<section anchor="check_time_primary" title="Download and check current time">

<t>The Primary SHALL load the current time from a secure source.</t>

</section>
<section anchor="download_meta_primary" title="Download and verify metadata">

<t>The Primary SHALL download metadata for all targets and perform a full verification on it as specified in <xref target="full_verification"/>.</t>

</section>
<section anchor="download_images_primary" title="Download and verify images">

<t>The Primary SHALL download and verify images for itself and for all of its associated Secondaries. Images SHALL be verified by checking that the hash of the image file matches the hash specified in the Director’s Targets metadata for that image.</t>

<t>There may be several different filenames that all refer to the same image binary, as described in <xref target="metadata_filename_rules"/>. If the Primary has received multiple hashes for a given image binary via the Targets role (see <xref target="targets_images_meta"/>) then it SHALL verify every hash for this image even though the image is identified by a single hash as part of its filename.</t>

</section>
<section anchor="send_time_primary" title="Send latest time to Secondaries">

<t>Unless the Secondary ECU has its own way of verifying the time or does not have the capacity to verify a time message, the Primary is CONDITIONALLY REQUIRED to send the time to each ECU. The Secondary will verify the time message, then overwrite its current time with the received time.</t>

</section>
<section anchor="send_metadata_primary" title="Send metadata to Secondaries">

<t>The Primary SHALL send its latest downloaded metadata to all of its associated Secondaries. The metadata it sends to each Secondary MUST include all of the metadata required for verification on that Secondary. For full verification Secondaries, this includes the metadata for all four roles from both repositories, plus any delegated Targets metadata files the Secondary will recurse through to find the proper delegation. For partial verification Secondaries, this MAY include fewer metadata files; at a minimum, it includes only the Targets metadata file from the Director repository.</t>

<t>The Primary SHOULD determine the minimal set of metadata files to send to each Secondary by performing delegation resolution as described in <xref target="full_verification"/>.</t>

<t>Each Secondary SHALL store the latest copy of all metadata required for its own verification.</t>

</section>
<section anchor="send_images_primary" title="Send images to Secondaries">

<t>The Primary SHALL send the latest image to each of its associated Secondaries that have storage to receive it.</t>

<t>For Secondaries without storage, the Primary SHOULD wait for a request from the Secondary to stream the new image file to it. The Secondary will send the request once it has verified the metadata sent in the previous step.</t>

</section>
</section>
<section anchor="installing-images-on-primary-or-secondary-ecus" title="Installing images on Primary or Secondary ECUs">

<t>An ECU SHALL perform the following steps when attempting to install a new image:</t>

<t><list style="numbers">
  <t>Verify latest attested time. This is optional if the ECU does not have the capacity to verify a time message (<xref target="verify_time"/>)</t>
  <t>Verify metadata (<xref target="verify_metadata"/>)</t>
  <t>Download latest image (<xref target="download_image"/>)</t>
  <t>Verify image (<xref target="verify_image"/>)</t>
  <t>Install image (<xref target="install_image"/>)</t>
  <t>Create and send version report (<xref target="create_version_report"/>)</t>
</list></t>

<section anchor="verify_time" title="Load and verify the latest attested time">

<t>IF the ECU has the capability to verify a time message, the ECU is CONDITIONALLY REQUIRED to load and verify the current time, or the most recent securely attested time.</t>

</section>
<section anchor="verify_metadata" title="Verify metadata">

<t>The ECU SHALL verify the latest downloaded metadata (<xref target="metadata_verification"/>) using either full or partial verification. If the metadata verification fails for any reason, the ECU SHALL jump to the final step (<xref target="create_version_report"/>).</t>

</section>
<section anchor="download_image" title="Download latest image">

<t>If the ECU does not have secondary storage, i.e., buffer storage to temporarily store the latest image before installing it, it SHALL download the latest image from the Primary. (If the ECU has secondary storage, it will already have the latest image in its secondary storage as specified in <xref target="send_images_primary"/>, and should skip to the next step.) The ECU MAY first create a backup of its previous working image and store it elsewhere (e.g., the Primary).</t>

<t>The filename used to identify the latest known image (i.e., the file to request from the Primary) SHALL be determined as follows:</t>

<t><list style="numbers">
  <t>Load the Targets metadata file from the Director repository.</t>
  <t>Find the Targets metadata associated with this ECU identifier.</t>
  <t>Construct the Image filename using the rule in <xref target="metadata_filename_rules"/>, or use the download URL specified in the Director metadata.</t>
  <t>If there is no Targets metadata about this image, abort the update cycle and report that there is no such image. Additionally, in the case of failure, the ECU SHALL retain its previous Targets metadata instead of using the new Targets metadata. Otherwise, download the image (up to the number of bytes specified in the Targets metadata) and verify it according to <xref target="verify_image"/>.</t>
</list></t>

<t>When the Primary responds to the download request, the ECU SHALL overwrite its current image with the downloaded image from the Primary.</t>

<t>If any part of this step fails, the ECU SHALL jump to the final step (<xref target="create_version_report"/>).</t>

</section>
<section anchor="verify_image" title="Verify image">

<t>The ECU SHALL verify that the latest image matches the latest metadata as follows:</t>

<t><list style="numbers">
  <t>Load the latest Targets metadata file from the Director.</t>
  <t>Find the Targets metadata associated with this ECU identifier.</t>
  <t>Check that the hardware identifier in the metadata matches the ECU’s hardware identifier.</t>
  <t>Check that the image filename is valid for this ECU. This MAY be a comparison against a wildcard path, which restricts the ECUs to which a delegation will apply.</t>
  <t>Check that the release counter of the image in the previous metadata, if it exists, is less than or equal to the release counter in the latest metadata.</t>
  <t>If the image is encrypted, decrypt the image with a decryption key to be chosen as follows:
  <list style="symbols">
      <t>If the ECU key is a symmetric key, the ECU SHALL use the ECU key for image decryption.</t>
      <t>If the ECU key is asymmetric, the ECU SHALL check the Targets metadata for an encrypted symmetric key. If such a key is found, the ECU SHALL decrypt the symmetric key using its ECU key, and use the decrypted symmetric key for image decryption.</t>
      <t>If the ECU key is asymmetric and there is no symmetric key in the Targets metadata, the ECU SHALL use its ECU key for image decryption.</t>
    </list></t>
  <t>Check that all hashes listed in the metadata match the corresponding hashes of the image.</t>
</list></t>

<t>If the ECU has secondary storage, the checks SHOULD be performed on the image in secondary storage before it is installed.</t>

<t>When checking hashes, the ECU SHOULD additionally check that the length of the image matches the length listed in the metadata.</t>

<t>NOTE: Verifying image size along with the hashes will become a requirement in a future version of the Uptane Standard.</t>

<t>NOTE: See <xref target="DEPLOY"/> for guidance on how to deal with Secondary ECU failures for ECUs that do not have secondary storage.</t>

<t>If any step fails, the ECU SHALL jump to the final step (<xref target="create_version_report"/>).</t>

</section>
<section anchor="install_image" title="Install image">

<t>The ECU SHALL attempt to install the update. This installation SHOULD occur at a time when all pre-conditions are met. These pre-conditions MAY include ensuring the vehicle is in a safe environment for install (e.g., the vehicle is parked when updating a specific ECU). Another pre-condition MAY include ensuring the ECU has a backup of its current image and metadata in case the current installation fails.</t>

</section>
<section anchor="create_version_report" title="Create and send version report">

<t>The ECU SHALL create a version report as described in <xref target="version_report"/>, and send it to the Primary (or simply save it to disk, if the ECU is a Primary). The Primary SHOULD write the version reports it receives to disk and associate them with the Secondaries that sent them.</t>

</section>
</section>
<section anchor="metadata_verification" title="Metadata verification procedures">

<t>A Primary ECU MUST perform full verification of metadata. A Secondary ECU SHOULD perform full verification of metadata. If a Secondary cannot perform full verification, it SHALL, at the very least, perform partial verification.</t>

<t>If a step in the following workflows does not succeed (e.g., the update is aborted because a new metadata file was not signed), an ECU SHOULD still be able to update again in the future. Errors raised during the update process SHOULD NOT leave ECUs in an unrecoverable state.</t>

<section anchor="partial_verification" title="Partial verification">

<t>In order to perform partial verification, an ECU SHALL perform the following steps:</t>

<t><list style="numbers">
  <t>Load and verify the current time or the most recent securely attested time.</t>
  <t>Download and check the Targets metadata file from the Director repository, following the procedure in <xref target="check_targets"/>.</t>
</list></t>

<t>Note that this verification procedure is the smallest set of Uptane checks permissible for an Uptane Secondary ECU. An ECU MAY additionally implement more metadata checks.</t>

<t>For example, an ECU MAY also fetch and verify Root metadata from the Director (following the procedure in <xref target="check_root"/>) before checking Targets metadata. Performing this additional check would provide the ECU with a secure way to receive and validate a rotation of the Director’s Targets key.</t>

<t>See <xref target="DEPLOY"/> for more discussion on this topic.</t>

</section>
<section anchor="full_verification" title="Full verification">

<t>Full verification of metadata means that the ECU checks that the Targets metadata about images from the Director repository matches the Targets metadata about the same images from the Image repository. This provides resilience to a key compromise in the system.</t>

<t>Full verification MUST be performed by Primary ECUs and SHOULD be performed by Secondary ECUs. In the following instructions, whenever an ECU is directed to download metadata, it applies only to Primary ECUs.</t>

<t>Before starting full verification, the repository mapping metadata MUST be consulted to determine where to download metadata from. This procedure assumes the basic Uptane case: there are only two repositories (Director and Image), and all image paths are required to be signed by both repositories. If a more complex repository layout is being used, refer to <xref target="DEPLOY"/> for guidance on how to determine where metadata should be downloaded from.</t>

<t>In order to perform full verification, an ECU SHALL perform the following steps:</t>

<t><list style="numbers">
  <t>Load and verify the current time or the most recent securely attested time.</t>
  <t>Download and check the Root metadata file from the Director repository, following the procedure in <xref target="check_root"/>.</t>
  <t>Download and check the Timestamp metadata file from the Director repository, following the procedure in <xref target="check_timestamp"/>.</t>
  <t>Check the previously downloaded Snapshot metadata file from the Directory repository (if available). If the hashes and version number of that file match the hashes and version number listed in the new Timestamp metadata, there are no new updates and the verification process MAY be stopped and considered complete. Otherwise, download and check the Snapshot metadata file from the Director repository, following the procedure in <xref target="check_snapshot"/>.</t>
  <t>Download and check the Targets metadata file from the Director repository, following the procedure in <xref target="check_targets"/>.</t>
  <t>If the Targets metadata from the Directory repository indicates that there are no new targets that are not already currently installed, the verification process MAY be stopped and considered complete. Otherwise, download and check the Root metadata file from the Image repository, following the procedure in <xref target="check_root"/>.</t>
  <t>Download and check the Timestamp metadata file from the Image repository, following the procedure in <xref target="check_timestamp"/>.</t>
  <t>Check the previously downloaded Snapshot metadata file from the Image repository (if available). If the hashes and version number of that file match the hashes and version number listed in the new Timestamp metadata, the ECU MAY skip to the last step. Otherwise, download and check the Snapshot metadata file from the Image repository, following the procedure in <xref target="check_snapshot"/>.</t>
  <t>Download and check the top-level Targets metadata file from the Image repository, following the procedure in <xref target="check_targets"/>.</t>
  <t>Verify that Targets metadata from the Director and Image repositories match. A Primary ECU MUST perform this check on metadata for all images listed in the Targets metadata file from the Director repository downloaded in step 6. A Secondary ECU MAY elect to perform this check only on the metadata for the image it will install. (That is, the image metadata from the Director that contains the ECU identifier of the current ECU.) To check that the metadata for an image matches, complete the following procedure:
  <list style="numbers">
      <t>Locate and download a Targets metadata file from the Image repository that contains an image with exactly the same filename listed in the Director metadata, following the procedure in <xref target="resolve_delegations"/>.</t>
      <t>Check that the Targets metadata from the Image repository matches the Targets metadata from the Director repository:
      <list style="numbers">
          <t>Check that the non-custom metadata (i.e., length and hashes) of the unencrypted or encrypted image are the same in both sets of metadata. Note: the Primary is responsible for validating encrypted images and associated metadata. The target ECU (Primary or Secondary) is responsible for validating the unencrypted image and associated metadata.</t>
          <t>Check that all MUST match custom metadata (e.g., hardware identifier and release counter) are the same in both sets of metadata.</t>
          <t>Check that the release counter in the previous Targets metadata file is less than or equal to the release counter in this Targets metadata file.</t>
        </list></t>
    </list></t>
</list></t>

<t>If any step fails, the ECU MUST return an error code indicating the failure. If a check for a specific type of security attack fails (i.e., rollback, freeze, arbitrary software, etc.), the ECU SHOULD return an error code that indicates the type of attack.</t>

</section>
<section anchor="check_root" title="How to check Root metadata">

<t>To properly check Root metadata, an ECU SHOULD:</t>

<t><list style="numbers">
  <t>Load the previous Root metadata file.</t>
  <t>Update to the latest Root metadata file.
  <list style="numbers">
      <t>Let N denote the version number of the latest Root metadata file (which at first could be the same as the previous Root metadata file).</t>
      <t>Try downloading a new version N+1 of the Root metadata file, up to some X number of bytes. The value for X is set by the implementer. For example, X may be tens of kilobytes. The filename used to download the Root metadata file is of the fixed form VERSION_NUMBER.FILENAME.EXT (e.g., 42.root.json). If this file is not available, the current Root metadata file is the latest; continue with step 3.</t>
      <t>Version N+1 of the Root metadata file MUST have been signed by the following: (1) a threshold of keys specified in the latest Root metadata file (version N), and (2) a threshold of keys specified in the new Root metadata file being validated (version N+1). If version N+1 is not signed as required, discard it, abort the update cycle, and report the signature failure. On the next update cycle, begin at version N of the Root metadata file. (Checks for an arbitrary software attack.)</t>
      <t>The version number of the latest Root metadata file (version N) must be less than or equal to the version number of the new Root metadata file (version N+1). Effectively, this means checking that the version number signed in the new Root metadata file is indeed N+1. If the version of the new Root metadata file is less than the latest metadata file, discard it, abort the update cycle, and report the rollback attack. On the next update cycle, begin at step 1 and version N of the Root metadata file. (Checks for a rollback attack.)</t>
      <t>Set the latest Root metadata file to the new Root metadata file.</t>
      <t>Repeat steps 2.1 to 2.6.</t>
    </list></t>
  <t>Check that the current (or latest securely attested) time is lower than the expiration timestamp in the latest Root metadata file. (Checks for a freeze attack.)</t>
  <t>If the Timestamp and/or Snapshot keys have been rotated, delete the previous Timestamp and Snapshot metadata files. (Checks for recovery from fast-forward attacks <xref target="MERCURY"/>.)</t>
</list></t>

</section>
<section anchor="check_timestamp" title="How to check Timestamp metadata">

<t>To properly check Timestamp metadata, an ECU SHOULD:</t>

<t><list style="numbers">
  <t>Download up to Y number of bytes. The value for Y is set by the implementer. For example, Y may be tens of kilobytes. The filename used to download the Timestamp metadata file is of the fixed form FILENAME.EXT (e.g., timestamp.json).</t>
  <t>Check that it has been signed by the threshold of keys specified in the latest Root metadata file. If the new Timestamp metadata file is not properly signed, discard it, abort the update cycle, and report the signature failure. (Checks for an arbitrary software attack.)</t>
  <t>Check that the version number of the previous Timestamp metadata file, if any, is less than or equal to the version number of this Timestamp metadata file. If the new Timestamp metadata file is older than the trusted Timestamp metadata file, discard it, abort the update cycle, and report the potential rollback attack. (Checks for a rollback attack.)</t>
  <t>Check that the current (or latest securely attested) time is lower than the expiration timestamp in this Timestamp metadata file. If the new Timestamp metadata file has expired, discard it, abort the update cycle, and report the potential freeze attack. (Checks for a freeze attack.)</t>
</list></t>

</section>
<section anchor="check_snapshot" title="How to check Snapshot metadata">

<t>To properly check Snapshot metadata, an ECU SHOULD:</t>

<t><list style="numbers">
  <t>Download up to the number of bytes specified in the Timestamp metadata file, constructing the metadata filename as defined in <xref target="metadata_filename_rules"/>.</t>
  <t>The hashes and version number of the new Snapshot metadata file MUST match the hashes and version number listed in the Timestamp metadata. If the hashes and version number do not match, discard the new Snapshot metadata, abort the update cycle, and report the failure. (Checks for a mix-and-match attack.)</t>
  <t>Check that it has been signed by the threshold of keys specified in the latest Root metadata file. If the new Snapshot metadata file is not signed as required, discard it, abort the update cycle, and report the signature failure. (Checks for an arbitrary software attack.)</t>
  <t>Check that the version number of the previous Snapshot metadata file, if any, is less than or equal to the version number of this Snapshot metadata file. If this Snapshot metadata file is older than the previous Snapshot metadata file, discard it, abort the update cycle, and report the potential rollback attack. (Checks for a rollback attack.)</t>
  <t>Check that the version number listed by the previous Snapshot metadata file for each Targets metadata file is less than or equal to its version number in this Snapshot metadata file. If this condition is not met, discard the new Snapshot metadata file, abort the update cycle, and report the failure. (Checks for a rollback attack.)</t>
  <t>Check that each Targets metadata filename listed in the previous Snapshot metadata file is also listed in this Snapshot metadata file. If this condition is not met, discard the new Snapshot metadata file, abort the update cycle, and report the failure. (Checks for a rollback attack.)</t>
  <t>Check that the current (or latest securely attested) time is lower than the expiration timestamp in this Snapshot metadata file. If the new Snapshot metadata file is expired, discard it, abort the update cycle, and report the potential freeze attack. (Checks for a freeze attack.)</t>
</list></t>

</section>
<section anchor="check_targets" title="How to check Targets metadata">

<t>To properly check Targets metadata, an ECU SHOULD:</t>

<t><list style="numbers">
  <t>Download up to Z number of bytes, constructing the metadata filename as defined in <xref target="metadata_filename_rules"/>. The value for Z is set by the implementer. For example, Z may be tens of kilobytes.</t>
  <t>The version number of the new Targets metadata file MUST match the version number listed in the latest Snapshot metadata. If the version number does not match, discard it, abort the update cycle, and report the failure. (Checks for a mix-and-match attack.) This step MAY be skipped when checking Targets metadata on a partial verification ECU; partial verification ECUs might not have Snapshot metadata.</t>
  <t>Check that the Targets metadata has been signed by the threshold of keys specified in the relevant metadata file. (Checks for an arbitrary software attack.):
  <list style="numbers">
      <t>If checking top-level Targets metadata, the threshold of keys is specified in the Root metadata.</t>
      <t>If checking delegated Targets metadata, the threshold of keys is specified in the Targets metadata file that delegated authority to this role.</t>
    </list></t>
  <t>Check that the version number of the previous Targets metadata file, if any, is less than or equal to the version number of this Targets metadata file. (Checks for a rollback attack.)</t>
  <t>Check that the current (or latest securely attested) time is lower than the expiration timestamp in this Targets metadata file. (Checks for a freeze attack.)</t>
  <t>If checking Targets metadata from the Director repository, verify that there are no delegations.</t>
  <t>If checking Targets metadata from the Director repository, check that no ECU identifier is represented more than once.</t>
  <t>If checking Targets metadata from the Director repository, and the ECU performing the verification is the Primary ECU, check that all listed ECU identifiers correspond to ECUs that are actually present in the vehicle.</t>
</list></t>

</section>
<section anchor="resolve_delegations" title="How to resolve delegations">

<t>To properly check Targets metadata for an image, an ECU MUST locate the metadata file(s) for the role (or roles) that have the authority to sign the image. This metadata might be located in the top-level Targets metadata, but it also may be delegated to another role or to multiple roles. Therefore, all delegations MUST be resolved using the following recursive procedure, beginning with the top-level Targets metadata file.</t>

<t><list style="numbers">
  <t>Download and check the current metadata file, following the procedure in <xref target="check_targets"/>. If the file cannot be loaded, or if any verification step fails, abort the delegation resolution, and indicate that image metadata cannot be found because of a missing or invalid role.</t>
  <t>If the current metadata file contains signed metadata about the image, end the delegation resolution and return the metadata to be checked.</t>
  <t>If the current metadata file was reached via a terminating delegation and does not contain signed metadata about the image, abort the delegation resolution for this image and return an error indicating that image metadata could not be found.</t>
  <t>Search the list of delegations, in listed order. For each delegation:
  <list style="numbers">
      <t>Check if the delegation applies to the image being processed. For the delegation to apply, it MUST include the hardware identifier of the target, and the target name MUST match one of the delegation’s image paths. If either of these tests fail, move on to the next delegation in the list.</t>
      <t>If the delegation is a multi-role delegation, follow the procedure described in <xref target="multirole_delegations"/>. If the multi-role delegation is terminating and no valid image metadata is found, abort the delegation resolution and return an error indicating that image metadata could not be found.</t>
      <t>If the delegation is a normal delegation, perform delegation resolution, starting at step 1. Note that this may recurse an arbitrary number of levels deep. If a delegation that applies to the image is found but no image metadata is found in the delegated roles or any of its sub-delegations, simply continue on with the next delegation in the list. The search is only completed or aborted if image metadata or a terminating delegation that applies to the image is found.</t>
    </list></t>
  <t>If the end of the list of delegations in the top-level metadata is reached without finding valid image metadata, return an error indicating that image metadata could not be found.</t>
</list></t>

</section>
<section anchor="multirole_delegations" title="Multi-role delegations">

<t>It is possible to delegate signing authority to multiple delegated roles as described in <xref target="TAP-3"/>. Each multi-role delegation effectively contains a list of ordinary delegations, plus a threshold of those roles that must be in agreement about the non-custom metadata for the image. All multi-role delegations MUST be resolved using the following procedure. Note that there may be sub-delegations inside multi-role delegations.</t>

<t><list style="numbers">
  <t>For each of the roles in the delegation, find and load the image metadata following the procedure in <xref target="resolve_delegations"/>.</t>
  <t>Inspect the non-custom part of the metadata loaded in step 1:
  <list style="numbers">
      <t>Locate all sets of roles that have agreeing (i.e., identical) non-custom metadata and “MUST match” custom metadata. Discard any set of roles with a size smaller than the threshold of roles that must be in agreement for this delegation.</t>
      <t>Check for a conflict. A conflict exists if there is more than one agreeing set of roles, yet each set has different metadata. If a conflict is found, choose and return the metadata from the set of roles which includes the earliest role in the multi-delegation list.</t>
      <t>If there is no conflict, check if there is any single set of roles with matching non-custom metadata. If there is, choose and return the metadata from this set.</t>
      <t>If no agreeing set can be found that meets the agreement threshold, return an error indicating that image metadata could not be found.</t>
    </list></t>
</list></t>

</section>
</section>
</section>
</section>


  </middle>

  <back>

    <references title='Normative References'>





<reference  anchor="RFC2119" target='https://www.rfc-editor.org/info/rfc2119'>
<front>
<title>Key words for use in RFCs to Indicate Requirement Levels</title>
<author initials='S.' surname='Bradner' fullname='S. Bradner'><organization /></author>
<date year='1997' month='March' />
<abstract><t>In many standards track documents several words are used to signify the requirements in the specification.  These words are often capitalized. This document defines these words as they should be interpreted in IETF documents.  This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t></abstract>
</front>
<seriesInfo name='BCP' value='14'/>
<seriesInfo name='RFC' value='2119'/>
<seriesInfo name='DOI' value='10.17487/RFC2119'/>
</reference>



<reference  anchor="RFC3647" target='https://www.rfc-editor.org/info/rfc3647'>
<front>
<title>Internet X.509 Public Key Infrastructure Certificate Policy and Certification Practices Framework</title>
<author initials='S.' surname='Chokhani' fullname='S. Chokhani'><organization /></author>
<author initials='W.' surname='Ford' fullname='W. Ford'><organization /></author>
<author initials='R.' surname='Sabett' fullname='R. Sabett'><organization /></author>
<author initials='C.' surname='Merrill' fullname='C. Merrill'><organization /></author>
<author initials='S.' surname='Wu' fullname='S. Wu'><organization /></author>
<date year='2003' month='November' />
<abstract><t>This document presents a framework to assist the writers of certificate policies or certification practice statements for participants within public key infrastructures, such as certification authorities, policy authorities, and communities of interest that wish to rely on certificates.  In particular, the framework provides a comprehensive list of topics that potentially (at the writer's discretion) need to be covered in a certificate policy or a certification practice statement.  This document supersedes RFC 2527.</t></abstract>
</front>
<seriesInfo name='RFC' value='3647'/>
<seriesInfo name='DOI' value='10.17487/RFC3647'/>
</reference>



<reference  anchor="RFC5198" target='https://www.rfc-editor.org/info/rfc5198'>
<front>
<title>Unicode Format for Network Interchange</title>
<author initials='J.' surname='Klensin' fullname='J. Klensin'><organization /></author>
<author initials='M.' surname='Padlipsky' fullname='M. Padlipsky'><organization /></author>
<date year='2008' month='March' />
<abstract><t>The Internet today is in need of a standardized form for the transmission of internationalized &quot;text&quot; information, paralleling the specifications for the use of ASCII that date from the early days of the ARPANET.  This document specifies that format, using UTF-8 with normalization and specific line-ending sequences.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='5198'/>
<seriesInfo name='DOI' value='10.17487/RFC5198'/>
</reference>


<reference anchor="NFC" target="https://www.unicode.org/reports/tr15/">
  <front>
    <title>Unicode Standard Annex #15: Unicode Normalization Forms</title>
    <author initials="M." surname="Davis">
      <organization></organization>
    </author>
    <author initials="M." surname="Duerst">
      <organization></organization>
    </author>
    <date year="2018" month="October"/>
  </front>
</reference>
<reference anchor="TAP-3" target="https://github.com/theupdateframework/taps/blob/d0818e580c322815a473520f2e8cc5f5eb8df499/tap3.md">
  <front>
    <title>The Update Framework TAP 3 - Multi-role delegations</title>
    <author initials="T.K." surname="Kuppusamy">
      <organization></organization>
    </author>
    <author initials="S." surname="Awwad">
      <organization></organization>
    </author>
    <author initials="E." surname="Cordell">
      <organization></organization>
    </author>
    <author initials="V." surname="Diaz">
      <organization></organization>
    </author>
    <author initials="J." surname="Moshenko">
      <organization></organization>
    </author>
    <author initials="J." surname="Cappos">
      <organization></organization>
    </author>
    <date year="2018" month="January" day="18"/>
  </front>
</reference>
<reference anchor="TAP-4" target="https://github.com/theupdateframework/taps/blob/2cb67d913ec19424d1e354b38f862886fbfd4105/tap4.md">
  <front>
    <title>The Update Framework TAP 4 - Multiple repository consensus on entrusted targets</title>
    <author initials="T.K." surname="Kuppusamy">
      <organization></organization>
    </author>
    <author initials="S." surname="Awwad">
      <organization></organization>
    </author>
    <author initials="E." surname="Cordell">
      <organization></organization>
    </author>
    <author initials="V." surname="Diaz">
      <organization></organization>
    </author>
    <author initials="J." surname="Moshenko">
      <organization></organization>
    </author>
    <author initials="J." surname="Cappos">
      <organization></organization>
    </author>
    <date year="2017" month="December" day="15"/>
  </front>
</reference>
<reference anchor="TUF-spec" target="https://github.com/theupdateframework/specification/blob/2b4e18472fe25d5b57f36f6fa50104967c8faeaa/tuf-spec.md">
  <front>
    <title>The Update Framework Specification</title>
    <author initials="J." surname="Samuel">
      <organization></organization>
    </author>
    <author initials="N." surname="Mathewson">
      <organization></organization>
    </author>
    <author initials="G." surname="Condra">
      <organization></organization>
    </author>
    <author initials="V." surname="Diaz">
      <organization></organization>
    </author>
    <author initials="T.K." surname="Kuppusamy">
      <organization></organization>
    </author>
    <author initials="S." surname="Awwad">
      <organization></organization>
    </author>
    <author initials="S." surname="Tobias">
      <organization></organization>
    </author>
    <author initials="J." surname="Wright">
      <organization></organization>
    </author>
    <author initials="H." surname="Mehnert">
      <organization></organization>
    </author>
    <author initials="E." surname="Tryzelaar">
      <organization></organization>
    </author>
    <author initials="J." surname="Cappos">
      <organization></organization>
    </author>
    <author initials="R." surname="Dingledine">
      <organization></organization>
    </author>
    <date year="2018" month="September" day="19"/>
  </front>
</reference>


    </references>

    <references title='Informative References'>

<reference anchor="MERCURY" target="https://www.usenix.org/system/files/conference/atc17/atc17-kuppusamy.pdf">
  <front>
    <title>Mercury: Bandwidth-Effective Prevention of Rollback Attacks Against Community Repositories</title>
    <author initials="T.K." surname="Kuppusamy">
      <organization></organization>
    </author>
    <author initials="V." surname="Diaz">
      <organization></organization>
    </author>
    <author initials="J." surname="Cappos">
      <organization></organization>
    </author>
    <date year="2017" month="July" day="12"/>
  </front>
  <seriesInfo name="ISBN" value="978-1-931971-38-6"/>
</reference>
<reference anchor="UPTANEESCAR" target="https://ssl.engineering.nyu.edu/papers/kuppusamy_escar_16.pdf">
  <front>
    <title>Securing Software Updates for Automobiles</title>
    <author initials="T.K." surname="Kuppusamy">
      <organization></organization>
    </author>
    <author initials="A." surname="Brown">
      <organization></organization>
    </author>
    <author initials="S." surname="Awwad">
      <organization></organization>
    </author>
    <author initials="D." surname="McCoy">
      <organization></organization>
    </author>
    <author initials="R." surname="Bielawski">
      <organization></organization>
    </author>
    <author initials="C." surname="Mott">
      <organization></organization>
    </author>
    <author initials="S." surname="Lauzon">
      <organization></organization>
    </author>
    <author initials="A." surname="Weimerskirch">
      <organization></organization>
    </author>
    <author initials="J." surname="Cappos">
      <organization></organization>
    </author>
    <date year="2016" month="October" day="16"/>
  </front>
</reference>
<reference anchor="PEP-458" target="https://www.python.org/dev/peps/pep-0458/">
  <front>
    <title>PEP 458 -- Surviving a Compromise of PyPI</title>
    <author initials="T.K." surname="Kuppusamy">
      <organization></organization>
    </author>
    <author initials="V." surname="Diaz">
      <organization></organization>
    </author>
    <author initials="D." surname="Stufft">
      <organization></organization>
    </author>
    <author initials="J." surname="Cappos">
      <organization></organization>
    </author>
    <date year="2013" month="September" day="27"/>
  </front>
</reference>
<reference anchor="DEPLOY" target="https://uptane.github.io/deployment-considerations/index.html">
  <front>
    <title>Uptane Deployment Best Practices</title>
    <author initials="." surname="Members of the Uptane Community">
      <organization></organization>
    </author>
    <date year="n.d."/>
  </front>
</reference>
<reference anchor="USATODAY" target="https://www.usatoday.com/story/tech/columnist/2016/06/28/your-average-car-lot-more-code-driven-than-you-think/86437052/">
  <front>
    <title>Your average car is a lot more code-driven than you think</title>
    <author initials="B." surname="O'Donnell">
      <organization></organization>
    </author>
    <date year="2016" month="June" day="28"/>
  </front>
</reference>
<reference anchor="CR-OTA" target="https://www.consumerreports.org/automotive-technology/automakers-embrace-over-the-air-updates-can-we-trust-digital-car-repair/">
  <front>
    <title>Automakers Embrace Over-the-Air Updates, but Can We Trust Digital Car Repair?</title>
    <author initials="K." surname="Barry">
      <organization></organization>
    </author>
    <date year="2018" month="April" day="20"/>
  </front>
</reference>
<reference anchor="IN-TOTO" target="https://in-toto.io/">
  <front>
    <title>in-toto: A framework to secure the integrity of software supply chains</title>
    <author >
      <organization></organization>
    </author>
    <date year="2018" month="October" day="29"/>
  </front>
</reference>


    </references>



  </back>

<!-- ##markdown-source:
H4sIAD09+F8AA+29a3PbxpYo+l2/AhV/iKRD0pb8iON8OEex5Ylm/LqWnezM
qVveIAlKGJMANwBKZlz+73c9u1c3GpTsZO9zp+rMVO1YBNCP1avX+zEej/e6
slsWT7L36y6viuwc/neeN/NsUTfZs6ItL6oMfsnOVutlsSqqLu/KusquJkfw
//f28um0Ka7g6zfvTl6d7s3rWZWvYLQNjTZuZbTxnEbam+VdcVE32ydZWS3q
vb1y3TzJqvpZ0ZRXMPBV0b5rNm13fO/ej/eO9/KmyJ9k714/e713XTcfL5p6
s5a/PxZb+Gn+JDuruqKpim78rMkX3d4ezfghX9YVrGJbtHvr8kn2v7t6Nsra
uumaYtHCv7Yr/Mf/u7eXb7rLunmyl2VjWFL7JHtZrKZF02b1IusuC4XK03q1
2lRlt4UXs4y3mHxUNxd5Vf5BQHqS/XtdVh1A8apY1msEXva83gBACIRvmvq/
ilkHy3nx4unIwR9AUbTZ/uxujW8sJtm/A0DKKnuar9d1e0CzFKu8XPaA3P6v
i7q+WBYEp3Yyq1f0cgubLron2SPYW9fU74rZJf0+g6V0eBTvz0/oh6a4oFW/
+p2fw56eZD83df1xua3kkzls/Ojo+N7R3l5VNys6M4Tenew/+ESyebHI9l++
P383ys5/OXnxYpS9PPl9lBXdbIKLf/v86fHR0Y/8zd8mD+/9mL35j7OsXRcz
fnr/0YMf+OmrosNjz95XJU5MGAmbWudNWV3gtuA/LX/08OjHx/yRvvwKV7eU
kwCwN6vsKbzw6vnTJ7SVLm8uECqXXbdun9y9e319PdnwtxM4xLtNsQZ0ae92
zdHDu/wF35PvdAZ3U06qqviU3Tl6+GTH7O13NIjHN/w/xblJ9iy/Ktv+rxtA
xY5+BqSByQHwj8dH92in707eZPezvINzu8rm9x4fPS4ewgP4eXw/vceLsrvc
TBEx7gJub9Y45qIBZEYw3+3ydXt3uqynd2Wwx/dm94+PHx89zB/8cP/h8b3F
cfF4Nnu4eFhMH88XD378ET+5P1nNLXje0aXBkbPnOrQsdZy93Cy7ctzUywLQ
BBCVwNMOA+bd5D8m2X9s1utNm6+24bPzSXZyfZ3Pw19PJ3AhGxh8Gf7+KwCz
zP8If/z3Sfaybi+L6mPde8DXLQb9vaPx0WMH/QcK/ePZ9NEP8x8F+g/+HPRl
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

-->

</rfc>


<?xml version="1.0" encoding="UTF-8"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc2629 version 1.2.9 -->

<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
]>

<?rfc toc="yes"?>
<?rfc sortrefs="yes"?>
<?rfc symrefs="yes"?>

<rfc ipr="noDerivativesTrust200902" docName="uptane-standard-design" category="info">

  <front>
    <title abbrev="UPTANE">Uptane Standard for Design and Implementation</title>

    <author initials="." surname="Members of the Uptane Community" fullname="Uptane Community">
      <organization>Joint Development Foundation Projects, LLC, Uptane Series (c/o Prof. Justin Cappos)</organization>
      <address>
        <postal>
          <street>6 MetroTech</street>
          <city>Brooklyn</city>
          <region>NY</region>
          <code>11201</code>
          <country>USA</country>
        </postal>
        <email>uptane-standards@googlegroups.com</email>
      </address>
    </author>

    <date year="2022" month="February" day="10"/>

    <area>TODO</area>
    <workgroup>TODO</workgroup>
    <keyword>Internet-Draft</keyword>

    <abstract>


<t>This document describes a framework for securing ground vehicle software update systems.</t>



    </abstract>


  </front>

  <middle>


<section anchor="introduction" title="Introduction">

<t>Uptane is a secure software update framework for ground vehicles. This document describes procedures to enable programmers for OEMs and suppliers to securely design and implement this framework in a manner that better protects connected units on ground vehicles. Integrating Uptane as outlined in the sections that follow can reduce the ability of attackers to compromise critical systems. It also assures a faster and easier recovery process when a compromise occurs.</t>

<t>These instructions specify the components necessary for a compliant implementation. Individual implementers can make their own technological choices within those requirements. This flexibility makes Uptane adaptable to the many customized update solutions used by manufacturers. If implementers wish to have compatible formats, they can use POUFs. POUFs contain a description of implementation choices as well as data binding formats. An implementer who adopts a POUF, as well as the Uptane Standard, will be able to interoperate with other implementations using that POUF.</t>

</section>
<section anchor="terminology" title="Terminology">

<t>With the exception of the Conformance terminology and Uptane role terminology presented below, please refer to the <eref target="https://uptane.github.io/deployment-considerations/glossary.html">glossary</eref> in the Deployment Best Practices volume for definitions of all terms used in this Standard.</t>

<section anchor="conformance-terminology" title="Conformance terminology">

<t>The keywords REQUIRED, SHALL, SHALL NOT, SHOULD, SHOULD NOT, RECOMMENDED, MAY, and OPTIONAL in this document are to be interpreted as described in <xref target="RFC2119"/>. Given the importance of interpreting these terms correctly, we present these definitions here. Note that when referring to actions in the Standard that mandate compliance, the word SHALL will be used, rather than the word MUST.</t>

<t><spanx style="emph">SHALL</spanx> This word or the term “REQUIRED” mean that the definition is an absolute requirement of the specification.
<spanx style="emph">SHALL NOT</spanx> This phrase means that the definition is an absolute prohibition of the specification.
<spanx style="emph">SHOULD</spanx> This word or the adjective “RECOMMENDED” mean that, in particular circumstances, there could exist valid reasons to ignore a particular item, but the full implications will be understood and carefully weighed before choosing a different course.
<spanx style="emph">SHOULD NOT</spanx> This phrase or the phrase “NOT RECOMMENDED” mean that there could exist valid reasons in particular circumstances when the particular behavior is acceptable or even useful, but the full implications will be understood and the case carefully weighed before implementing any behavior described with this label.
<spanx style="emph">MAY</spanx> This word or the adjective “OPTIONAL,” mean that an item is truly optional.</t>

<t>In order to be considered Uptane-compliant, an implementation SHALL follow all of these rules as specified in the document.</t>

<t>Note that, following the recommendations of <xref target="RFC2119"/>, imperatives of the type defined here will be used only when essential for security.</t>

</section>
<section anchor="uptane-role-terminology" title="Uptane role terminology">

<t>These terms are defined in greater detail in <xref target="roles"/>.</t>

<t><spanx style="emph">Delegation</spanx>: A process by which the responsibility of signing metadata about images is assigned to another party.</t>

<t><spanx style="emph">Role</spanx>: A party (human or machine) responsible for signing a certain type of metadata. The role controls keys and is responsible for signing the metadata entrusted to it with these keys. The roles mechanism of Uptane allows the system to distribute signing responsibilities so that the compromise of one key does not necessarily impact the security of the entire system.</t>

<t><list style="symbols">
  <t><spanx style="emph">Root role</spanx>: Signs metadata that distributes and revokes public keys used to verify the Root, Timestamp, Snapshot, and Targets role metadata.</t>
  <t><spanx style="emph">Snapshot role</spanx>: Signs metadata that indicates which images the repository has released at the same time.</t>
  <t><spanx style="emph">Targets role</spanx>: Signs metadata used to verify the image, such as cryptographic hashes and file size.</t>
  <t><spanx style="emph">Timestamp role</spanx>: Signs metadata that indicates if there are any new metadata or images on the repository.</t>
</list></t>

</section>
<section anchor="acronyms-and-abbreviations" title="Acronyms and abbreviations">

<t><spanx style="emph">CDN</spanx>: Content Delivery Network</t>

<t><spanx style="emph">ECUs</spanx>: Electronic Control Units, the computing units on a vehicle</t>

<t><spanx style="emph">LIN Bus</spanx>: Local Interconnect Bus</t>

<t><spanx style="emph">OBD</spanx>: On-board diagnostics</t>

<t><spanx style="emph">SOTA</spanx>: Software Updates Over-the-Air</t>

<t><spanx style="emph">UDS</spanx>: Unified Diagnostic Services</t>

<t><spanx style="emph">VIN</spanx>: Vehicle Identification Number</t>

</section>
</section>
<section anchor="rationale-for-and-scope-of-the-uptane-standard" title="Rationale for and scope of the Uptane Standard">

<t>This Standard document provides the essential components for the secure design, implementation, and deployment of Uptane by OEMs and suppliers. These guidelines contribute to compromise resilience, or the ability to minimize the extent of the threat posed by any given attack.</t>

<t>However, this specification is intended as an implementation guide, and not as a detailed technical argument about the security properties that Uptane provides.  Readers interested in such documentation can refer to published papers that cover this topic.  <xref target="UPTANEESCAR"/></t>

<section anchor="why-uptane-requires-a-standards-document" title="Why Uptane requires a standards document">

<t>A standards document that can guide the safe design, integration, and deployment of Uptane in vehicles is needed at this time because:</t>

<t><list style="symbols">
  <t>The number of connected units on the average vehicle continues to grow, with mainstream cars now containing up to 100 million lines of code. <xref target="USATODAY"/></t>
  <t>The expanded use of software over-the-air strategies creates new attack surfaces for malicious parties. <xref target="CR-OTA"/></t>
  <t>Legacy update strategies, such as SSL/TLS or GPG/RSA, are not feasible for use on vehicle ECUs because they force manufacturers to chose between enhanced security and customizability.</t>
  <t>Conventional strategies are also complicated by the differing resources of the ECUs, which can vary greatly in memory, storage space, and Internet connectivity.</t>
  <t>The design of Uptane makes it possible to offer improved design flexibility without sacrificing security.</t>
  <t>This added design flexibility, however, could be a liability if the framework is implemented incorrectly.</t>
  <t>Standardization of crucial steps in the design, implementation, and use of Uptane can assure that customizability does not impact security or functionality.</t>
</list></t>

</section>
<section anchor="scope-of-standard-coverage" title="Scope of Standard coverage">

<t>This document sets guidelines for implementing Uptane in most systems capable of updating software on connected units in ground vehicles, including passenger vehicles, light-duty trucks, heavy-duty trucks, and motorcycles. Uptane could potentially also be applied to other ground vehicles, such as automated shuttles, recreational vehicles, and military ground vehicles. Uptane could even be applied to domains such as IoT devices, medical devices, and autonomous aerial vehicles. In this section, we define the scope of that applicability by providing sample use cases and possible exceptions, aspects of software update security that are not applicable to Uptane, and the design requirements governing the preparation of these standards.</t>

<section anchor="assumptions" title="Assumptions">

<t>We assume the following system preconditions for Uptane:</t>

<t><list style="symbols">
  <t>Vehicles have the ability to establish connectivity to required backend services. For example, this could be done through cellular, Wi-Fi, or hard-wired mechanisms.</t>
  <t>ECUs are either directly connected to the communication channel, or are indirectly connected via some sort of network gateway.</t>
  <t>ECUs are programmable and provide sufficient performance to be updated.</t>
  <t>ECUs SHALL be able to perform public key cryptography operations and calculate hashes of images and metadata files.</t>
  <t>There are state-of-the-art secure servers in place, such as the Director and Image repository servers.</t>
</list></t>

<t>It is important that any bugs detected in Uptane implementations be patched promptly. Failure to do so could interfere with the effectiveness of Uptane’s operations.</t>

</section>
<section anchor="use-cases" title="Use cases">

<t>The following use cases provide a number of scenarios illustrating the manner in which software updates could be accomplished using Uptane.</t>

<section anchor="oems-initializing-uptane-at-the-factory-using-sota" title="OEMs initializing Uptane at the factory using SOTA">

<t>An OEM plans to install Uptane on new vehicles. This entails the following components: code to perform full and partial verification, the latest copy of the relevant metadata, the public keys, and an accurate attestation of the latest time. The OEM then either requires its tier-1 suppliers to provide these materials to the suppliers’ assembly lines or can choose to add the materials later at the OEM’s assembly lines. The OEM’s in-vehicle implementation is Uptane-compliant if:</t>

<t><list style="numbers">
  <t>all Primaries perform full verification;</t>
  <t>all Secondaries that are updated via OTA at least perform partial verification; and</t>
  <t>any ECUs that do not perform any type of verification cannot be updated via OTA.</t>
</list></t>

</section>
<section anchor="updating-one-ecu-with-a-complete-image" title="Updating one ECU with a complete image">

<t>A tier-1 supplier completes work on a revised image for an electronic brake control module. This module will control the brakes on all models of an SUV produced by the OEM mentioned above. Assuming supplier delegation is supported by the OEM for this ECU, each tier-1 supplier digitally signs the image, then delivers the signature, all of its metadata, including delegations, and associated images to the OEM. The OEM adds these metadata and images to its Image repository, along with information about any dependencies and conflicts between this image and those for other ECUs used in the OEM’s vehicles. The OEM also updates the inventory database, so that the Director repository can instruct the ECU on how to install these updated images.</t>

</section>
<section anchor="updating-individual-ecus-on-demand" title="Updating individual ECUs on demand">

<t>An OEM has issued a recall to address a problem with a keyless entry device that has been locking people out of their cars. The OEM prepares an updated flash image in the manner described above. The OEM then ships USB flash drives to vehicle owners and dealerships that allow those parties to update the firmware of their vehicles.</t>

</section>
<section anchor="update-one-ecu-with-multiple-deltas" title="Update one ECU with multiple deltas">

<t>The OEM wants to use delta updates to save over-the-air bytes. The delta images contain only the code and/or data that has changed from the previous image version. To do so, the OEM will first modify the Director repository, using the vehicle version manifest and dependency resolution to determine the differences between the previous and latest images. The OEM will then add the following to the custom Targets metadata used by the Director repository: (1) the algorithm used to apply a delta image, and (2) the Targets metadata about the delta image. The OEM will also check whether the delta images match the Targets metadata from the Director repository.</t>

</section>
</section>
</section>
<section anchor="exceptions" title="Exceptions">

<t>There are a number of factors that could impede the completion of the above scenarios:</t>

<t><list style="symbols">
  <t>ECUs can be lacking the necessary resources to function as designated. These insufficient resources could include limited CPU or RAM inadequate for performance of public key cryptography; a lack of sufficient storage to undo installation of bad software; or a location on a low-speed network (e.g., LIN).</t>
  <t>ECUs can reside on different network segments, and cannot directly reach each other, requiring a gateway to facilitate communication.</t>
  <t>A user can replace OEM-installed ECUs with aftermarket ECUs.</t>
  <t>A vehicle can download only a limited amount of data via a cellular channel (e.g. due to limits on a data plan).</t>
  <t>A system can lack sufficient power to download or install software updates.</t>
  <t>Vehicles can be offline for extended periods of time, thus missing required updates (e.g., key rotations).</t>
  <t>OEMs can be unwilling to implement costly security or hardware requirements.</t>
</list></t>

</section>
<section anchor="out-of-scope" title="Out of scope">

<t>The following topics will not be addressed in this document, as they represent threats outside the scope of Uptane:</t>

<t><list style="symbols">
  <t>Physical attacks, such as manual tampering with ECUs outside the vehicle.</t>
  <t>Compromise of the packaged software, such as malware embedded in a trusted package.</t>
  <t>Compromise of the supply chain (e.g., build system, version control system, packaging process). A number of strategies (e.g., git signing, TPMs, in-toto <xref target="IN-TOTO"/>)  already exist to address this problem. Therefore, there is no need to duplicate those techniques here.</t>
  <t>Problems associated with OBD or UDS programming of ECUs, such as authentication of communications between ECUs.</t>
  <t>Malicious mirrors of package repositories, which could substitute original packages with malicious packages with matching version numbers <xref target="MERCURY"/>.</t>
</list></t>

</section>
<section anchor="design-requirements" title="Design requirements">

<t>The design requirements for this document are governed by the following principal parameters:</t>

<t><list style="symbols">
  <t>to clearly mandate the design and implementation steps that are security critical and will be followed as is, while offering flexibility in the implementation of non-critical steps. In this manner, users can adapt to support different use models and deployment scenarios.</t>
  <t>to ensure that, if Uptane is implemented, the security practices mandated or suggested in this document do not interfere with the functionality of ECUs, vehicles, or the systems that maintain them.</t>
  <t>to delineate guidelines to ensure that, when any part of the SOTA mechanism of a vehicle is attacked, an attacker has to compromise two or more modules to breach the SOTA mechanism.</t>
</list></t>

</section>
</section>
<section anchor="threat-model-and-attack-strategies" title="Threat model and attack strategies">

<t>The overarching goal of Uptane is to provide a system that is resilient in the face of various types of compromise. In this section, we describe the goals an attacker could have (<xref target="attacker_goals"/>) and the capabilities they could have or could develop (<xref target="capabilities"/>). We then describe and classify types of attacks on the system according to the attacker’s goals (<xref target="threats"/>).</t>

<section anchor="attacker_goals" title="Attacker goals">

<t>We assume that attackers could want to achieve one or more of the following goals, in increasing order of severity:</t>

<t><list style="symbols">
  <t>Read the contents of updates to discover confidential information, reverse-engineer firmware, or compare two firmware images to identify security fixes and hence determine the fixed security vulnerability.</t>
  <t>Deny installation of updates to prevent vehicles from fixing software problems.</t>
  <t>Cause one or more ECUs in the vehicle to fail, denying use of the vehicle or of certain functions.</t>
  <t>Control ECUs within the vehicle, and possibly the vehicle itself.</t>
</list></t>

</section>
<section anchor="capabilities" title="Attacker capabilities">

<t>Uptane is designed with resilience to compromise in mind. We assume that attackers could develop one or more of the following capabilities:</t>

<t><list style="symbols">
  <t>Intercept and modify network traffic (i.e., perform man-in-the-middle attacks). This capability could be developed in two domains:
  <list style="symbols">
      <t>Outside the vehicle, intercepting and modifying traffic between the vehicle and software repositories.</t>
      <t>Inside the vehicle, intercepting and modifying traffic on one or more vehicle buses (e.g., via an OBD port or by using a compromised ECU as a vector).</t>
    </list></t>
  <t>Compromise and control either a Director repository or Image repository server, and any keys stored on that repository, but not both the Director and Image repositories.</t>
  <t>Compromise either a Primary ECU or a Secondary ECU, but not both in the same vehicle.</t>
</list></t>

</section>
<section anchor="threats" title="Description of threats">

<t>Uptane’s threat model includes the following types of attacks, organized according to the attacker goals listed in <xref target="attacker_goals"/>.</t>

<section anchor="read_updates" title="Read updates">

<t><list style="symbols">
  <t><spanx style="emph">Eavesdrop attack:</spanx> Read sensitive or confidential information from an update intended to be encrypted for a specific ECU. (Note: Not all implementations will have a need to protect information in this way.)</t>
</list></t>

</section>
<section anchor="deny_updates" title="Deny installation of updates">

<t>An attacker seeking to deny the installation of updates could attempt one or more of the following strategies:</t>

<t><list style="symbols">
  <t><spanx style="emph">Drop-request attack:</spanx> Block network traffic outside or inside the vehicle.</t>
  <t><spanx style="emph">Slow retrieval attack:</spanx> Slow down network traffic, in the extreme case sending barely enough packets to avoid a timeout. Similar to a drop-request attack, except that both the sender and receiver of the traffic still think network traffic is unimpeded.</t>
  <t><spanx style="emph">Freeze attack:</spanx> Continue to send a properly signed, but old, update bundle to the ECUs, even if newer updates exist.</t>
  <t><spanx style="emph">Partial bundle installation attack:</spanx> Install a valid (signed) update bundle, and then block selected updates within the bundle.</t>
  <t><spanx style="emph">Denial of service attack</spanx> against the Uptane repositories or infrastructure.</t>
</list></t>

</section>
<section anchor="change_functionality" title="Interfere with ECU functionality">

<t>Attackers seeking to interfere with the functionality of vehicle ECUs in order to cause an operational failure or unexpected behavior could do so in one of the following ways:</t>

<t><list style="symbols">
  <t><spanx style="emph">Rollback attack:</spanx> Cause an ECU to install a previously valid software revision that is older than the currently installed version.</t>
  <t><spanx style="emph">Endless data attack:</spanx> Send a large amount of data to an ECU until it runs out of storage, possibly causing the ECU to fail to operate.</t>
  <t><spanx style="emph">Mix-and-match attack:</spanx> Install a malicious software bundle in which some of the updates do not interoperate properly. This could be accomplished even if all of the individual images being installed are valid, as long as valid versions exist that are mutually incompatible.</t>
</list></t>

</section>
<section anchor="control_ecu" title="Control an ECU or vehicle">

<t>Full control of a vehicle, or one or more ECUs within a vehicle, is the most severe threat.</t>

<t><list style="symbols">
  <t><spanx style="emph">Arbitrary software attack:</spanx> Cause an ECU to install and run arbitrary code of the attacker’s choice.</t>
</list></t>

</section>
</section>
</section>
<section anchor="design" title="Detailed design of Uptane">

<t>Uptane does not specify implementation details. Instead, this Standard describes the components necessary for a compliant implementation and leaves it up to individual implementers to make their own technological choices within those requirements.</t>

<t>At a high level, Uptane requires:</t>

<t><list style="symbols">
  <t>Two software repositories:
  <list style="symbols">
      <t>An Image repository containing binary images to install and signed metadata about those images.</t>
      <t>A Director repository connected to an inventory database that can sign metadata on demand for images in the Image repository.</t>
    </list></t>
  <t>Repository tools for generating Uptane-specific metadata about images.</t>
  <t>A public key infrastructure supporting the required metadata production and signing roles on each repository:
  <list style="symbols">
      <t>Root - The certificate authority for the Uptane ecosystem. Distributes public keys for verifying all the other roles’ metadata.</t>
      <t>Timestamp - Indicates whether there are new metadata or images.</t>
      <t>Snapshot - Indicates images released by the repository at a point in time via signing metadata about Targets metadata.</t>
      <t>Targets - Indicates metadata about images, such as hashes and file sizes.</t>
    </list></t>
  <t>A secure way for ECUs to know the time.</t>
  <t>An ECU capable of downloading images and associated metadata from the Uptane servers.</t>
  <t>An in-vehicle client on a Primary ECU capable of verifying the signatures on all update metadata and downloading updates on behalf of its associated Secondary ECUs. The Primary ECU can be the same ECU that communicates with the server.</t>
  <t>A client or library on each Secondary ECU capable of performing either full or partial verification of metadata.</t>
</list></t>

<section anchor="roles" title="Roles on repositories">

<t>A repository contains images and metadata. Each role has a particular type of metadata associated with it, as described in <xref target="meta_structures"/>.</t>

<section anchor="root_role" title="The Root role">

<t>A repository’s Root role SHALL be responsible for a Certificate Authority as defined in <xref target="RFC3647"/>.
A repository’s Root role SHALL produce and sign Root metadata as described in <xref target="root_meta"/>.
A repository’s Root role SHALL sign the public keys used to verify the metadata produced by the Timestamp, Snapshot, and Targets roles.
A repository’s Root role SHALL revoke keys for the other roles if they are compromised.</t>

</section>
<section anchor="targets_role" title="The Targets role">

<t>A repository’s Targets role SHALL produce and sign metadata about images and delegations as described in <xref target="targets_meta"/>.</t>

<section anchor="targets_role_delegations" title="Delegations">

<t>The Targets role on the Image repository can delegate the responsibility of signing metadata to other, custom-defined roles referred to as delegated targets. If it does, it SHALL do so as specified in <xref target="delegations_meta"/>.</t>

<t>As responsibility for signing images or a subset of images could be delegated to more than one role, it is possible that two different roles will be trusted to sign a particular image. For this reason, delegations SHALL be prioritized.</t>

<t>A particular delegation for a subset of images could be designated as <spanx style="strong">terminating</spanx>. For terminating delegations, the client SHALL NOT search any further if it does not find validly signed metadata about those images. Delegations SHOULD NOT be terminating by default; terminating delegations SHOULD only be used when there is a compelling technical reason to do so.</t>

<t>A delegation for a subset of images could be a multi-role delegation <xref target="TAP-3"/>. A multi-role delegation indicates that multiple roles are needed to sign a particular image and each of the delegatee roles SHALL sign the same metadata.</t>

<t>Delegations only apply to the Image repository. The Targets role on the Director repository SHALL NOT delegate metadata signing responsibility.</t>

</section>
</section>
<section anchor="snapshot_role" title="The Snapshot role">

<t>A repository’s Snapshot role SHALL produce and sign metadata about all Targets metadata the repository releases, including the current version number of the top-level Targets metadata, and the version numbers of all delegated Targets metadata, as described in <xref target="snapshot_meta"/>.</t>

</section>
<section anchor="timestamp_role" title="The Timestamp role">

<t>A repository’s Timestamp role SHALL produce and sign metadata indicating whether there are new metadata or images on the repository. It SHALL do so by signing the metadata about the Snapshot metadata file.</t>

</section>
</section>
<section anchor="meta_structures" title="Metadata structures">

<t>Uptane’s security guarantees all rely on properly created metadata that follows a designated structure. The Uptane Standard <spanx style="strong">does not</spanx> mandate any particular format or encoding for the metadata as a whole. ASN.1 (with any encoding scheme like BER, DER, XER, etc.), JSON, XML, or any other encoding format that is capable of providing the required structure can be used.</t>

<t>However, string comparison is required as part of metadata verification. To ensure an accurate basis for comparing strings, all strings SHALL be encoded in the Unicode Format for Network Interchange as defined in <xref target="RFC5198"/>, including normalization into Unicode Normalization Form C (<xref target="NFC"/>).</t>

<t>The <spanx style="emph">Deployment Best Practices</spanx> (<xref target="DEPLOY"/>), Joint Development Foundation Projects, LLC, Uptane Series provides some examples of compliant metadata structures in ASN.1 and JSON.</t>

<section anchor="common_metadata" title="Common metadata structures">

<t>Every public key SHALL be represented using a public key identifier.  A public key identifier is EITHER all of the following:</t>

<t><list style="symbols">
  <t>The value of the public key itself (which could be, for example, formatted as a PEM string)</t>
  <t>The public key cryptographic algorithm used by the key (such as RSA or ECDSA)</t>
  <t>The particular scheme used to verify the signature (such as <spanx style="verb">rsassa-pss-sha256</spanx> or <spanx style="verb">ecdsa-sha2-nistp256</spanx>)</t>
</list></t>

<t>OR a secure hash over at least the above components (such as the keyid mechanism in TUF).</t>

<t>All four Uptane roles (Root, Targets, Snapshot, and Timestamp) share a common structure. They SHALL contain the following two attributes:</t>

<t><list style="symbols">
  <t>A payload of metadata to be signed</t>
  <t>An attribute containing the signature(s) of the payload, where each entry specifies:
  <list style="symbols">
      <t>The public key identifier of the key being used to sign the payload</t>
      <t>A signature with this key over the payload</t>
    </list></t>
</list></t>

<t>The payload differs depending on the role. However, the payload for all roles shares a common structure. It SHALL contain the following four attributes:</t>

<t><list style="symbols">
  <t>An indicator of the type of role (Root, Targets, Snapshot, or Timestamp)</t>
  <t>An expiration date and time</t>
  <t>An integer version number, which SHOULD be incremented each time the metadata file is updated</t>
  <t>The role-specific metadata for the role indicated</t>
</list></t>

<t>The following sections describe the role-specific metadata. All roles SHALL follow the common structures described here.</t>

</section>
<section anchor="root_meta" title="Root metadata">

<t>A repository’s Root metadata distributes the public keys of the top-level Root, Targets, Snapshot, and Timestamp roles, as well as revocations of those keys. It SHALL contain two attributes:</t>

<t><list style="symbols">
  <t>A representation of the public keys for all four roles. Each key SHALL have a unique public key identifier.</t>
  <t>An attribute mapping each role to (1) its public key(s), and (2) the threshold of signatures required for that role.</t>
</list></t>

</section>
<section anchor="targets_meta" title="Targets metadata">

<t>The Targets metadata on a repository contains all of the information about images to be installed on ECUs. This includes filenames, hashes, and file sizes. It can also include other useful information, such as what types of hardware are compatible with a particular image.</t>

<t>Targets metadata can also contain metadata about delegations, allowing one Targets role to delegate its authority to another. This means that an individual Targets metadata file might contain only metadata about delegations, only metadata about images, or some combination of the two. The details of how ECUs traverse the delegation tree to find valid metadata about images is specified in <xref target="resolve_delegations"/>.</t>

<section anchor="targets_images_meta" title="Metadata about images">

<t>To be available to install on clients, all images on the repository SHALL have their metadata listed in a Targets role.  Each Targets role can provide a list of some images on the repository.  This list SHALL provide, at a minimum, the following information about each image:</t>

<t><list style="symbols">
  <t>The image filename</t>
  <t>The size of the image in bytes</t>
  <t>One or more hashes of the image file, along with the hashing function used</t>
</list></t>

<t>If there are no images included in the Targets metadata from the Director repository, then the metadata SHALL include a vehicle identifier in order to avoid a replay attack.</t>

<section anchor="custom-metadata-about-images" title="Custom metadata about images">

<t>In addition to what is required, Targets metadata files can contain extra metadata for images on the repository. This metadata can be customized for a particular use case. Examples of use cases for different types of custom metadata can be found in the <spanx style="emph">Deployment Best Practices</spanx> document (<xref target="DEPLOY"/>). However, there are a few important pieces of custom metadata that SHOULD be present in most implementations. In addition, there is one element in the custom metadata that SHALL be present in the Targets metadata from the Director.</t>

<t>Custom metadata can also contain a demarcated field or section that SHALL match whenever two pieces of metadata are checked against each other, such as when Targets metadata from the Director repository is checked against Targets metadata from the Image repository.</t>

<t>The information listed below SHOULD be provided for each image on both the Image repository and the Director repository. If a “SHALL match section” is to be implemented, that is where this information SHOULD be placed.</t>

<t><list style="symbols">
  <t>A release counter, to be incremented each time a new version of the image is released. This can be used to prevent rollback attacks even in cases where the Director repository is compromised.</t>
  <t>A hardware identifier, or list of hardware identifiers, representing models of ECUs with which the image is compatible. This can be used to ensure that an ECU cannot be ordered to install an incompatible image, even in cases where the Director repository is compromised.</t>
</list></t>

<t>The following information is CONDITIONALLY REQUIRED for each image on the Director repository IF that image is encrypted:</t>

<t><list style="symbols">
  <t>Information about filenames, hashes, and file size of the encrypted image.</t>
  <t>Information about the encryption method, and other relevant information–for example, a symmetric encryption key encrypted by the ECU’s asymmetric key could be included in the Director repository metadata.</t>
</list></t>

<t>The following information SHALL be provided from the Director repository for each image in the Targets metadata:</t>

<t><list style="symbols">
  <t>An ECU identifier (such as a serial number), specifying the ECU that SHOULD install the image.</t>
</list></t>

<t>The Director repository could provide a download URL for the image file. This may be useful, for example, when the image is on a public CDN and the Director wishes to provide a signed URL.</t>

</section>
</section>
<section anchor="delegations_meta" title="Metadata about delegations">

<t>A Targets metadata file on the Image repository (but not the Director repository) SHALL be able to delegate signing authority to other entities. For example, it could delegate signing authority for a particular ECU’s firmware to that ECU’s supplier. A metadata file can contain any number of delegations and SHALL keep the delegations in prioritized order.</t>

<t>Any metadata file with delegations SHALL provide the following information:</t>

<t><list style="symbols">
  <t>A list of public keys of all delegatees. Each key SHOULD have a unique public key identifier and a key type.</t>
  <t>A list of delegations, each of which contains:
  <list style="symbols">
      <t>A list of the filenames to which this role applies. This could be expressed using wildcards, or by enumerating a list, or a combination of the two.</t>
      <t>An optional list of the hardware identifiers to which this role applies.  If this is omitted, any hardware identifier will match.</t>
      <t>An indicator of whether or not this is a terminating delegation. (See <xref target="targets_role_delegations"/>.)</t>
      <t>A list of the roles to which this delegation applies. Each role needs to specify:
      <list style="symbols">
          <t>A name for the role (e.g., “supplier1-qa”)</t>
          <t>The key identifiers for each key this role uses</t>
          <t>A threshold of keys that SHALL sign for this role</t>
        </list></t>
    </list></t>
</list></t>

<t>Note that <spanx style="strong">any</spanx> Targets metadata file stored on the Image repository can contain delegations, and these delegations can be in chains of arbitrary length.</t>

</section>
</section>
<section anchor="snapshot_meta" title="Snapshot metadata">

<t>The Snapshot metadata lists version numbers and filenames of all Targets metadata files. It protects against mix-and-match attacks if a delegated supplier key is compromised.</t>

<t>For each Targets metadata file on the repository, the Snapshot metadata SHALL contain the following information:</t>

<t><list style="symbols">
  <t>The filename and version number of the Targets metadata file.</t>
</list></t>

<t>The Snapshot metadata could also list the Root metadata filename and version number for the purpose of backwards compatibility. Historically, this was a requirement in TUF, but it is no longer required and does not provide a significant security benefit.</t>

</section>
<section anchor="timestamp_meta" title="Timestamp metadata">

<t>The Timestamp metadata SHALL contain the following information:</t>

<t><list style="symbols">
  <t>The filename and version number of the latest Snapshot metadata on the repository.</t>
  <t>One or more hashes of the Snapshot metadata file, along with the hashing function used.</t>
</list></t>

</section>
<section anchor="repo_mapping_meta" title="Repository mapping metadata">

<t>As described in the introduction to <xref target="design"/>, Uptane requires a Director repository and an Image repository. However, it is possible to have an Uptane-compliant implementation that has more than two repositories.</t>

<t>Repository mapping metadata informs a Primary ECU about which repositories to trust for images or image paths. <xref target="TAP-4"/> describes how to make use of more complex repository mapping metadata in order to have more than the two required repositories.</t>

<t>Repository mapping metadata, or the equivalent informational content, SHALL be present on all Primary ECUs, and SHALL contain the following information:</t>

<t><list style="symbols">
  <t>A list of repository names and one or more URLs at which the named repository can be accessed. At a minimum, this SHALL include the Director and Image repositories.</t>
  <t>A list of mappings of image paths to repositories, each of which contains:
  <list style="symbols">
      <t>A list of image paths. Image paths could be expressed using wildcards, or by enumerating a list, or a combination of the two.</t>
      <t>A list of repositories that SHALL provide signed Targets metadata for images stored at those paths.</t>
    </list></t>
</list></t>

<t>For example, in the most basic Uptane case, the repository mapping metadata would contain:</t>

<t><list style="symbols">
  <t>The name and URL of the Director repository.</t>
  <t>The name and URL of the Image repository.</t>
  <t>A single mapping indicating that all images (<spanx style="verb">*</spanx>) SHALL be signed by both the Director and Image repository.</t>
</list></t>

<t>Note that the metadata need not be in the form of a metadata file. For example, in the basic case where there is only one Director and one Image repository, and all images need to have signed metadata from both repositories, it would be sufficient to have a configuration file with URLs for the two repositories and a client that always checks for metadata matches between them. In this case, no explicit mapping would be defined, because the mapping is defined as part of the Uptane client implementation.</t>

<t>The <spanx style="emph">Uptane Deployment Best Practices</spanx> document (<xref target="DEPLOY"/>) provides more guidance on how to implement repository mapping metadata for more complex use cases. It also discusses strategies for updating repository mapping metadata, if required.</t>

</section>
<section anchor="metadata_filename_rules" title="Rules for filenames in repositories and metadata">

<t>There is a difference between the filename in a metadata file or an ECU, and the filename on a repository. This difference exists in order to avoid race conditions, where metadata and images are read from, and written to, at the same time. For more details, the reader can read the TUF specification <xref target="TUF-spec"/> and PEP 458 <xref target="PEP-458"/>.</t>

<t>Unless stated otherwise, all files SHALL be written to repositories in accordance with the following two rules:</t>

<t><list style="numbers">
  <t>Metadata filenames SHALL be qualified with version numbers. If a metadata file A is specified as FILENAME.EXT in another metadata file B, then it SHALL be written as VERSION.FILENAME.EXT, where VERSION is A’s version number, as defined in <xref target="common_metadata"/>, with one exception: If the version number of the Timestamp metadata file is not be known in advance by a client, it could be read from, and written to, a repository using a filename without a version number qualification, i.e., FILENAME.EXT.</t>
  <t>If an image is specified in a Targets metadata file as FILENAME.EXT, it SHALL be written to the repository as HASH.FILENAME.EXT, where HASH is one of the hash digests of the file, as specified in <xref target="targets_images_meta"/>. The file SHALL be written to the repository using <spanx style="emph">n</spanx> different filenames, one for each hash digest listed in its corresponding Targets metadata.</t>
  <t>Filenames of images SHOULD be encoded to prevent a path traversal on the client system, either by using URL encoding or by limiting the allowed character set in the filename.</t>
</list></t>

<t>For example:</t>

<t><list style="symbols">
  <t>The version number of the Snapshot metadata file is 61, and its filename in the Timestamp metadata is <spanx style="emph">snapshot.json</spanx>. The filename on the repository will be <spanx style="emph">61.snapshot.json</spanx>.</t>
  <t>There is an image with the <spanx style="emph">filename acme_firmware.bin</spanx> specified in the Targets metadata, with a SHA3-256 of <spanx style="emph">aaaa</spanx> and a SHA-512/224 of <spanx style="emph">bbbb</spanx>. It will have two filenames on the repository: <spanx style="emph">aaaa.acme_firmware.bin</spanx> and <spanx style="emph">bbbb.acme_firmware.bin</spanx>.</t>
</list></t>

</section>
</section>
<section anchor="server-repository-implementation-requirements" title="Server / repository implementation requirements">

<t>An Uptane implementation SHALL make the following services available to vehicles:</t>

<t><list style="symbols">
  <t>Image repository</t>
  <t>Director repository</t>
</list></t>

<t>Additionally, an Uptane implementation requires ECUs to have a secure way to know the current time.</t>

<section anchor="image-repository" title="Image repository">

<t>The Image repository exists to allow an OEM and/or its suppliers to upload images and their associated metadata. It makes these images and their metadata available to vehicles. The Image repository is designed to be primarily controlled by human actors, and updated relatively infrequently.</t>

<t>The Image repository SHALL expose an interface permitting the download of metadata and images. This interface SHOULD be public.</t>

<t>The Image repository SHALL require authorization for writing metadata and images.</t>

<t>The Image repository SHALL provide a method for authorized users to upload images and their associated metadata. It SHALL check that a user writing metadata and images is authorized to do so for that specific image by checking the chain of delegations as described in <xref target="delegations_meta"/>.</t>

<t>The Image repository SHALL implement storage that permits authorized users to write an image file using a unique filename, and later read the same file using the same name. It could use any filesystem, key-value store, or database that fulfills this requirement.</t>

<t>The Image repository could require authentication for read access.</t>

</section>
<section anchor="director_repository" title="Director repository">

<t>The Director repository instructs ECUs as to which images will be installed by producing signed metadata on demand. Unlike the Image repository, it is mostly controlled by automated, online processes. It also consults a private inventory database containing information on vehicles, ECUs, and software revisions.</t>

<t>The Director repository SHALL expose an interface for Primaries to upload vehicle version manifests (<xref target="vehicle_version_manifest"/>) and download metadata. This interface SHOULD be public.</t>

<t>The Director could encrypt images for ECUs that require them, either by encrypting on-the-fly or by storing encrypted images on the repository.</t>

<t>The Director repository SHALL implement storage that permits an automated service to write generated metadata files. It could use any filesystem, key-value store, or database that fulfills this requirement.</t>

<section anchor="directing-installation-of-images-on-vehicles" title="Directing installation of images on vehicles">

<t>A Director repository SHALL conform to the following six-step process for directing the installation of software images on a vehicle.</t>

<t><list style="numbers">
  <t>The Director SHOULD first identify the vehicle. This could be done when the Director receives a vehicle version manifest sent by a Primary (as described in <xref target="construct_manifest_primary"/>), decodes the manifest, and determines the unique vehicle identifier. Additionally, the Director could utilize other mechanisms to uniquely identify a vehicle (e.g., 2-way TLS with unique client certificates).</t>
  <t>Using the vehicle identifier, the Director queries its inventory database (as described in <xref target="inventory_db"/>) for relevant information about each ECU in the vehicle.</t>
  <t>The Director SHALL check the manifest for accuracy compared to the information in the inventory database. If any of the required checks fail, the Director SHOULD drop the request. An implementer can make additional checks if desired. At a minimum, the Director SHOULD check the following:
  <list style="symbols">
      <t>Each ECU recorded in the inventory database is also represented in the manifest.</t>
      <t>The signature of the manifest matches the ECU key of the Primary that sent it.</t>
      <t>The signature of each Secondary’s contribution to the manifest matches the ECU key of that Secondary.</t>
    </list></t>
  <t>The Director SHOULD check that the nonce or counter in each ECU version report has not been used before to prevent a replay of the ECU version report. If the nonce or counter is reused the Director SHOULD drop the request.</t>
  <t>The Director extracts information about currently installed images from the vehicle version manifest. Using this information, it determines if the vehicle is already up-to-date, and if not, determines a set of images that could be installed. The exact process by which this determination takes place is out of scope for this Standard. However, the Director SHALL take into account <spanx style="emph">dependencies</spanx> and <spanx style="emph">conflicts</spanx> between images and SHOULD consult well-established techniques for dependency resolution.</t>
  <t>The Director could encrypt images for ECUs that require it.</t>
  <t>The Director generates new metadata representing the desired set of images to be installed on the vehicle, based on the dependency resolution in step 4. This includes Targets (<xref target="targets_meta"/>), Snapshot (<xref target="snapshot_meta"/>), and Timestamp (<xref target="timestamp_meta"/>) metadata. It then sends this metadata to the Primary as described in <xref target="download_meta_primary"/>.</t>
</list></t>

</section>
<section anchor="inventory_db" title="Inventory Database">

<t>The Director SHALL use a private inventory database to store information about ECUs and vehicles. An implementer could use any durable database for this purpose.</t>

<t>The inventory database SHALL record the following pieces of information:</t>

<t><list style="symbols">
  <t>Per vehicle:
  <list style="symbols">
      <t>A unique identifier (such as a VIN)</t>
    </list></t>
  <t>Per ECU:
  <list style="symbols">
      <t>A unique identifier (such as a serial number)</t>
      <t>The vehicle identifier the ECU is associated with</t>
      <t>An ECU key (symmetric or asymmetric; for asymmetric keys, only the public part SHOULD be stored)</t>
      <t>The ECU key identifier (as defined in <xref target="common_metadata"/>)</t>
      <t>Whether the ECU is a Primary or a Secondary</t>
    </list></t>
</list></t>

<t>The inventory database can record other information about ECUs and vehicles. It SHOULD record a hardware identifier for each ECU to protect against the possibility of directing the ECU to install incompatible firmware.</t>

</section>
</section>
</section>
<section anchor="in-vehicle-implementation-requirements" title="In-vehicle implementation requirements">

<t>An Uptane-compliant ECU SHALL be able to download and verify image metadata and image binaries before installing a new image and SHALL have a secure way of verifying the current time, or a sufficiently recent attestation of the time.</t>

<t>All ECUs SHALL monitor the download speed of image metadata and image binaries to detect and respond to a slow retrieval attack. If the download is slower than a pre-defined threshold, the ECU SHOULD send an alert to the Director repository, for example as part of the next vehicle version manifest.</t>

<t>Each ECU receiving over-the-air updates in a vehicle is either a Primary or a Secondary ECU. A Primary ECU collects and delivers to the Director vehicle manifests (<xref target="vehicle_version_manifest"/>) that contain information about which images have been installed on ECUs in the vehicle. It also verifies the time, and downloads and verifies the latest metadata and images for itself and for its Secondaries. A Secondary ECU verifies the time, and downloads and verifies the latest metadata and images for itself from its associated Primary ECU. It also sends signed information about its installed images to its associated Primary.</t>

<t>All ECUs SHALL verify image metadata as specified in <xref target="metadata_verification"/> before installing an image or making it available to other ECUs. A Primary ECU SHALL perform full verification (<xref target="full_verification"/>). A Secondary ECU SHOULD perform full verification if possible. If a Secondary cannot perform full verification, it SHALL, at the very least, perform partial verification. In addition, it can also perform some steps from the full verification process. See the <spanx style="emph">Uptane Deployment Best Practices</spanx> document (<xref target="DEPLOY"/>) for a discussion of how to choose between partial and full verification.</t>

<t>ECUs SHALL have a secure source of time. An OEM/Uptane implementer can use any external source of time that is demonstrably secure.</t>

<section anchor="build-time-prerequisite-requirements-for-ecus" title="Build-time prerequisite requirements for ECUs">

<t>For an ECU to be capable of receiving Uptane-secured updates, it SHALL have the following data provisioned at the time it is manufactured or installed in the vehicle:</t>

<t><list style="numbers">
  <t>A sufficiently recent copy of required Uptane metadata at the time of manufacture or install. This is necessary for the ECU to authenticate that the remote repository is legitimate when it first downloads metadata in the field. See <spanx style="emph">Uptane Deployment Best Practices</spanx> (<xref target="DEPLOY"/>) for more information.
  <list style="symbols">
      <t>Partial verification Secondary ECUs SHALL have the Root and Targets metadata from the Director repository (to reduce the scope of rollback and replay attacks). These ECUs can also have metadata from other roles or the Image repository if they will be used by the Secondary.</t>
      <t>Full verification ECUs SHALL have a complete set of metadata (Root, Targets, Snapshot, and Timestamp) from both repositories (to prevent rollback and replay attacks), as well as the repository mapping metadata (<xref target="repo_mapping_meta"/>). Delegations are not required.</t>
    </list></t>
  <t>The current time, or a secure attestation of a sufficiently recent time.</t>
  <t>An <spanx style="strong">ECU signing key</spanx>. This is a private key, unique to the ECU, used to sign ECU version reports and decrypt images. An ECU key can be either a symmetric key or an asymmetric key. If it is an asymmetric key, there SHOULD be separate keys for encryption and signing. For the purposes of this Standard, the set of private keys that an ECU uses is referred to as the ECU key (singular), even if it is actually multiple keys used for different purposes. Note that while signing keys are required to be unique to the ECU to avoid replay attacks, the secret keys used to decrypt images need not be unique.</t>
</list></t>

</section>
<section anchor="what-the-primary-does" title="What the Primary does">

<t>A Primary downloads, verifies, and distributes the latest time, metadata, and images. To do so, it SHALL perform the following seven steps:</t>

<t><list style="numbers">
  <t>Construct and send vehicle version manifest (<xref target="construct_manifest_primary"/>)</t>
  <t>Download and check current time (<xref target="check_time_primary"/>)</t>
  <t>Download and verify metadata (<xref target="download_meta_primary"/>)</t>
  <t>Download and verify images (<xref target="download_images_primary"/>)</t>
  <t>Send latest time to Secondaries (<xref target="send_time_primary"/>)</t>
  <t>Send metadata to Secondaries (<xref target="send_metadata_primary"/>)</t>
  <t>Send images to Secondaries (<xref target="send_images_primary"/>)</t>
</list></t>

<t>Note that the subsequent sections concerning requirements for a Primary do not prohibit implementing Primary capabilities on an ECU that does not communicate directly with the Uptane repositories. This allows for implementations to have multiple ECUs within the vehicle performing functions equivalent to a Primary.
If multiple such Primaries are included within a vehicle, each Primary SHOULD have a designated set of Secondaries and each Secondary SHALL have at least one Primary responsible for providing its updates</t>

<section anchor="construct_manifest_primary" title="Construct and send vehicle version manifest">

<t>The Primary SHALL build a <spanx style="emph">vehicle version manifest</spanx> as described in <xref target="vehicle_version_manifest"/>.</t>

<t>Once the complete manifest is built, the Primary can send the manifest to the Director repository. However, it is not strictly required that the Primary send the manifest until step three. If permitted by the implementation, a Primary could send only a diff of the manifest to save bandwidth. If an implementation permits diffs, the Director SHOULD have a way to request a full manifest.</t>

<t>Secondaries can send their version reports at any time so that they are already stored on the Primary when it wishes to check for updates. Alternatively, the Primary can request a version report from each Secondary at the time of the update check.</t>

<section anchor="vehicle_version_manifest" title="Vehicle version manifest">

<t>The vehicle version manifest is a metadata structure that SHALL contain the following information:</t>

<t><list style="symbols">
  <t>An attribute containing the signature(s) of the payload, each specified by:
  <list style="symbols">
      <t>The public key identifier of the key being used to sign the payload</t>
      <t>The signing method (i.e., ed25519, rsassa-pss, etc.)</t>
      <t>A hash of the payload to be signed</t>
      <t>The hashing function used (i.e., SHA3-256, SHA-512/224, etc.)</t>
      <t>The signature of the hash</t>
    </list></t>
  <t>A payload representing the installed versions of each software image on the vehicle. This payload SHALL contain:
  <list style="symbols">
      <t>The vehicle’s unique identifier (e.g., the VIN)</t>
      <t>The Primary ECU’s unique identifier (e.g., the serial number)</t>
      <t>A list of ECU version reports as specified in <xref target="version_report"/></t>
    </list></t>
</list></t>

<t>Note that one of the ECU version reports SHOULD be the version report for the Primary itself.</t>

</section>
<section anchor="version_report" title="ECU version report">

<t>An ECU version report is a metadata structure that SHALL contain the following information:</t>

<t><list style="symbols">
  <t>An attribute containing the signature(s) of the payload, each specified by:
  <list style="symbols">
      <t>The public key identifier of the key being used to sign the payload</t>
      <t>The signing method (i.e., ed25519, rsassa-pss, etc.)</t>
      <t>A hash of the payload to be signed</t>
      <t>The hashing function used (i.e., SHA3-256, SHA-512/224, etc.)</t>
      <t>The signature of the hash</t>
    </list></t>
  <t>A payload containing:
  <list style="symbols">
      <t>The ECU’s unique identifier (e.g., the serial number)</t>
      <t>The filename, length, and hashes of its currently installed image (i.e., the non-custom Targets metadata for this particular image)</t>
      <t>An indicator of any detected security attack</t>
      <t>The latest time the ECU can verify at the time this version report was generated</t>
      <t>A nonce or counter to prevent a replay of the ECU version report. This value SHALL change each update cycle.</t>
    </list></t>
</list></t>

</section>
</section>
<section anchor="check_time_primary" title="Download and check current time">

<t>The Primary SHALL load the current time from a secure source.</t>

</section>
<section anchor="download_meta_primary" title="Download and verify metadata">

<t>The Primary SHALL download metadata for all targets and perform a full verification on it as specified in <xref target="full_verification"/>.</t>

</section>
<section anchor="download_images_primary" title="Download and verify images">

<t>The Primary SHALL download and verify images for itself and for all of its associated Secondaries. Images SHALL be verified by checking that the hash of the image file matches the hash specified in the Director’s Targets metadata for that image.</t>

<t>There could be several different filenames that all refer to the same image binary, as described in <xref target="metadata_filename_rules"/>. If the Primary has received multiple hashes for a given image binary via the Targets role (see <xref target="targets_images_meta"/>) then it SHALL verify every hash for this image even though the image is identified by a single hash as part of its filename.</t>

</section>
<section anchor="send_time_primary" title="Send latest time to Secondaries">

<t>The Primary SHOULD send the time to each ECU.</t>

</section>
<section anchor="send_metadata_primary" title="Send metadata to Secondaries">

<t>The Primary SHALL send its latest downloaded metadata to all of its associated Secondaries. The metadata it sends to each Secondary SHALL include all of the metadata required for verification on that Secondary. For full verification Secondaries, this includes the metadata for all four roles from both repositories, plus any delegated Targets metadata files the Secondary will recurse through to find the proper delegation. For partial verification Secondaries, this could include fewer metadata files; at a minimum, it includes only the Targets metadata file from the Director repository.</t>

<t>The Primary SHOULD determine the minimal set of metadata files to send to each Secondary by performing delegation resolution as described in <xref target="full_verification"/>.</t>

<t>Each Secondary SHALL store the latest copy of all metadata required for its own verification.</t>

</section>
<section anchor="send_images_primary" title="Send images to Secondaries">

<t>The Primary SHALL send the latest image to each of its associated Secondaries that have sufficient storage to receive it.</t>

<t>For Secondaries without sufficient storage to store a copy of the image, the Primary SHOULD wait for a request from the Secondary to stream the new image file to it. The Secondary will send the request once it has verified the metadata sent in the previous step.</t>

</section>
</section>
<section anchor="installing-images-on-primary-or-secondary-ecus" title="Installing images on Primary or Secondary ECUs">

<t>An ECU SHALL perform the following steps when attempting to install a new image:</t>

<t><list style="numbers">
  <t>Verify latest attested time. This is optional if the ECU does not have the capacity to verify a time message (<xref target="verify_time"/>)</t>
  <t>Verify metadata (<xref target="verify_metadata"/>)</t>
  <t>Download latest image (<xref target="download_image"/>)</t>
  <t>Verify image (<xref target="verify_image"/>)</t>
  <t>Install image (<xref target="install_image"/>)</t>
  <t>Create and send version report (<xref target="create_version_report"/>)</t>
</list></t>

<section anchor="verify_time" title="Load and verify the latest attested time">

<t>IF the ECU has the capability to verify a time message, the ECU SHOULD load and verify the current time, or the most recent securely attested time.</t>

</section>
<section anchor="verify_metadata" title="Verify metadata">

<t>The ECU SHALL verify the latest downloaded metadata (<xref target="metadata_verification"/>) using either full or partial verification. If the metadata verification fails for any reason, the ECU SHALL jump to the final step (<xref target="create_version_report"/>).</t>

</section>
<section anchor="download_image" title="Download latest image">

<t>If the ECU has limited secondary storage, i.e., insufficient buffer storage to temporarily store the latest image before installing it, it SHALL download the latest image from the Primary. (If the ECU has sufficient secondary storage, it will already have the latest image in its secondary storage as specified in <xref target="send_images_primary"/>, and SHALL skip to the next step.) The ECU SHOULD first create a backup of its previous working image and store it elsewhere (e.g., the Primary).</t>

<t>The filename used to identify the latest known image (i.e., the file to request from the Primary) SHALL be determined as follows:</t>

<t><list style="numbers">
  <t>Load the Targets metadata file from the Director repository.</t>
  <t>Find the Targets metadata associated with this ECU identifier.</t>
  <t>Construct the Image filename using the rule in <xref target="metadata_filename_rules"/>, or use the download URL specified in the Director metadata.</t>
  <t>If there is no Targets metadata about this image, abort the update cycle and report that there is no such image. Additionally, in the case of failure, the ECU SHALL retain its previous Targets metadata instead of using the new Targets metadata. Otherwise, download the image (up to the number of bytes specified in the Targets metadata) and verify it according to <xref target="verify_image"/>.</t>
</list></t>

<t>When the Primary responds to the download request, the ECU SHALL overwrite its current image with the downloaded image from the Primary.</t>

<t>If any part of this step fails, the ECU SHALL jump to the final step (<xref target="create_version_report"/>).</t>

</section>
<section anchor="verify_image" title="Verify image">

<t>The ECU SHALL verify that the latest image matches the latest metadata as follows:</t>

<t><list style="numbers">
  <t>Load the latest Targets metadata file from the Director.</t>
  <t>Find the Targets metadata associated with this ECU identifier.</t>
  <t>Check that the hardware identifier in the metadata matches the ECU’s hardware identifier.</t>
  <t>Check that the image filename is valid for this ECU. This could be a comparison against a wildcard path, which restricts the ECUs to which a delegation will apply.</t>
  <t>Check that the release counter of the image in the previous metadata, if it exists, is less than or equal to the release counter in the latest metadata.</t>
  <t>If the image is encrypted, decrypt the image with a decryption key to be chosen as follows:
  <list style="symbols">
      <t>If the ECU key is a symmetric key, the ECU SHALL use the ECU key for image decryption.</t>
      <t>If the ECU key is asymmetric, the ECU SHALL check the Targets metadata for an encrypted symmetric key. If such a key is found, the ECU SHALL decrypt the symmetric key using its ECU key, and use the decrypted symmetric key for image decryption.</t>
      <t>If the ECU key is asymmetric and there is no symmetric key in the Targets metadata, the ECU SHALL use its ECU key for image decryption.</t>
    </list></t>
  <t>Check that all hashes listed in the metadata match the corresponding hashes of the image.</t>
</list></t>

<t>If the ECU has enough secondary storage capacity to store the image, the checks SHOULD be performed on the image in secondary storage before it is installed.</t>

<t>When checking hashes, the ECU SHALL additionally check that the length of the image matches the length listed in the metadata.</t>

<t>NOTE: See <xref target="DEPLOY"/> for guidance on how to deal with Secondary ECU failures for ECUs that have limited secondary storage.</t>

<t>If any step fails, the ECU SHALL jump to the final step (<xref target="create_version_report"/>).</t>

</section>
<section anchor="install_image" title="Install image">

<t>The ECU SHALL attempt to install the update. This installation SHOULD occur at a time when all pre-conditions are met. These pre-conditions could include ensuring the vehicle is in a safe environment for an installation (e.g., the vehicle is parked when updating a specific ECU). Other pre-conditions could include ensuring the ECU has a backup of its current image and metadata in case the current installation fails.</t>

</section>
<section anchor="create_version_report" title="Create and send version report">

<t>The ECU SHALL create a version report as described in <xref target="version_report"/>, and send it to the Primary (or simply save it to disk, if the ECU is a Primary). The Primary SHOULD write the version reports it receives to disk and associate them with the Secondaries that sent them.</t>

</section>
</section>
<section anchor="metadata_verification" title="Metadata verification procedures">

<t>A Primary ECU SHALL perform full verification of metadata. A Secondary ECU SHOULD perform full verification of metadata. If a Secondary cannot perform full verification, it SHALL, at the very least, perform partial verification.</t>

<t>If a step in the following workflows does not succeed (e.g., the update is aborted because a new metadata file was not signed), an ECU SHOULD still be able to update again in the future. Errors raised during the update process SHOULD NOT leave ECUs in an unrecoverable state.</t>

<section anchor="partial_verification" title="Partial verification">

<t>In order to perform partial verification, an ECU SHALL perform the following steps:</t>

<t><list style="numbers">
  <t>Load and verify the current time or the most recent securely attested time.</t>
  <t>Download and check the Targets metadata file from the Director repository, following the procedure in <xref target="check_targets"/>.</t>
</list></t>

<t>Note that this verification procedure is the smallest set of Uptane checks permissible for an Uptane Secondary ECU. An ECU can additionally implement more metadata checks.</t>

<t>For example, an ECU could also fetch and verify Root metadata from the Director (following the procedure in <xref target="check_root"/>) before checking Targets metadata. Performing this additional check would provide the ECU with a secure way to receive and validate a rotation of the Director’s Targets key.</t>

<t>See <xref target="DEPLOY"/> for more discussion on this topic.</t>

</section>
<section anchor="full_verification" title="Full verification">

<t>Full verification of metadata means that the ECU checks that the Targets metadata about images from the Director repository matches the Targets metadata about the same images from the Image repository. This provides resilience to a key compromise in the system.</t>

<t>Full verification SHALL be performed by Primary ECUs and SHOULD be performed by Secondary ECUs. In the following instructions, whenever an ECU is directed to download metadata, it applies only to Primary ECUs.</t>

<t>Before starting full verification, the repository mapping metadata SHALL be consulted to determine where to download metadata from. This procedure assumes the basic Uptane case: there are only two repositories (Director and Image), and all image paths are required to be signed by both repositories. If a more complex repository layout is being used, refer to <xref target="DEPLOY"/> for guidance on how to determine where metadata could be downloaded from.</t>

<t>In order to perform full verification, an ECU SHALL perform the following steps:</t>

<t><list style="numbers">
  <t>Load and verify the current time or the most recent securely attested time.</t>
  <t>Download and check the Root metadata file from the Director repository, following the procedure in <xref target="check_root"/>.</t>
  <t>Download and check the Timestamp metadata file from the Director repository, following the procedure in <xref target="check_timestamp"/>.</t>
  <t>Check the previously downloaded Snapshot metadata file from the Directory repository (if available). If the hashes and version number of that file match the hashes and version number listed in the new Timestamp metadata, there are no new updates and the verification process SHALL be stopped and considered complete. Otherwise, download and check the Snapshot metadata file from the Director repository, following the procedure in <xref target="check_snapshot"/>.</t>
  <t>Download and check the Targets metadata file from the Director repository, following the procedure in <xref target="check_targets"/>.</t>
  <t>If the Targets metadata from the Directory repository indicates that there are no new targets that are not already currently installed, the verification process SHALL be stopped and considered complete. Otherwise, download and check the Root metadata file from the Image repository, following the procedure in <xref target="check_root"/>.</t>
  <t>Download and check the Timestamp metadata file from the Image repository, following the procedure in <xref target="check_timestamp"/>.</t>
  <t>Check the previously downloaded Snapshot metadata file from the Image repository (if available). If the hashes and version number of that file match the hashes and version number listed in the new Timestamp metadata, the ECU SHALL skip to the last step. Otherwise, download and check the Snapshot metadata file from the Image repository, following the procedure in <xref target="check_snapshot"/>.</t>
  <t>Download and check the top-level Targets metadata file from the Image repository, following the procedure in <xref target="check_targets"/>.</t>
  <t>Verify that Targets metadata from the Director and Image repositories match. A Primary ECU SHALL perform this check on metadata for all images listed in the Targets metadata file from the Director repository downloaded in step 6. A Secondary ECU can elect to perform this check only on the metadata for the image it will install. (That is, the image metadata from the Director that contains the ECU identifier of the current ECU.) To check that the metadata for an image matches, complete the following procedure:
  <list style="numbers">
      <t>Locate and download a Targets metadata file from the Image repository that contains an image with exactly the same filename listed in the Director metadata, following the procedure in <xref target="resolve_delegations"/>.</t>
      <t>Check that the Targets metadata from the Image repository matches the Targets metadata from the Director repository:
      <list style="numbers">
          <t>Check that the non-custom metadata (i.e., length and hashes) of the unencrypted or encrypted image are the same in both sets of metadata. Note: the Primary is responsible for validating encrypted images and associated metadata. The target ECU (Primary or Secondary) is responsible for validating the unencrypted image and associated metadata.</t>
          <t>Check that all SHALL match custom metadata (e.g., hardware identifier and release counter) are the same in both sets of metadata.</t>
          <t>Check that the release counter, if one is used, in the previous Targets metadata file is less than or equal to the release counter in this Targets metadata file.</t>
        </list></t>
    </list></t>
</list></t>

<t>If any step fails, the ECU SHALL return an error code indicating the failure. If a check for a specific type of security attack fails (i.e., rollback, freeze, arbitrary software, etc.), the ECU SHOULD return an error code that indicates the type of attack.</t>

</section>
<section anchor="check_root" title="How to check Root metadata">

<t>To properly check Root metadata, an ECU SHOULD:</t>

<t><list style="numbers">
  <t>Load the previous Root metadata file.</t>
  <t>Update to the latest Root metadata file.
  <list style="numbers">
      <t>Let N denote the version number of the latest Root metadata file (which at first could be the same as the previous Root metadata file).</t>
      <t>Try downloading a new version N+1 of the Root metadata file, up to some X number of bytes. The value for X is set by the implementer. For example, X could be tens of kilobytes. The filename used to download the Root metadata file is of the fixed form VERSION_NUMBER.FILENAME.EXT (e.g., 42.root.json). If this file is not available, the current Root metadata file is the latest; continue with step 3.</t>
      <t>Version N+1 of the Root metadata file SHALL have been signed by the following: (1) a threshold of unique keys specified in the latest Root metadata file (version N), and (2) a threshold of unique keys specified in the new Root metadata file being validated (version N+1). If version N+1 is not signed as required, discard it, abort the update cycle, and report the signature failure. On the next update cycle, begin at version N of the Root metadata file. (Checks for an arbitrary software attack.)</t>
      <t>The version number of the latest Root metadata file (version N) SHALL be less than or equal to the version number of the new Root metadata file (version N+1). Effectively, this means checking that the version number signed in the new Root metadata file is indeed N+1. If the version of the new Root metadata file is less than the latest metadata file, discard it, abort the update cycle, and report the rollback attack. On the next update cycle, begin at step 1 and version N of the Root metadata file. (Checks for a rollback attack.)</t>
      <t>Set the latest Root metadata file to the new Root metadata file.</t>
      <t>Repeat steps 2.1 to 2.6.</t>
    </list></t>
  <t>Check that the current (or latest securely attested) time is lower than the expiration timestamp in the latest Root metadata file. (Checks for a freeze attack.)</t>
  <t>If the Timestamp and/or Snapshot keys have been rotated, delete the previous Timestamp and Snapshot metadata files. (Checks for recovery from fast-forward attacks <xref target="MERCURY"/>.)</t>
</list></t>

</section>
<section anchor="check_timestamp" title="How to check Timestamp metadata">

<t>To properly check Timestamp metadata, an ECU SHOULD:</t>

<t><list style="numbers">
  <t>Download up to Y number of bytes. The value for Y is set by the implementer. For example, Y could be tens of kilobytes. The filename used to download the Timestamp metadata file is of the fixed form FILENAME.EXT (e.g., timestamp.json).</t>
  <t>Check that it has been signed by the threshold of unique keys specified in the latest Root metadata file. If the new Timestamp metadata file is not properly signed, discard it, abort the update cycle, and report the signature failure. (Checks for an arbitrary software attack.)</t>
  <t>Check that the version number of the previous Timestamp metadata file, if any, is less than or equal to the version number of this Timestamp metadata file. If the new Timestamp metadata file is older than the trusted Timestamp metadata file, discard it, abort the update cycle, and report the potential rollback attack. (Checks for a rollback attack.)</t>
  <t>Check that the current (or latest securely attested) time is lower than the expiration timestamp in this Timestamp metadata file. If the new Timestamp metadata file has expired, discard it, abort the update cycle, and report the potential freeze attack. (Checks for a freeze attack.)</t>
</list></t>

</section>
<section anchor="check_snapshot" title="How to check Snapshot metadata">

<t>To properly check Snapshot metadata, an ECU SHOULD:</t>

<t><list style="numbers">
  <t>Download up to the number of bytes specified in the Timestamp metadata file, constructing the metadata filename as defined in <xref target="metadata_filename_rules"/>.</t>
  <t>The hashes and version number of the new Snapshot metadata file SHALL match the hashes and version number listed in the Timestamp metadata. If the hashes and version number do not match, discard the new Snapshot metadata, abort the update cycle, and report the failure. (Checks for a mix-and-match attack.)</t>
  <t>Check that it has been signed by the threshold of unique keys specified in the latest Root metadata file. If the new Snapshot metadata file is not signed as required, discard it, abort the update cycle, and report the signature failure. (Checks for an arbitrary software attack.)</t>
  <t>Check that the version number of the previous Snapshot metadata file, if any, is less than or equal to the version number of this Snapshot metadata file. If this Snapshot metadata file is older than the previous Snapshot metadata file, discard it, abort the update cycle, and report the potential rollback attack. (Checks for a rollback attack.)</t>
  <t>Check that the version number listed by the previous Snapshot metadata file for each Targets metadata file is less than or equal to its version number in this Snapshot metadata file. If this condition is not met, discard the new Snapshot metadata file, abort the update cycle, and report the failure. (Checks for a rollback attack.)</t>
  <t>Check that each Targets metadata filename listed in the previous Snapshot metadata file is also listed in this Snapshot metadata file. If this condition is not met, discard the new Snapshot metadata file, abort the update cycle, and report the failure. (Checks for a rollback attack.)</t>
  <t>Check that the current (or latest securely attested) time is lower than the expiration timestamp in this Snapshot metadata file. If the new Snapshot metadata file is expired, discard it, abort the update cycle, and report the potential freeze attack. (Checks for a freeze attack.)</t>
</list></t>

</section>
<section anchor="check_targets" title="How to check Targets metadata">

<t>To properly check Targets metadata, an ECU SHOULD:</t>

<t><list style="numbers">
  <t>Download up to Z number of bytes, constructing the metadata filename as defined in <xref target="metadata_filename_rules"/>. The value for Z is set by the implementer. For example, Z could be tens of kilobytes.</t>
  <t>The version number of the new Targets metadata file SHALL match the version number listed in the latest Snapshot metadata. If the version number does not match, discard it, abort the update cycle, and report the failure. (Checks for a mix-and-match attack.) This step can be skipped when checking Targets metadata on a partial verification ECU, as these ECUs might not have Snapshot metadata.</t>
  <t>Check that the Targets metadata has been signed by the threshold of unique keys specified in the relevant metadata file. (Checks for an arbitrary software attack.):
  <list style="numbers">
      <t>If checking top-level Targets metadata, the threshold of keys is specified in the Root metadata.</t>
      <t>If checking delegated Targets metadata, the threshold of keys is specified in the Targets metadata file that delegated authority to this role.</t>
    </list></t>
  <t>Check that the version number of the previous Targets metadata file, if any, is less than or equal to the version number of this Targets metadata file. (Checks for a rollback attack.)</t>
  <t>Check that the current (or latest securely attested) time is lower than the expiration timestamp in this Targets metadata file. (Checks for a freeze attack.)</t>
  <t>If checking Targets metadata from the Director repository, verify that there are no delegations.</t>
  <t>If checking Targets metadata from the Director repository, check that no ECU identifier is represented more than once.</t>
  <t>If checking Targets metadata from the Director repository, and the ECU performing the verification is the Primary ECU, check that all listed ECU identifiers correspond to ECUs that are actually present in the vehicle.</t>
</list></t>

</section>
<section anchor="resolve_delegations" title="How to resolve delegations">

<t>To properly check Targets metadata for an image, an ECU SHALL locate the metadata file(s) for the role (or roles) that have the authority to sign the image. This metadata might be located in the top-level Targets metadata, but it could also be delegated to another role or to multiple roles. Therefore, all delegations SHALL be resolved using the following recursive procedure, beginning with the top-level Targets metadata file.</t>

<t><list style="numbers">
  <t>Download and check the current metadata file, following the procedure in <xref target="check_targets"/>. If the file cannot be loaded, or if any verification step fails, abort the delegation resolution, and indicate that image metadata cannot be found because of a missing or invalid role.</t>
  <t>If the current metadata file contains signed metadata about the image, end the delegation resolution and return the metadata to be checked.</t>
  <t>If the current metadata file was reached via a terminating delegation and does not contain signed metadata about the image, abort the delegation resolution for this image and return an error indicating that image metadata could not be found.</t>
  <t>Search the list of delegations, in listed order. For each delegation:
  <list style="numbers">
      <t>Check if the delegation applies to the image being processed. For the delegation to apply, it SHALL include the hardware identifier of the target, and the target name SHALL match one of the delegation’s image paths. If either of these tests fail, move on to the next delegation in the list.</t>
      <t>If the delegation is a multi-role delegation, follow the procedure described in <xref target="multirole_delegations"/>. If the multi-role delegation is terminating and no valid image metadata is found, abort the delegation resolution and return an error indicating that image metadata could not be found.</t>
      <t>If the delegation is a normal delegation, perform delegation resolution, starting at step 1. Note that this could recurse an arbitrary number of levels deep. If a delegation that applies to the image is found but no image metadata is found in the delegated roles or any of its sub-delegations, simply continue on with the next delegation in the list. The search is only completed or aborted if image metadata or a terminating delegation that applies to the image is found.</t>
    </list></t>
  <t>If the end of the list of delegations in the top-level metadata is reached without finding valid image metadata, return an error indicating that image metadata could not be found.</t>
</list></t>

</section>
<section anchor="multirole_delegations" title="Multi-role delegations">

<t>It is possible to delegate signing authority to multiple delegated roles as described in <xref target="TAP-3"/>. Each multi-role delegation effectively contains a list of ordinary delegations, plus a threshold of those roles that SHALL be in agreement about the non-custom metadata for the image. All multi-role delegations SHALL be resolved using the following procedure. Note that there could be sub-delegations inside multi-role delegations.</t>

<t><list style="numbers">
  <t>For each of the roles in the delegation, find and load the image metadata following the procedure in <xref target="resolve_delegations"/>.</t>
  <t>Inspect the non-custom part of the metadata loaded in step 1:
  <list style="numbers">
      <t>Locate all sets of roles that have agreeing (i.e., identical) non-custom metadata and “SHALL match” custom metadata. Discard any set of roles with a size smaller than the threshold of roles that SHALL be in agreement for this delegation.</t>
      <t>Check for a conflict. A conflict exists if there is more than one agreeing set of roles, yet each set has different metadata. If a conflict is found, choose and return the metadata from the set of roles that include the earliest role in the multi-delegation list.</t>
      <t>If there is no conflict, check if there is any single set of roles with matching non-custom metadata. If there is, choose and return the metadata from this set.</t>
      <t>If no agreeing set can be found that meets the agreement threshold, return an error indicating that image metadata could not be found.</t>
    </list></t>
</list></t>

</section>
</section>
</section>
</section>


  </middle>

  <back>

    <references title='Normative References'>





<reference  anchor="RFC2119" target='https://www.rfc-editor.org/info/rfc2119'>
<front>
<title>Key words for use in RFCs to Indicate Requirement Levels</title>
<author initials='S.' surname='Bradner' fullname='S. Bradner'><organization /></author>
<date year='1997' month='March' />
<abstract><t>In many standards track documents several words are used to signify the requirements in the specification.  These words are often capitalized. This document defines these words as they should be interpreted in IETF documents.  This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t></abstract>
</front>
<seriesInfo name='BCP' value='14'/>
<seriesInfo name='RFC' value='2119'/>
<seriesInfo name='DOI' value='10.17487/RFC2119'/>
</reference>



<reference  anchor="RFC3647" target='https://www.rfc-editor.org/info/rfc3647'>
<front>
<title>Internet X.509 Public Key Infrastructure Certificate Policy and Certification Practices Framework</title>
<author initials='S.' surname='Chokhani' fullname='S. Chokhani'><organization /></author>
<author initials='W.' surname='Ford' fullname='W. Ford'><organization /></author>
<author initials='R.' surname='Sabett' fullname='R. Sabett'><organization /></author>
<author initials='C.' surname='Merrill' fullname='C. Merrill'><organization /></author>
<author initials='S.' surname='Wu' fullname='S. Wu'><organization /></author>
<date year='2003' month='November' />
<abstract><t>This document presents a framework to assist the writers of certificate policies or certification practice statements for participants within public key infrastructures, such as certification authorities, policy authorities, and communities of interest that wish to rely on certificates.  In particular, the framework provides a comprehensive list of topics that potentially (at the writer's discretion) need to be covered in a certificate policy or a certification practice statement.  This document supersedes RFC 2527.</t></abstract>
</front>
<seriesInfo name='RFC' value='3647'/>
<seriesInfo name='DOI' value='10.17487/RFC3647'/>
</reference>



<reference  anchor="RFC5198" target='https://www.rfc-editor.org/info/rfc5198'>
<front>
<title>Unicode Format for Network Interchange</title>
<author initials='J.' surname='Klensin' fullname='J. Klensin'><organization /></author>
<author initials='M.' surname='Padlipsky' fullname='M. Padlipsky'><organization /></author>
<date year='2008' month='March' />
<abstract><t>The Internet today is in need of a standardized form for the transmission of internationalized &quot;text&quot; information, paralleling the specifications for the use of ASCII that date from the early days of the ARPANET.  This document specifies that format, using UTF-8 with normalization and specific line-ending sequences.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='5198'/>
<seriesInfo name='DOI' value='10.17487/RFC5198'/>
</reference>


<reference anchor="NFC" target="https://www.unicode.org/reports/tr15/">
  <front>
    <title>Unicode Standard Annex #15: Unicode Normalization Forms</title>
    <author initials="M." surname="Davis">
      <organization></organization>
    </author>
    <author initials="M." surname="Duerst">
      <organization></organization>
    </author>
    <date year="2018" month="October"/>
  </front>
</reference>
<reference anchor="TAP-3" target="https://github.com/theupdateframework/taps/blob/d0818e580c322815a473520f2e8cc5f5eb8df499/tap3.md">
  <front>
    <title>The Update Framework TAP 3 - Multi-role delegations</title>
    <author initials="T.K." surname="Kuppusamy">
      <organization></organization>
    </author>
    <author initials="S." surname="Awwad">
      <organization></organization>
    </author>
    <author initials="E." surname="Cordell">
      <organization></organization>
    </author>
    <author initials="V." surname="Diaz">
      <organization></organization>
    </author>
    <author initials="J." surname="Moshenko">
      <organization></organization>
    </author>
    <author initials="J." surname="Cappos">
      <organization></organization>
    </author>
    <date year="2018" month="January" day="18"/>
  </front>
</reference>
<reference anchor="TAP-4" target="https://github.com/theupdateframework/taps/blob/2cb67d913ec19424d1e354b38f862886fbfd4105/tap4.md">
  <front>
    <title>The Update Framework TAP 4 - Multiple repository consensus on entrusted targets</title>
    <author initials="T.K." surname="Kuppusamy">
      <organization></organization>
    </author>
    <author initials="S." surname="Awwad">
      <organization></organization>
    </author>
    <author initials="E." surname="Cordell">
      <organization></organization>
    </author>
    <author initials="V." surname="Diaz">
      <organization></organization>
    </author>
    <author initials="J." surname="Moshenko">
      <organization></organization>
    </author>
    <author initials="J." surname="Cappos">
      <organization></organization>
    </author>
    <date year="2017" month="December" day="15"/>
  </front>
</reference>
<reference anchor="TUF-spec" target="https://github.com/theupdateframework/specification/blob/2b4e18472fe25d5b57f36f6fa50104967c8faeaa/tuf-spec.md">
  <front>
    <title>The Update Framework Specification</title>
    <author initials="J." surname="Samuel">
      <organization></organization>
    </author>
    <author initials="N." surname="Mathewson">
      <organization></organization>
    </author>
    <author initials="G." surname="Condra">
      <organization></organization>
    </author>
    <author initials="V." surname="Diaz">
      <organization></organization>
    </author>
    <author initials="T.K." surname="Kuppusamy">
      <organization></organization>
    </author>
    <author initials="S." surname="Awwad">
      <organization></organization>
    </author>
    <author initials="S." surname="Tobias">
      <organization></organization>
    </author>
    <author initials="J." surname="Wright">
      <organization></organization>
    </author>
    <author initials="H." surname="Mehnert">
      <organization></organization>
    </author>
    <author initials="E." surname="Tryzelaar">
      <organization></organization>
    </author>
    <author initials="J." surname="Cappos">
      <organization></organization>
    </author>
    <author initials="R." surname="Dingledine">
      <organization></organization>
    </author>
    <date year="2018" month="September" day="19"/>
  </front>
</reference>


    </references>

    <references title='Informative References'>

<reference anchor="MERCURY" target="https://www.usenix.org/system/files/conference/atc17/atc17-kuppusamy.pdf">
  <front>
    <title>Mercury: Bandwidth-Effective Prevention of Rollback Attacks Against Community Repositories</title>
    <author initials="T.K." surname="Kuppusamy">
      <organization></organization>
    </author>
    <author initials="V." surname="Diaz">
      <organization></organization>
    </author>
    <author initials="J." surname="Cappos">
      <organization></organization>
    </author>
    <date year="2017" month="July" day="12"/>
  </front>
  <seriesInfo name="ISBN" value="978-1-931971-38-6"/>
</reference>
<reference anchor="UPTANEESCAR" target="https://ssl.engineering.nyu.edu/papers/kuppusamy_escar_16.pdf">
  <front>
    <title>Securing Software Updates for Automobiles</title>
    <author initials="T.K." surname="Kuppusamy">
      <organization></organization>
    </author>
    <author initials="A." surname="Brown">
      <organization></organization>
    </author>
    <author initials="S." surname="Awwad">
      <organization></organization>
    </author>
    <author initials="D." surname="McCoy">
      <organization></organization>
    </author>
    <author initials="R." surname="Bielawski">
      <organization></organization>
    </author>
    <author initials="C." surname="Mott">
      <organization></organization>
    </author>
    <author initials="S." surname="Lauzon">
      <organization></organization>
    </author>
    <author initials="A." surname="Weimerskirch">
      <organization></organization>
    </author>
    <author initials="J." surname="Cappos">
      <organization></organization>
    </author>
    <date year="2016" month="October" day="16"/>
  </front>
</reference>
<reference anchor="PEP-458" target="https://www.python.org/dev/peps/pep-0458/">
  <front>
    <title>Secure PyPI downloads with signed repository metadata</title>
    <author initials="T.K." surname="Kuppusamy">
      <organization></organization>
    </author>
    <author initials="V." surname="Diaz">
      <organization></organization>
    </author>
    <author initials="M." surname="Moore">
      <organization></organization>
    </author>
    <author initials="L." surname="Pühringer">
      <organization></organization>
    </author>
    <author initials="J." surname="Locke">
      <organization></organization>
    </author>
    <author initials="L.A." surname="DeLong">
      <organization></organization>
    </author>
    <author initials="J." surname="Cappos">
      <organization></organization>
    </author>
    <date year="2019" month="November" day="13"/>
  </front>
</reference>
<reference anchor="DEPLOY" target="https://uptane.github.io/deployment-considerations/index.html">
  <front>
    <title>Uptane Deployment Best Practices</title>
    <author initials="." surname="Members of the Uptane Community">
      <organization></organization>
    </author>
    <date year="n.d."/>
  </front>
</reference>
<reference anchor="USATODAY" target="https://www.usatoday.com/story/tech/columnist/2016/06/28/your-average-car-lot-more-code-driven-than-you-think/86437052/">
  <front>
    <title>Your average car is a lot more code-driven than you think</title>
    <author initials="B." surname="O'Donnell">
      <organization></organization>
    </author>
    <date year="2016" month="June" day="28"/>
  </front>
</reference>
<reference anchor="CR-OTA" target="https://www.consumerreports.org/automotive-technology/automakers-embrace-over-the-air-updates-can-we-trust-digital-car-repair/">
  <front>
    <title>Automakers Embrace Over-the-Air Updates, but Can We Trust Digital Car Repair?</title>
    <author initials="K." surname="Barry">
      <organization></organization>
    </author>
    <date year="2018" month="April" day="20"/>
  </front>
</reference>
<reference anchor="IN-TOTO" target="https://in-toto.io/">
  <front>
    <title>in-toto: A framework to secure the integrity of software supply chains</title>
    <author >
      <organization></organization>
    </author>
    <date year="2018" month="October" day="29"/>
  </front>
</reference>


    </references>



  </back>

<!-- ##markdown-source:
H4sIAMgvBWIAA+1923bbRrbgu74CK36IpENSlnyJ4zzMyLbcUbdvY8lJ55x1
lhskQAltEmADoGTGy382b/Njs69VuwoAJdvpPnPWmjzENgjUZdeufb+Mx+Od
tmgX+ePk3apNyzw5g/9naZ0l86pOnuVNcVEm8CQ5Xa4W+TIv27QtqnInnU7r
/Aq+enN+/OpkJ6tmZbqEUdY0yriRUcYZjbAzS9v8oqo3j5OinFc7O8WqfpyU
1bO8Lq5gwKu8Oa/XTXt09+6Pd4920jpPHyfnr5+93rmu6g8XdbVeyb8/5Bt4
lD1OTss2r8u8HT+r03m7s0Mzvk8XVQmr2OTNzqp4nPxHW81GSVPVbZ3PG/jb
Zol/+c+dnXTdXlb1450kGcOSmsfJy3w5zesmqeZJe5krNJ5Wy+W6LNoNvJgk
vMXen6r6Ii2L3wk4j5M/V0XZAvSu8kW1QqAlz6s1AAR/Td7U1d/zWQvLefHi
6cjBHUCRN8nu7KDCN+aT5M8AkKJMnqarVdXs0Sz5Mi0WHSA3//Oiqi4WOcGp
mcyqJb3cwKbz9nHyEPbW1tV5Pruk5zNYSotH8e7smB7U+QWt+tVv/Dvs6XHy
pK6qD4tNKZ9ksPHDw6O7hzs7ZVUv6cwQeneSv/CJJFk+T3bPfj5+8WKUvDz+
bZSc/fz63YtnoyRvZxNc/tvnT48OD3/kr/46eXD3x+TNX06TZpXP+Nd7D+//
wL++yls8+ORdWeDUhIuwrVVaF+UFbgz+aPijB4c/PuKP9OVXuL6FnAUAvl4m
T+GFV8+fPqbNtGl9gXC5bNtV8/jg4Pr6erLmbydwjAd1vgKEaQ7a+vDBAX/B
N+Q7ncHdkeOyzD8mdw4fPN4ye/MdDeIxDv9TrJskz9Krouk+XQMytvQY0AYm
B9A/Gh/epZ2eH79J7iVpCyd3lWR3Hx0+yh/AD/B4fK9/jxdFe7meImocAHav
VzjmvAZ0RjAftOmqOZguqumBDPbo7uze0dGjwwfp/R/uPTi6Oz/KH81mD+YP
8umjbH7/xx/xk3uTZWbBc07XBkdOnuvQstRx8nK9aItxXS1yQBRAVQJPMwyY
88lfJslf1qvVukmXm/C3s0lyfH2dZuHTkwlcyRoGX4TPfwFgFunv4cM/T5KX
VXOZlx+qzg984WLQ3z0cHz5y0L+v0D+aTR/+kP0o0L//bdCXwQ7v5bPDH+8f
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
RXfWcrzNWApt9qans8s7qtC811u9iNzm5Pki4U9KjbAK6RYeKBZyl5C5iZJi
2RZNHaE71kZxYaZyzJ2QoS+MPCLaxQGoGkpHDUUIsZVpbojMabjpDWodtuPu
aHV9MiWjZGTGYX4eGaInfVPHWuGnO/1KYd/UnWhmV2xdokpoBtWb0x5zfkUS
TZeK9ng7tq2+0LrRQ2rp1tV3B+pxmUnJ9IHmnKSDnWr+nri3xQiRRekXgp+W
spjkBxuER6900s5USjVNCqPrplUoJ5qS7eK9qPU00IKetMbEVVQgY5OqBJRM
YdzTm6HGmX0p4Z+dY1pBf0lF/ym4OPOqoxAd1qcviisN7tJmydiZFkcJSnDv
NkHhsiDdc48Dj5ztRo43J38VgdURJp6IrDiYPHsRFTZ1JJWTGrQiBY1h/N42
mVEx9SYryKc7XSNIjKjeK+9pWuUCPRw12Wo1kXk6RpO+S0FT4WZk3XpJ8nD4
W9wGHNs7OloNAqv6lXdX09t3JjABc6Y1Qkw+ouhUMrx26YxZmdSgcbFwwVTd
ZhGD1TRWi3Uj/GqoqZsk6AdOCHZR1EiXKTWhZpST0vokZlBfsqBGH26qt79u
d1981RWc8/w6zqtvfoqqzaNar8BwQVX9yd7bnECTXtR1kagMZ5wTPZuRU0Xg
VAmmd3AEc5W8XcrUGTTBjl2q1M9ETvrQj0P+jG1YPYuIDP2IiLiPCf2RM9hf
x35DpFzGW/And+tlSUySFDhbb18i9biugkIvLh2nUhJMYavkBrYfaxWB/k8Z
VKmDkKOWobVBzv86LSSJwNkeHBL5Q6Bh6zxdSvzQteWIFNbB9CS6RQ5COjRJ
cQUHlDvuG1xwW+8dBbyiWjdkk9JUYB/R4TNuTLxR6D51GtVWDwHFNJD1Bv1p
S87AsrWu/Y7ZhfALcys5d3bC5ZkEEag3zdUeLbxY6izIzqGL9uaZlMdV+ZjZ
yBI93Rc5hzrhD8SI0CJ+5FZgfQXykg2NvGe8BAGSdhwE+PZ9N6x7ScZ0rzyY
6AH4dwRK/qWHk+QpdWy0FtpAwkeXCL3xPtbG9+SCvojkPnPNAnCzEu2As7ND
Vb4Z2JfiiHMm/WEgd+LsYrkzlt9dUTiq0yWOVhbmF5sII2RL8ZG5lbsTYyLj
0bW79z5uvzsYBbUnObe3aATv5EA3bMDG5tSIhshEiUZl7p7cBqv9+3q5cil1
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
cpcuAQA=

-->

</rfc>


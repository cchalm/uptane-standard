<?xml version="1.0" encoding="UTF-8"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc2629 version 1.2.9 -->

<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
]>

<?rfc toc="yes"?>
<?rfc sortrefs="yes"?>
<?rfc symrefs="yes"?>

<rfc ipr="noDerivativesTrust200902" docName="uptane-standard-design" category="info">

  <front>
    <title abbrev="UPTANE">Uptane Standard for Design and Implementation</title>

    <author initials="." surname="Members of the Uptane Alliance Community" fullname="Uptane Alliance Community">
      <organization>Uptane Alliance (c/o Prof. Justin Cappos)</organization>
      <address>
        <postal>
          <street>6 MetroTech</street>
          <city>Brooklyn</city>
          <region>NY</region>
          <code>11201</code>
          <country>USA</country>
        </postal>
        <email>uptane-standards@googlegroups.com</email>
      </address>
    </author>

    <date year="2020" month="October" day="29"/>

    <area>TODO</area>
    <workgroup>TODO</workgroup>
    <keyword>Internet-Draft</keyword>

    <abstract>


<t>This document describes a framework for securing ground vehicle software update systems.</t>



    </abstract>


  </front>

  <middle>


<section anchor="introduction" title="Introduction">

<t>Uptane is a secure software update framework for ground vehicles. This document describes procedures to enable programmers for OEMs and suppliers to securely design and implement this framework in a manner that better protects connected units on ground vehicles. Integrating Uptane as outlined in the sections that follow can reduce the ability of attackers to compromise critical systems. It also assures a faster and easier recovery process should a compromise occur.</t>

<t>These instructions specify the components necessary for a compliant implementation. Individual implementors can make their own technological choices within those requirements. This flexibility makes Uptane adaptable to the many customized update solutions used by manufacturers. If implementors wish to have compatible formats, they may use POUFs. POUFs contain a description of implementation choices as well as data binding formats. An implementor who adopts a POUF, as well as the Uptane Standard, will be able to interoperate with other implementations using that POUF.</t>

</section>
<section anchor="terminology" title="Terminology">

<section anchor="conformance-terminology" title="Conformance terminology">

<t>The keywords MUST, MUST NOT, REQUIRED, SHALL, SHALL NOT, SHOULD, SHOULD NOT, RECOMMENDED, MAY, and OPTIONAL in this document are to be interpreted as described in <xref target="RFC2119"/>.</t>

<t>In order to be considered “Uptane-compliant,” an implementation MUST follow all of these rules as specified in the document.</t>

</section>
<section anchor="terminology-1" title="Terminology">

<t><spanx style="emph">Bundle</spanx>: A set of images released by the repository that is meant to be installed by one or more target ECUs on a vehicle during the same update cycle.</t>

<t><spanx style="emph">Bus</spanx>: An internal communications network that interconnects components within a vehicle. A vehicle can have a number of buses that will vary in terms of power, speed and resources.</t>

<t><spanx style="emph">ECU Identifier</spanx>: An attribute used to identify a specific ECU (e.g., such as a unique serial number).</t>

<t><spanx style="emph">ECU Version Manifest</spanx>: Metadata which details the software version currently installed on the ECU.</t>

<t><spanx style="emph">Hardware Identifier</spanx>: An attribute used to identify a model of an ECU.</t>

<t><spanx style="emph">Image</spanx>: File containing software for an ECU to install. May contain a binary image to flash, installation instructions, and other necessary information for the ECU to properly apply the update. Each ECU typically holds only one image, although this may vary in some cases.</t>

<t><spanx style="emph">Metadata</spanx>:  Information describing the characteristics of data including, for example, structural
metadata describing data structures (e.g., data format, syntax, and semantics) and
descriptive metadata describing data contents (e.g., information security labels). As used in Uptane, metadata can be described as information associated with a role or an image that contains the characteristics or parameters thereof (e.g. cryptographic material parameters, file names and versions.)</t>

<t><spanx style="emph">Primary/Secondary ECUs</spanx>: Terms used to describe the control units within a ground vehicle. A Primary ECU downloads and verifies update images and metadata for itself and for Secondary ECUs, and distributes images and metadata to Secondaries. Thus, it requires extra storage space and a means to download images and metadata.  Secondary ECUs receive their update images and metadata from the Primary, and only need to verify and install their own metadata and images.</t>

<t><spanx style="emph">POUF</spanx>: A document that contains the protocol, operations, usage, and formats (POUF) of a specific Uptane implementation. The POUF contains decisions about SHOULDs and MAYs in an implementation, as well as descriptions of data binding formats. POUFs MAY be used to create compatible Uptane implementations.</t>

<t><spanx style="emph">Repository</spanx>: A server containing metadata about images. May also contain the images themselves. Other data may be stored on the repository to be accessed by ECUs during the update process.</t>

<t><spanx style="emph">Suppliers</spanx>: Independent companies to which auto manufacturers may outsource the production of ECUs. Tier-1 suppliers directly serve the manufacturers. Tier-2 suppliers are those that perform outsourced work for Tier-1 suppliers.</t>

<t><spanx style="emph">Vehicle Version Manifest</spanx>: A compilation of all ECU version manifests on a vehicle. It serves as a master list of all images currently running on all ECUs in the vehicle.</t>

</section>
<section anchor="uptane-role-terminology" title="Uptane Role terminology">

<t>These terms are defined in greater detail in <xref target="roles"/>.</t>

<t><spanx style="emph">Delegations</spanx>: A process by which the responsibility of signing metadata about images is assigned to another party.<vspace />
<spanx style="emph">Role</spanx>: A party (human or machine) responsible for signing a certain type of metadata. The role controls keys and is responsible for signing metadata entrusted to it with these keys. The roles mechanism of Uptane allows the system to distribute signing responsibilities so that the compromise of one key does not necessarily impact the security of the entire system.</t>

<t><list style="symbols">
  <t><spanx style="emph">Root Role</spanx>: Signs metadata that distributes and revokes public keys used to verify the Root, Timestamp, Snapshot, and Targets role metadata.</t>
  <t><spanx style="emph">Snapshot Role</spanx>: Signs metadata that indicates which images the repository has released at the same time.</t>
  <t><spanx style="emph">Targets Role</spanx>: Signs metadata used to verify the image, such as cryptographic hashes and file size.</t>
  <t><spanx style="emph">Timestamp Role</spanx>: Signs metadata that indicates if there are any new metadata or images on the repository.</t>
</list></t>

</section>
<section anchor="acronyms-and-abbreviations" title="Acronyms and abbreviations">

<t><spanx style="emph">CAN Bus</spanx>: Controller Area Network bus standard</t>

<t><spanx style="emph">CDN</spanx>: Content Delivery Network</t>

<t><spanx style="emph">ECUs</spanx>: Electronic Control Units, the computing units on a vehicle</t>

<t><spanx style="emph">LIN Bus</spanx>: Local Interconnect Bus</t>

<t><spanx style="emph">OBD</spanx>: On-board diagnostics</t>

<t><spanx style="emph">SOTA</spanx>: Software Updates Over-the-Air</t>

<t><spanx style="emph">UDS</spanx>: Unified Diagnostic Services</t>

<t><spanx style="emph">VIN</spanx>: Vehicle Identification Number</t>

</section>
</section>
<section anchor="rationale-for-and-scope-of-uptane-standards" title="Rationale for and scope of Uptane Standards">

<t>This Standards document clarifies the essential components and best practices for the secure design, implementation and deployment of Uptane by OEMs and suppliers. These practices contribute to compromise resilience, or the ability to minimize the extent of the threat posed by any given attack.</t>

<t>However, this specification is intended as an implementation guide, and not as a detailed technical argument about the security properties that Uptane provides.  Readers interested in such documentation should refer to published papers that cover this topic.  <xref target="UPTANEESCAR"/></t>

<section anchor="why-uptane-requires-a-standards-document" title="Why Uptane requires a standards document">

<t>A standards document that can guide the safe design, integration and deployment of Uptane in vehicles is needed at this time because:</t>

<t><list style="symbols">
  <t>The number of connected units on the average vehicle continues to grow, with mainstream cars now containing up to 100 million lines of code. <xref target="USATODAY"/></t>
  <t>The expanded use of software over-the-air strategies creates new attack surfaces for malicious parties. <xref target="CR-OTA"/></t>
  <t>Legacy update strategies, such as SSL/TLS or GPG/RSA, are not feasible for use on vehicle ECUs because they force manufacturers to chose between enhanced security and customizability.</t>
  <t>Conventional strategies are also complicated by the differing resources of the ECUs, which can vary greatly in memory, storage space, and Internet connectivity.</t>
  <t>The design of Uptane makes it possible to offer improved design flexibility, without sacrificing security.</t>
  <t>This added design flexibility, however, could be a liability if the framework is implemented incorrectly.</t>
  <t>Standardization of crucial steps in the design, implementation and use of Uptane can assure that customizability does not impact security or functionality.</t>
</list></t>

</section>
<section anchor="scope-of-standards-coverage" title="Scope of Standards coverage">

<t>This document sets guidelines for implementing Uptane in most systems capable of updating software on connected units in ground vehicles, including passenger vehicles, light-duty trucks, heavy-duty trucks, and motorcycles. Uptane could potentially also be applied to other ground vehicles, such as automated shuttles, recreational vehicles, and military ground vehicles. Uptane could even be applied to domains such as IoT devices, medical devices, and unmanned aerial vehicles. In this section, we define the scope of that applicability by providing sample use cases and possible exceptions, aspects of software update security that are not applicable to Uptane, and the design requirements governing the preparation of these standards.</t>

<section anchor="assumptions" title="Assumptions">

<t>We assume the following system preconditions for Uptane:</t>

<t><list style="symbols">
  <t>Vehicles have the ability to establish connectivity to required backend services. For example, this could be done through cellular, Wi-Fi, or hard-wired mechanisms.</t>
  <t>ECUs are either directly connected to the communication channel, or are indirectly connected via some sort of network gateway.</t>
  <t>ECUs are programmable and provide sufficient performance to be updated.</t>
  <t>ECUs must be able to perform a public key cryptography operation as well as some supporting operations.</t>
  <t>There are state-of-the-art secure servers in place, such as the Director and Image repository servers.</t>
</list></t>

<t>It is important that any bugs detected in Uptane implementations be patched promptly. Failure to do so could interfere with the effectiveness of Uptane’s operations.</t>

</section>
<section anchor="use-cases" title="Use cases">

<t>The following use cases provide a number of scenarios illustrating the manner in which software updates could be accomplished using Uptane.</t>

<section anchor="oems-initializing-uptane-at-the-factory-using-sota" title="OEMs initializing Uptane at the factory using SOTA">

<t>An OEM plans to install Uptane on new vehicles. This entails the following components: code to perform full and partial verification, the latest copy of the relevant metadata, the public keys, and an accurate attestation of the latest time. The OEM then either requires its tier-1 suppliers to provide these materials to the suppliers’ assembly lines or can choose to add the materials later at the OEM’s assembly lines. The OEM’s in-vehicle implementation is Uptane-compliant if:</t>

<t><list style="numbers">
  <t>all Primaries perform full verification;</t>
  <t>all Secondaries that are updated via OTA at least perform partial verification; and</t>
  <t>all other ECUs that do not perform any type of verification cannot be updated via OTA.</t>
</list></t>

</section>
<section anchor="updating-one-ecu-with-a-complete-image" title="Updating one ECU with a complete image">

<t>A tier-1 supplier completes work on a revised image for an electronic brake control module. This module will control the brakes on all models of an SUV produced by the OEM mentioned above. Assuming supplier delegation is supported by the OEM for this ECU, each tier-1 supplier digitally signs the image, then delivers the signature and all of its metadata, including delegations, and associated images to the OEM. The OEM adds these metadata and images to its image repository, along with information about any dependencies and conflicts between this image and those for other ECUs used in the OEM’s vehicles. The OEM also updates the inventory database, so that the director repository can instruct the ECU on how to install these updated images.</t>

</section>
<section anchor="updating-individual-ecus-on-demand" title="Updating individual ECUs on demand">

<t>An OEM has issued a recall to address a problem with a keyless entry device that has been locking people out of their cars. The OEM prepares an updated flash image in the manner described above. The OEM then ships USB flash drives to vehicle owners and dealerships that allow those parties to update the firmware of their vehicles.</t>

</section>
<section anchor="update-one-ecu-with-multiple-deltas" title="Update one ECU with multiple deltas">

<t>The OEM wants to use delta updates to save over-the-air bytes. The delta images contain only the code and/or data that has changed from the previous image version. To do so, the OEM must first modify the Director repository, using the vehicle version manifest and dependency resolution to determine the differences between the previous and latest images. The OEM then adds the following to the custom Targets metadata used by the Director repository: (1) the algorithm used to apply a delta image, and (2) the Targets metadata about the delta image. The OEM will also check whether the delta images match the Targets metadata from the Director repository.</t>

</section>
</section>
</section>
<section anchor="exceptions" title="Exceptions">

<t>There are a number of factors that could impede the completion of the above scenarios:</t>

<t><list style="symbols">
  <t>ECUs may be lacking the necessary resources to function as designated. These resources could include weaknesses, in terms of CPU or RAM, that render performance of public key cryptography infeasible; a lack of sufficient storage to undo installation of bad software; or an ECU simply may reside on a low-speed network (e.g., LIN).</t>
  <t>ECUs may reside on different network segments, and may not be able to directly reach each other, requiring a gateway to facilitate communication.</t>
  <t>A user may replace OEM-installed ECUs with aftermarket ECUs.</t>
  <t>A vehicle may be able to download only a limited amount of data via a cellular channel, due to limits on a data plan.</t>
  <t>A system may lack sufficient power to download or install software updates.</t>
  <t>Vehicles may be offline for extended periods of time, thus missing required updates (e.g., key rotations).</t>
  <t>OEMs may be unwilling to implement costly security or hardware requirements.</t>
</list></t>

</section>
<section anchor="out-of-scope" title="Out of Scope">

<t>The following topics will not be addressed in this document, as they represent threats outside the scope of Uptane:</t>

<t><list style="symbols">
  <t>Physical attacks, such as manual tampering with ECUs outside the vehicle.</t>
  <t>Compromise of the packaged software, such as malware embedded in a trusted package.</t>
  <t>Compromise of the supply chain (e.g., build system, version control system, packaging process). A number of strategies (e.g., git signing, TPMs, in-toto <xref target="IN-TOTO"/>)  already exist to address this problem. Therefore, there is no need to duplicate those techniques here.</t>
  <t>Problems associated with OBD or UDS programming of ECUs, such as authentication of communications between ECUs.</t>
  <t>Malicious mirrors of package repositories, which may substitute original packages with malicious packages with matching version numbers <xref target="MERCURY"/>.</t>
</list></t>

</section>
<section anchor="design-requirements" title="Design requirements">

<t>The design requirements for this document are governed by the following principal parameters:</t>

<t><list style="symbols">
  <t>to clearly mandate the design and implementation steps that are security critical and must be followed as is, while offering flexibility in the implementation of non-critical steps. In this manner, users can adapt to support different use models and deployment scenarios.</t>
  <t>to ensure that, if Uptane is implemented, the security practices mandated or suggested in this document do not interfere with the functionality of ECUs, vehicles, or the systems that maintain them.</t>
  <t>to delineate best practices to ensure that, should any part of the SOTA mechanism of a vehicle be attacked, an attacker must compromise two or more modules to breach the SOTA mechanism.</t>
</list></t>

</section>
</section>
<section anchor="threat-model-and-attack-strategies" title="Threat model and attack strategies">

<t>The overarching goal of Uptane is to provide a system that is resilient in the face of various types of compromise. In this section, we describe the goals an attacker may have (<xref target="attacker_goals"/>) and the capabilities they may have or could develop (<xref target="capabilities"/>). We then describe and classify types of attacks on the system according to the attacker’s goals (<xref target="threats"/>).</t>

<section anchor="attacker_goals" title="Attacker goals">

<t>We assume that attackers may want to achieve one or more of the following goals, in increasing order of severity:</t>

<t><list style="symbols">
  <t>Read the contents of updates to discover confidential information, reverse-engineer firmware, or compare two firmware images to identify security fixes and hence determine the fixed security vulnerability</t>
  <t>Deny installation of updates to prevent vehicles from fixing software problems</t>
  <t>Cause one or more ECUs in the vehicle to fail, denying use of the vehicle or of certain functions</t>
  <t>Control ECUs within the vehicle, and possibly the vehicle itself</t>
</list></t>

</section>
<section anchor="capabilities" title="Attacker capabilities">

<t>Uptane is designed with resilience to compromise in mind. We assume that attackers may develop one or more of the following capabilities:</t>

<t><list style="symbols">
  <t>Intercept and modify network traffic (i.e., perform man-in-the-middle attacks). This capability may be developed in two domains:
  <list style="symbols">
      <t>Outside the vehicle, intercepting and modifying traffic between the vehicle and software repositories</t>
      <t>Inside the vehicle, intercepting and modifying traffic on one or more vehicle buses (e.g. via an OBD port or using a compromised ECU as a vector)</t>
    </list></t>
  <t>Compromise and control either a Director repository or Image repository server, and any keys stored on that repository, but not both the Director and Image repositories.</t>
  <t>Compromise either a Primary ECU or a Secondary ECU, but not both in the same vehicle</t>
</list></t>

</section>
<section anchor="threats" title="Description of threats">

<t>Uptane’s threat model includes the following types of attacks, organized according to the attacker goals listed in <xref target="attacker_goals"/>.</t>

<section anchor="read_updates" title="Read updates">

<t><list style="symbols">
  <t><spanx style="emph">Eavesdrop attack:</spanx> Read sensitive or confidential information from an update intended to be encrypted for a specific ECU. (Note: Not all implementations will have a need for protecting information in this way.)</t>
</list></t>

</section>
<section anchor="deny_updates" title="Deny installation of updates">

<t>An attacker seeking to deny the installation of updates may attempt one or more of the following strategies, among others:</t>

<t><list style="symbols">
  <t><spanx style="emph">Drop-request attack:</spanx> Block network traffic outside or inside the vehicle.</t>
  <t><spanx style="emph">Slow retrieval attack:</spanx> Slow down network traffic, in the extreme case sending barely enough packets to avoid a timeout. Similar to a drop-request attack, except that both the sender and receiver of the traffic still think network traffic is unimpeded.</t>
  <t><spanx style="emph">Freeze attack:</spanx> Continue to send a properly signed, but old, update bundle to the ECUs, even if newer updates exist.</t>
  <t><spanx style="emph">Partial bundle installation attack:</spanx> Install a valid (signed) update bundle, and then block selected updates within the bundle.</t>
  <t>Conduct a denial of service attack against the Uptane repositories or infrastructure.</t>
</list></t>

</section>
<section anchor="change_functionality" title="Interfere with ECU functionality">

<t>Attackers seeking to interfere with the functionality of vehicle ECUs in order to cause an operational failure or unexpected behavior may do so in one of the following ways:</t>

<t><list style="symbols">
  <t><spanx style="emph">Rollback attack:</spanx> Cause an ECU to install a previously valid software revision that is older than the currently installed version.</t>
  <t><spanx style="emph">Endless data attack:</spanx> Send a large amount of data to an ECU, until it runs out of storage, possibly causing the ECU to fail to operate.</t>
  <t><spanx style="emph">Mix-and-match attack:</spanx> Install a malicious software bundle in which some of the updates do not interoperate properly. This may be accomplished even if all of the individual images being installed are valid, as long as valid versions exist that are mutually incompatible.</t>
</list></t>

</section>
<section anchor="control_ecu" title="Control an ECU or vehicle">

<t>Full control of a vehicle, or one or more ECUs within a vehicle, is the most severe threat.</t>

<t><list style="symbols">
  <t><spanx style="emph">Arbitrary software attack:</spanx> Cause an ECU to install and run arbitrary code of the attacker’s choice.</t>
</list></t>

</section>
</section>
</section>
<section anchor="design" title="Detailed design of Uptane">

<t>Uptane is a secure software update framework for automobiles. We do not specify implementation details. Instead, we describe the components necessary for a compliant implementation and leave it up to individual implementors to make their own technological choices within those requirements.</t>

<t>At a high level, Uptane requires:</t>

<t><list style="symbols">
  <t>Two software repositories:
  <list style="symbols">
      <t>An Image repository containing binary images to install, and signed metadata about those images</t>
      <t>A Director repository connected to an inventory database that can sign metadata on demand for images in the Image repository</t>
    </list></t>
  <t>Repository tools for generating Uptane-specific metadata about images</t>
  <t>A public key infrastructure supporting the required metadata production/signing roles on each repository:
  <list style="symbols">
      <t>Root - Certificate authority for the Uptane ecosystem. Distributes public keys for verifying all the other roles’ metadata</t>
      <t>Timestamp - Indicates whether there are new metadata or images</t>
      <t>Snapshot - Indicates images released by the repository at a point in time, via signing metadata about Targets metadata</t>
      <t>Targets - Indicates metadata about images, such as hashes and file sizes</t>
    </list></t>
  <t>A secure way for ECUs to know the time.</t>
  <t>An ECU capable of downloading images and associated metadata from the Uptane servers.</t>
  <t>An in-vehicle client on a Primary ECU capable of verifying the signatures on all update metadata and downloading updates on behalf of its associated Secondary ECUs. The Primary ECU MAY be the same ECU that communicates with the server.</t>
  <t>A client or library on each Secondary ECU capable of performing either full or partial verification of metadata</t>
</list></t>

<section anchor="roles" title="Roles on repositories">

<t>A repository contains images and metadata. Each role has a particular type of metadata associated with it, as described in <xref target="meta_structures"/>.</t>

<section anchor="root_role" title="The Root role">

<t>A repository’s Root role SHALL be responsible for a Certificate Authority as defined in <xref target="RFC3647"/>.
A repository’s Root role SHALL produce and sign Root metadata as described in <xref target="root_meta"/>.
A repository’s Root role SHALL sign the public keys used to verify the metadata produced by the Timestamp, Snapshot, and Targets roles.
A repository’s Root role SHALL revoke keys for the other roles, in case of compromise.</t>

</section>
<section anchor="targets_role" title="The Targets role">

<t>A repository’s Targets role SHALL produce and sign metadata about images and delegations as described in <xref target="targets_meta"/>.</t>

<section anchor="targets_role_delegations" title="Delegations">

<t>The Targets role on the Image repository MAY delegate the responsibility of signing metadata to other, custom-defined roles referred to as delegated targets. If it does, it MUST do so as specified in <xref target="delegations_meta"/>.</t>

<t>Responsibility for signing images or a subset of images MAY be delegated to more than one role and therefore it is possible for two different roles to be trusted for signing a particular image. For this reason, delegations MUST be prioritized.</t>

<t>A particular delegation for a subset of images MAY be designated as <spanx style="strong">terminating</spanx>. For terminating delegations, the client SHALL NOT search any further if it does not find validly signed metadata about those images. Delegations SHOULD NOT be terminating by default; terminating delegations SHOULD only be used when there is a compelling technical reason to do so.</t>

<t>A delegation for a subset of images MAY be a multi-role delegation <xref target="TAP-3"/>. A multi-role delegation indicates that multiple roles are needed to sign a particular image and each of the delegatee roles MUST sign the same metadata.</t>

<t>Delegations only apply to the Image repository. The Targets role on the Director repository MUST NOT delegate metadata signing responsibility.</t>

</section>
</section>
<section anchor="snapshot_role" title="The Snapshot role">

<t>A repository’s Snapshot role SHALL produce and sign metadata about all Targets metadata the repository releases, including the current version number of the top-level Targets metadata, and the version numbers of all delegated Targets metadata, as described in <xref target="snapshot_meta"/>.</t>

</section>
<section anchor="timestamp_role" title="The Timestamp role">

<t>A repository’s Timestamp role SHALL produce and sign metadata indicating whether there are new metadata or images on the repository. It MUST do so by signing the metadata about the Snapshot metadata file.</t>

</section>
</section>
<section anchor="meta_structures" title="Metadata structures">

<t>Uptane’s security guarantees all rely on properly created metadata that follows a designated structure. The Uptane standard <spanx style="strong">does not</spanx> mandate any particular format or encoding for the metadata as a whole. ASN.1 (with any encoding scheme like BER, DER, XER, etc.), JSON, XML, or any other encoding format that is capable of providing the required structure MAY be used.</t>

<t>However, string comparison is required as part of metadata verification. To ensure an accurate basis for comparing strings, all strings MUST be encoded in the Unicode Format for Network Interchange as defined in <xref target="RFC5198"/>, including normalization into Unicode Normalization Form C (<xref target="NFC"/>).</t>

<t>In the <spanx style="emph">Deployment Best Practices</spanx> (<xref target="DEPLOY"/>), Joint Development Foundation Projects, LLC, Uptane Series provides some examples of compliant metadata structures in ASN.1 and JSON.</t>

<section anchor="common_metadata" title="Common metadata structures">

<t>Every public key MUST be represented using a public key identifier.  A public key identifier is EITHER all of the following:</t>

<t><list style="symbols">
  <t>The value of the public key itself (which MAY be, for example, formatted as a PEM string)</t>
  <t>The public key cryptographic algorithm used by the key (such as RSA or ECDSA)</t>
  <t>The particular scheme used to verify the signature (such as <spanx style="verb">rsassa-pss-sha256</spanx> or <spanx style="verb">ecdsa-sha2-nistp256</spanx>)</t>
</list></t>

<t>OR a secure hash over at least the above components (such as the keyid mechanism in TUF).</t>

<t>All four Uptane roles (Root, Targets, Snapshot, and Timestamp) share a common structure. They SHALL contain the following two attributes:</t>

<t><list style="symbols">
  <t>A payload of metadata to be signed</t>
  <t>An attribute containing the signature(s) of the payload, where each entry specifies:
  <list style="symbols">
      <t>The public key identifier of the key being used to sign the payload</t>
      <t>A signature with this key over the payload</t>
    </list></t>
</list></t>

<t>The payload differs depending on the role. However, the payload for all roles shares a common structure. It SHALL contain the following four attributes:</t>

<t><list style="symbols">
  <t>An indicator of the type of role (Root, Targets, Snapshot, or Timestamp)</t>
  <t>An expiration date and time</t>
  <t>An integer version number, which SHOULD be incremented each time the metadata file is updated</t>
  <t>The role-specific metadata for the role indicated</t>
</list></t>

<t>The following sections describe the role-specific metadata. All roles SHALL follow the common structures described here.</t>

</section>
<section anchor="root_meta" title="Root metadata">

<t>A repository’s Root metadata distributes the public keys of the top-level Root, Targets, Snapshot, and Timestamp roles, as well as revocations of those keys. It SHALL contain two attributes:</t>

<t><list style="symbols">
  <t>A representation of the public keys for all four roles. Each key SHALL have a unique public key identifier.</t>
  <t>An attribute mapping each role to (1) its public key(s), and (2) the threshold of signatures required for that role</t>
</list></t>

<t>Additionally, it MAY contain a mapping of roles to a list of valid URLs from which the role metadata can be downloaded.  If this mapping of URLs is used, the implementer SHOULD implement this functionality following <xref target="TAP-5"/> to avoid adding unforeseen security risks.</t>

</section>
<section anchor="targets_meta" title="Targets metadata">

<t>The Targets metadata on a repository contains all of the information about images to be installed on ECUs. This includes filenames, hashes, file sizes, and MAY also include other useful information about images, such as what types of hardware are compatible with a particular image.</t>

<t>Targets metadata can also contain metadata about delegations, allowing one Targets role to delegate its authority to another. This means that an individual Targets metadata file might contain only metadata about delegations, only metadata about images, or some combination of the two. The details of how ECUs traverse the delegation tree to find valid metadata about images is specified in <xref target="resolve_delegations"/>.</t>

<section anchor="targets_images_meta" title="Metadata about images">

<t>To be available to install on clients, all images on the repository MUST have their metadata listed in a Targets role.  Each Targets role MAY provide a list of some images on the repository.  This list MUST provide, at a minimum, the following information about each image:</t>

<t><list style="symbols">
  <t>The image filename</t>
  <t>The size of the image in bytes</t>
  <t>One or more hashes of the image file, along with the hashing function used</t>
</list></t>

<section anchor="custom-metadata-about-images" title="Custom metadata about images">

<t>In addition to the required metadata, Targets metadata files MAY contain extra metadata for images on the repository. This metadata can be customized for a particular use case. Examples of use cases for different types of custom metadata can be found in the <spanx style="emph">Deployment Best Practices</spanx> document (<xref target="DEPLOY"/>). However, there are a few important pieces of custom metadata that SHOULD be present in most implementations. In addition, there is one element in the custom metadata that MUST be present in the Targets metadata from the Director.</t>

<t>Custom metadata MAY also contain a demarcated field or section that MUST match whenever two pieces of metadata are checked against each other, such as when Targets metadata from the Director repository is checked against Targets metadata from the Image repository.</t>

<t>The information listed below SHOULD be provided for each image on both the Image repository and the Director repository. If a “MUST match section” is to be implemented, that is where this information SHOULD be placed.</t>

<t><list style="symbols">
  <t>A release counter, to be incremented each time a new version of the image is released. This can be used to prevent rollback attacks even in cases where the Director repository is compromised.</t>
  <t>A hardware identifier, or list of hardware identifiers, representing models of ECUs with which the image is compatible. This can be used to ensure that an ECU cannot be ordered to install an incompatible image, even in cases where the Director repository is compromised.</t>
</list></t>

<t>The following information is CONDITIONALLY REQUIRED for each image on the Director repository IF that image is encrypted:</t>

<t><list style="symbols">
  <t>Information about filenames, hashes, and file size of the encrypted image.</t>
  <t>Information about the encryption method, and other relevant information–for example, a symmetric encryption key encrypted by the ECU’s asymmetric key could be included in the Director repository metadata.</t>
</list></t>

<t>The following information MUST be provided for each image in the Targets metadata from the Director repository:</t>

<t><list style="symbols">
  <t>An ECU identifier (such as a serial number), specifying the ECU that should install the image.</t>
</list></t>

<t>The Director repository MAY provide a download URL for the image file. This may be useful, for example, when the image is on a public CDN and the director wishes to provide a signed URL.</t>

</section>
</section>
<section anchor="delegations_meta" title="Metadata about delegations">

<t>A Targets metadata file on the Image repository (but not the Director repository) MUST be able to delegate signing authority to other entities. For example, it could delegate signing authority for a particular ECU’s firmware to that ECU’s supplier. A metadata file MAY contain any number of delegations and MUST keep the delegations in prioritized order.</t>

<t>A list of delegations MUST provide the following information:</t>

<t><list style="symbols">
  <t>A list of public keys of all delegatees. Each key should have a unique public key identifier and a key type.</t>
  <t>A list of delegations, each of which contains:
  <list style="symbols">
      <t>A list of the filenames to which this role applies. This MAY be expressed using wildcards, or by enumerating a list, or a combination of the two.</t>
      <t>An optional list of the hardware identifiers to which this role applies.  If this is omitted, any hardware identifier will match.</t>
      <t>An indicator of whether or not this is a terminating delegation. (See <xref target="targets_role_delegations"/>.)</t>
      <t>A list of the roles to which this delegation applies. Each role needs to specify:
      <list style="symbols">
          <t>A name for the role (e.g. “supplier1-qa”)</t>
          <t>The key identifiers for each key this role uses</t>
          <t>A threshold of keys that must sign for this role</t>
        </list></t>
    </list></t>
</list></t>

<t>Note that <spanx style="strong">any</spanx> Targets metadata file stored on the Image repository may contain delegations, and these delegations can be in chains of arbitrary length.</t>

</section>
</section>
<section anchor="snapshot_meta" title="Snapshot metadata">

<t>The Snapshot metadata lists version numbers and filenames of all Targets metadata files. It protects against mix-and-match attacks if a delegated supplier key is compromised.</t>

<t>For each Targets metadata file on the repository, the Snapshot metadata SHALL contain the following information:</t>

<t><list style="symbols">
  <t>The filename and version number of the each Targets metadata file on the repository</t>
</list></t>

<t>The Snapshot metadata MAY also list the Root metadata filename and version number. This is not required, particularly for implementations of <xref target="TAP-5"/>, but MAY be included in all cases for backward compatibility.</t>

</section>
<section anchor="timestamp_meta" title="Timestamp metadata">

<t>The Timestamp metadata SHALL contain the following information:</t>

<t><list style="symbols">
  <t>The filename and version number of the latest Snapshot metadata on the repository.</t>
  <t>One or more hashes of the Snapshot metadata file, along with the hashing function used.</t>
</list></t>

</section>
<section anchor="repo_mapping_meta" title="Repository mapping metadata">

<t>As described in the introduction to <xref target="design"/>, Uptane requires a Director repository and an Image repository. However, it is possible to have an Uptane-compliant implementation that has more than two repositories.</t>

<t>Repository mapping metadata informs a Primary ECU about which repositories to trust for images or image paths. <xref target="TAP-4"/> describes how to make use of more complex repository mapping metadata in order to have more than the two required repositories.</t>

<t>Repository mapping metadata, or the equivalent informational content, MUST be present on all Primary ECUs, and MUST contain the following information:</t>

<t><list style="symbols">
  <t>A list of repository names and one or more URLs at which the named repository can be accessed. At a minimum, this MUST include the Director and Image repositories.</t>
  <t>A list of mappings of image paths to repositories, each of which contains:
  <list style="symbols">
      <t>A list of image paths. Image paths MAY be expressed using wildcards, or by enumerating a list, or a combination of the two.</t>
      <t>A list of repositories that MUST sign the Targets metadata for the image paths.</t>
    </list></t>
</list></t>

<t>For example, in the most basic Uptane case, the repository mapping metadata would contain:</t>

<t><list style="symbols">
  <t>The name and URL of the Director repository</t>
  <t>The name and URL of the Image repository</t>
  <t>A single mapping indicating that all images (<spanx style="verb">*</spanx>) MUST be signed by both the Director and Image repository</t>
</list></t>

<t>Note that the metadata need not be in the form of a metadata file. For example, in the basic case where there is only one Director and one Image repository, and all images need to have signed metadata from both repositories, it would be sufficient to have a configuration file with URLs for the two repositories, and a client that always checks for metadata matches between them. In this case, no explicit mapping would be defined, because the mapping is defined as part of the Uptane client implementation.</t>

<t>The <spanx style="emph">Uptane Deployment Best Practices</spanx> document (<xref target="DEPLOY"/>) provides more guidance on how to implement repository mapping metadata for more complex use cases. It also discusses strategies for updating repository mapping metadata, if required.</t>

</section>
<section anchor="metadata_filename_rules" title="Rules for filenames in repositories and metadata">

<t>There is a difference between the file name in a metadata file or an ECU, and the file name on a repository. This difference exists in order to avoid race conditions, where metadata and images are read from, and written to, at the same time. For more details, the reader should read the TUF specification <xref target="TUF-spec"/> and PEP 458 <xref target="PEP-458"/>.</t>

<t>Unless stated otherwise, all files SHALL be written to repositories in accordance with the following two rules:</t>

<t><list style="numbers">
  <t>Metadata filenames SHALL be qualified with version numbers. If a metadata file A is specified as FILENAME.EXT in another metadata file B, then it SHALL be written as VERSION.FILENAME.EXT, where VERSION is A’s version number, as defined in <xref target="common_metadata"/>, with one exception: If the version number of the Timestamp metadata file might not be known in advance by a client, it MAY be read from, and written to, a repository using a filename without a version number qualification, i.e. FILENAME.EXT.</t>
  <t>If an image is specified in a Targets metadata file as FILENAME.EXT, it SHALL be written to the repository as HASH.FILENAME.EXT, where HASH is one of the hash digests of the file, as specified in <xref target="targets_images_meta"/>. The file MUST be written to the repository using <spanx style="emph">n</spanx> different filenames, one for each hash digest listed in its corresponding Targets metadata.</t>
</list></t>

<t>For example:</t>

<t><list style="symbols">
  <t>The version number of the Snapshot metadata file is 61, and its filename in the Timestamp metadata is “snapshot.json”. The filename on the repository will be “61.snapshot.json”.</t>
  <t>There is an image with the filename “acme_firmware.bin” specified in the Targets metadata, with a SHA3-256 of “aaaa” and a SHA-512/224 of “bbbb”. It will have two filenames on the repository: “aaaa.acme_firmware.bin” and “bbbb.acme_firmware.bin”.</t>
</list></t>

</section>
</section>
<section anchor="server-repository-implementation-requirements" title="Server / repository implementation requirements">

<t>An Uptane implementation SHALL make the following services available to vehicles:</t>

<t><list style="symbols">
  <t>Image repository</t>
  <t>Director repository</t>
</list></t>

<t>Additionally, an Uptane implementation requires ECUs to have a secure way to know the current time.</t>

<section anchor="image-repository" title="Image repository">

<t>The Image repository exists to allow an OEM and/or its suppliers to upload images and their associated metadata. It makes these images and their metadata available to vehicles. The Image repository is designed to be primarily controlled by human actors, and updated relatively infrequently.</t>

<t>The Image repository SHALL expose an interface permitting the download of metadata and images. This interface SHOULD be public.</t>

<t>The Image repository SHALL require authorization for writing metadata and images.</t>

<t>The Image repository SHALL provide a method for authorized users to upload images and their associated metadata. It SHALL check that a user writing metadata and images is authorized to do so for that specific image by checking the chain of delegations as described in <xref target="delegations_meta"/>.</t>

<t>The Image repository SHALL implement storage which permits authorized users to write an image file using a unique filename, and later read the same file using the same name. It MAY use any filesystem, key-value store, or database that fulfills this requirement.</t>

<t>The Image repository MAY require authentication for read access.</t>

</section>
<section anchor="director_repository" title="Director repository">

<t>The Director repository instructs ECUs as to which images should be installed by producing signed metadata on demand. Unlike the Image repository, it is mostly controlled by automated, online processes. It also consults a private inventory database containing information on vehicles, ECUs, and software revisions.</t>

<t>The Director repository SHALL expose an interface for Primaries to upload vehicle version manifests (<xref target="vehicle_version_manifest"/>) and download metadata. This interface SHOULD be public.
The Director MAY encrypt images for ECUs that require them, either by encrypting on-the-fly or by storing encrypted images in the repository.</t>

<t>The Director repository SHALL implement storage which permits an automated service to write generated metadata files. It MAY use any filesystem, key-value store, or database that fulfills this requirement.</t>

<section anchor="directing-installation-of-images-on-vehicles" title="Directing installation of images on vehicles">

<t>A Director repository MUST conform to the following six-step process for directing the installation of software images on a vehicle.</t>

<t><list style="numbers">
  <t>The Director SHOULD first identify the vehicle. This MAY be done when the Director receives a vehicle version manifest sent by a Primary (as described in <xref target="construct_manifest_primary"/>), decodes the manifest, and determines the unique vehicle identifier. Additionally, the Director MAY utilize other mechanisms to uniquely identify a vehicle (e.g., 2-way TLS with unique client certificates).</t>
  <t>Using the vehicle identifier, the Director queries its inventory database (as described in <xref target="inventory_db"/>) for relevant information about each ECU in the vehicle.</t>
  <t>The Director SHALL check the manifest for accuracy compared to the information in the inventory database. If any of the required checks fail, the Director MAY drop the request. An implementer MAY make additional checks if desired. At a minimum, the Director SHALL check the following:
  <list style="symbols">
      <t>Each ECU recorded in the inventory database is also represented in the manifest.</t>
      <t>The signature of the manifest matches the ECU key of the Primary that sent it.</t>
      <t>The signature of each Secondary’s contribution to the manifest matches the ECU key of that Secondary.</t>
    </list></t>
  <t>The Director SHOULD check that the nonce or counter in each ECU Version Report has not been used before to prevent a replay of the ECU Version Report. If the nonce or counter is reused the Director SHOULD drop the request.</t>
  <t>The Director extracts information about currently installed images from the vehicle version manifest. Using this information, it determines if the vehicle is already up-to-date, and if not, determines a set of images that should be installed. The exact process by which this determination takes place is out of scope of this standard. However, the Director MUST take into account <spanx style="emph">dependencies</spanx> and <spanx style="emph">conflicts</spanx> between images and SHOULD consult well-established techniques for dependency resolution.</t>
  <t>The Director MAY encrypt images for ECUs that require it.</t>
  <t>The Director generates new metadata representing the desired set of images to be installed on the vehicle, based on the dependency resolution in step 4. This includes Targets (<xref target="targets_meta"/>), Snapshot (<xref target="snapshot_meta"/>), and Timestamp (<xref target="timestamp_meta"/>) metadata. It then sends this metadata to the Primary as described in <xref target="download_meta_primary"/>.</t>
</list></t>

</section>
<section anchor="inventory_db" title="Inventory Database">

<t>The Director SHALL use a private inventory database to store information about ECUs and vehicles. An implementor MAY use any durable database for this purpose.</t>

<t>The inventory database MUST record the following pieces of information:</t>

<t><list style="symbols">
  <t>Per vehicle:
  <list style="symbols">
      <t>A unique identifier (such as a VIN)</t>
    </list></t>
  <t>Per ECU:
  <list style="symbols">
      <t>A unique identifier (such as a serial number)</t>
      <t>The vehicle identifier the ECU is associated with</t>
      <t>An ECU key (symmetric or asymmetric; for asymmetric keys, only the public part SHOULD be stored)</t>
      <t>The ECU key identifier (as defined in <xref target="common_metadata"/>)</t>
      <t>Whether the ECU is a Primary or a Secondary</t>
    </list></t>
</list></t>

<t>The inventory database MAY record other information about ECUs and vehicles. It SHOULD record a hardware identifier for each ECU to protect against the possibility of directing the ECU to install incompatible firmware.</t>

</section>
</section>
</section>
<section anchor="in-vehicle-implementation-requirements" title="In-vehicle implementation requirements">

<t>An Uptane-compliant ECU SHALL be able to download and verify Image metadata and image binaries before installing a new image and MUST have a secure way of verifying the current time, or a sufficiently recent attestation of the time.</t>

<t>Each ECU receiving over-the-air updates in a vehicle is either a Primary or a Secondary ECU. A Primary ECU collects and delivers vehicle manifests to the Director (<xref target="vehicle_version_manifest"/>) that contain information about which images have been installed on ECUs in the vehicle. It also verifies the time and downloads and verifies the latest metadata and images for itself and for its Secondaries. A Secondary ECU verifies the time, and downloads and verifies the latest metadata and images for itself from its associated Primary ECU. It also sends signed information about its installed images to its associated Primary.</t>

<t>All ECUs MUST verify image metadata as specified in <xref target="metadata_verification"/> before installing an image or making it available to other ECUs. A Primary ECU MUST perform full verification (<xref target="full_verification"/>). A Secondary ECU SHOULD perform full verification if possible. If a Secondary cannot perform full verification, it SHALL, at the very least, perform partial verification. In addition, it MAY also perform some steps from the full verification process. See the <spanx style="emph">Uptane Deployment Best Practices</spanx> document (<xref target="DEPLOY"/>) for a discussion of how to choose between partial and full verification.</t>

<t>ECUs MUST have a secure source of time. An OEM/Uptane implementor MAY use any external source of time that is demonstrably secure. The <spanx style="emph">Uptane Deployment Best Practices</spanx> document (<xref target="DEPLOY"/>) describes one way to implement an external time server to cryptographically attest time, as well as the security properties required. When “loading time” is referenced in procedures in this Standard, it should be understood to mean loading into memory the current time (if the ECU has its own secure clock), or the most recent attested time.</t>

<section anchor="build-time-prerequisite-requirements-for-ecus" title="Build-time prerequisite requirements for ECUs">

<t>For an ECU to be capable of receiving Uptane-secured updates, it MUST have the following data provisioned at the time it is manufactured or installed in the vehicle:</t>

<t><list style="numbers">
  <t>A sufficiently recent copy of required Uptane metadata at the time of manufacture or install. This is necessary for the ECU to authenticate that the remote repository is legitimate when it first downloads metadata in the field. See the <spanx style="emph">Uptane Deployment Best Practices</spanx> document (<xref target="DEPLOY"/>) for more information.
  <list style="symbols">
      <t>Partial verification Secondary ECUs MUST have the Root and Targets metadata from the Director repository (to reduce the scope of rollback and replay attacks). These ECUs MAY also have metadata from other roles or the Image repository if they will be used by the Secondary.</t>
      <t>Full verification ECUs MUST have a complete set of metadata (Root, Targets, Snapshot, and Timestamp) from both repositories (to prevent rollback and replay attacks), as well as the repository mapping metadata (<xref target="repo_mapping_meta"/>). Delegations are not required.</t>
    </list></t>
  <t>The current time, or a secure attestation of a sufficiently recent time.</t>
  <t>An <spanx style="strong">ECU key</spanx>. This is a private key, unique to the ECU, used to sign ECU version manifests and decrypt images. An ECU key MAY be either a symmetric key or an asymmetric key. If it is an asymmetric key, there MAY be separate keys for encryption and signing. For the purposes of this standard, the set of private keys that an ECU uses is referred to as the ECU key (singular), even if it is actually multiple keys used for different purposes.</t>
</list></t>

</section>
<section anchor="what-the-primary-does" title="What the Primary does">

<t>A Primary downloads, verifies, and distributes the latest time, metadata and images. To do so, it SHALL perform the following seven steps:</t>

<t><list style="numbers">
  <t>Construct and send vehicle version manifest (<xref target="construct_manifest_primary"/>)</t>
  <t>Download and check current time (<xref target="check_time_primary"/>)</t>
  <t>Download and verify metadata (<xref target="download_meta_primary"/>)</t>
  <t>Download and verify images (<xref target="download_images_primary"/>)</t>
  <t>OPTIONAL: Send latest time to Secondaries (<xref target="send_time_primary"/>)</t>
  <t>Send metadata to Secondaries (<xref target="send_metadata_primary"/>)</t>
  <t>Send images to Secondaries (<xref target="send_images_primary"/>)</t>
</list></t>

<t>Note that the subsequent sections concerning requirements for a Primary do not prohibit implementing Primary capabilities on an ECU that does not communicate directly with the Uptane repositories. This allows for implementations to have multiple ECUs within the vehicle performing functions equivalent to a Primary.
If multiple such Primaries are included within a vehicle, each Secondary ECU SHALL have a single Primary responsible for providing its updates.</t>

<section anchor="construct_manifest_primary" title="Construct and send vehicle version manifest">

<t>The Primary SHALL build a <spanx style="emph">vehicle version manifest</spanx> as described in <xref target="vehicle_version_manifest"/>.</t>

<t>Once the complete manifest is built, the Primary MAY send the manifest to the Director repository. However, it is not strictly required that the Primary send the manifest until step three. If permitted by the implementation, a Primary MAY send only a diff of the manifest to save bandwidth. If an implementation permits diffs, the Director SHOULD have a way to request a full manifest.</t>

<t>Secondaries MAY send their version report at any time so that it is already stored on the Primary when it wishes to check for updates. Alternatively, the Primary MAY request a version report from each Secondary at the time of the update check.</t>

<section anchor="vehicle_version_manifest" title="Vehicle version manifest">

<t>The vehicle version manifest is a metadata structure that MUST contain the following information:</t>

<t><list style="symbols">
  <t>An attribute containing the signature(s) of the payload, each specified by:
  <list style="symbols">
      <t>The public key identifier of the key being used to sign the payload</t>
      <t>The signing method (e.g. ed25519, rsassa-pss, etc.)</t>
      <t>A hash of the payload to be signed</t>
      <t>The hashing function used (e.g. SHA3-256, SHA-512/224, etc.)</t>
      <t>The signature of the hash</t>
    </list></t>
  <t>A payload representing the installed versions of each software image on the vehicle. This payload SHALL contain:
  <list style="symbols">
      <t>The vehicle’s unique identifier (e.g. the VIN)</t>
      <t>The Primary ECU’s unique identifier (e.g. the serial number)</t>
      <t>A list of ECU version reports as specified in <xref target="version_report"/></t>
    </list></t>
</list></t>

<t>Note that one of the ECU version reports should be the version report for the Primary itself.</t>

</section>
<section anchor="version_report" title="ECU version report">

<t>An ECU version report is a metadata structure that MUST contain the following information:</t>

<t><list style="symbols">
  <t>An attribute containing the signature(s) of the payload, each specified by:
  <list style="symbols">
      <t>The public key identifier of the key being used to sign the payload</t>
      <t>The signing method (e.g. ed25519, rsassa-pss, etc.)</t>
      <t>A hash of the payload to be signed</t>
      <t>The hashing function used (e.g. SHA3-256, SHA-512/224, etc.)</t>
      <t>The signature of the hash</t>
    </list></t>
  <t>A payload containing:
  <list style="symbols">
      <t>The ECU’s unique identifier (e.g. the serial number)</t>
      <t>The filename, length, and hashes of its currently installed image (i.e. the non-custom Targets metadata for this particular image)</t>
      <t>An indicator of any detected security attack</t>
      <t>The latest time the ECU can verify at the time this version report was generated</t>
      <t>A nonce or counter to prevent a replay of the ECU version report. This value MUST change each update cycle and MAY be the cryptographic nonce used with a Time Server.</t>
    </list></t>
</list></t>

</section>
</section>
<section anchor="check_time_primary" title="Download and check current time">

<t>The Primary SHALL load the current time from a secure source.</t>

</section>
<section anchor="download_meta_primary" title="Download and verify metadata">

<t>The Primary SHALL download metadata for all targets and perform a full verification on it as specified in <xref target="full_verification"/>.</t>

</section>
<section anchor="download_images_primary" title="Download and verify images">

<t>The Primary SHALL download and verify images for itself and for all of its associated Secondaries. Images SHALL be verified by checking that the hash of the image file matches the hash specified in the Director’s Targets metadata for that image.</t>

<t>There may be several different filenames that all refer to the same image binary, as described in <xref target="metadata_filename_rules"/>. If the Primary has received multiple hashes for a given image binary via the Targets role (see <xref target="targets_images_meta"/>) then it SHALL verify every hash for this image despite that the image is identified by a single hash as part of its filename.</t>

</section>
<section anchor="send_time_primary" title="Send latest time to Secondaries">

<t>Unless the Secondary ECU has its own way of verifying the time or does not have the capacity to verify a time message, the Primary is CONDITIONALLY REQUIRED to send the time to each ECU. The Secondary will verify the time message, then overwrite its current time with the received time.</t>

</section>
<section anchor="send_metadata_primary" title="Send metadata to Secondaries">

<t>The Primary SHALL send its latest downloaded metadata to all of its associated Secondaries. The metadata it sends to each Secondary MUST include all of the metadata required for verification on that Secondary. For full verification Secondaries, this includes the metadata for all four roles from both repositories, plus any delegated Targets metadata files the Secondary will recurse through to find the proper delegation. For partial verification Secondaries, this MAY include fewer metadata files; it includes only the Targets metadata file from the Director repository at a minimum.</t>

<t>The Primary SHOULD determine the minimal set of metadata files to send to each Secondary by performing delegation resolution as described in <xref target="full_verification"/>.</t>

<t>Each Secondary SHALL store the latest copy of all metadata required for its own verification.</t>

</section>
<section anchor="send_images_primary" title="Send images to Secondaries">

<t>The Primary SHALL send the latest image to each of its associated Secondaries that have storage to receive it.</t>

<t>For Secondaries without storage, the Primary SHOULD wait for a request from the Secondary to stream the new image file to it. The Secondary will send the request once it has verified the metadata sent in the previous step.</t>

</section>
</section>
<section anchor="installing-images-on-primary-or-secondary-ecus" title="Installing images on Primary or Secondary ECUs">

<t>An ECU SHALL perform the following steps when attempting to install a new image:</t>

<t><list style="numbers">
  <t>Verify latest attested time. This is optional if the ECU does not have the capacity to verify a time message (<xref target="verify_time"/>)</t>
  <t>Verify metadata (<xref target="verify_metadata"/>)</t>
  <t>Download latest image (<xref target="download_image"/>)</t>
  <t>Verify image (<xref target="verify_image"/>)</t>
  <t>Install image (<xref target="install_image"/>)</t>
  <t>Create and send version report (<xref target="create_version_report"/>)</t>
</list></t>

<section anchor="verify_time" title="Load and verify the latest attested time">

<t>IF the ECU has the capability to verify a time message, the ECU is CONDITIONALLY REQUIRED to load and verify the current time, or the most recent securely attested time.</t>

</section>
<section anchor="verify_metadata" title="Verify metadata">

<t>The ECU SHALL verify the latest downloaded metadata (<xref target="metadata_verification"/>) using either full or partial verification. If the metadata verification fails for any reason, the ECU SHALL jump to the final step (<xref target="create_version_report"/>).</t>

</section>
<section anchor="download_image" title="Download latest image">

<t>If the ECU does not have secondary storage, i.e. buffer storage to temporarily store the latest image before installing it, it SHALL download the latest image from the Primary. (If the ECU has secondary storage, it will already have the latest image in its secondary storage as specified in <xref target="send_images_primary"/>, and should skip to the next step.) The ECU MAY first create a backup of its previous working image and store it elsewhere (e.g., the Primary).</t>

<t>The filename used to identify the latest known image (i.e., the file to request from the Primary) SHALL be determined as follows:</t>

<t><list style="numbers">
  <t>Load the Targets metadata file from the Director repository.</t>
  <t>Find the Targets metadata associated with this ECU identifier.</t>
  <t>Construct the Image filename using the rule in <xref target="metadata_filename_rules"/>, or use the download URL specified in the Director metadata.</t>
  <t>If there is no Targets metadata about this image, abort the update cycle and report that there is no such image. Additionally, in the case of failure, the ECU SHALL retain its previous Targets metadata instead of using the new Targets metadata. Otherwise, download the image (up to the number of bytes specified in the Targets metadata) and verify it according to <xref target="verify_image"/>.</t>
</list></t>

<t>When the Primary responds to the download request, the ECU SHALL overwrite its current image with the downloaded image from the Primary.</t>

<t>If any part of this step fails, the ECU SHALL jump to the final step (<xref target="create_version_report"/>).</t>

</section>
<section anchor="verify_image" title="Verify image">

<t>The ECU SHALL verify that the latest image matches the latest metadata as follows:</t>

<t><list style="numbers">
  <t>Load the latest Targets metadata file from the Director.</t>
  <t>Find the Targets metadata associated with this ECU identifier.</t>
  <t>Check that the hardware identifier in the metadata matches the ECUs hardware identifier.</t>
  <t>Check that the image filename is valid for this ECU. This MAY be a comparison against a wildcard path, which restricts the ECUs to which a delegation will apply.</t>
  <t>Check that the release counter of the image in the previous metadata, if it exists, is less than or equal to the release counter in the latest metadata.</t>
  <t>If the image is encrypted, decrypt the image with a decryption key to be chosen as follows:
  <list style="symbols">
      <t>If the ECU key is a symmetric key, the ECU SHALL use the ECU key for image decryption.</t>
      <t>If the ECU key is asymmetric, the ECU SHALL check the Targets metadata for an encrypted symmetric key. If such a key is found, the ECU SHALL decrypt the symmetric key using its ECU key, and use the decrypted symmetric key for image decryption.</t>
      <t>If the ECU key is asymmetric and there is no symmetric key in the target metadata, the ECU SHALL use its ECU key for image decryption.</t>
    </list></t>
  <t>Check that all hashes listed in the metadata match the corresponding hashes of the image.</t>
</list></t>

<t>If the ECU has secondary storage, the checks SHOULD be performed on the image in secondary storage before it is installed.</t>

<t>When checking hashes, the ECU SHOULD additionally check that the length of the image matches the length listed in the metadata.</t>

<t>NOTE: Verifying image size along with hash will become a requirement in a future version of the Uptane standard.</t>

<t>NOTE: See <xref target="DEPLOY"/> for guidance on how to deal with Secondary ECU failures for ECUs that do not have secondary storage.</t>

<t>If any step fails, the ECU SHALL jump to the (<xref target="create_version_report"/>) step.</t>

</section>
<section anchor="install_image" title="Install image">

<t>The ECU SHALL attempt to install the update. This installation SHOULD occur at a time when all pre-conditions are met. These pre-conditions MAY include ensuring the vehicle is in a safe environment for install (e.g., the vehicle is parked when updating a specific ECU). Another pre-condition MAY include ensuring the ECU has a backup of its current image and metadata in case the current installation fails.</t>

</section>
<section anchor="create_version_report" title="Create and send version report">

<t>The ECU SHALL create a version report as described in <xref target="version_report"/>, and send it to the Primary (or simply save it to disk, if the ECU is a Primary). The Primary SHOULD write the version reports it receives to disk and associate them with the Secondaries that sent them.</t>

</section>
</section>
<section anchor="metadata_verification" title="Metadata verification procedures">

<t>A Primary ECU MUST perform full verification of metadata. A Secondary ECU SHOULD perform full verification of metadata. If a Secondary cannot perform full verification, it SHALL, at the very least, perform partial verification.</t>

<t>If a step in the following workflows does not succeed (e.g., the update is aborted because a new metadata file was not signed), an ECU SHOULD still be able to update again in the future. Errors raised during the update process SHOULD NOT leave ECUs in an unrecoverable state.</t>

<section anchor="partial_verification" title="Partial verification">

<t>In order to perform partial verification, an ECU SHALL perform the following steps:</t>

<t><list style="numbers">
  <t>Load and verify the current time or the most recent securely attested time.</t>
  <t>Download and check the Targets metadata file from the Director repository, following the procedure in <xref target="check_targets"/>.</t>
</list></t>

<t>Note that this verification procedure is the smallest set of Uptane checks permissible for an Uptane Secondary ECU. An ECU MAY additionally implement more metadata checks.</t>

<t>For example, an ECU MAY also fetch and verify Root metadata from the Director (following the procedure in <xref target="check_root"/>) before checking Targets metadata. Performing this additional check would provide the ECU with a secure way to receive and validate a rotation of the Director’s Targets key.</t>

<t>See <xref target="DEPLOY"/> for more discussion on this topic.</t>

</section>
<section anchor="full_verification" title="Full verification">

<t>Full verification of metadata means that the ECU checks that the Targets metadata about images from the Director repository matches the Targets metadata about the same images from the Image repository. This provides resilience to a key compromise in the system.</t>

<t>Full verification MUST be performed by Primary ECUS and MAY be performed by Secondary ECUs. In the following instructions, whenever an ECU is directed to download metadata, it applies only to Primary ECUs.</t>

<t>If <xref target="TAP-5"/> is supported and a Primary has an external connection to the Uptane repositories, a Primary ECU SHALL download metadata and images following the rules specified in that TAP.  If <xref target="TAP-5"/> is not supported, or if the Primary does not have an external connection to the Uptane repositories, the download SHOULD follow the <xref target="TUF-spec"/> and the metadata file renaming rules specified in <xref target="metadata_filename_rules"/>.</t>

<t>Before starting full verification, the repository mapping metadata MUST be consulted to determine where to download metadata from. This procedure assumes the basic Uptane case: there are only two repositories (Director and Image), and all image paths are required to be signed by both repositories. If a more complex repository layout is being used, refer to <xref target="DEPLOY"/> for guidance on how to determine where metadata should be downloaded from.</t>

<t>In order to perform full verification, an ECU SHALL perform the following steps:</t>

<t><list style="numbers">
  <t>Load and verify the current time or the most recent securely attested time.</t>
  <t>Download and check the Root metadata file from the Director repository, following the procedure in <xref target="check_root"/>.</t>
  <t>Download and check the Timestamp metadata file from the Director repository, following the procedure in <xref target="check_timestamp"/>.</t>
  <t>Check the previously downloaded Snapshot metadata file from the Directory repository (if available). If the hashes and version number of that file match the hashes and version number listed in the new Timestamp metadata, there are no new updates and the verification process MAY be stopped and considered complete. Otherwise, download and check the Snapshot metadata file from the Director repository, following the procedure in <xref target="check_snapshot"/>.</t>
  <t>Download and check the Targets metadata file from the Director repository, following the procedure in <xref target="check_targets"/>.</t>
  <t>If the Targets metadata from the Directory repository indicates that there are no new targets that are not already currently installed, the verification process MAY be stopped and considered complete. Otherwise, download and check the Root metadata file from the Image repository, following the procedure in <xref target="check_root"/>.</t>
  <t>Download and check the Timestamp metadata file from the Image repository, following the procedure in <xref target="check_timestamp"/>.</t>
  <t>Check the previously downloaded Snapshot metadata file from the Image repository (if available). If the hashes and version number of that file match the hashes and version number listed in the new Timestamp metadata, the ECU MAY skip to the last step. Otherwise, download and check the Snapshot metadata file from the Image repository, following the procedure in <xref target="check_snapshot"/>.</t>
  <t>Download and check the top-level Targets metadata file from the Image repository, following the procedure in <xref target="check_targets"/>.</t>
  <t>Verify that Targets metadata from the Director and Image repositories match. A Primary ECU MUST perform this check on metadata for all images listed in the Targets metadata file from the Director repository downloaded in step 6. A Secondary ECU MAY elect to perform this check only on the metadata for the image it will install. (That is, the target metadata from the Director that contains the ECU identifier of the current ECU.) To check that the metadata for an image matches, complete the following procedure:
  <list style="numbers">
      <t>Locate and download a Targets metadata file from the Image repository that contains an image with exactly the same file name listed in the Director metadata, following the procedure in <xref target="resolve_delegations"/>.</t>
      <t>Check that the Targets metadata from the Image repository matches the Targets metadata from the Director repository:
      <list style="numbers">
          <t>Check that the non-custom metadata (i.e., length and hashes) of the unencrypted or encrypted image are the same in both sets of metadata. Note: the Primary is responsible for validating encrypted images and associated metadata. The target ECU (Primary or Secondary) is responsible for validating the unencrypted image and associated metadata.</t>
          <t>Check that all “MUST match” custom metadata (e.g., hardware identifier and release counter) are the same in both sets of metadata.</t>
          <t>Check that the release counter in the previous Targets metadata file is less than or equal to the release counter in this Targets metadata file.</t>
        </list></t>
    </list></t>
</list></t>

<t>If any step fails, the ECU MUST return an error code indicating the failure. If a check for a specific type of security attack fails (e.g. rollback, freeze, arbitrary software, etc.), the ECU SHOULD return an error code that indicates the type of attack.</t>

</section>
<section anchor="check_root" title="How to check Root metadata">

<t>To properly check Root metadata, an ECU SHOULD:</t>

<t><list style="numbers">
  <t>Load the previous Root metadata file.</t>
  <t>Update to the latest Root metadata file.
  <list style="numbers">
      <t>Let N denote the version number of the latest Root metadata file (which at first could be the same as the previous Root metadata file).</t>
      <t>Try downloading a new version N+1 of the Root metadata file, up to some X number of bytes. The value for X is set by the implementor. For example, X may be tens of kilobytes. The filename used to download the Root metadata file is of the fixed form VERSION_NUMBER.FILENAME.EXT (e.g., 42.root.json). If this file is not available, the current Root metadata file is the latest; continue with step 3.</t>
      <t>Version N+1 of the Root metadata file MUST have been signed by the following: (1) a threshold of keys specified in the latest Root metadata file (version N), and (2) a threshold of keys specified in the new Root metadata file being validated (version N+1). If version N+1 is not signed as required, discard it, abort the update cycle, and report the signature failure. On the next update cycle, begin at version N of the Root metadata file. (Checks for an arbitrary software attack.)</t>
      <t>The version number of the latest Root metadata file (version N) must be less than or equal to the version number of the new Root metadata file (version N+1). Effectively, this means checking that the version number signed in the new Root metadata file is indeed N+1. If the version of the new Root metadata file is less than the latest metadata file, discard it, abort the update cycle, and report the rollback attack. On the next update cycle, begin at step 1 and version N of the Root metadata file. (Checks for a rollback attack.)</t>
      <t>Set the latest Root metadata file to the new Root metadata file.</t>
      <t>Repeat steps 2.1 to 2.6.</t>
    </list></t>
  <t>Check that the current (or latest securely attested) time is lower than the expiration timestamp in the latest Root metadata file. (Checks for a freeze attack.)</t>
  <t>If the Timestamp and/or Snapshot keys have been rotated, delete the previous Timestamp and Snapshot metadata files. (Checks for recovery from fast-forward attacks <xref target="MERCURY"/>.)</t>
</list></t>

</section>
<section anchor="check_timestamp" title="How to check Timestamp metadata">

<t>To properly check Timestamp metadata, an ECU SHOULD:</t>

<t><list style="numbers">
  <t>Download up to Y number of bytes. The value for Y is set by the implementor. For example, Y may be tens of kilobytes. The filename used to download the Timestamp metadata file is of the fixed form FILENAME.EXT (e.g., timestamp.json).</t>
  <t>Check that it has been signed by the threshold of keys specified in the latest Root metadata file. If the new Timestamp metadata file is not properly signed, discard it, abort the update cycle, and report the signature failure. (Checks for an arbitrary software attack.)</t>
  <t>Check that the version number of the previous Timestamp metadata file, if any, is less than or equal to the version number of this Timestamp metadata file. If the new Timestamp metadata file is older than the trusted Timestamp metadata file, discard it, abort the update cycle, and report the potential rollback attack. (Checks for a rollback attack.)</t>
  <t>Check that the current (or latest securely attested) time is lower than the expiration timestamp in this Timestamp metadata file. If the new Timestamp metadata file has expired, discard it, abort the update cycle, and report the potential freeze attack. (Checks for a freeze attack.)</t>
</list></t>

</section>
<section anchor="check_snapshot" title="How to check Snapshot metadata">

<t>To properly check Snapshot metadata, an ECU SHOULD:</t>

<t><list style="numbers">
  <t>Download up to the number of bytes specified in the Timestamp metadata file, constructing the metadata filename as defined in <xref target="metadata_filename_rules"/>.</t>
  <t>The hashes and version number of the new Snapshot metadata file MUST match the hashes and version number listed in Timestamp metadata. If the hashes and version number do not match, discard the new Snapshot metadata, abort the update cycle, and report the failure. (Checks for a mix-and-match attack.)</t>
  <t>Check that it has been signed by the threshold of keys specified in the latest Root metadata file. If the new Snapshot metadata file is not signed as required, discard it, abort the update cycle, and report the signature failure. (Checks for an arbitrary software attack.)</t>
  <t>Check that the version number of the previous Snapshot metadata file, if any, is less than or equal to the version number of this Snapshot metadata file. If this Snapshot metadata file is older than the previous Snapshot metadata file, discard it, abort the update cycle, and report the potential rollback attack. (Checks for a rollback attack.)</t>
  <t>Check that the version number listed by the previous Snapshot metadata file for each Targets metadata file is less than or equal to its version number in this Snapshot metadata file. If this condition is not met, discard the new Snapshot metadata file, abort the update cycle, and report the failure. (Checks for a rollback attack.)</t>
  <t>Check that each Targets metadata filename listed in the previous Snapshot metadata file is also listed in this Snapshot metadata file. If this condition is not met, discard the new Snapshot metadata file, abort the update cycle, and report the failure. (Checks for a rollback attack.)</t>
  <t>Check that the current (or latest securely attested) time is lower than the expiration timestamp in this Snapshot metadata file. If the new Snapshot metadata file is expired, discard it, abort the update cycle, and report the potential freeze attack. (Checks for a freeze attack.)</t>
</list></t>

</section>
<section anchor="check_targets" title="How to check Targets metadata">

<t>To properly check Targets metadata, an ECU SHOULD:</t>

<t><list style="numbers">
  <t>Download up to Z number of bytes, constructing the metadata filename as defined in <xref target="metadata_filename_rules"/>. The value for Z is set by the implementor. For example, Z may be tens of kilobytes.</t>
  <t>The version number of the new Targets metadata file MUST match the version number listed in the latest Snapshot metadata. If the version number does not match, discard it, abort the update cycle, and report the failure. (Checks for a mix-and-match attack.) This step MAY be skipped when checking Targets metadata on a partial verification ECU; partial verification ECUs might not have Snapshot metadata.</t>
  <t>Check that the Targets metadata has been signed by the threshold of keys specified in the relevant metadata file (Checks for an arbitrary software attack):
  <list style="numbers">
      <t>If checking top-level Targets metadata, the threshold of keys is specified in the Root metadata.</t>
      <t>If checking delegated Targets metadata, the threshold of keys is specified in the Targets metadata file that delegated authority to this role.</t>
    </list></t>
  <t>Check that the version number of the previous Targets metadata file, if any, is less than or equal to the version number of this Targets metadata file. (Checks for a rollback attack.)</t>
  <t>Check that the current (or latest securely attested) time is lower than the expiration timestamp in this Targets metadata file. (Checks for a freeze attack.)</t>
  <t>If checking Targets metadata from the Director repository, verify that there are no delegations.</t>
  <t>If checking Targets metadata from the Director repository, check that no ECU identifier is represented more than once.</t>
  <t>If checking Targets metadata from the Director repository, and the ECU performing the verification is the Primary ECU, check that all listed ECU identifiers correspond to ECUs that are actually present in the vehicle.</t>
</list></t>

</section>
<section anchor="resolve_delegations" title="How to resolve delegations">

<t>To properly check Targets metadata for an image, an ECU MUST locate the metadata file(s) for the role (or roles) that have the authority to sign the image. This metadata might be located in the top-level Targets metadata, but it also may be delegated to another role or to multiple roles. Therefore, all delegations MUST be resolved using the following recursive procedure, beginning with the top-level Targets metadata file.</t>

<t><list style="numbers">
  <t>Download the current metadata file, and check it following the procedure in <xref target="check_targets"/>. If the file cannot be loaded, or if any verification step fails, abort the delegation resolution, and indicate that Image metadata cannot be found because of a missing or invalid role.</t>
  <t>If the current metadata file contains signed metadata about the image, end the delegation resolution and return the metadata to be checked.</t>
  <t>If the current metadata file was reached via a terminating delegation and does not contain signed metadata about the image, abort the delegation resolution for this image and return an error indicating that image metadata could not be found.</t>
  <t>Search the list of delegations, in listed order. For each delegation:
  <list style="numbers">
      <t>Check if the delegation applies to the image being processed. For the delegation to apply, it MUST include the hardware identifier of the target, and the target name must match one of the delegation’s image paths. If either of these tests fail, move on to the next delegation in the list.</t>
      <t>If the delegation is a multi-role delegation, follow the procedure described in <xref target="multirole_delegations"/>. If the multi-role delegation is terminating and no valid Image metadata is found, abort the delegation resolution and return an error indicating that image metadata could not be found.</t>
      <t>If the delegation is a normal delegation, perform delegation resolution, starting at step 1. Note that this may recurse an arbitrary number of levels deep. If a delegation that applies to the image is found but no image metadata is found in the delegated roles or any of its sub-delegations, simply continue on with the next delegation in the list. The search is only completed/aborted if image metadata or a terminating delegation that applies to the image is found.</t>
    </list></t>
  <t>If the end of the list of delegations in the top-level metadata is reached without finding valid image metadata, return an error indicating that image metadata could not be found.</t>
</list></t>

</section>
<section anchor="multirole_delegations" title="Multi-role delegations">

<t>It is possible to delegate signing authority to multiple delegated roles as described in <xref target="TAP-3"/>. Each multi-role delegation effectively contains a list of ordinary delegations, plus a threshold of those roles that must be in agreement about the non-custom metadata for the image. All multi-role delegations MUST be resolved using the following procedure. Note that there may be sub-delegations inside multi-role delegations.</t>

<t><list style="numbers">
  <t>For each of the roles in the delegation, find and load the image metadata (or error) following the procedure in <xref target="resolve_delegations"/>.</t>
  <t>Inspect the non-custom part of the metadata loaded in step 1:
  <list style="numbers">
      <t>Locate all sets of roles which have agreeing (i.e. identical) non-custom metadata and “MUST match” custom metadata. Discard any set of roles with a size smaller than the threshold of roles that must be in agreement for this delegation.</t>
      <t>Check for a conflict. A conflict exists if there remains more than one agreeing set of roles, each set having different metadata. If a conflict is found, choose and return the metadata from the set of roles which includes the earliest role in the multi-delegation list.</t>
      <t>If there is no conflict, check if there is any single set of roles with matching non-custom metadata. If there is, choose and return the metadata from this set.</t>
      <t>If no agreeing set can be found that meets the agreement threshold, return an error indicating that image metadata could not be found.</t>
    </list></t>
</list></t>

</section>
</section>
</section>
</section>


  </middle>

  <back>

    <references title='Normative References'>





<reference  anchor="RFC2119" target='https://www.rfc-editor.org/info/rfc2119'>
<front>
<title>Key words for use in RFCs to Indicate Requirement Levels</title>
<author initials='S.' surname='Bradner' fullname='S. Bradner'><organization /></author>
<date year='1997' month='March' />
<abstract><t>In many standards track documents several words are used to signify the requirements in the specification.  These words are often capitalized. This document defines these words as they should be interpreted in IETF documents.  This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t></abstract>
</front>
<seriesInfo name='BCP' value='14'/>
<seriesInfo name='RFC' value='2119'/>
<seriesInfo name='DOI' value='10.17487/RFC2119'/>
</reference>



<reference  anchor="RFC3647" target='https://www.rfc-editor.org/info/rfc3647'>
<front>
<title>Internet X.509 Public Key Infrastructure Certificate Policy and Certification Practices Framework</title>
<author initials='S.' surname='Chokhani' fullname='S. Chokhani'><organization /></author>
<author initials='W.' surname='Ford' fullname='W. Ford'><organization /></author>
<author initials='R.' surname='Sabett' fullname='R. Sabett'><organization /></author>
<author initials='C.' surname='Merrill' fullname='C. Merrill'><organization /></author>
<author initials='S.' surname='Wu' fullname='S. Wu'><organization /></author>
<date year='2003' month='November' />
<abstract><t>This document presents a framework to assist the writers of certificate policies or certification practice statements for participants within public key infrastructures, such as certification authorities, policy authorities, and communities of interest that wish to rely on certificates.  In particular, the framework provides a comprehensive list of topics that potentially (at the writer's discretion) need to be covered in a certificate policy or a certification practice statement.  This document supersedes RFC 2527.</t></abstract>
</front>
<seriesInfo name='RFC' value='3647'/>
<seriesInfo name='DOI' value='10.17487/RFC3647'/>
</reference>



<reference  anchor="RFC5198" target='https://www.rfc-editor.org/info/rfc5198'>
<front>
<title>Unicode Format for Network Interchange</title>
<author initials='J.' surname='Klensin' fullname='J. Klensin'><organization /></author>
<author initials='M.' surname='Padlipsky' fullname='M. Padlipsky'><organization /></author>
<date year='2008' month='March' />
<abstract><t>The Internet today is in need of a standardized form for the transmission of internationalized &quot;text&quot; information, paralleling the specifications for the use of ASCII that date from the early days of the ARPANET.  This document specifies that format, using UTF-8 with normalization and specific line-ending sequences.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='5198'/>
<seriesInfo name='DOI' value='10.17487/RFC5198'/>
</reference>


<reference anchor="NFC" target="http://www.unicode.org/reports/tr15/">
  <front>
    <title>Unicode Standard Annex #15: Unicode Normalization Forms</title>
    <author initials="M." surname="Davis">
      <organization></organization>
    </author>
    <author initials="M." surname="Duerst">
      <organization></organization>
    </author>
    <date year="2018" month="October"/>
  </front>
</reference>
<reference anchor="TAP-3" target="https://github.com/theupdateframework/taps/blob/d0818e580c322815a473520f2e8cc5f5eb8df499/tap3.md">
  <front>
    <title>The Update Framework TAP 3 - Multi-role delegations</title>
    <author initials="T.K." surname="Kuppusamy">
      <organization></organization>
    </author>
    <author initials="S." surname="Awwad">
      <organization></organization>
    </author>
    <author initials="E." surname="Cordell">
      <organization></organization>
    </author>
    <author initials="V." surname="Diaz">
      <organization></organization>
    </author>
    <author initials="J." surname="Moshenko">
      <organization></organization>
    </author>
    <author initials="J." surname="Cappos">
      <organization></organization>
    </author>
    <date year="2018" month="January" day="18"/>
  </front>
</reference>
<reference anchor="TAP-4" target="https://github.com/theupdateframework/taps/blob/2cb67d913ec19424d1e354b38f862886fbfd4105/tap4.md">
  <front>
    <title>The Update Framework TAP 4 - Multiple repository consensus on entrusted targets</title>
    <author initials="T.K." surname="Kuppusamy">
      <organization></organization>
    </author>
    <author initials="S." surname="Awwad">
      <organization></organization>
    </author>
    <author initials="E." surname="Cordell">
      <organization></organization>
    </author>
    <author initials="V." surname="Diaz">
      <organization></organization>
    </author>
    <author initials="J." surname="Moshenko">
      <organization></organization>
    </author>
    <author initials="J." surname="Cappos">
      <organization></organization>
    </author>
    <date year="2017" month="December" day="15"/>
  </front>
</reference>
<reference anchor="TAP-5" target="https://github.com/theupdateframework/taps/blob/01726d203c9b9c029d26f6612069ce3180500d9a/tap5.md#downloading-metadata-and-target-files">
  <front>
    <title>The Update Framework TAP 5 - Setting URLs for roles in the root metadata file</title>
    <author initials="T.K." surname="Kuppusamy">
      <organization></organization>
    </author>
    <author initials="S." surname="Awwad">
      <organization></organization>
    </author>
    <author initials="E." surname="Cordell">
      <organization></organization>
    </author>
    <author initials="V." surname="Diaz">
      <organization></organization>
    </author>
    <author initials="J." surname="Moshenko">
      <organization></organization>
    </author>
    <author initials="J." surname="Cappos">
      <organization></organization>
    </author>
    <date year="2018" month="January" day="22"/>
  </front>
</reference>
<reference anchor="TUF-spec" target="https://github.com/theupdateframework/specification/blob/2b4e18472fe25d5b57f36f6fa50104967c8faeaa/tuf-spec.md">
  <front>
    <title>The Update Framework Specification</title>
    <author initials="J." surname="Samuel">
      <organization></organization>
    </author>
    <author initials="N." surname="Mathewson">
      <organization></organization>
    </author>
    <author initials="G." surname="Condra">
      <organization></organization>
    </author>
    <author initials="V." surname="Diaz">
      <organization></organization>
    </author>
    <author initials="T.K." surname="Kuppusamy">
      <organization></organization>
    </author>
    <author initials="S." surname="Awwad">
      <organization></organization>
    </author>
    <author initials="S." surname="Tobias">
      <organization></organization>
    </author>
    <author initials="J." surname="Wright">
      <organization></organization>
    </author>
    <author initials="H." surname="Mehnert">
      <organization></organization>
    </author>
    <author initials="E." surname="Tryzelaar">
      <organization></organization>
    </author>
    <author initials="J." surname="Cappos">
      <organization></organization>
    </author>
    <author initials="R." surname="Dingledine">
      <organization></organization>
    </author>
    <date year="2018" month="September" day="19"/>
  </front>
</reference>


    </references>

    <references title='Informative References'>

<reference anchor="MERCURY" target="https://www.usenix.org/system/files/conference/atc17/atc17-kuppusamy.pdf">
  <front>
    <title>Mercury: Bandwidth-Effective Prevention of Rollback Attacks Against Community Repositories</title>
    <author initials="T.K." surname="Kuppusamy">
      <organization></organization>
    </author>
    <author initials="V." surname="Diaz">
      <organization></organization>
    </author>
    <author initials="J." surname="Cappos">
      <organization></organization>
    </author>
    <date year="2017" month="July" day="12"/>
  </front>
  <seriesInfo name="ISBN" value="978-1-931971-38-6"/>
</reference>
<reference anchor="UPTANEESCAR" target="https://ssl.engineering.nyu.edu/papers/kuppusamy_escar_16.pdf">
  <front>
    <title>Securing Software Updates for Automobiles</title>
    <author initials="T.K." surname="Kuppusamy">
      <organization></organization>
    </author>
    <author initials="A." surname="Brown">
      <organization></organization>
    </author>
    <author initials="S." surname="Awwad">
      <organization></organization>
    </author>
    <author initials="D." surname="McCoy">
      <organization></organization>
    </author>
    <author initials="R." surname="Bielawski">
      <organization></organization>
    </author>
    <author initials="C." surname="Mott">
      <organization></organization>
    </author>
    <author initials="S." surname="Lauzon">
      <organization></organization>
    </author>
    <author initials="A." surname="Weimerskirch">
      <organization></organization>
    </author>
    <author initials="J." surname="Cappos">
      <organization></organization>
    </author>
    <date year="2016" month="October" day="16"/>
  </front>
</reference>
<reference anchor="PEP-458" target="https://www.python.org/dev/peps/pep-0458/">
  <front>
    <title>PEP 458 -- Surviving a Compromise of PyPI</title>
    <author initials="T.K." surname="Kuppusamy">
      <organization></organization>
    </author>
    <author initials="V." surname="Diaz">
      <organization></organization>
    </author>
    <author initials="D." surname="Stufft">
      <organization></organization>
    </author>
    <author initials="J." surname="Cappos">
      <organization></organization>
    </author>
    <date year="2013" month="September" day="27"/>
  </front>
</reference>
<reference anchor="DEPLOY" target="https://uptane.github.io/deployment-considerations/index.html">
  <front>
    <title>Uptane Deployment Best Practices</title>
    <author initials="." surname="Members of the Uptane Alliance Community">
      <organization></organization>
    </author>
    <date year="n.d."/>
  </front>
</reference>
<reference anchor="USATODAY" target="https://www.usatoday.com/story/tech/columnist/2016/06/28/your-average-car-lot-more-code-driven-than-you-think/86437052/">
  <front>
    <title>Your average car is a lot more code-driven than you think</title>
    <author initials="B." surname="O'Donnell">
      <organization></organization>
    </author>
    <date year="2016" month="June" day="28"/>
  </front>
</reference>
<reference anchor="CR-OTA" target="https://www.consumerreports.org/automotive-technology/automakers-embrace-over-the-air-updates-can-we-trust-digital-car-repair/">
  <front>
    <title>Automakers Embrace Over-the-Air Updates, but Can We Trust Digital Car Repair?</title>
    <author initials="K." surname="Barry">
      <organization></organization>
    </author>
    <date year="2018" month="April" day="20"/>
  </front>
</reference>
<reference anchor="IN-TOTO" target="https://in-toto.github.io/">
  <front>
    <title>in-toto: A framework to secure the integrity of software supply chains</title>
    <author >
      <organization></organization>
    </author>
    <date year="2018" month="October" day="29"/>
  </front>
</reference>


    </references>



  </back>

<!-- ##markdown-source:
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
8VBNJ8rz7bMXiHEfXpyZCYw0trk4Vzyz8iWqPjPnPAhjyJX3K7F4bU6sZVHX
FWcHygk5/kZeK7aw4C1p1tOmLVp0FcMzgDnFh9I3jfrvnG8s/L3F0J4LO0U+
nwYALmnRFJAEN+hF11TLF6nPhmuKWpCtwJZdJ4S4K7gCpJ8VqyCsla4M+sxA
L6+JlZQms/blRonXl3wypuYbebC8I+IYYm/kBUhML0OU3BziOPNzcizuL5gN
raNVOXZJTTi7s8uzfD8i9sG5QpTNQ4Iw67cec0N5WXTpyAVs4saEIYJlNcR7
NEJ3lstj8/xYo9ixrnEFAkci+M364sJ86OGBiTmjx8AYOKEcyjsHiYZHiPuI
DgOdHho9uZR9sB8KzzQKsIj3qNleoPWiDqO0CW1+YdCXS+6Y5pqClo3Ioib5
aHz2XjQFSBSWKsIGD5p/ypJDdxrOEOJICs4zIFuA+KONpvHdIEdczTfsokoX
vjc/MMWlFp0mqS0a5NEq5qGfm2xJiAlwj9G2JA523cuQQ8iL7MZFNCE80g17
O3a/fNEfP9JrSGrVUUMuQA2NazUxjL6j0kl4PKAz54tqhQP5r8MwmLau5hdZ
DBksFhiPON+4vQhj1OgEgQmaiuvM03B0nT80siGYUpgwzsaBWLpBfuPL3Whz
oaMIyYVlLOLWriWzCCMf86s8yCgS9HPki0YkuRzIWI0CNfICSrRCRofOaKx4
hQQNw1dEt5AMBfWqMt5lRcMhKWjN4ZQWzDl0FiCUYJFY52OtmWAa/CixMlaM
16bae8YmzZIxyjAvPosB6RLV0UhPxadegMLVegEUTZxisJ0Xebnp6ATedlZc
1MIFrpDSBoMGPmTh2A1KICnHVjho90TessBeoAwM86vDQo7FrCIc9yJxqUq0
Gg6nIEnFxPZw9JHv/twEY3K2QohfwdX4cjdAfT/HmHmWChAuiCuK7kLne1Fm
dGWG0VPv2la09JdCyMdxfaASiyudDB6WxVanqB0ku8UkB2FM7djALsYohV3m
Y06k1ku6J1Zim2WjErssTrjKtfm8ORF9H4XxWKQdSf4cquuomtny6NbLynw7
iZ4IBdEpHvnykcx1Wn7XVIjIHmiNq1BqHuflkFpWkiRInJzCgiQY2o6TdEOO
hLsiG8VeKGWL3ZbQUdw3aZ89A0cf8Dmq02jD4cB+0gGZA5wFC6sNkIJTCSff
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
NgEA

-->

</rfc>


<?xml version="1.0" encoding="UTF-8"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc2629 version 1.2.9 -->

<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
]>

<?rfc toc="yes"?>
<?rfc sortrefs="yes"?>
<?rfc symrefs="yes"?>

<rfc ipr="noDerivativesTrust200902" docName="uptane-standard-design" category="info">

  <front>
    <title abbrev="UPTANE">Uptane Standard for Design and Implementation</title>

    <author initials="." surname="Members of the Uptane Alliance Community" fullname="Uptane Alliance Community">
      <organization>Uptane Alliance (c/o Prof. Justin Cappos)</organization>
      <address>
        <postal>
          <street>6 MetroTech</street>
          <city>Brooklyn</city>
          <region>NY</region>
          <code>11201</code>
          <country>USA</country>
        </postal>
        <email>uptane-standards@googlegroups.com</email>
      </address>
    </author>

    <date year="2019" month="December" day="03"/>

    <area>TODO</area>
    <workgroup>TODO</workgroup>
    <keyword>Internet-Draft</keyword>

    <abstract>


<t>This document describes a framework for securing ground vehicle software update systems.</t>



    </abstract>


  </front>

  <middle>


<section anchor="introduction" title="Introduction">

<t>Uptane is a secure software update framework for ground vehicles. This document describes procedures to enable programmers for OEMs and suppliers to securely design and implement this framework in a manner that better protects connected units on ground vehicles. Integrating Uptane as outlined in the sections that follow can reduce the ability of attackers to compromise critical systems. It also assures a faster and easier recovery process should a compromise occur.</t>

<t>These instructions specify the components necessary for a compliant implementation. Individual implementors can make their own technological choices within those requirements. This flexibility makes Uptane adaptable to the many customized update solutions used by manufacturers. If implementors wish to have compatible formats, they may use POUFs. POUFs contain a description of implementation choices as well as data binding formats. An implementor who adopts a POUF, as well as the Uptane Standard, will be able to interoperate with other implementations using that POUF.</t>

</section>
<section anchor="terminology" title="Terminology">

<section anchor="conformance-terminology" title="Conformance terminology">

<t>The keywords MUST, MUST NOT, REQUIRED, SHALL, SHALL NOT, SHOULD, SHOULD NOT, RECOMMENDED, MAY, and OPTIONAL in this document are to be interpreted as described in <xref target="RFC2119"/>.</t>

<t>In order to be considered “Uptane-compliant,” an implementation MUST follow all of these rules as specified in the document.</t>

</section>
<section anchor="terminology-1" title="Terminology">

<t><spanx style="emph">Bundle</spanx>: A set of images released by the repository that is meant to be installed by one or more target ECUs on a vehicle during the same update cycle.</t>

<t><spanx style="emph">Bus</spanx>: An internal communications network that interconnects components within a vehicle. A vehicle can have a number of buses that will vary in terms of power, speed and resources.</t>

<t><spanx style="emph">ECU Identifier</spanx>: An attribute used to identify a specific ECU (e.g., such as a unique serial number).</t>

<t><spanx style="emph">ECU Version Manifest</spanx>: Metadata which details the software version currently installed on the ECU.</t>

<t><spanx style="emph">Hardware Identifier</spanx>: An attribute used to identify a model of an ECU.</t>

<t><spanx style="emph">Image</spanx>: File containing software for an ECU to install. May contain a binary image to flash, installation instructions, and other necessary information for the ECU to properly apply the update. Each ECU typically holds only one image, although this may vary in some cases.</t>

<t><spanx style="emph">Metadata</spanx>:  Information describing the characteristics of data including, for example, structural
metadata describing data structures (e.g., data format, syntax, and semantics) and
descriptive metadata describing data contents (e.g., information security labels). As used in Uptane, metadata can be described as information associated with a role or an image that contains the characteristics or parameters thereof (e.g. cryptographic material parameters, file names and versions.)</t>

<t><spanx style="emph">Primary/Secondary ECUs</spanx>: Terms used to describe the control units within a ground vehicle. A primary ECU downloads and verifies update images and metadata for itself and for secondary ECUs, and distributes images and metadata to secondaries. Thus, it requires extra storage space and a means to download images and metadata.  Secondary ECUs receive their update images and metadata from the primary, and only need to verify and install their own metadata and images.</t>

<t><spanx style="emph">POUF</spanx>: A document that contains the protocol, operations, usage, and formats (POUF) of a specific Uptane implementation. The POUF contains decisions about SHOULDs and MAYs in an implementation, as well as descriptions of data binding formats. POUFs MAY be used to create compatible Uptane implementations.</t>

<t><spanx style="emph">Repository</spanx>: A server containing metadata about images. May also contain the images themselves. Other data may be stored on the repository to be accessed by ECUs during the update process.</t>

<t><spanx style="emph">Suppliers</spanx>: Independent companies to which auto manufacturers may outsource the production of ECUs. Tier-1 suppliers directly serve the manufacturers. Tier-2 suppliers are those that perform outsourced work for Tier-1 suppliers.</t>

<t><spanx style="emph">Vehicle Version Manifest</spanx>: A compilation of all ECU version manifests on a vehicle. It serves as a master list of all images currently running on all ECUs in the vehicle.</t>

</section>
<section anchor="uptane-role-terminology" title="Uptane Role terminology">

<t>These terms are defined in greater detail in <xref target="roles"/>.</t>

<t><spanx style="emph">Delegations</spanx>: A process by which the responsibility of signing metadata about images is assigned to another party.<vspace />
<spanx style="emph">Role</spanx>: A party (human or machine) responsible for signing a certain type of metadata. The role controls keys and is responsible for signing metadata entrusted to it with these keys. The roles mechanism of Uptane allows the system to distribute signing responsibilities so that the compromise of one key does not necessarily impact the security of the entire system.</t>

<t><list style="symbols">
  <t><spanx style="emph">Root Role</spanx>: Signs metadata that distributes and revokes public keys used to verify the root, timestamp, snapshot, and targets role metadata.</t>
  <t><spanx style="emph">Snapshot Role</spanx>: Signs metadata that indicates which images the repository has released at the same time.</t>
  <t><spanx style="emph">Targets Role</spanx>: Signs metadata used to verify the image, such as cryptographic hashes and file size.</t>
  <t><spanx style="emph">Timestamp Role</spanx>: Signs metadata that indicates if there are any new metadata or images on the repository.</t>
</list></t>

</section>
<section anchor="acronyms-and-abbreviations" title="Acronyms and abbreviations">

<t><spanx style="emph">CAN Bus</spanx>: Controller Area Network bus standard</t>

<t><spanx style="emph">CDN</spanx>: Content Delivery Network</t>

<t><spanx style="emph">ECUs</spanx>: Electronic Control Units, the computing units on a vehicle</t>

<t><spanx style="emph">LIN Bus</spanx>: Local Interconnect Bus</t>

<t><spanx style="emph">OBD</spanx>: On-board diagnostics</t>

<t><spanx style="emph">SOTA</spanx>: Software Updates Over-the-Air</t>

<t><spanx style="emph">UDS</spanx>: Unified Diagnostic Services</t>

<t><spanx style="emph">VIN</spanx>: Vehicle Identification Number</t>

</section>
</section>
<section anchor="rationale-for-and-scope-of-uptane-standards" title="Rationale for and scope of Uptane Standards">

<t>This Standards document clarifies the essential components and best practices for the secure design, implementation and deployment of Uptane by OEMs and suppliers. These practices contribute to compromise resilience, or the ability to minimize the extent of the threat posed by any given attack.</t>

<t>However, this specification is intended as an implementation guide, and not as a detailed technical argument about the security properties that Uptane provides.  Readers interested in such documentation should refer to published papers that cover this topic.  <xref target="UPTANEESCAR"/></t>

<section anchor="why-uptane-requires-a-standards-document" title="Why Uptane requires a standards document">

<t>A standards document that can guide the safe design, integration and deployment of Uptane in vehicles is needed at this time because:</t>

<t><list style="symbols">
  <t>The number of connected units on the average vehicle continues to grow, with mainstream cars now containing up to 100 million lines of code. <xref target="USATODAY"/></t>
  <t>The expanded use of software over-the-air strategies creates new attack surfaces for malicious parties. <xref target="CR-OTA"/></t>
  <t>Legacy update strategies, such as SSL/TLS or GPG/RSA, are not feasible for use on vehicle ECUs because they force manufacturers to chose between enhanced security and customizability.</t>
  <t>Conventional strategies are also complicated by the differing resources of the ECUs, which can vary greatly in memory, storage space, and Internet connectivity.</t>
  <t>The design of Uptane makes it possible to offer improved design flexibility, without sacrificing security.</t>
  <t>This added design flexibility, however, could be a liability if the framework is implemented incorrectly.</t>
  <t>Standardization of crucial steps in the design, implementation and use of Uptane can assure that customizability does not impact security or functionality.</t>
</list></t>

</section>
<section anchor="scope-of-standards-coverage" title="Scope of Standards coverage">

<t>This document sets guidelines for implementing Uptane in most systems capable of updating software on connected units in ground vehicles, including passenger vehicles, light-duty trucks, heavy-duty trucks, and motorcycles. Uptane could potentially also be applied to other ground vehicles, such as automated shuttles, recreational vehicles, and military ground vehicles. Uptane could even be applied to domains such as IoT devices, medical devices, and unmanned aerial vehicles. In this section, we define the scope of that applicability by providing sample use cases and possible exceptions, aspects of software update security that are not applicable to Uptane, and the design requirements governing the preparation of these standards.</t>

<section anchor="assumptions" title="Assumptions">

<t>We assume the following system preconditions for Uptane:</t>

<t><list style="symbols">
  <t>Vehicles have the ability to establish connectivity to required backend services. For example, this could be done through cellular, Wi-Fi, or hard-wired mechanisms.</t>
  <t>ECUs are either directly connected to the communication channel, or are indirectly connected via some sort of network gateway.</t>
  <t>ECUs are programmable and provide sufficient performance to be updated.</t>
  <t>ECUs must be able to perform a public key cryptography operation as well as some supporting operations.</t>
  <t>There are state-of-the-art secure servers in place, such as the Director and Image repository servers.</t>
</list></t>

<t>It is important that any bugs detected in Uptane implementations be patched promptly. Failure to do so could interfere with the effectiveness of Uptane’s operations.</t>

</section>
<section anchor="use-cases" title="Use cases">

<t>The following use cases provide a number of scenarios illustrating the manner in which software updates could be accomplished using Uptane.</t>

<section anchor="oems-initializing-uptane-at-the-factory-using-sota" title="OEMs initializing Uptane at the factory using SOTA">

<t>An OEM plans to install Uptane on new vehicles. This entails the following components: code to perform full and partial verification, the latest copy of the relevant metadata, the public keys, and an accurate attestation of the latest time. The OEM then either requires its tier-1 suppliers to provide these materials to the suppliers’ assembly lines or can choose to add the materials later at the OEM’s assembly lines. The OEM’s implementation is Uptane-compliant if:</t>

<t><list style="numbers">
  <t>all primaries perform full verification;</t>
  <t>all secondaries that are updated via OTA perform full or partial verification; and</t>
  <t>all other ECUs that do not perform verification cannot be updated via OTA.</t>
</list></t>

</section>
<section anchor="updating-one-ecu-with-a-complete-image" title="Updating one ECU with a complete image">

<t>A tier-1 supplier completes work on a revised image for an electronic brake control module. This module will control the brakes on all models of an SUV produced by the OEM mentioned above. Assuming supplier delegation is supported by the OEM for this ECU, each tier-1 supplier digitally signs the image, then delivers the signature and all of its metadata, including delegations, and associated images to the OEM. The OEM adds these metadata and images to its image repository, along with information about any dependencies and conflicts between this image and those for other ECUs used in the OEM’s vehicles. The OEM also updates the inventory database, so that the director repository can instruct the ECU on how to install these updated images.</t>

</section>
<section anchor="updating-individual-ecus-on-demand" title="Updating individual ECUs on demand">

<t>An OEM has issued a recall to address a problem with a keyless entry device that has been locking people out of their cars. The OEM prepares an updated flash image in the manner described above. The OEM then ships USB flash drives to vehicle owners and dealerships that allow those parties to update the firmware of their vehicles.</t>

</section>
<section anchor="update-one-ecu-with-multiple-deltas" title="Update one ECU with multiple deltas">

<t>The OEM wants to use delta updates to save over-the-air bytes. The delta images contain only the code and/or data that has changed from the previous image version. To do so, the OEM must first modify the Director repository, using the vehicle version manifest and dependency resolution to determine the differences between the previous and latest images. The OEM then adds the following to the custom Targets metadata used by the Director repository: (1) the algorithm used to apply a delta image, and (2) the Targets metadata about the delta image. The OEM will also check whether the delta images match the Targets metadata from the Director repository.</t>

</section>
</section>
</section>
<section anchor="exceptions" title="Exceptions">

<t>There are a number of factors that could impede the completion of the above scenarios:</t>

<t><list style="symbols">
  <t>ECUs may be lacking the necessary resources to function as designated. These resources could include weaknesses, in terms of CPU or RAM, that render performance of public key cryptography infeasible; a lack of sufficient storage to undo installation of bad software; or an ECU simply may reside on a low-speed network (e.g., LIN).</t>
  <t>ECUs may reside on different network segments, and may not be able to directly reach each other, requiring a gateway to facilitate communication.</t>
  <t>A user may replace OEM-installed ECUs with aftermarket ECUs.</t>
  <t>A vehicle may be able to download only a limited amount of data via a cellular channel, due to limits on a data plan.</t>
  <t>A system may lack sufficient power to download or install software updates.</t>
  <t>Vehicles may be offline for extended periods of time, thus missing required updates (e.g., key rotations).</t>
  <t>OEMs may be unwilling to implement costly security or hardware requirements.</t>
</list></t>

</section>
<section anchor="out-of-scope" title="Out of Scope">

<t>The following topics will not be addressed in this document, as they represent threats outside the scope of Uptane:</t>

<t><list style="symbols">
  <t>Physical attacks, such as manual tampering with ECUs outside the vehicle.</t>
  <t>Compromise of the packaged software, such as malware embedded in a trusted package.</t>
  <t>Compromise of the supply chain (e.g., build system, version control system, packaging process). A number of strategies (e.g., git signing, TPMs, in-toto <xref target="IN-TOTO"/>)  already exist to address this problem. Therefore, there is no need to duplicate those techniques here.</t>
  <t>Problems associated with OBD or UDS programming of ECUs, such as authentication of communications between ECUs.</t>
  <t>Malicious mirrors of package repositories, which may substitute original packages with malicious packages with matching version numbers <xref target="MERCURY"/>.</t>
</list></t>

</section>
<section anchor="design-requirements" title="Design requirements">

<t>The design requirements for this document are governed by the following principal parameters:</t>

<t><list style="symbols">
  <t>to clearly mandate the design and implementation steps that are security critical and must be followed as is, while offering flexibility in the implementation of non-critical steps. In this manner, users can adapt to support different use models and deployment scenarios.</t>
  <t>to ensure that, if Uptane is implemented, the security practices mandated or suggested in this document do not interfere with the functionality of ECUs, vehicles, or the systems that maintain them.</t>
  <t>to delineate best practices to ensure that, should any part of the SOTA mechanism of a vehicle be attacked, an attacker must compromise two or more modules to breach the SOTA mechanism.</t>
</list></t>

</section>
</section>
<section anchor="threat-model-and-attack-strategies" title="Threat model and attack strategies">

<t>The overarching goal of Uptane is to provide a system that is resilient in the face of various types of compromise. In this section, we describe the goals an attacker may have (<xref target="attacker_goals"/>) and the capabilities they may have or could develop (<xref target="capabilities"/>). We then describe and classify types of attacks on the system according to the attacker’s goals (<xref target="threats"/>).</t>

<section anchor="attacker_goals" title="Attacker goals">

<t>We assume that attackers may want to achieve one or more of the following goals, in increasing order of severity:</t>

<t><list style="symbols">
  <t>Read the contents of updates to discover confidential information, reverse-engineer firmware, or compare two firmware images to identify security fixes and hence determine the fixed security vulnerability</t>
  <t>Deny installation of updates to prevent vehicles from fixing software problems</t>
  <t>Cause one or more ECUs in the vehicle to fail, denying use of the vehicle or of certain functions</t>
  <t>Control ECUs within the vehicle, and possibly the vehicle itself</t>
</list></t>

</section>
<section anchor="capabilities" title="Attacker capabilities">

<t>Uptane is designed with resilience to compromise in mind. We assume that attackers may develop one or more of the following capabilities:</t>

<t><list style="symbols">
  <t>Intercept and modify network traffic (i.e., perform man-in-the-middle attacks). This capability may be developed in two domains:
  <list style="symbols">
      <t>Outside the vehicle, intercepting and modifying traffic between the vehicle and software repositories</t>
      <t>Inside the vehicle, intercepting and modifying traffic on one or more vehicle buses (e.g. via an OBD port or using a compromised ECU as a vector)</t>
    </list></t>
  <t>Compromise and control either a Director repository or Image repository server, and any keys stored on that repository, but not both the Director and Image repositories.</t>
  <t>Compromise either a Primary ECU or a Secondary ECU, but not both in the same vehicle</t>
</list></t>

</section>
<section anchor="threats" title="Description of threats">

<t>Uptane’s threat model includes the following types of attacks, organized according to the attacker goals listed in <xref target="attacker_goals"/>.</t>

<section anchor="read_updates" title="Read updates">

<t><list style="symbols">
  <t><spanx style="emph">Eavesdrop attack:</spanx> Read sensitive or confidential information from an update intended to be encrypted for a specific ECU. (Note: Not all implementations will have a need for protecting information in this way.)</t>
</list></t>

</section>
<section anchor="deny_updates" title="Deny installation of updates">

<t>An attacker seeking to deny the installation of updates may attempt one or more of the following strategies, among others:</t>

<t><list style="symbols">
  <t><spanx style="emph">Drop-request attack:</spanx> Block network traffic outside or inside the vehicle.</t>
  <t><spanx style="emph">Slow retrieval attack:</spanx> Slow down network traffic, in the extreme case sending barely enough packets to avoid a timeout. Similar to a drop-request attack, except that both the sender and receiver of the traffic still think network traffic is unimpeded.</t>
  <t><spanx style="emph">Freeze attack:</spanx> Continue to send a properly signed, but old, update bundle to the ECUs, even if newer updates exist.</t>
  <t><spanx style="emph">Partial bundle installation attack:</spanx> Install a valid (signed) update bundle, and then block selected updates within the bundle.</t>
  <t>Conduct a denial of service attack against the Uptane repositories or infrastructure.</t>
</list></t>

</section>
<section anchor="change_functionality" title="Interfere with ECU functionality">

<t>Attackers seeking to interfere with the functionality of vehicle ECUs in order to cause an operational failure or unexpected behavior may do so in one of the following ways:</t>

<t><list style="symbols">
  <t><spanx style="emph">Rollback attack:</spanx> Cause an ECU to install a previously valid software revision that is older than the currently installed version.</t>
  <t><spanx style="emph">Endless data attack:</spanx> Send a large amount of data to an ECU, until it runs out of storage, possibly causing the ECU to fail to operate.</t>
  <t><spanx style="emph">Mix-and-match attack:</spanx> Install a malicious software bundle in which some of the updates do not interoperate properly. This may be accomplished even if all of the individual images being installed are valid, as long as valid versions exist that are mutually incompatible.</t>
</list></t>

</section>
<section anchor="control_ecu" title="Control an ECU or vehicle">

<t>Full control of a vehicle, or one or more ECUs within a vehicle, is the most severe threat.</t>

<t><list style="symbols">
  <t><spanx style="emph">Arbitrary software attack:</spanx> Cause an ECU to install and run arbitrary code of the attacker’s choice.</t>
</list></t>

</section>
</section>
</section>
<section anchor="design" title="Detailed design of Uptane">

<t>Uptane is a secure software update framework for automobiles. We do not specify implementation details. Instead, we describe the components necessary for a compliant implementation and leave it up to individual implementors to make their own technological choices within those requirements.</t>

<t>At a high level, Uptane requires:</t>

<t><list style="symbols">
  <t>Two software repositories:
  <list style="symbols">
      <t>An Image repository containing binary images to install, and signed metadata about those images</t>
      <t>A Director repository connected to an inventory database that can sign metadata on demand for images in the Image repository</t>
    </list></t>
  <t>Repository tools for generating Uptane-specific metadata about images</t>
  <t>A public key infrastructure supporting the required metadata production/signing roles on each repository:
  <list style="symbols">
      <t>Root - Certificate authority for the Uptane ecosystem. Distributes public keys for verifying all the other roles’ metadata</t>
      <t>Timestamp - Indicates whether there are new metadata or images</t>
      <t>Snapshot - Indicates images released by the repository at a point in time, via signing metadata about targets metadata</t>
      <t>Targets - Indicates metadata about images, such as hashes and file sizes</t>
    </list></t>
  <t>A secure way for ECUs to know the time.</t>
  <t>An ECU capable of downloading images and associated metadata from the Uptane servers.</t>
  <t>An in-vehicle client on a Primary ECU capable of verifying the signatures on all update metadata and downloading updates on behalf of its associated Secondary ECUs. The primary ECU MAY be the same ECU that communicates with the server.</t>
  <t>A client or library on each Secondary ECU capable of performing either full or partial verification of metadata</t>
</list></t>

<section anchor="roles" title="Roles on repositories">

<t>A repository contains images and metadata. Each role has a particular type of metadata associated with it, as described in <xref target="meta_structures"/>.</t>

<section anchor="root_role" title="The Root role">

<t>A repository’s Root role SHALL be responsible for a Certificate Authority as defined in <xref target="RFC3647"/>.
A repository’s Root role SHALL produce and sign Root metadata as described in <xref target="root_meta"/>.
A repository’s Root role SHALL sign the public keys used to verify the metadata produced by the Timestamp, Snapshot, and Targets roles.
A repository’s Root role SHALL revoke keys for the other roles, in case of compromise.</t>

</section>
<section anchor="targets_role" title="The Targets role">

<t>A repository’s Targets role SHALL produce and sign metadata about images and delegations as described in <xref target="targets_meta"/>.</t>

<section anchor="targets_role_delegations" title="Delegations">

<t>The Targets role on the Image repository MAY delegate the responsibility of signing metadata to other, custom-defined roles referred to as delegated targets. If it does, it MUST do so as specified in <xref target="delegations_meta"/>.</t>

<t>Responsibility for signing images or a subset of images MAY be delegated to more than one role and therefore it is possible for two different roles to be trusted for signing a particular image. For this reason, delegations MUST be prioritized.</t>

<t>A particular delegation for a subset of images MAY be designated as <spanx style="strong">terminating</spanx>. For terminating delegations, the client SHALL NOT search any further if it does not find validly signed metadata about those images. Delegations SHOULD NOT be terminating by default; terminating delegations SHOULD only be used when there is a compelling technical reason to do so.</t>

<t>A delegation for a subset of images MAY be a multi-role delegation <xref target="TAP-3"/>. A multi-role delegation indicates that multiple roles are needed to sign a particular image and each of the delegatee roles MUST sign the same metadata.</t>

<t>Delegations only apply to the Image repository. The Targets role on the Director repository MUST NOT delegate metadata signing responsibility.</t>

</section>
</section>
<section anchor="snapshot_role" title="The Snapshot role">

<t>A repository’s Snapshot role SHALL produce and sign metadata about all Targets metadata the repository releases, including the current version number of the top-level Targets metadata, and the version numbers of all delegated Targets metadata, as described in <xref target="snapshot_meta"/>.</t>

</section>
<section anchor="timestamp_role" title="The Timestamp role">

<t>A repository’s Timestamp role SHALL produce and sign metadata indicating whether there are new metadata or images on the repository. It MUST do so by signing the metadata about the Snapshot metadata file.</t>

</section>
</section>
<section anchor="meta_structures" title="Metadata structures">

<t>Uptane’s security guarantees all rely on properly created metadata that follows a designated structure. The Uptane standard <spanx style="strong">does not</spanx> mandate any particular format or encoding for the metadata as a whole. ASN.1 (with any encoding scheme like BER, DER, XER, etc.), JSON, XML, or any other encoding format that is capable of providing the required structure MAY be used.</t>

<t>However, string comparison is required as part of metadata verification. To ensure an accurate basis for comparing strings, all strings MUST be encoded in the Unicode Format for Network Interchange as defined in <xref target="RFC5198"/>, including normalization into Unicode Normalization Form C (<xref target="NFC"/>).</t>

<t>In the Deployment Considerations document (<xref target="DEPLOY"/>), the Uptane Alliance provides some examples of compliant metadata structures in ASN.1 and JSON.</t>

<section anchor="common_metadata" title="Common metadata structures">

<t>Every public key MUST be represented using a public key identifier.  A public key identifier is EITHER all of the following:</t>

<t><list style="symbols">
  <t>The value of the public key itself (which MAY be, for example, formatted as a PEM string)</t>
  <t>The public key cryptographic algorithm used by the key (such as RSA or ECDSA)</t>
  <t>The particular scheme used to verify the signature (such as <spanx style="verb">rsassa-pss-sha256</spanx> or <spanx style="verb">ecdsa-sha2-nistp256</spanx>)</t>
</list></t>

<t>OR a secure hash over at least the above components (such as the keyid mechanism in TUF).</t>

<t>All four Uptane roles (Root, Targets, Snapshot, and Timestamp) share a common structure. They SHALL contain the following two attributes:</t>

<t><list style="symbols">
  <t>A payload of metadata to be signed</t>
  <t>An attribute containing the signature(s) of the payload, where each entry specifies:
  <list style="symbols">
      <t>The public key identifier of the key being used to sign the payload</t>
      <t>A signature with this key over the payload</t>
    </list></t>
</list></t>

<t>The payload differs depending on the role. However, the payload for all roles shares a common structure. It SHALL contain the following four attributes:</t>

<t><list style="symbols">
  <t>An indicator of the type of role (Root, Targets, Snapshot, or Timestamp)</t>
  <t>An expiration date and time</t>
  <t>An integer version number, which SHOULD be incremented each time the metadata file is updated</t>
  <t>The role-specific metadata for the role indicated</t>
</list></t>

<t>The following sections describe the role-specific metadata. All roles SHALL follow the common structures described here.</t>

</section>
<section anchor="root_meta" title="Root metadata">

<t>A repository’s Root metadata distributes the public keys of the top-level Root, Targets, Snapshot, and Timestamp roles, as well as revocations of those keys. It SHALL contain two attributes:</t>

<t><list style="symbols">
  <t>A representation of the public keys for all four roles. Each key SHALL have a unique public key identifier.</t>
  <t>An attribute mapping each role to (1) its public key(s), and (2) the threshold of signatures required for that role</t>
</list></t>

<t>Additionally, it MAY contain a mapping of roles to a list of valid URLs from which the role metadata can be downloaded.  If this mapping of URLs is used, the implementer SHOULD implement this functionality following <xref target="TAP-5"/> to avoid adding unforeseen security risks.</t>

</section>
<section anchor="targets_meta" title="Targets metadata">

<t>The Targets metadata on a repository contains all of the information about images to be installed on ECUs. This includes filenames, hashes, file sizes, and MAY also include other useful information about images, such as what types of hardware are compatible with a particular image.</t>

<t>Targets metadata can also contain metadata about delegations, allowing one Targets role to delegate its authority to another. This means that an individual Targets metadata file might contain only metadata about delegations, only metadata about images, or some combination of the two. The details of how ECUs traverse the delegation tree to find valid metadata about images is specified in <xref target="resolve_delegations"/>.</t>

<section anchor="targets_images_meta" title="Metadata about images">

<t>To be available to install on clients, all images on the repository MUST have their metadata listed in a Targets role.  Each Targets role MAY provide a list of some images on the repository.  This list MUST provide, at a minimum, the following information about each image:</t>

<t><list style="symbols">
  <t>The image filename</t>
  <t>The size of the image in bytes</t>
  <t>One or more hashes of the image file, along with the hashing function used</t>
</list></t>

<section anchor="custom-metadata-about-images" title="Custom metadata about images">

<t>In addition to the required metadata, Targets metadata files MAY contain extra metadata for images on the repository. This metadata can be customized for a particular use case. Examples of use cases for different types of custom metadata can be found in the Deployment Considerations document (<xref target="DEPLOY"/>). However, there are a few important pieces of custom metadata that SHOULD be present in most implementations. In addition, there is one element in the custom metadata that MUST be present in the Targets metadata from the Director.</t>

<t>Custom metadata MAY also contain a demarcated field or section that MUST match whenever two pieces of metadata are checked against each other, such as when Targets metadata from the Director repository is checked against Targets metadata from the Image repository.</t>

<t>The information listed below SHOULD be provided for each image on both the Image repository and the Director repository. If a “MUST match section” is to be implemented, that is where this information SHOULD be placed.</t>

<t><list style="symbols">
  <t>A release counter, to be incremented each time a new version of the image is released. This can be used to prevent rollback attacks even in cases where the Director repository is compromised.</t>
  <t>A hardware identifier, or list of hardware identifiers, representing models of ECUs with which the image is compatible. This can be used to ensure that an ECU cannot be ordered to install an incompatible image, even in cases where the Director repository is compromised.</t>
</list></t>

<t>The following information is CONDITIONALLY REQUIRED for each image on the Director repository IF that image is encrypted:</t>

<t><list style="symbols">
  <t>Information about filenames, hashes, and file size of the encrypted image.</t>
  <t>Information about the encryption method, and other relevant information–for example, a symmetric encryption key encrypted by the ECU’s asymmetric key could be included in the Director repository metadata.</t>
</list></t>

<t>The following information MUST be provided for each image in the Targets metadata from the Director repository:</t>

<t><list style="symbols">
  <t>An ECU identifier (such as a serial number), specifying the ECU that should install the image.</t>
</list></t>

<t>The Director repository MAY provide a download URL for the image file. This may be useful, for example, when the image is on a public CDN and the director wishes to provide a signed URL.</t>

</section>
</section>
<section anchor="delegations_meta" title="Metadata about delegations">

<t>A Targets metadata file on the Image repository (but not the Director repository) MUST be able to delegate signing authority to other entities. For example, it could delegate signing authority for a particular ECU’s firmware to that ECU’s supplier. A metadata file MAY contain any number of delegations and MUST keep the delegations in prioritized order.</t>

<t>A list of delegations MUST provide the following information:</t>

<t><list style="symbols">
  <t>A list of public keys of all delegatees. Each key should have a unique public key identifier and a key type.</t>
  <t>A list of delegations, each of which contains:
  <list style="symbols">
      <t>A list of the filenames to which this role applies. This MAY be expressed using wildcards, or by enumerating a list, or a combination of the two.</t>
      <t>An optional list of the hardware identifiers to which this role applies.  If this is omitted, any hardware identifier will match.</t>
      <t>An indicator of whether or not this is a terminating delegation. (See <xref target="targets_role_delegations"/>.)</t>
      <t>A list of the roles to which this delegation applies. Each role needs to specify:
      <list style="symbols">
          <t>A name for the role (e.g. “supplier1-qa”)</t>
          <t>The key identifiers for each key this role uses</t>
          <t>A threshold of keys that must sign for this role</t>
        </list></t>
    </list></t>
</list></t>

<t>Note that <spanx style="strong">any</spanx> Targets metadata file stored on the Image repository may contain delegations, and these delegations can be in chains of arbitrary length.</t>

</section>
</section>
<section anchor="snapshot_meta" title="Snapshot metadata">

<t>The Snapshot metadata lists version numbers and filenames of all Targets metadata files. It protects against mix-and-match attacks if a delegated supplier key is compromised.</t>

<t>For each Targets metadata file on the repository, the Snapshot metadata SHALL contain the following information:</t>

<t><list style="symbols">
  <t>The filename and version number of the each Targets metadata file on the repository</t>
</list></t>

<t>The Snapshot metadata MAY also list the Root metadata filename and version number. This is not required, particularly for implementations of <xref target="TAP-5"/>, but MAY be included in all cases for backward compatibility.</t>

</section>
<section anchor="timestamp_meta" title="Timestamp metadata">

<t>The Timestamp metadata SHALL contain the following information:</t>

<t><list style="symbols">
  <t>The filename and version number of the latest Snapshot metadata on the repository.</t>
  <t>One or more hashes of the Snapshot metadata file, along with the hashing function used.</t>
</list></t>

</section>
<section anchor="repo_mapping_meta" title="Repository mapping metadata">

<t>As described in the introduction to <xref target="design"/>, Uptane requires a Director repository and an Image repository. However, it is possible to have an Uptane-compliant implementation that has more than two repositories.</t>

<t>Repository mapping metadata informs a Primary ECU about which repositories to trust for images or image paths. <xref target="TAP-4"/> describes how to make use of more complex repository mapping metadata in order to have more than the two required repositories.</t>

<t>Repository mapping metadata, or the equivalent informational content, MUST be present on all Primary ECUs, and MUST contain the following information:</t>

<t><list style="symbols">
  <t>A list of repository names and one or more URLs at which the named repository can be accessed. At a minimum, this MUST include the Director and Image repositories.</t>
  <t>A list of mappings of image paths to repositories, each of which contains:
  <list style="symbols">
      <t>A list of image paths. Image paths MAY be expressed using wildcards, or by enumerating a list, or a combination of the two.</t>
      <t>A list of repositories that MUST sign the Targets metadata for the image paths.</t>
    </list></t>
</list></t>

<t>For example, in the most basic Uptane case, the repository mapping metadata would contain:</t>

<t><list style="symbols">
  <t>The name and URL of the Director repository</t>
  <t>The name and URL of the Image repository</t>
  <t>A single mapping indicating that all images (<spanx style="verb">*</spanx>) MUST be signed by both the Director and Image repository</t>
</list></t>

<t>Note that the metadata need not be in the form of a metadata file. For example, in the basic case where there is only one Director and one Image repository, and all images need to have signed metadata from both repositories, it would be sufficient to have a configuration file with URLs for the two repositories, and a client that always checks for metadata matches between them. In this case, no explicit mapping would be defined, because the mapping is defined as part of the Uptane client implementation.</t>

<t>The <spanx style="emph">Uptane Deployment Considerations</spanx> document (<xref target="DEPLOY"/>) gives more guidance on how to implement repository mapping metadata for more complex use cases. It also discusses strategies for updating repository mapping metadata, if required.</t>

</section>
<section anchor="metadata_filename_rules" title="Rules for filenames in repositories and metadata">

<t>There is a difference between the file name in a metadata file or an ECU, and the file name on a repository. This difference exists in order to avoid race conditions, where metadata and images are read from, and written to, at the same time. For more details, the reader should read the TUF specification <xref target="TUF-spec"/> and PEP 458 <xref target="PEP-458"/>.</t>

<t>Unless stated otherwise, all files SHALL be written to repositories in accordance with the following two rules:</t>

<t><list style="numbers">
  <t>Metadata filenames SHALL be qualified with version numbers. If a metadata file A is specified as FILENAME.EXT in another metadata file B, then it SHALL be written as VERSION.FILENAME.EXT, where VERSION is A’s version number, as defined in <xref target="common_metadata"/>, with one exception: If the version number of the Timestamp metadata file might not be known in advance by a client, it MAY be read from, and written to, a repository using a filename without a version number qualification, i.e. FILENAME.EXT.</t>
  <t>If an image is specified in a Targets metadata file as FILENAME.EXT, it SHALL be written to the repository as HASH.FILENAME.EXT, where HASH is one of the hash digests of the file, as specified in <xref target="targets_images_meta"/>. The file MUST be written to the repository using <spanx style="emph">n</spanx> different filenames, one for each hash digest listed in its corresponding Targets metadata.</t>
</list></t>

<t>For example:</t>

<t><list style="symbols">
  <t>The version number of the Snapshot metadata file is 61, and its filename in the Timestamp metadata is “snapshot.json”. The filename on the repository will be “61.snapshot.json”.</t>
  <t>There is an image with the filename “acme_firmware.bin” specified in the Targets metadata, with a SHA256 of “aaaa” and a SHA512-256 of “bbbb”. It will have two filenames on the repository: “aaaa.acme_firmware.bin” and “bbbb.acme_firmware.bin”.</t>
</list></t>

</section>
</section>
<section anchor="server-repository-implementation-requirements" title="Server / repository implementation requirements">

<t>An Uptane implementation SHALL make the following services available to vehicles:</t>

<t><list style="symbols">
  <t>Image repository</t>
  <t>Director repository</t>
</list></t>

<t>Additionally, an Uptane implementation requires ECUs to have a secure way to know the current time.</t>

<section anchor="image-repository" title="Image repository">

<t>The Image repository exists to allow an OEM and/or its suppliers to upload images and their associated metadata. It makes these images and their metadata available to vehicles. The Image repository is designed to be primarily controlled by human actors, and updated relatively infrequently.</t>

<t>The Image repository SHALL expose an interface permitting the download of metadata and images. This interface SHOULD be public.</t>

<t>The Image repository SHALL require authorization for writing metadata and images.</t>

<t>The Image repository SHALL provide a method for authorized users to upload images and their associated metadata. It SHALL check that a user writing metadata and images is authorized to do so for that specific image by checking the chain of delegations as described in <xref target="delegations_meta"/>.</t>

<t>The Image repository SHALL implement storage which permits authorized users to write an image file using a unique filename, and later read the same file using the same name. It MAY use any filesystem, key-value store, or database that fulfills this requirement.</t>

<t>The Image repository MAY require authentication for read access.</t>

</section>
<section anchor="director_repository" title="Director repository">

<t>The Director repository instructs ECUs as to which images should be installed by producing signed metadata on demand. Unlike the Image repository, it is mostly controlled by automated, online processes. It also consults a private inventory database containing information on vehicles, ECUs, and software revisions.</t>

<t>The Director repository SHALL expose an interface for primaries to upload vehicle version manifests (<xref target="vehicle_version_manifest"/>) and download metadata. This interface SHOULD be public.
The Director MAY encrypt images for ECUs that require them, either by encrypting on-the-fly or by storing encrypted images in the repository.</t>

<t>The Director repository SHALL implement storage which permits an automated service to write generated metadata files. It MAY use any filesystem, key-value store, or database that fulfills this requirement.</t>

<section anchor="directing-installation-of-images-on-vehicles" title="Directing installation of images on vehicles">

<t>A Director repository MUST conform to the following six-step process for directing the installation of software images on a vehicle.</t>

<t><list style="numbers">
  <t>The Director SHOULD first identify the vehicle. This MAY be done when the Director receives a vehicle version manifest sent by a Primary (as described in <xref target="construct_manifest_primary"/>), decodes the manifest, and determines the unique vehicle identifier. Additionally, the Director MAY utilize other mechanisms to uniquely identify a vehicle (e.g., 2-way TLS with unique client certificates).</t>
  <t>Using the vehicle identifier, the Director queries its inventory database (as described in <xref target="inventory_db"/>) for relevant information about each ECU in the vehicle.</t>
  <t>The Director SHALL check the manifest for accuracy compared to the information in the inventory database. If any of the required checks fail, the Director MAY drop the request. An implementer MAY make additional checks if desired. At a minimum, the Director SHALL check the following:
  <list style="symbols">
      <t>Each ECU recorded in the inventory database is also represented in the manifest.</t>
      <t>The signature of the manifest matches the ECU key of the Primary that sent it.</t>
      <t>The signature of each Secondary’s contribution to the manifest matches the ECU key of that Secondary.</t>
    </list></t>
  <t>The Director SHOULD check that the nonce or counter in each ECU Version Report has not been used before to prevent a replay of the ECU Version Report. If the nonce or counter is reused the Director SHOULD drop the request.</t>
  <t>The Director extracts information about currently installed images from the vehicle version manifest. Using this information, it determines if the vehicle is already up-to-date, and if not, determines a set of images that should be installed. The exact process by which this determination takes place is out of scope of this standard. However, the Director MUST take into account <spanx style="emph">dependencies</spanx> and <spanx style="emph">conflicts</spanx> between images and SHOULD consult well-established techniques for dependency resolution.</t>
  <t>The Director MAY encrypt images for ECUs that require it.</t>
  <t>The Director generates new metadata representing the desired set of images to be installed on the vehicle, based on the dependency resolution in step 4. This includes Targets (<xref target="targets_meta"/>), Snapshot (<xref target="snapshot_meta"/>), and Timestamp (<xref target="timestamp_meta"/>) metadata. It then sends this metadata to the Primary as described in <xref target="download_meta_primary"/>.</t>
</list></t>

</section>
<section anchor="inventory_db" title="Inventory Database">

<t>The Director SHALL use a private inventory database to store information about ECUs and vehicles. An implementor MAY use any durable database for this purpose.</t>

<t>The inventory database MUST record the following pieces of information:</t>

<t><list style="symbols">
  <t>Per vehicle:
  <list style="symbols">
      <t>A unique identifier (such as a VIN)</t>
    </list></t>
  <t>Per ECU:
  <list style="symbols">
      <t>A unique identifier (such as a serial number)</t>
      <t>The vehicle identifier the ECU is associated with</t>
      <t>An ECU key (symmetric or asymmetric; for asymmetric keys, only the public part SHOULD be stored)</t>
      <t>The ECU key identifier (as defined in <xref target="common_metadata"/>)</t>
      <t>Whether the ECU is a Primary or a Secondary</t>
    </list></t>
</list></t>

<t>The inventory database MAY record other information about ECUs and vehicles. It SHOULD record a hardware identifier for each ECU to protect against the possibility of directing the ECU to install incompatible firmware.</t>

</section>
</section>
</section>
<section anchor="in-vehicle-implementation-requirements" title="In-vehicle implementation requirements">

<t>An Uptane-compliant ECU SHALL be able to download and verify Image metadata and image binaries before installing a new image and MUST have a secure way of verifying the current time, or a sufficiently recent attestation of the time.</t>

<t>Each ECU in a vehicle receiving over-the-air updates is either a Primary or a Secondary ECU. A Primary ECU collects and delivers vehicle manifests to the Director (<xref target="vehicle_version_manifest"/>) that contain information about which images have been installed on ECUs in the vehicle. It also verifies the time and downloads and verifies the latest metadata and images for itself and for its secondaries. A Secondary ECU verifies the time, and downloads and verifies the latest metadata and images for itself from its associated Primary ECU. It also sends signed information about its installed images to its associated Primary.</t>

<t>All ECUs MUST verify image metadata as specified in <xref target="metadata_verification"/> before installing an image or making it available to other ECUs. A Primary ECU MUST perform full verification (<xref target="full_verification"/>). A Secondary ECU SHOULD perform full verification if possible. If a Secondary cannot perform full verification, it SHALL perform partial verification. See the Uptane Deployment Considerations (<xref target="DEPLOY"/>) for a discussion of how to choose between partial and full verification.</t>

<t>ECUs MUST have a secure source of time. An OEM/Uptane implementor MAY use any external source of time that is demonstrably secure. The Uptane Deployment Considerations (<xref target="DEPLOY"/>) describe one way to implement an external time server to cryptographically attest time, as well as the security properties required. When “loading time” is referenced in procedures in this standard, it should be understood to mean loading into memory the current time (if the ECU has its own secure clock), or the most recent attested time.</t>

<section anchor="build-time-prerequisite-requirements-for-ecus" title="Build-time prerequisite requirements for ECUs">

<t>For an ECU to be capable of receiving Uptane-secured updates, it MUST have the following data provisioned at the time it is manufactured or installed in the vehicle:</t>

<t><list style="numbers">
  <t>A sufficiently recent copy of required Uptane metadata at the time of manufacture or install. See the Uptane Deployment Considerations (<xref target="DEPLOY"/>) for more information.
  <list style="symbols">
      <t>Partial verification ECUs MUST have the Root and Targets metadata from the Director repository.</t>
      <t>Full verification ECUs MUST have a complete set of metadata (Root, Targets, Snapshot, and Timestamp) from both repositories, as well as the repository mapping metadata (<xref target="repo_mapping_meta"/>).</t>
    </list></t>
  <t>The current time, or a secure attestation of a sufficiently recent time.</t>
  <t>An <spanx style="strong">ECU key</spanx>. This is a private key, unique to the ECU, used to sign ECU version manifests and decrypt images. An ECU key MAY be either a symmetric key or an asymmetric key. If it is an asymmetric key, there MAY be separate keys for encryption and signing. For the purposes of this standard, the set of private keys that an ECU uses is referred to as the ECU key (singular), even if it is actually multiple keys used for different purposes.</t>
</list></t>

</section>
<section anchor="what-the-primary-does" title="What the Primary does">

<t>A Primary downloads, verifies, and distributes the latest time, metadata and images. To do so, it SHALL perform the following seven steps:</t>

<t><list style="numbers">
  <t>Construct and send vehicle version manifest (<xref target="construct_manifest_primary"/>)</t>
  <t>Download and check current time (<xref target="check_time_primary"/>)</t>
  <t>Download and verify metadata (<xref target="download_meta_primary"/>)</t>
  <t>Download and verify images (<xref target="download_images_primary"/>)</t>
  <t>OPTIONAL: Send latest time to secondaries (<xref target="send_time_primary"/>)</t>
  <t>Send metadata to Secondaries (<xref target="send_metadata_primary"/>)</t>
  <t>Send images to Secondaries (<xref target="send_images_primary"/>)</t>
</list></t>

<t>Note that the subsequent sections concerning requirements for a Primary do not prohibit implementing Primary capabilities on an ECU that does not communicate directly with the Uptane repositories. This allows for implementations to have multiple ECUs within the vehicle performing functions equivalent to a Primary.
If multiple such Primaries are included within a vehicle, each Secondary ECU SHALL have a single Primary responsible for providing its updates.</t>

<section anchor="construct_manifest_primary" title="Construct and send vehicle version manifest">

<t>The Primary SHALL build a <spanx style="emph">vehicle version manifest</spanx> as described in <xref target="vehicle_version_manifest"/>.</t>

<t>Once the complete manifest is built, the Primary MAY send the manifest to the Director repository. However, it is not strictly required that the Primary send the manifest until step three. If permitted by the implementation, a Primary MAY send only a diff of the manifest to save bandwidth. If an implementation permits diffs, the Director SHOULD have a way to request a full manifest.</t>

<t>Secondaries MAY send their version report at any time so that it is already stored on the Primary when it wishes to check for updates. Alternatively, the Primary MAY request a version report from each Secondary at the time of the update check.</t>

<section anchor="vehicle_version_manifest" title="Vehicle version manifest">

<t>The vehicle version manifest is a metadata structure that MUST contain the following information:</t>

<t><list style="symbols">
  <t>An attribute containing the signature(s) of the payload, each specified by:
  <list style="symbols">
      <t>The public key identifier of the key being used to sign the payload</t>
      <t>The signing method (e.g. ed25519, rsassa-pss, etc.)</t>
      <t>A hash of the payload to be signed</t>
      <t>The hashing function used (e.g. sha256, sha512-224, etc.)</t>
      <t>The signature of the hash</t>
    </list></t>
  <t>A payload representing the installed versions of each software image on the vehicle. This payload SHALL contain:
  <list style="symbols">
      <t>The vehicle’s unique identifier (e.g. the VIN)</t>
      <t>The Primary ECU’s unique identifier (e.g. the serial number)</t>
      <t>A list of ECU version reports as specified in <xref target="version_report"/></t>
    </list></t>
</list></t>

<t>Note that one of the ECU version reports should be the version report for the Primary itself.</t>

</section>
<section anchor="version_report" title="ECU version report">

<t>An ECU version report is a metadata structure that MUST contain the following information:</t>

<t><list style="symbols">
  <t>An attribute containing the signature(s) of the payload, each specified by:
  <list style="symbols">
      <t>The public key identifier of the key being used to sign the payload</t>
      <t>The signing method (e.g. ed25519, rsassa-pss, etc.)</t>
      <t>A hash of the payload to be signed</t>
      <t>The hashing function used (e.g. sha256, sha512-224, etc.)</t>
      <t>The signature of the hash</t>
    </list></t>
  <t>A payload containing:
  <list style="symbols">
      <t>The ECU’s unique identifier (e.g. the serial number)</t>
      <t>The filename, length, and hashes of its currently installed image (i.e. the non-custom targets metadata for this particular image)</t>
      <t>An indicator of any detected security attack</t>
      <t>The latest time the ECU can verify at the time this version report was generated</t>
      <t>A nonce or counter to prevent a replay of the ECU version report. This value MUST change each update cycle and MAY be the cryptographic nonce used with a Time Server.</t>
    </list></t>
</list></t>

</section>
</section>
<section anchor="check_time_primary" title="Download and check current time">

<t>The Primary SHALL load the current time from a secure source.</t>

</section>
<section anchor="download_meta_primary" title="Download and verify metadata">

<t>The Primary SHALL download metadata for all targets and perform a full verification on it as specified in <xref target="full_verification"/>.</t>

</section>
<section anchor="download_images_primary" title="Download and verify images">

<t>The Primary SHALL download and verify images for itself and for all of its associated Secondaries. Images SHALL be verified by checking that the hash of the image file matches the hash specified in the Director’s Targets metadata for that image.</t>

<t>There may be several different filenames that all refer to the same image binary, as described in <xref target="metadata_filename_rules"/>. If the primary has received multiple hashes for a given image binary via targets role (see <xref target="targets_images_meta"/>) then it SHALL verify every hash for this image despite the fact that just one hash is enough to obtain the image itself.</t>

</section>
<section anchor="send_time_primary" title="Send latest time to Secondaries">

<t>Unless the Secondary ECU has its own way of verifying the time or does not have the capacity to verify a time message, the Primary is CONDITIONALLY REQUIRED to send the time to each ECU. The Secondary will verify the time message, then overwrite its current time with the received time.</t>

</section>
<section anchor="send_metadata_primary" title="Send metadata to Secondaries">

<t>The Primary SHALL send its latest downloaded metadata to all of its associated Secondaries. The metadata it sends to each Secondary MUST include all of the metadata required for verification on that Secondary. For full verification Secondaries, this includes the metadata for all four roles from both repositories, plus any delegated Targets metadata files the Secondary will recurse through to find the proper delegation. For partial verification Secondaries, this includes only the Targets metadata file from the Director repository.</t>

<t>The Primary SHOULD determine the minimal set of metadata files to send to each Secondary by performing delegation resolution as described in <xref target="full_verification"/>.</t>

<t>Each Secondary SHALL store the latest copy of all metadata required for its own verification.</t>

</section>
<section anchor="send_images_primary" title="Send images to Secondaries">

<t>The Primary SHALL send the latest image to each of its associated Secondaries that have storage to receive it.</t>

<t>For Secondaries without storage, the Primary SHOULD wait for a request from the Secondary to stream the new image file to it. The Secondary will send the request once it has verified the metadata sent in the previous step.</t>

</section>
</section>
<section anchor="installing-images-on-primary-or-secondary-ecus" title="Installing images on Primary or Secondary ECUs">

<t>An ECU SHALL perform the following steps when attempting to install a new image:</t>

<t><list style="numbers">
  <t>Verify latest attested time (<xref target="verify_time"/>)</t>
  <t>Verify metadata (<xref target="verify_metadata"/>)</t>
  <t>Download latest image (<xref target="download_image"/>)</t>
  <t>Verify image (<xref target="verify_image"/>)</t>
  <t>Install image (<xref target="install_image"/>)</t>
  <t>Create and send version report (<xref target="create_version_report"/>)</t>
</list></t>

<section anchor="verify_time" title="Load and verify the latest attested time">

<t>The ECU SHALL load and verify the current time, or the most recent securely attested time.</t>

</section>
<section anchor="verify_metadata" title="Verify metadata">

<t>The ECU SHALL verify the latest downloaded metadata (<xref target="metadata_verification"/>) using either full or partial verification. If the metadata verification fails for any reason, the ECU SHALL jump to the fifth step (<xref target="create_version_report"/>).</t>

</section>
<section anchor="download_image" title="Download latest image">

<t>If the ECU does not have secondary storage, i.e. buffer storage to temporarily store the latest image before installing it, it SHALL download the latest image from the Primary. (If the ECU has secondary storage, it will already have the latest image in its secondary storage as specified in <xref target="send_images_primary"/>, and should skip to the next step.) The ECU MAY first create a backup of its previous working image and store it elsewhere (e.g., the primary).</t>

<t>The filename used to identify the latest known image (i.e., the file to request from the Primary) SHALL be determined as follows:</t>

<t><list style="numbers">
  <t>Load the Targets metadata file from the Director repository.</t>
  <t>Find the Targets metadata associated with this ECU identifier.</t>
  <t>Construct the Image filename using the rule in <xref target="metadata_filename_rules"/>, or use the download URL specified in the Director metadata.</t>
  <t>If there is no Targets metadata about this image, abort the update cycle and report that there is no such image. Additionally, in the case of failure, the ECU SHALL retain its previous Targets metadata instead of using the new Targets metadata. Otherwise, download the image (up to the number of bytes specified in the Targets metadata), and verify that its hashes match the Targets metadata.</t>
</list></t>

<t>When the Primary responds to the download request, the ECU SHALL overwrite its current image with the downloaded image from the Primary.</t>

<t>If any part of this step fails, the ECU SHALL jump to the fifth step (<xref target="create_version_report"/>).</t>

</section>
<section anchor="verify_image" title="Verify image">

<t>The ECU SHALL verify that the latest image matches the latest metadata as follows:</t>

<t><list style="numbers">
  <t>Load the latest Targets metadata file from the Director.</t>
  <t>Find the Targets metadata associated with this ECU identifier.</t>
  <t>Check that the hardware identifier in the metadata matches the ECUs hardware identifier.</t>
  <t>Check that the image filename is valid for this ECU. This MAY be a comparison against a wildcard path, which restricts the ECUs to which a delegation will apply.</t>
  <t>Check that the release counter of the image in the previous metadata, if it exists, is less than or equal to the release counter in the latest metadata.</t>
  <t>If the image is encrypted, decrypt the image with a decryption key to be chosen as follows:
  <list style="symbols">
      <t>If the ECU key is a symmetric key, the ECU SHALL use the ECU key for image decryption.</t>
      <t>If the ECU key is asymmetric, the ECU SHALL check the Targets metadata for an encrypted symmetric key. If such a key is found, the ECU SHALL decrypt the symmetric key using its ECU key, and use the decrypted symmetric key for image decryption.</t>
      <t>If the ECU key is asymmetric and there is no symmetric key in the target metadata, the ECU SHALL use its ECU key for image decryption.</t>
    </list></t>
  <t>Check that the hash of the image matches the hash in the metadata.</t>
</list></t>

<t>If the ECU has secondary storage, the checks SHOULD be performed on the image in secondary storage before it is installed.</t>

<t>NOTE: See <xref target="DEPLOY"/> for guidance on how to deal with Secondary ECU failures for ECUs that do not have secondary storage.</t>

<t>If any step fails, the ECU SHALL jump to the (<xref target="create_version_report"/>) step.</t>

</section>
<section anchor="install_image" title="Install image">

<t>The ECU SHALL attempt to install the update. This installation SHOULD occur at a time when all pre-conditions are met. These pre-conditions MAY include ensuring the vehicle is in a safe environment for install (e.g., the vehicle is parked when updating a specific ECU). Another pre-condition MAY include ensuring the ECU has a backup of its current image and metadata in case the current installation fails.</t>

</section>
<section anchor="create_version_report" title="Create and send version report">

<t>The ECU SHALL create a version report as described in <xref target="version_report"/>, and send it to the Primary (or simply save it to disk, if the ECU is a Primary). The Primary SHOULD write the version reports it receives to disk and associate them with the Secondaries that sent them.</t>

</section>
</section>
<section anchor="metadata_verification" title="Metadata verification procedures">

<t>A Primary ECU MUST perform full verification of metadata. A Secondary ECU SHOULD perform full verification of metadata. If a Secondary cannot perform full verification, it SHALL perform partial verification instead.</t>

<t>If a step in the following workflows does not succeed (e.g., the update is aborted because a new metadata file was not signed), an ECU SHOULD still be able to update again in the future. Errors raised during the update process SHOULD NOT leave ECUs in an unrecoverable state.</t>

<section anchor="partial_verification" title="Partial verification">

<t>In order to perform partial verification, an ECU SHALL perform the following steps:</t>

<t><list style="numbers">
  <t>Load and verify the current time or the most recent securely attested time.</t>
  <t>Download and check the Targets metadata file from the Director repository, following the procedure in <xref target="check_targets"/>.</t>
</list></t>

</section>
<section anchor="full_verification" title="Full verification">

<t>Full verification of metadata means that the ECU checks that the Targets metadata about images from the Director repository matches the Targets metadata about the same images from the Image repository. This provides resilience to a key compromise in the system.</t>

<t>Full verification MAY be performed by either Primary or Secondary ECUs. In the following instructions, whenever an ECU is directed to download metadata, it applies only to Primary ECUs.</t>

<t>If <xref target="TAP-5"/> is supported and a Primary has an external connection to the Uptane repositories, a Primary ECU SHALL download metadata and images following the rules specified in that TAP.  If <xref target="TAP-5"/> is not supported, or if the Primary does not have an external connection to the Uptane repositories, the download SHOULD follow the <xref target="TUF-spec"/> and the metadata file renaming rules specified in <xref target="metadata_filename_rules"/>.</t>

<t>Before starting full verification, the repository mapping metadata MUST be consulted to determine where to download metadata from. This procedure assumes the basic Uptane case: there are only two repositories (Director and Image), and all image paths are required to be signed by both repositories. If a more complex repository layout is being used, refer to <xref target="DEPLOY"/> for guidance on how to determine where metadata should be downloaded from.</t>

<t>In order to perform full verification, an ECU SHALL perform the following steps:</t>

<t><list style="numbers">
  <t>Load and verify the current time or the most recent securely attested time.</t>
  <t>Download and check the Root metadata file from the Director repository, following the procedure in <xref target="check_root"/>.</t>
  <t>Download and check the Timestamp metadata file from the Director repository, following the procedure in <xref target="check_timestamp"/>.</t>
  <t>Download and check the Snapshot metadata file from the Director repository, following the procedure in <xref target="check_snapshot"/>.</t>
  <t>Download and check the Targets metadata file from the Director repository, following the procedure in <xref target="check_targets"/>.</t>
  <t>Download and check the Root metadata file from the Image repository, following the procedure in <xref target="check_root"/>.</t>
  <t>Download and check the Timestamp metadata file from the Image repository, following the procedure in <xref target="check_timestamp"/>.</t>
  <t>Download and check the Snapshot metadata file from the Image repository, following the procedure in <xref target="check_snapshot"/>.</t>
  <t>Download and check the top-level Targets metadata file from the Image repository, following the procedure in <xref target="check_targets"/>.</t>
  <t>Verify that Targets metadata from the Director and Image repositories match. A Primary ECU MUST perform this check on metadata for all images listed in the Targets metadata file from the Director repository downloaded in step 6. A Secondary ECU MAY elect to perform this check only on the metadata for the image it will install. (That is, the target metadata from the Director that contains the ECU identifier of the current ECU.) To check that the metadata for an image matches, complete the following procedure:
  <list style="numbers">
      <t>Locate and download a Targets metadata file from the Image repository that contains an image with exactly the same file name listed in the Director metadata, following the procedure in <xref target="resolve_delegations"/>.</t>
      <t>Check that the Targets metadata from the Image repository matches the Targets metadata from the Director repository:
      <list style="numbers">
          <t>Check that the non-custom metadata (i.e., length and hashes) of the unencrypted or encrypted image are the same in both sets of metadata. Note: the Primary is responsible for validating encrypted images and associated metadata. The target ECU (Primary or Secondary) is responsible for validating the unencrypted image and associated metadata.</t>
          <t>Check that all “MUST match” custom metadata (e.g., hardware identifier and release counter) are the same in both sets of metadata.</t>
          <t>Check that the release counter in the previous Targets metadata file is less than or equal to the release counter in this Targets metadata file.</t>
        </list></t>
    </list></t>
</list></t>

<t>If any step fails, the ECU MUST return an error code indicating the failure. If a check for a specific type of security attack fails (e.g. rollback, freeze, arbitrary software, etc.), the ECU SHOULD return an error code that indicates the type of attack.</t>

<t>If the ECU performing the verification is the Primary ECU, it SHOULD also ensure that the Targets metadata from the Director repository doesn’t contain any ECU identifiers for ECUs not actually present in the vehicle.</t>

</section>
<section anchor="check_root" title="How to check Root metadata">

<t>To properly check Root metadata, an ECU SHOULD:</t>

<t><list style="numbers">
  <t>Load the previous Root metadata file.</t>
  <t>Update to the latest Root metadata file.
  <list style="numbers">
      <t>Let N denote the version number of the latest Root metadata file (which at first could be the same as the previous root metadata file).</t>
      <t>Try downloading a new version N+1 of the Root metadata file, up to some X number of bytes. The value for X is set by the implementor. For example, X may be tens of kilobytes. The filename used to download the Root metadata file is of the fixed form VERSION_NUMBER.FILENAME.EXT (e.g., 42.root.json). If this file is not available, the current Root metadata file is the latest; continue with step 3.</t>
      <t>Version N+1 of the Root metadata file MUST have been signed by the following: (1) a threshold of keys specified in the latest Root metadata file (version N), and (2) a threshold of keys specified in the new Root metadata file being validated (version N+1). If version N+1 is not signed as required, discard it, abort the update cycle, and report the signature failure. On the next update cycle, begin at version N of the Root metadata file. (Checks for an arbitrary software attack.)</t>
      <t>The version number of the latest Root metadata file (version N) must be less than or equal to the version number of the new Root metadata file (version N+1). Effectively, this means checking that the version number signed in the new Root metadata file is indeed N+1. If the version of the new Root metadata file is less than the latest metadata file, discard it, abort the update cycle, and report the rollback attack. On the next update cycle, begin at step 1 and version N of the Root metadata file. (Checks for a rollback attack.)</t>
      <t>Set the latest Root metadata file to the new Root metadata file.</t>
      <t>Repeat steps 2.1 to 2.6.</t>
    </list></t>
  <t>Check that the current (or latest securely attested) time is lower than the expiration timestamp in the latest Root metadata file. (Checks for a freeze attack.)</t>
  <t>If the Timestamp and/or Snapshot keys have been rotated, delete the previous Timestamp and Snapshot metadata files. (Checks for recovery from fast-forward attacks <xref target="MERCURY"/>.)</t>
</list></t>

</section>
<section anchor="check_timestamp" title="How to check Timestamp metadata">

<t>To properly check Timestamp metadata, an ECU SHOULD:</t>

<t><list style="numbers">
  <t>Download up to Y number of bytes. The value for Y is set by the implementor. For example, Y may be tens of kilobytes. The filename used to download the Timestamp metadata file is of the fixed form FILENAME.EXT (e.g., timestamp.json).</t>
  <t>Check that it has been signed by the threshold of keys specified in the latest Root metadata file. If the new Timestamp metadata file is not properly signed, discard it, abort the update cycle, and report the signature failure. (Checks for an arbitrary software attack.)</t>
  <t>Check that the version number of the previous Timestamp metadata file, if any, is less than or equal to the version number of this Timestamp metadata file. If the new Timestamp metadata file is older than the trusted Timestamp metadata file, discard it, abort the update cycle, and report the potential rollback attack. (Checks for a rollback attack.)</t>
  <t>Check that the current (or latest securely attested) time is lower than the expiration timestamp in this Timestamp metadata file. If the new Timestamp metadata file has expired, discard it, abort the update cycle, and report the potential freeze attack. (Checks for a freeze attack.)</t>
</list></t>

</section>
<section anchor="check_snapshot" title="How to check Snapshot metadata">

<t>To properly check Snapshot metadata, an ECU SHOULD:</t>

<t><list style="numbers">
  <t>Download up to the number of bytes specified in the Timestamp metadata file, constructing the metadata filename as defined in <xref target="metadata_filename_rules"/>.</t>
  <t>The hashes and version number of the new Snapshot metadata file MUST match the hashes and version number listed in Timestamp metadata. If the hashes and version number do not match, discard the new Snapshot metadata, abort the update cycle, and report the failure. (Checks for a mix-and-match attack.)</t>
  <t>Check that it has been signed by the threshold of keys specified in the latest Root metadata file. If the new Snapshot metadata file is not signed as required, discard it, abort the update cycle, and report the signature failure. (Checks for an arbitrary software attack.)</t>
  <t>Check that the version number of the previous Snapshot metadata file, if any, is less than or equal to the version number of this Snapshot metadata file. If this Snapshot metadata file is older than the previous Snapshot metadata file, discard it, abort the update cycle, and report the potential rollback attack. (Checks for a rollback attack.)</t>
  <t>Check that the version number listed by the previous Snapshot metadata file for each Targets metadata file is less than or equal to its version number in this Snapshot metadata file. If this condition is not met, discard the new Snapshot metadata file, abort the update cycle, and report the failure. (Checks for a rollback attack.)</t>
  <t>Check that each Targets metadata filename listed in the previous Snapshot metadata file is also listed in this Snapshot metadata file. If this condition is not met, discard the new Snapshot metadata file, abort the update cycle, and report the failure. (Checks for a rollback attack.)</t>
  <t>Check that the current (or latest securely attested) time is lower than the expiration timestamp in this Snapshot metadata file. If the new Snapshot metadata file is expired, discard it, abort the update cycle, and report the potential freeze attack. (Checks for a freeze attack.)</t>
</list></t>

</section>
<section anchor="check_targets" title="How to check Targets metadata">

<t>To properly check Targets metadata, an ECU SHOULD:</t>

<t><list style="numbers">
  <t>Download up to Z number of bytes, constructing the metadata filename as defined in <xref target="metadata_filename_rules"/>. The value for Z is set by the implementor. For example, Z may be tens of kilobytes.</t>
  <t>The version number of the new Targets metadata file MUST match the version number listed in the latest Snapshot metadata. If the version number does not match, discard it, abort the update cycle, and report the failure. (Checks for a mix-and-match attack.) Skip this step if checking Targets metadata on a partial verification ECU; partial verification ECUs will not have Snapshot metadata.</t>
  <t>Check that the Targets metadata has been signed by the threshold of keys specified in the relevant metadata file (Checks for an arbitrary software attack):
  <list style="numbers">
      <t>If checking top-level Targets metadata, the threshold of keys is specified in the Root metadata.</t>
      <t>If checking delegated Targets metadata, the threshold of keys is specified in the Targets metadata file that delegated authority to this role.</t>
    </list></t>
  <t>Check that the version number of the previous Targets metadata file, if any, is less than or equal to the version number of this Targets metadata file. (Checks for a rollback attack.)</t>
  <t>Check that the current (or latest securely attested) time is lower than the expiration timestamp in this Targets metadata file. (Checks for a freeze attack.)</t>
  <t>If checking Targets metadata from the Director repository, verify that there are no delegations.</t>
  <t>If checking Targets metadata from the Director repository, check that no ECU identifier is represented more than once.</t>
</list></t>

</section>
<section anchor="resolve_delegations" title="How to resolve delegations">

<t>To properly check Targets metadata for an image, an ECU MUST locate the metadata file(s) for the role (or roles) that have the authority to sign the image. This metadata might be located in the top-level Targets metadata, but it also may be delegated to another role or to multiple roles. Therefore, all delegations MUST be resolved using the following recursive procedure, beginning with the top-level Targets metadata file.</t>

<t><list style="numbers">
  <t>Download the current metadata file, and check it following the procedure in <xref target="check_targets"/>. If the file cannot be loaded, or if any verification step fails, abort the delegation resolution, and indicate that Image metadata cannot be found because of a missing or invalid role.</t>
  <t>If the current metadata file contains signed metadata about the image, end the delegation resolution and return the metadata to be checked.</t>
  <t>If the current metadata file was reached via a terminating delegation and does not contain signed metadata about the image, abort the delegation resolution for this image and return an error indicating that image metadata could not be found.</t>
  <t>Search the list of delegations, in listed order. For each delegation:
  <list style="numbers">
      <t>Check if the delegation applies to the image being processed. For the delegation to apply, it MUST include the hardware identifier of the target, and the target name must match one of the delegation’s image paths. If either of these tests fail, move on to the next delegation in the list.</t>
      <t>If the delegation is a multi-role delegation, follow the procedure described in <xref target="multirole_delegations"/>. If the multi-role delegation is terminating and no valid Image metadata is found, abort the delegation resolution and return an error indicating that image metadata could not be found.</t>
      <t>If the delegation is a normal delegation, perform delegation resolution, starting at step 1. Note that this may recurse an arbitrary number of levels deep. If a delegation that applies to the image is found but no image metadata is found in the delegated roles or any of its sub-delegations, simply continue on with the next delegation in the list. The search is only completed/aborted if image metadata or a terminating delegation that applies to the image is found.</t>
    </list></t>
  <t>If the end of the list of delegations in the top-level metadata is reached without finding valid image metadata, return an error indicating that image metadata could not be found.</t>
</list></t>

</section>
<section anchor="multirole_delegations" title="Multi-role delegations">

<t>It is possible to delegate signing authority to multiple delegated roles as described in <xref target="TAP-3"/>. Each multi-role delegation effectively contains a list of ordinary delegations, plus a threshold of those roles that must be in agreement about the non-custom metadata for the image. All multi-role delegations MUST be resolved using the following procedure. Note that there may be sub-delegations inside multi-role delegations.</t>

<t><list style="numbers">
  <t>For each of the roles in the delegation, find and load the image metadata (or error) following the procedure in <xref target="resolve_delegations"/>.</t>
  <t>Inspect the non-custom part of the metadata loaded in step 1:
  <list style="numbers">
      <t>Locate all sets of roles which have agreeing (i.e. identical) non-custom metadata and “MUST match” custom metadata. Discard any set of roles with a size smaller than the threshold of roles that must be in agreement for this delegation.</t>
      <t>Check for a conflict. A conflict exists if there remains more than one agreeing set of roles, each set having different metadata. If a conflict is found, choose and return the metadata from the set of roles which includes the earliest role in the multi-delegation list.</t>
      <t>If there is no conflict, check if there is any single set of roles with matching non-custom metadata. If there is, choose and return the metadata from this set.</t>
      <t>If no agreeing set can be found that meets the agreement threshold, return an error indicating that image metadata could not be found.</t>
    </list></t>
</list></t>

</section>
</section>
</section>
</section>


  </middle>

  <back>

    <references title='Normative References'>





<reference  anchor="RFC2119" target='https://www.rfc-editor.org/info/rfc2119'>
<front>
<title>Key words for use in RFCs to Indicate Requirement Levels</title>
<author initials='S.' surname='Bradner' fullname='S. Bradner'><organization /></author>
<date year='1997' month='March' />
<abstract><t>In many standards track documents several words are used to signify the requirements in the specification.  These words are often capitalized. This document defines these words as they should be interpreted in IETF documents.  This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t></abstract>
</front>
<seriesInfo name='BCP' value='14'/>
<seriesInfo name='RFC' value='2119'/>
<seriesInfo name='DOI' value='10.17487/RFC2119'/>
</reference>



<reference  anchor="RFC3647" target='https://www.rfc-editor.org/info/rfc3647'>
<front>
<title>Internet X.509 Public Key Infrastructure Certificate Policy and Certification Practices Framework</title>
<author initials='S.' surname='Chokhani' fullname='S. Chokhani'><organization /></author>
<author initials='W.' surname='Ford' fullname='W. Ford'><organization /></author>
<author initials='R.' surname='Sabett' fullname='R. Sabett'><organization /></author>
<author initials='C.' surname='Merrill' fullname='C. Merrill'><organization /></author>
<author initials='S.' surname='Wu' fullname='S. Wu'><organization /></author>
<date year='2003' month='November' />
<abstract><t>This document presents a framework to assist the writers of certificate policies or certification practice statements for participants within public key infrastructures, such as certification authorities, policy authorities, and communities of interest that wish to rely on certificates.  In particular, the framework provides a comprehensive list of topics that potentially (at the writer's discretion) need to be covered in a certificate policy or a certification practice statement.  This document supersedes RFC 2527.</t></abstract>
</front>
<seriesInfo name='RFC' value='3647'/>
<seriesInfo name='DOI' value='10.17487/RFC3647'/>
</reference>



<reference  anchor="RFC5198" target='https://www.rfc-editor.org/info/rfc5198'>
<front>
<title>Unicode Format for Network Interchange</title>
<author initials='J.' surname='Klensin' fullname='J. Klensin'><organization /></author>
<author initials='M.' surname='Padlipsky' fullname='M. Padlipsky'><organization /></author>
<date year='2008' month='March' />
<abstract><t>The Internet today is in need of a standardized form for the transmission of internationalized &quot;text&quot; information, paralleling the specifications for the use of ASCII that date from the early days of the ARPANET.  This document specifies that format, using UTF-8 with normalization and specific line-ending sequences.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='5198'/>
<seriesInfo name='DOI' value='10.17487/RFC5198'/>
</reference>


<reference anchor="NFC" target="http://www.unicode.org/reports/tr15/">
  <front>
    <title>Unicode Standard Annex #15: Unicode Normalization Forms</title>
    <author initials="M." surname="Davis">
      <organization></organization>
    </author>
    <author initials="M." surname="Duerst">
      <organization></organization>
    </author>
    <date year="2018" month="October"/>
  </front>
</reference>
<reference anchor="TAP-3" target="https://github.com/theupdateframework/taps/blob/d0818e580c322815a473520f2e8cc5f5eb8df499/tap3.md">
  <front>
    <title>The Update Framework TAP 3 - Multi-role delegations</title>
    <author initials="T.K." surname="Kuppusamy">
      <organization></organization>
    </author>
    <author initials="S." surname="Awwad">
      <organization></organization>
    </author>
    <author initials="E." surname="Cordell">
      <organization></organization>
    </author>
    <author initials="V." surname="Diaz">
      <organization></organization>
    </author>
    <author initials="J." surname="Moshenko">
      <organization></organization>
    </author>
    <author initials="J." surname="Cappos">
      <organization></organization>
    </author>
    <date year="2018" month="January" day="18"/>
  </front>
</reference>
<reference anchor="TAP-4" target="https://github.com/theupdateframework/taps/blob/2cb67d913ec19424d1e354b38f862886fbfd4105/tap4.md">
  <front>
    <title>The Update Framework TAP 4 - Multiple repository consensus on entrusted targets</title>
    <author initials="T.K." surname="Kuppusamy">
      <organization></organization>
    </author>
    <author initials="S." surname="Awwad">
      <organization></organization>
    </author>
    <author initials="E." surname="Cordell">
      <organization></organization>
    </author>
    <author initials="V." surname="Diaz">
      <organization></organization>
    </author>
    <author initials="J." surname="Moshenko">
      <organization></organization>
    </author>
    <author initials="J." surname="Cappos">
      <organization></organization>
    </author>
    <date year="2017" month="December" day="15"/>
  </front>
</reference>
<reference anchor="TAP-5" target="https://github.com/theupdateframework/taps/blob/01726d203c9b9c029d26f6612069ce3180500d9a/tap5.md#downloading-metadata-and-target-files">
  <front>
    <title>The Update Framework TAP 5 - Setting URLs for roles in the root metadata file</title>
    <author initials="T.K." surname="Kuppusamy">
      <organization></organization>
    </author>
    <author initials="S." surname="Awwad">
      <organization></organization>
    </author>
    <author initials="E." surname="Cordell">
      <organization></organization>
    </author>
    <author initials="V." surname="Diaz">
      <organization></organization>
    </author>
    <author initials="J." surname="Moshenko">
      <organization></organization>
    </author>
    <author initials="J." surname="Cappos">
      <organization></organization>
    </author>
    <date year="2018" month="January" day="22"/>
  </front>
</reference>
<reference anchor="TUF-spec" target="https://github.com/theupdateframework/specification/blob/2b4e18472fe25d5b57f36f6fa50104967c8faeaa/tuf-spec.md">
  <front>
    <title>The Update Framework Specification</title>
    <author initials="J." surname="Samuel">
      <organization></organization>
    </author>
    <author initials="N." surname="Mathewson">
      <organization></organization>
    </author>
    <author initials="G." surname="Condra">
      <organization></organization>
    </author>
    <author initials="V." surname="Diaz">
      <organization></organization>
    </author>
    <author initials="T.K." surname="Kuppusamy">
      <organization></organization>
    </author>
    <author initials="S." surname="Awwad">
      <organization></organization>
    </author>
    <author initials="S." surname="Tobias">
      <organization></organization>
    </author>
    <author initials="J." surname="Wright">
      <organization></organization>
    </author>
    <author initials="H." surname="Mehnert">
      <organization></organization>
    </author>
    <author initials="E." surname="Tryzelaar">
      <organization></organization>
    </author>
    <author initials="J." surname="Cappos">
      <organization></organization>
    </author>
    <author initials="R." surname="Dingledine">
      <organization></organization>
    </author>
    <date year="2018" month="September" day="19"/>
  </front>
</reference>


    </references>

    <references title='Informative References'>

<reference anchor="MERCURY" target="https://www.usenix.org/system/files/conference/atc17/atc17-kuppusamy.pdf">
  <front>
    <title>Mercury: Bandwidth-Effective Prevention of Rollback Attacks Against Community Repositories</title>
    <author initials="T.K." surname="Kuppusamy">
      <organization></organization>
    </author>
    <author initials="V." surname="Diaz">
      <organization></organization>
    </author>
    <author initials="J." surname="Cappos">
      <organization></organization>
    </author>
    <date year="2017" month="July" day="12"/>
  </front>
  <seriesInfo name="ISBN" value="978-1-931971-38-6"/>
</reference>
<reference anchor="UPTANEESCAR" target="https://ssl.engineering.nyu.edu/papers/kuppusamy_escar_16.pdf">
  <front>
    <title>Securing Software Updates for Automobiles</title>
    <author initials="T.K." surname="Kuppusamy">
      <organization></organization>
    </author>
    <author initials="A." surname="Brown">
      <organization></organization>
    </author>
    <author initials="S." surname="Awwad">
      <organization></organization>
    </author>
    <author initials="D." surname="McCoy">
      <organization></organization>
    </author>
    <author initials="R." surname="Bielawski">
      <organization></organization>
    </author>
    <author initials="C." surname="Mott">
      <organization></organization>
    </author>
    <author initials="S." surname="Lauzon">
      <organization></organization>
    </author>
    <author initials="A." surname="Weimerskirch">
      <organization></organization>
    </author>
    <author initials="J." surname="Cappos">
      <organization></organization>
    </author>
    <date year="2016" month="October" day="16"/>
  </front>
</reference>
<reference anchor="PEP-458" target="https://www.python.org/dev/peps/pep-0458/">
  <front>
    <title>PEP 458 -- Surviving a Compromise of PyPI</title>
    <author initials="T.K." surname="Kuppusamy">
      <organization></organization>
    </author>
    <author initials="V." surname="Diaz">
      <organization></organization>
    </author>
    <author initials="D." surname="Stufft">
      <organization></organization>
    </author>
    <author initials="J." surname="Cappos">
      <organization></organization>
    </author>
    <date year="2013" month="September" day="27"/>
  </front>
</reference>
<reference anchor="DEPLOY" target="https://docs.google.com/document/d/17wOs-T7mugwte5_Dt-KLGMsp-3_yAARejpFmrAMefSE/">
  <front>
    <title>Uptane Deployment Considerations</title>
    <author initials="." surname="Members of the Uptane Alliance Community">
      <organization></organization>
    </author>
    <date year="n.d."/>
  </front>
</reference>
<reference anchor="USATODAY" target="https://www.usatoday.com/story/tech/columnist/2016/06/28/your-average-car-lot-more-code-driven-than-you-think/86437052/">
  <front>
    <title>Your average car is a lot more code-driven than you think</title>
    <author initials="B." surname="O'Donnell">
      <organization></organization>
    </author>
    <date year="2016" month="June" day="28"/>
  </front>
</reference>
<reference anchor="CR-OTA" target="https://www.consumerreports.org/automotive-technology/automakers-embrace-over-the-air-updates-can-we-trust-digital-car-repair/">
  <front>
    <title>Automakers Embrace Over-the-Air Updates, but Can We Trust Digital Car Repair?</title>
    <author initials="K." surname="Barry">
      <organization></organization>
    </author>
    <date year="2018" month="April" day="20"/>
  </front>
</reference>
<reference anchor="IN-TOTO" target="https://in-toto.github.io/">
  <front>
    <title>in-toto: A framework to secure the integrity of software supply chains</title>
    <author >
      <organization></organization>
    </author>
    <date year="2018" month="October" day="29"/>
  </front>
</reference>


    </references>



  </back>

<!-- ##markdown-source:
H4sIANka5l0AA+1923LUWLbgu79CAQ9lezLT2GAKqIcZg02XTwNmsKnqOhMT
tDJTaavJlLIlpU0WQcT5kJmfO18y674vktIGqs7MiZh+6MJKaV/WXnvdL8Ph
cKvJm3n2LHm/bNIiS87h/6dpNU1mZZUcZ3V+WSTwJDldLOfZIiuatMnLYisd
j6vsGr56e3H05mRrWk6KdAGjrGiUYS2jDKc0wtYkbbLLslo/S/JiVm5t5cvq
WVKUx1mVX8OA11l9Ua3q5uDBg6cPDrbSKkufJRdnx2dbN2X18bIqV0v5+2O2
hkfTZ8lp0WRVkTXD4yqdNVtbNOOHdF4WsIp1Vm8t82fJ/2jKySCpy6qpslkN
/1ov8B//c2srXTVXZfVsK0mGsKT6WfI6W4yzqk7KWdJcZQqNo/k8T4tJlrwo
F4tVkTdr+CJJeK+b3ymry7TIfydwtd/dnuyVyduqnI2Sf4GN50XyIl0uy3qH
vs0WaT5vAbP+b5dleTnPCB71aFIu6OUaNpc1z5LHsIemKi+yyRU9n5SrokGQ
vz8/ogdVdklrefMb/w4rfZY8r8ry43xdyCdT2Nf+/sGD/a2toqwWdDYIpfvJ
XxnyyTSbJduv359fDJLzn49evRokr49+GyRZMxnh4t+9fHGwv/+Uv/nb6PDB
0+TtX0+TeplN+NeHjx/9yL++yRo83uR9kePEhHGwqWVa5cUlbgv+U/NHh/tP
n/BH+vIbXN1c4Ju8hL+SF/DCm5cvntFWmrS6RKhcNc3y2d7ezc3NaMWfjuBk
9qpsCVhR7zXV/uEef8DX4J5OYBfhqCiyT8n9/cNnGyav79EgDq3wf4pao+Q4
vc7r9tMVYFxDj6dwQZ4lAPcnw/0HtNGLo7fJwyRt4Niuk+mDJ/tPskP4AR4P
H7a3WMMeL/PmajVGvNgDFF4tccxZBaiKUN5r0mW9N56X4z0Z7MmDycODgyf7
h+mjHx8eHjyYHWRPJpPD2WE2fjKdPXr6FD95OFpMffBc0N3AkZOXOrQsdZi8
Xs2bfFiV8wywBPCUwFP3A+Zi9NdR8tfVcrmq08U6/O18lBzd3KTT8OnJCG5Z
BYPPw+e/ADDz9Pfw4b+MktdlfZUVH8vWD3zbYtA/2B/uPzHoP1LoH0zGj3+c
PhXoP/o+6Mtg+w+zyf7TRwePpvvZw8NH44dPZk8eHzx58ng2nk0f7T84xE8e
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
5k2/YJTIMikz5DDC0OcPIff/B85gSa93LQEA

-->

</rfc>


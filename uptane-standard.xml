<?xml version="1.0" encoding="UTF-8"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc2629 version 1.2.9 -->

<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
]>

<?rfc toc="yes"?>
<?rfc sortrefs="yes"?>
<?rfc symrefs="yes"?>

<rfc ipr="noDerivativesTrust200902" docName="uptane-standard-design" category="info">

  <front>
    <title abbrev="UPTANE">Uptane Standard for Design and Implementation</title>

    <author initials="." surname="Members of the Uptane Community" fullname="Uptane Community">
      <organization>Joint Development Foundation Projects, LLC, Uptane Series (c/o Prof. Justin Cappos)</organization>
      <address>
        <postal>
          <street>6 MetroTech</street>
          <city>Brooklyn</city>
          <region>NY</region>
          <code>11201</code>
          <country>USA</country>
        </postal>
        <email>uptane-standards@googlegroups.com</email>
      </address>
    </author>

    <date year="2021" month="February" day="10"/>

    <area>TODO</area>
    <workgroup>TODO</workgroup>
    <keyword>Internet-Draft</keyword>

    <abstract>


<t>This document describes a framework for securing ground vehicle software update systems.</t>



    </abstract>


  </front>

  <middle>


<section anchor="introduction" title="Introduction">

<t>Uptane is a secure software update framework for ground vehicles. This document describes procedures to enable programmers for OEMs and suppliers to securely design and implement this framework in a manner that better protects connected units on ground vehicles. Integrating Uptane as outlined in the sections that follow can reduce the ability of attackers to compromise critical systems. It also assures a faster and easier recovery process should a compromise occur.</t>

<t>These instructions specify the components necessary for a compliant implementation. Individual implementers can make their own technological choices within those requirements. This flexibility makes Uptane adaptable to the many customized update solutions used by manufacturers. If implementers wish to have compatible formats, they may use POUFs. POUFs contain a description of implementation choices as well as data binding formats. An implementer who adopts a POUF, as well as the Uptane Standard, will be able to interoperate with other implementations using that POUF.</t>

</section>
<section anchor="terminology" title="Terminology">

<section anchor="conformance-terminology" title="Conformance terminology">

<t>The keywords MUST, MUST NOT, REQUIRED, SHALL, SHALL NOT, SHOULD, SHOULD NOT, RECOMMENDED, MAY, and OPTIONAL in this document are to be interpreted as described in <xref target="RFC2119"/>.</t>

<t>In order to be considered Uptane-compliant, an implementation MUST follow all of these rules as specified in the document.</t>

</section>
<section anchor="terminology-1" title="Terminology">

<t><spanx style="emph">Bundle</spanx>: A set of images released by the repository that is meant to be installed by one or more ECUs on a vehicle during the same update cycle.</t>

<t><spanx style="emph">Bus</spanx>: An internal communications network that interconnects components within a vehicle. A vehicle can have a number of buses that will vary in terms of power, speed, and resources.</t>

<t><spanx style="emph">ECU Identifier</spanx>: An attribute used to identify a specific ECU (e.g., a unique serial number).</t>

<t><spanx style="emph">ECU Version Manifest</spanx>: Metadata which details the software version currently installed on the ECU.</t>

<t><spanx style="emph">Hardware Identifier</spanx>: An attribute used to identify a model of an ECU.</t>

<t><spanx style="emph">Image</spanx>: File containing software for an ECU to install. May contain a binary image to flash, installation instructions, and other necessary information for the ECU to properly apply the update. Each ECU typically holds only one image, although this may vary in some cases.</t>

<t><spanx style="emph">Metadata</spanx>:  Information describing the characteristics of data including, for example, structural
metadata describing data structures (e.g., data format, syntax, and semantics) and
descriptive metadata describing data contents (e.g., information security labels). As used in Uptane, metadata can be described as information associated with a role or an image that contains the characteristics or parameters thereof (e.g., cryptographic material parameters, filenames, and versions.)</t>

<t><spanx style="emph">Primary/Secondary ECUs</spanx>: Terms used to describe the control units within a ground vehicle. A Primary ECU downloads and verifies update images and metadata for itself and for Secondary ECUs, and distributes images and metadata to Secondaries. Thus, it requires extra storage space and a means to download images and metadata.  Secondary ECUs receive their update images and metadata from the Primary, and only need to verify and install their own metadata and images.</t>

<t><spanx style="emph">POUF</spanx>: A document that contains the protocol, operations, usage, and formats (POUF) of a specific Uptane implementation. The POUF contains decisions about SHOULDs and MAYs in an implementation, as well as descriptions of data binding formats. POUFs MAY be used to create compatible Uptane implementations.</t>

<t><spanx style="emph">Repository</spanx>: A server containing metadata about images. May also contain the images themselves. Other data may be stored on the repository to be accessed by ECUs during the update process.</t>

<t><spanx style="emph">Suppliers</spanx>: Independent companies to which vehicle manufacturers may outsource the production of ECUs. Tier-1 suppliers directly serve the manufacturers. Tier-2 suppliers are those that perform outsourced work for Tier-1 suppliers.</t>

<t><spanx style="emph">Vehicle Version Manifest</spanx>: A compilation of all ECU version reports on a vehicle. It serves as a master list of all images currently running on all ECUs in the vehicle.</t>

</section>
<section anchor="uptane-role-terminology" title="Uptane role terminology">

<t>These terms are defined in greater detail in <xref target="roles"/>.</t>

<t><spanx style="emph">Delegation</spanx>: A process by which the responsibility of signing metadata about images is assigned to another party.
<spanx style="emph">Role</spanx>: A party (human or machine) responsible for signing a certain type of metadata. The role controls keys and is responsible for signing metadata entrusted to it with these keys. The roles mechanism of Uptane allows the system to distribute signing responsibilities so that the compromise of one key does not necessarily impact the security of the entire system.</t>

<t><list style="symbols">
  <t><spanx style="emph">Root role</spanx>: Signs metadata that distributes and revokes public keys used to verify the Root, Timestamp, Snapshot, and Targets role metadata.</t>
  <t><spanx style="emph">Snapshot role</spanx>: Signs metadata that indicates which images the repository has released at the same time.</t>
  <t><spanx style="emph">Targets role</spanx>: Signs metadata used to verify the image, such as cryptographic hashes and file size.</t>
  <t><spanx style="emph">Timestamp role</spanx>: Signs metadata that indicates if there are any new metadata or images on the repository.</t>
</list></t>

</section>
<section anchor="acronyms-and-abbreviations" title="Acronyms and abbreviations">

<t><spanx style="emph">CDN</spanx>: Content Delivery Network</t>

<t><spanx style="emph">ECUs</spanx>: Electronic Control Units, the computing units on a vehicle</t>

<t><spanx style="emph">LIN Bus</spanx>: Local Interconnect Bus</t>

<t><spanx style="emph">OBD</spanx>: On-board diagnostics</t>

<t><spanx style="emph">SOTA</spanx>: Software Updates Over-the-Air</t>

<t><spanx style="emph">UDS</spanx>: Unified Diagnostic Services</t>

<t><spanx style="emph">VIN</spanx>: Vehicle Identification Number</t>

</section>
</section>
<section anchor="rationale-for-and-scope-of-the-uptane-standard" title="Rationale for and scope of the Uptane Standard">

<t>This Standard document provides the essential components for the secure design, implementation, and deployment of Uptane by OEMs and suppliers. These guidelines contribute to compromise resilience, or the ability to minimize the extent of the threat posed by any given attack.</t>

<t>However, this specification is intended as an implementation guide, and not as a detailed technical argument about the security properties that Uptane provides.  Readers interested in such documentation should refer to published papers that cover this topic.  <xref target="UPTANEESCAR"/></t>

<section anchor="why-uptane-requires-a-standards-document" title="Why Uptane requires a standards document">

<t>A standards document that can guide the safe design, integration, and deployment of Uptane in vehicles is needed at this time because:</t>

<t><list style="symbols">
  <t>The number of connected units on the average vehicle continues to grow, with mainstream cars now containing up to 100 million lines of code. <xref target="USATODAY"/></t>
  <t>The expanded use of software over-the-air strategies creates new attack surfaces for malicious parties. <xref target="CR-OTA"/></t>
  <t>Legacy update strategies, such as SSL/TLS or GPG/RSA, are not feasible for use on vehicle ECUs because they force manufacturers to chose between enhanced security and customizability.</t>
  <t>Conventional strategies are also complicated by the differing resources of the ECUs, which can vary greatly in memory, storage space, and Internet connectivity.</t>
  <t>The design of Uptane makes it possible to offer improved design flexibility without sacrificing security.</t>
  <t>This added design flexibility, however, could be a liability if the framework is implemented incorrectly.</t>
  <t>Standardization of crucial steps in the design, implementation, and use of Uptane can assure that customizability does not impact security or functionality.</t>
</list></t>

</section>
<section anchor="scope-of-standard-coverage" title="Scope of Standard coverage">

<t>This document sets guidelines for implementing Uptane in most systems capable of updating software on connected units in ground vehicles, including passenger vehicles, light-duty trucks, heavy-duty trucks, and motorcycles. Uptane could potentially also be applied to other ground vehicles, such as automated shuttles, recreational vehicles, and military ground vehicles. Uptane could even be applied to domains such as IoT devices, medical devices, and autonomous aerial vehicles. In this section, we define the scope of that applicability by providing sample use cases and possible exceptions, aspects of software update security that are not applicable to Uptane, and the design requirements governing the preparation of these standards.</t>

<section anchor="assumptions" title="Assumptions">

<t>We assume the following system preconditions for Uptane:</t>

<t><list style="symbols">
  <t>Vehicles have the ability to establish connectivity to required backend services. For example, this could be done through cellular, Wi-Fi, or hard-wired mechanisms.</t>
  <t>ECUs are either directly connected to the communication channel, or are indirectly connected via some sort of network gateway.</t>
  <t>ECUs are programmable and provide sufficient performance to be updated.</t>
  <t>ECUs must be able to perform public key cryptography operations and calculate hashes of images and metadata files.</t>
  <t>There are state-of-the-art secure servers in place, such as the Director and Image repository servers.</t>
</list></t>

<t>It is important that any bugs detected in Uptane implementations be patched promptly. Failure to do so could interfere with the effectiveness of Uptane’s operations.</t>

</section>
<section anchor="use-cases" title="Use cases">

<t>The following use cases provide a number of scenarios illustrating the manner in which software updates could be accomplished using Uptane.</t>

<section anchor="oems-initializing-uptane-at-the-factory-using-sota" title="OEMs initializing Uptane at the factory using SOTA">

<t>An OEM plans to install Uptane on new vehicles. This entails the following components: code to perform full and partial verification, the latest copy of the relevant metadata, the public keys, and an accurate attestation of the latest time. The OEM then either requires its tier-1 suppliers to provide these materials to the suppliers’ assembly lines or can choose to add the materials later at the OEM’s assembly lines. The OEM’s in-vehicle implementation is Uptane-compliant if:</t>

<t><list style="numbers">
  <t>all Primaries perform full verification;</t>
  <t>all Secondaries that are updated via OTA at least perform partial verification; and</t>
  <t>all other ECUs that do not perform any type of verification cannot be updated via OTA.</t>
</list></t>

</section>
<section anchor="updating-one-ecu-with-a-complete-image" title="Updating one ECU with a complete image">

<t>A tier-1 supplier completes work on a revised image for an electronic brake control module. This module will control the brakes on all models of an SUV produced by the OEM mentioned above. Assuming supplier delegation is supported by the OEM for this ECU, each tier-1 supplier digitally signs the image, then delivers the signature, all of its metadata, including delegations, and associated images to the OEM. The OEM adds these metadata and images to its Image repository, along with information about any dependencies and conflicts between this image and those for other ECUs used in the OEM’s vehicles. The OEM also updates the inventory database, so that the Director repository can instruct the ECU on how to install these updated images.</t>

</section>
<section anchor="updating-individual-ecus-on-demand" title="Updating individual ECUs on demand">

<t>An OEM has issued a recall to address a problem with a keyless entry device that has been locking people out of their cars. The OEM prepares an updated flash image in the manner described above. The OEM then ships USB flash drives to vehicle owners and dealerships that allow those parties to update the firmware of their vehicles.</t>

</section>
<section anchor="update-one-ecu-with-multiple-deltas" title="Update one ECU with multiple deltas">

<t>The OEM wants to use delta updates to save over-the-air bytes. The delta images contain only the code and/or data that has changed from the previous image version. To do so, the OEM must first modify the Director repository, using the vehicle version manifest and dependency resolution to determine the differences between the previous and latest images. The OEM then adds the following to the custom Targets metadata used by the Director repository: (1) the algorithm used to apply a delta image, and (2) the Targets metadata about the delta image. The OEM will also check whether the delta images match the Targets metadata from the Director repository.</t>

</section>
</section>
</section>
<section anchor="exceptions" title="Exceptions">

<t>There are a number of factors that could impede the completion of the above scenarios:</t>

<t><list style="symbols">
  <t>ECUs may be lacking the necessary resources to function as designated. These insufficient resources could include limited CPU or RAM inadequate for performance of public key cryptography; a lack of sufficient storage to undo installation of bad software; or a location on a low-speed network (e.g., LIN).</t>
  <t>ECUs may reside on different network segments, and may not be able to directly reach each other, requiring a gateway to facilitate communication.</t>
  <t>A user may replace OEM-installed ECUs with aftermarket ECUs.</t>
  <t>A vehicle may be able to download only a limited amount of data via a cellular channel due to limits on a data plan.</t>
  <t>A system may lack sufficient power to download or install software updates.</t>
  <t>Vehicles may be offline for extended periods of time, thus missing required updates (e.g., key rotations).</t>
  <t>OEMs may be unwilling to implement costly security or hardware requirements.</t>
</list></t>

</section>
<section anchor="out-of-scope" title="Out of scope">

<t>The following topics will not be addressed in this document, as they represent threats outside the scope of Uptane:</t>

<t><list style="symbols">
  <t>Physical attacks, such as manual tampering with ECUs outside the vehicle.</t>
  <t>Compromise of the packaged software, such as malware embedded in a trusted package.</t>
  <t>Compromise of the supply chain (e.g., build system, version control system, packaging process). A number of strategies (e.g., git signing, TPMs, in-toto <xref target="IN-TOTO"/>)  already exist to address this problem. Therefore, there is no need to duplicate those techniques here.</t>
  <t>Problems associated with OBD or UDS programming of ECUs, such as authentication of communications between ECUs.</t>
  <t>Malicious mirrors of package repositories, which may substitute original packages with malicious packages with matching version numbers <xref target="MERCURY"/>.</t>
</list></t>

</section>
<section anchor="design-requirements" title="Design requirements">

<t>The design requirements for this document are governed by the following principal parameters:</t>

<t><list style="symbols">
  <t>to clearly mandate the design and implementation steps that are security critical and must be followed as is, while offering flexibility in the implementation of non-critical steps. In this manner, users can adapt to support different use models and deployment scenarios.</t>
  <t>to ensure that, if Uptane is implemented, the security practices mandated or suggested in this document do not interfere with the functionality of ECUs, vehicles, or the systems that maintain them.</t>
  <t>to delineate guidelines to ensure that, should any part of the SOTA mechanism of a vehicle be attacked, an attacker must compromise two or more modules to breach the SOTA mechanism.</t>
</list></t>

</section>
</section>
<section anchor="threat-model-and-attack-strategies" title="Threat model and attack strategies">

<t>The overarching goal of Uptane is to provide a system that is resilient in the face of various types of compromise. In this section, we describe the goals an attacker may have (<xref target="attacker_goals"/>) and the capabilities they may have or could develop (<xref target="capabilities"/>). We then describe and classify types of attacks on the system according to the attacker’s goals (<xref target="threats"/>).</t>

<section anchor="attacker_goals" title="Attacker goals">

<t>We assume that attackers may want to achieve one or more of the following goals, in increasing order of severity:</t>

<t><list style="symbols">
  <t>Read the contents of updates to discover confidential information, reverse-engineer firmware, or compare two firmware images to identify security fixes and hence determine the fixed security vulnerability.</t>
  <t>Deny installation of updates to prevent vehicles from fixing software problems.</t>
  <t>Cause one or more ECUs in the vehicle to fail, denying use of the vehicle or of certain functions.</t>
  <t>Control ECUs within the vehicle, and possibly the vehicle itself.</t>
</list></t>

</section>
<section anchor="capabilities" title="Attacker capabilities">

<t>Uptane is designed with resilience to compromise in mind. We assume that attackers may develop one or more of the following capabilities:</t>

<t><list style="symbols">
  <t>Intercept and modify network traffic (i.e., perform man-in-the-middle attacks). This capability may be developed in two domains:
  <list style="symbols">
      <t>Outside the vehicle, intercepting and modifying traffic between the vehicle and software repositories.</t>
      <t>Inside the vehicle, intercepting and modifying traffic on one or more vehicle buses (e.g., via an OBD port or using a compromised ECU as a vector).</t>
    </list></t>
  <t>Compromise and control either a Director repository or Image repository server, and any keys stored on that repository, but not both the Director and Image repositories.</t>
  <t>Compromise either a Primary ECU or a Secondary ECU, but not both in the same vehicle.</t>
</list></t>

</section>
<section anchor="threats" title="Description of threats">

<t>Uptane’s threat model includes the following types of attacks, organized according to the attacker goals listed in <xref target="attacker_goals"/>.</t>

<section anchor="read_updates" title="Read updates">

<t><list style="symbols">
  <t><spanx style="emph">Eavesdrop attack:</spanx> Read sensitive or confidential information from an update intended to be encrypted for a specific ECU. (Note: Not all implementations will have a need for protecting information in this way.)</t>
</list></t>

</section>
<section anchor="deny_updates" title="Deny installation of updates">

<t>An attacker seeking to deny the installation of updates may attempt one or more of the following strategies:</t>

<t><list style="symbols">
  <t><spanx style="emph">Drop-request attack:</spanx> Block network traffic outside or inside the vehicle.</t>
  <t><spanx style="emph">Slow retrieval attack:</spanx> Slow down network traffic, in the extreme case sending barely enough packets to avoid a timeout. Similar to a drop-request attack, except that both the sender and receiver of the traffic still think network traffic is unimpeded.</t>
  <t><spanx style="emph">Freeze attack:</spanx> Continue to send a properly signed, but old, update bundle to the ECUs, even if newer updates exist.</t>
  <t><spanx style="emph">Partial bundle installation attack:</spanx> Install a valid (signed) update bundle, and then block selected updates within the bundle.</t>
  <t>Conduct a denial of service attack against the Uptane repositories or infrastructure.</t>
</list></t>

</section>
<section anchor="change_functionality" title="Interfere with ECU functionality">

<t>Attackers seeking to interfere with the functionality of vehicle ECUs in order to cause an operational failure or unexpected behavior may do so in one of the following ways:</t>

<t><list style="symbols">
  <t><spanx style="emph">Rollback attack:</spanx> Cause an ECU to install a previously valid software revision that is older than the currently installed version.</t>
  <t><spanx style="emph">Endless data attack:</spanx> Send a large amount of data to an ECU until it runs out of storage, possibly causing the ECU to fail to operate.</t>
  <t><spanx style="emph">Mix-and-match attack:</spanx> Install a malicious software bundle in which some of the updates do not interoperate properly. This may be accomplished even if all of the individual images being installed are valid, as long as valid versions exist that are mutually incompatible.</t>
</list></t>

</section>
<section anchor="control_ecu" title="Control an ECU or vehicle">

<t>Full control of a vehicle, or one or more ECUs within a vehicle, is the most severe threat.</t>

<t><list style="symbols">
  <t><spanx style="emph">Arbitrary software attack:</spanx> Cause an ECU to install and run arbitrary code of the attacker’s choice.</t>
</list></t>

</section>
</section>
</section>
<section anchor="design" title="Detailed design of Uptane">

<t>Uptane does not specify implementation details. Instead, this Standard describes the components necessary for a compliant implementation and leaves it up to individual implementers to make their own technological choices within those requirements.</t>

<t>At a high level, Uptane requires:</t>

<t><list style="symbols">
  <t>Two software repositories:
  <list style="symbols">
      <t>An Image repository containing binary images to install and signed metadata about those images.</t>
      <t>A Director repository connected to an inventory database that can sign metadata on demand for images in the Image repository.</t>
    </list></t>
  <t>Repository tools for generating Uptane-specific metadata about images.</t>
  <t>A public key infrastructure supporting the required metadata production and signing roles on each repository:
  <list style="symbols">
      <t>Root - The certificate authority for the Uptane ecosystem. Distributes public keys for verifying all the other roles’ metadata.</t>
      <t>Timestamp - Indicates whether there are new metadata or images.</t>
      <t>Snapshot - Indicates images released by the repository at a point in time via signing metadata about Targets metadata.</t>
      <t>Targets - Indicates metadata about images, such as hashes and file sizes.</t>
    </list></t>
  <t>A secure way for ECUs to know the time.</t>
  <t>An ECU capable of downloading images and associated metadata from the Uptane servers.</t>
  <t>An in-vehicle client on a Primary ECU capable of verifying the signatures on all update metadata and downloading updates on behalf of its associated Secondary ECUs. The Primary ECU MAY be the same ECU that communicates with the server.</t>
  <t>A client or library on each Secondary ECU capable of performing either full or partial verification of metadata.</t>
</list></t>

<section anchor="roles" title="Roles on repositories">

<t>A repository contains images and metadata. Each role has a particular type of metadata associated with it, as described in <xref target="meta_structures"/>.</t>

<section anchor="root_role" title="The Root role">

<t>A repository’s Root role SHALL be responsible for a Certificate Authority as defined in <xref target="RFC3647"/>.
A repository’s Root role SHALL produce and sign Root metadata as described in <xref target="root_meta"/>.
A repository’s Root role SHALL sign the public keys used to verify the metadata produced by the Timestamp, Snapshot, and Targets roles.
A repository’s Root role SHALL revoke keys for the other roles if they are compromised.</t>

</section>
<section anchor="targets_role" title="The Targets role">

<t>A repository’s Targets role SHALL produce and sign metadata about images and delegations as described in <xref target="targets_meta"/>.</t>

<section anchor="targets_role_delegations" title="Delegations">

<t>The Targets role on the Image repository MAY delegate the responsibility of signing metadata to other, custom-defined roles referred to as delegated targets. If it does, it MUST do so as specified in <xref target="delegations_meta"/>.</t>

<t>Responsibility for signing images or a subset of images MAY be delegated to more than one role and therefore it is possible for two different roles to be trusted for signing a particular image. For this reason, delegations MUST be prioritized.</t>

<t>A particular delegation for a subset of images MAY be designated as <spanx style="strong">terminating</spanx>. For terminating delegations, the client SHALL NOT search any further if it does not find validly signed metadata about those images. Delegations SHOULD NOT be terminating by default; terminating delegations SHOULD only be used when there is a compelling technical reason to do so.</t>

<t>A delegation for a subset of images MAY be a multi-role delegation <xref target="TAP-3"/>. A multi-role delegation indicates that multiple roles are needed to sign a particular image and each of the delegatee roles MUST sign the same metadata.</t>

<t>Delegations only apply to the Image repository. The Targets role on the Director repository MUST NOT delegate metadata signing responsibility.</t>

</section>
</section>
<section anchor="snapshot_role" title="The Snapshot role">

<t>A repository’s Snapshot role SHALL produce and sign metadata about all Targets metadata the repository releases, including the current version number of the top-level Targets metadata, and the version numbers of all delegated Targets metadata, as described in <xref target="snapshot_meta"/>.</t>

</section>
<section anchor="timestamp_role" title="The Timestamp role">

<t>A repository’s Timestamp role SHALL produce and sign metadata indicating whether there are new metadata or images on the repository. It MUST do so by signing the metadata about the Snapshot metadata file.</t>

</section>
</section>
<section anchor="meta_structures" title="Metadata structures">

<t>Uptane’s security guarantees all rely on properly created metadata that follows a designated structure. The Uptane Standard <spanx style="strong">does not</spanx> mandate any particular format or encoding for the metadata as a whole. ASN.1 (with any encoding scheme like BER, DER, XER, etc.), JSON, XML, or any other encoding format that is capable of providing the required structure MAY be used.</t>

<t>However, string comparison is required as part of metadata verification. To ensure an accurate basis for comparing strings, all strings MUST be encoded in the Unicode Format for Network Interchange as defined in <xref target="RFC5198"/>, including normalization into Unicode Normalization Form C (<xref target="NFC"/>).</t>

<t>In the <spanx style="emph">Deployment Best Practices</spanx> (<xref target="DEPLOY"/>), Joint Development Foundation Projects, LLC, Uptane Series provides some examples of compliant metadata structures in ASN.1 and JSON.</t>

<section anchor="common_metadata" title="Common metadata structures">

<t>Every public key MUST be represented using a public key identifier.  A public key identifier is EITHER all of the following:</t>

<t><list style="symbols">
  <t>The value of the public key itself (which MAY be, for example, formatted as a PEM string)</t>
  <t>The public key cryptographic algorithm used by the key (such as RSA or ECDSA)</t>
  <t>The particular scheme used to verify the signature (such as <spanx style="verb">rsassa-pss-sha256</spanx> or <spanx style="verb">ecdsa-sha2-nistp256</spanx>)</t>
</list></t>

<t>OR a secure hash over at least the above components (such as the keyid mechanism in TUF).</t>

<t>All four Uptane roles (Root, Targets, Snapshot, and Timestamp) share a common structure. They SHALL contain the following two attributes:</t>

<t><list style="symbols">
  <t>A payload of metadata to be signed</t>
  <t>An attribute containing the signature(s) of the payload, where each entry specifies:
  <list style="symbols">
      <t>The public key identifier of the key being used to sign the payload</t>
      <t>A signature with this key over the payload</t>
    </list></t>
</list></t>

<t>The payload differs depending on the role. However, the payload for all roles shares a common structure. It SHALL contain the following four attributes:</t>

<t><list style="symbols">
  <t>An indicator of the type of role (Root, Targets, Snapshot, or Timestamp)</t>
  <t>An expiration date and time</t>
  <t>An integer version number, which SHOULD be incremented each time the metadata file is updated</t>
  <t>The role-specific metadata for the role indicated</t>
</list></t>

<t>The following sections describe the role-specific metadata. All roles SHALL follow the common structures described here.</t>

</section>
<section anchor="root_meta" title="Root metadata">

<t>A repository’s Root metadata distributes the public keys of the top-level Root, Targets, Snapshot, and Timestamp roles, as well as revocations of those keys. It SHALL contain two attributes:</t>

<t><list style="symbols">
  <t>A representation of the public keys for all four roles. Each key SHALL have a unique public key identifier.</t>
  <t>An attribute mapping each role to (1) its public key(s), and (2) the threshold of signatures required for that role.</t>
</list></t>

</section>
<section anchor="targets_meta" title="Targets metadata">

<t>The Targets metadata on a repository contains all of the information about images to be installed on ECUs. This includes filenames, hashes, file sizes, and MAY also include other useful information, such as what types of hardware are compatible with a particular image.</t>

<t>Targets metadata can also contain metadata about delegations, allowing one Targets role to delegate its authority to another. This means that an individual Targets metadata file might contain only metadata about delegations, only metadata about images, or some combination of the two. The details of how ECUs traverse the delegation tree to find valid metadata about images is specified in <xref target="resolve_delegations"/>.</t>

<section anchor="targets_images_meta" title="Metadata about images">

<t>To be available to install on clients, all images on the repository MUST have their metadata listed in a Targets role.  Each Targets role MAY provide a list of some images on the repository.  This list MUST provide, at a minimum, the following information about each image:</t>

<t><list style="symbols">
  <t>The image filename</t>
  <t>The size of the image in bytes</t>
  <t>One or more hashes of the image file, along with the hashing function used</t>
</list></t>

<section anchor="custom-metadata-about-images" title="Custom metadata about images">

<t>In addition to the required metadata, Targets metadata files MAY contain extra metadata for images on the repository. This metadata can be customized for a particular use case. Examples of use cases for different types of custom metadata can be found in the <spanx style="emph">Deployment Best Practices</spanx> document (<xref target="DEPLOY"/>). However, there are a few important pieces of custom metadata that SHOULD be present in most implementations. In addition, there is one element in the custom metadata that MUST be present in the Targets metadata from the Director.</t>

<t>Custom metadata MAY also contain a demarcated field or section that MUST match whenever two pieces of metadata are checked against each other, such as when Targets metadata from the Director repository is checked against Targets metadata from the Image repository.</t>

<t>The information listed below SHOULD be provided for each image on both the Image repository and the Director repository. If a “MUST match section” is to be implemented, that is where this information SHOULD be placed.</t>

<t><list style="symbols">
  <t>A release counter, to be incremented each time a new version of the image is released. This can be used to prevent rollback attacks even in cases where the Director repository is compromised.</t>
  <t>A hardware identifier, or list of hardware identifiers, representing models of ECUs with which the image is compatible. This can be used to ensure that an ECU cannot be ordered to install an incompatible image, even in cases where the Director repository is compromised.</t>
</list></t>

<t>The following information is CONDITIONALLY REQUIRED for each image on the Director repository IF that image is encrypted:</t>

<t><list style="symbols">
  <t>Information about filenames, hashes, and file size of the encrypted image.</t>
  <t>Information about the encryption method, and other relevant information–for example, a symmetric encryption key encrypted by the ECU’s asymmetric key could be included in the Director repository metadata.</t>
</list></t>

<t>The following information MUST be provided from the Director repository for each image in the Targets metadata:</t>

<t><list style="symbols">
  <t>An ECU identifier (such as a serial number), specifying the ECU that should install the image.</t>
</list></t>

<t>The Director repository MAY provide a download URL for the image file. This may be useful, for example, when the image is on a public CDN and the Director wishes to provide a signed URL.</t>

</section>
</section>
<section anchor="delegations_meta" title="Metadata about delegations">

<t>A Targets metadata file on the Image repository (but not the Director repository) MUST be able to delegate signing authority to other entities. For example, it could delegate signing authority for a particular ECU’s firmware to that ECU’s supplier. A metadata file MAY contain any number of delegations and MUST keep the delegations in prioritized order.</t>

<t>Any metadata file with delegations MUST provide the following information:</t>

<t><list style="symbols">
  <t>A list of public keys of all delegatees. Each key should have a unique public key identifier and a key type.</t>
  <t>A list of delegations, each of which contains:
  <list style="symbols">
      <t>A list of the filenames to which this role applies. This MAY be expressed using wildcards, or by enumerating a list, or a combination of the two.</t>
      <t>An optional list of the hardware identifiers to which this role applies.  If this is omitted, any hardware identifier will match.</t>
      <t>An indicator of whether or not this is a terminating delegation. (See <xref target="targets_role_delegations"/>.)</t>
      <t>A list of the roles to which this delegation applies. Each role needs to specify:
      <list style="symbols">
          <t>A name for the role (e.g., “supplier1-qa”)</t>
          <t>The key identifiers for each key this role uses</t>
          <t>A threshold of keys that must sign for this role</t>
        </list></t>
    </list></t>
</list></t>

<t>Note that <spanx style="strong">any</spanx> Targets metadata file stored on the Image repository may contain delegations, and these delegations can be in chains of arbitrary length.</t>

</section>
</section>
<section anchor="snapshot_meta" title="Snapshot metadata">

<t>The Snapshot metadata lists version numbers and filenames of all Targets metadata files. It protects against mix-and-match attacks if a delegated supplier key is compromised.</t>

<t>For each Targets metadata file on the repository, the Snapshot metadata SHALL contain the following information:</t>

<t><list style="symbols">
  <t>The filename and version number of the Targets metadata file.</t>
</list></t>

<t>The Snapshot metadata MAY also list the Root metadata filename and version number for the purpose of backward compatibility. Historically, this was a requirement in TUF, but it is no longer required and does not provide a significant security benefit.</t>

</section>
<section anchor="timestamp_meta" title="Timestamp metadata">

<t>The Timestamp metadata SHALL contain the following information:</t>

<t><list style="symbols">
  <t>The filename and version number of the latest Snapshot metadata on the repository.</t>
  <t>One or more hashes of the Snapshot metadata file, along with the hashing function used.</t>
</list></t>

</section>
<section anchor="repo_mapping_meta" title="Repository mapping metadata">

<t>As described in the introduction to <xref target="design"/>, Uptane requires a Director repository and an Image repository. However, it is possible to have an Uptane-compliant implementation that has more than two repositories.</t>

<t>Repository mapping metadata informs a Primary ECU about which repositories to trust for images or image paths. <xref target="TAP-4"/> describes how to make use of more complex repository mapping metadata in order to have more than the two required repositories.</t>

<t>Repository mapping metadata, or the equivalent informational content, MUST be present on all Primary ECUs, and MUST contain the following information:</t>

<t><list style="symbols">
  <t>A list of repository names and one or more URLs at which the named repository can be accessed. At a minimum, this MUST include the Director and Image repositories.</t>
  <t>A list of mappings of image paths to repositories, each of which contains:
  <list style="symbols">
      <t>A list of image paths. Image paths MAY be expressed using wildcards, or by enumerating a list, or a combination of the two.</t>
      <t>A list of repositories that MUST provide signed Targets metadata for images stored at those paths.</t>
    </list></t>
</list></t>

<t>For example, in the most basic Uptane case, the repository mapping metadata would contain:</t>

<t><list style="symbols">
  <t>The name and URL of the Director repository.</t>
  <t>The name and URL of the Image repository.</t>
  <t>A single mapping indicating that all images (<spanx style="verb">*</spanx>) MUST be signed by both the Director and Image repository.</t>
</list></t>

<t>Note that the metadata need not be in the form of a metadata file. For example, in the basic case where there is only one Director and one Image repository, and all images need to have signed metadata from both repositories, it would be sufficient to have a configuration file with URLs for the two repositories and a client that always checks for metadata matches between them. In this case, no explicit mapping would be defined, because the mapping is defined as part of the Uptane client implementation.</t>

<t>The <spanx style="emph">Uptane Deployment Best Practices</spanx> document (<xref target="DEPLOY"/>) provides more guidance on how to implement repository mapping metadata for more complex use cases. It also discusses strategies for updating repository mapping metadata, if required.</t>

</section>
<section anchor="metadata_filename_rules" title="Rules for filenames in repositories and metadata">

<t>There is a difference between the filename in a metadata file or an ECU, and the filename on a repository. This difference exists in order to avoid race conditions, where metadata and images are read from, and written to, at the same time. For more details, the reader should read the TUF specification <xref target="TUF-spec"/> and PEP 458 <xref target="PEP-458"/>.</t>

<t>Unless stated otherwise, all files SHALL be written to repositories in accordance with the following two rules:</t>

<t><list style="numbers">
  <t>Metadata filenames SHALL be qualified with version numbers. If a metadata file A is specified as FILENAME.EXT in another metadata file B, then it SHALL be written as VERSION.FILENAME.EXT, where VERSION is A’s version number, as defined in <xref target="common_metadata"/>, with one exception: If the version number of the Timestamp metadata file might not be known in advance by a client, it MAY be read from, and written to, a repository using a filename without a version number qualification, i.e., FILENAME.EXT.</t>
  <t>If an image is specified in a Targets metadata file as FILENAME.EXT, it SHALL be written to the repository as HASH.FILENAME.EXT, where HASH is one of the hash digests of the file, as specified in <xref target="targets_images_meta"/>. The file MUST be written to the repository using <spanx style="emph">n</spanx> different filenames, one for each hash digest listed in its corresponding Targets metadata.</t>
</list></t>

<t>For example:</t>

<t><list style="symbols">
  <t>The version number of the Snapshot metadata file is 61, and its filename in the Timestamp metadata is <spanx style="emph">snapshot.json</spanx>. The filename on the repository will be <spanx style="emph">61.snapshot.json</spanx>.</t>
  <t>There is an image with the <spanx style="emph">filename acme_firmware.bin</spanx> specified in the Targets metadata, with a SHA3-256 of <spanx style="emph">aaaa</spanx> and a SHA-512/224 of <spanx style="emph">bbbb</spanx>. It will have two filenames on the repository: <spanx style="emph">aaaa.acme_firmware.bin</spanx> and <spanx style="emph">bbbb.acme_firmware.bin</spanx>.</t>
</list></t>

</section>
</section>
<section anchor="server-repository-implementation-requirements" title="Server / repository implementation requirements">

<t>An Uptane implementation SHALL make the following services available to vehicles:</t>

<t><list style="symbols">
  <t>Image repository</t>
  <t>Director repository</t>
</list></t>

<t>Additionally, an Uptane implementation requires ECUs to have a secure way to know the current time.</t>

<section anchor="image-repository" title="Image repository">

<t>The Image repository exists to allow an OEM and/or its suppliers to upload images and their associated metadata. It makes these images and their metadata available to vehicles. The Image repository is designed to be primarily controlled by human actors, and updated relatively infrequently.</t>

<t>The Image repository SHALL expose an interface permitting the download of metadata and images. This interface SHOULD be public.</t>

<t>The Image repository SHALL require authorization for writing metadata and images.</t>

<t>The Image repository SHALL provide a method for authorized users to upload images and their associated metadata. It SHALL check that a user writing metadata and images is authorized to do so for that specific image by checking the chain of delegations as described in <xref target="delegations_meta"/>.</t>

<t>The Image repository SHALL implement storage which permits authorized users to write an image file using a unique filename, and later read the same file using the same name. It MAY use any filesystem, key-value store, or database that fulfills this requirement.</t>

<t>The Image repository MAY require authentication for read access.</t>

</section>
<section anchor="director_repository" title="Director repository">

<t>The Director repository instructs ECUs as to which images should be installed by producing signed metadata on demand. Unlike the Image repository, it is mostly controlled by automated, online processes. It also consults a private inventory database containing information on vehicles, ECUs, and software revisions.</t>

<t>The Director repository SHALL expose an interface for Primaries to upload vehicle version manifests (<xref target="vehicle_version_manifest"/>) and download metadata. This interface SHOULD be public.
The Director MAY encrypt images for ECUs that require them, either by encrypting on-the-fly or by storing encrypted images on the repository.</t>

<t>The Director repository SHALL implement storage which permits an automated service to write generated metadata files. It MAY use any filesystem, key-value store, or database that fulfills this requirement.</t>

<section anchor="directing-installation-of-images-on-vehicles" title="Directing installation of images on vehicles">

<t>A Director repository MUST conform to the following six-step process for directing the installation of software images on a vehicle.</t>

<t><list style="numbers">
  <t>The Director SHOULD first identify the vehicle. This MAY be done when the Director receives a vehicle version manifest sent by a Primary (as described in <xref target="construct_manifest_primary"/>), decodes the manifest, and determines the unique vehicle identifier. Additionally, the Director MAY utilize other mechanisms to uniquely identify a vehicle (e.g., 2-way TLS with unique client certificates).</t>
  <t>Using the vehicle identifier, the Director queries its inventory database (as described in <xref target="inventory_db"/>) for relevant information about each ECU in the vehicle.</t>
  <t>The Director SHALL check the manifest for accuracy compared to the information in the inventory database. If any of the required checks fail, the Director MAY drop the request. An implementer MAY make additional checks if desired. At a minimum, the Director SHALL check the following:
  <list style="symbols">
      <t>Each ECU recorded in the inventory database is also represented in the manifest.</t>
      <t>The signature of the manifest matches the ECU key of the Primary that sent it.</t>
      <t>The signature of each Secondary’s contribution to the manifest matches the ECU key of that Secondary.</t>
    </list></t>
  <t>The Director SHOULD check that the nonce or counter in each ECU version report has not been used before to prevent a replay of the ECU version report. If the nonce or counter is reused the Director SHOULD drop the request.</t>
  <t>The Director extracts information about currently installed images from the vehicle version manifest. Using this information, it determines if the vehicle is already up-to-date, and if not, determines a set of images that should be installed. The exact process by which this determination takes place is out of scope of this Standard. However, the Director MUST take into account <spanx style="emph">dependencies</spanx> and <spanx style="emph">conflicts</spanx> between images and SHOULD consult well-established techniques for dependency resolution.</t>
  <t>The Director MAY encrypt images for ECUs that require it.</t>
  <t>The Director generates new metadata representing the desired set of images to be installed on the vehicle, based on the dependency resolution in step 4. This includes Targets (<xref target="targets_meta"/>), Snapshot (<xref target="snapshot_meta"/>), and Timestamp (<xref target="timestamp_meta"/>) metadata. It then sends this metadata to the Primary as described in <xref target="download_meta_primary"/>.</t>
</list></t>

</section>
<section anchor="inventory_db" title="Inventory Database">

<t>The Director SHALL use a private inventory database to store information about ECUs and vehicles. An implementer MAY use any durable database for this purpose.</t>

<t>The inventory database MUST record the following pieces of information:</t>

<t><list style="symbols">
  <t>Per vehicle:
  <list style="symbols">
      <t>A unique identifier (such as a VIN)</t>
    </list></t>
  <t>Per ECU:
  <list style="symbols">
      <t>A unique identifier (such as a serial number)</t>
      <t>The vehicle identifier the ECU is associated with</t>
      <t>An ECU key (symmetric or asymmetric; for asymmetric keys, only the public part SHOULD be stored)</t>
      <t>The ECU key identifier (as defined in <xref target="common_metadata"/>)</t>
      <t>Whether the ECU is a Primary or a Secondary</t>
    </list></t>
</list></t>

<t>The inventory database MAY record other information about ECUs and vehicles. It SHOULD record a hardware identifier for each ECU to protect against the possibility of directing the ECU to install incompatible firmware.</t>

</section>
</section>
</section>
<section anchor="in-vehicle-implementation-requirements" title="In-vehicle implementation requirements">

<t>An Uptane-compliant ECU SHALL be able to download and verify image metadata and image binaries before installing a new image and MUST have a secure way of verifying the current time, or a sufficiently recent attestation of the time.</t>

<t>All ECUs SHOULD monitor the download speed of image metadata and image binaries to detect and respond to a slow retrieval attack. If the download is slower than a pre-defined threshold, the ECU SHOULD send an alert to the Director repository, for example as part of the next vehicle version manifest.</t>

<t>Each ECU receiving over-the-air updates in a vehicle is either a Primary or a Secondary ECU. A Primary ECU collects and delivers vehicle manifests to the Director (<xref target="vehicle_version_manifest"/>) that contain information about which images have been installed on ECUs in the vehicle. It also verifies the time and downloads and verifies the latest metadata and images for itself and for its Secondaries. A Secondary ECU verifies the time, and downloads and verifies the latest metadata and images for itself from its associated Primary ECU. It also sends signed information about its installed images to its associated Primary.</t>

<t>All ECUs MUST verify image metadata as specified in <xref target="metadata_verification"/> before installing an image or making it available to other ECUs. A Primary ECU MUST perform full verification (<xref target="full_verification"/>). A Secondary ECU SHOULD perform full verification if possible. If a Secondary cannot perform full verification, it SHALL, at the very least, perform partial verification. In addition, it MAY also perform some steps from the full verification process. See the <spanx style="emph">Uptane Deployment Best Practices</spanx> document (<xref target="DEPLOY"/>) for a discussion of how to choose between partial and full verification.</t>

<t>ECUs MUST have a secure source of time. An OEM/Uptane implementer MAY use any external source of time that is demonstrably secure. The <spanx style="emph">Uptane Deployment Best Practices</spanx> document (<xref target="DEPLOY"/>) describes one way to implement an external time server to cryptographically attest time, as well as the security properties required.</t>

<section anchor="build-time-prerequisite-requirements-for-ecus" title="Build-time prerequisite requirements for ECUs">

<t>For an ECU to be capable of receiving Uptane-secured updates, it MUST have the following data provisioned at the time it is manufactured or installed in the vehicle:</t>

<t><list style="numbers">
  <t>A sufficiently recent copy of required Uptane metadata at the time of manufacture or install. This is necessary for the ECU to authenticate that the remote repository is legitimate when it first downloads metadata in the field. See <spanx style="emph">Uptane Deployment Best Practices</spanx> (<xref target="DEPLOY"/>) for more information.
  <list style="symbols">
      <t>Partial verification Secondary ECUs MUST have the Root and Targets metadata from the Director repository (to reduce the scope of rollback and replay attacks). These ECUs MAY also have metadata from other roles or the Image repository if they will be used by the Secondary.</t>
      <t>Full verification ECUs MUST have a complete set of metadata (Root, Targets, Snapshot, and Timestamp) from both repositories (to prevent rollback and replay attacks), as well as the repository mapping metadata (<xref target="repo_mapping_meta"/>). Delegations are not required.</t>
    </list></t>
  <t>The current time, or a secure attestation of a sufficiently recent time.</t>
  <t>An <spanx style="strong">ECU key</spanx>. This is a private key, unique to the ECU, used to sign ECU version reports and decrypt images. An ECU key MAY be either a symmetric key or an asymmetric key. If it is an asymmetric key, there MAY be separate keys for encryption and signing. For the purposes of this Standard, the set of private keys that an ECU uses is referred to as the ECU key (singular), even if it is actually multiple keys used for different purposes.</t>
</list></t>

</section>
<section anchor="what-the-primary-does" title="What the Primary does">

<t>A Primary downloads, verifies, and distributes the latest time, metadata, and images. To do so, it SHALL perform the following seven steps:</t>

<t><list style="numbers">
  <t>Construct and send vehicle version manifest (<xref target="construct_manifest_primary"/>)</t>
  <t>Download and check current time (<xref target="check_time_primary"/>)</t>
  <t>Download and verify metadata (<xref target="download_meta_primary"/>)</t>
  <t>Download and verify images (<xref target="download_images_primary"/>)</t>
  <t>OPTIONAL: Send latest time to Secondaries (<xref target="send_time_primary"/>)</t>
  <t>Send metadata to Secondaries (<xref target="send_metadata_primary"/>)</t>
  <t>Send images to Secondaries (<xref target="send_images_primary"/>)</t>
</list></t>

<t>Note that the subsequent sections concerning requirements for a Primary do not prohibit implementing Primary capabilities on an ECU that does not communicate directly with the Uptane repositories. This allows for implementations to have multiple ECUs within the vehicle performing functions equivalent to a Primary.
If multiple such Primaries are included within a vehicle, each Secondary ECU SHALL have a single Primary responsible for providing its updates.</t>

<section anchor="construct_manifest_primary" title="Construct and send vehicle version manifest">

<t>The Primary SHALL build a <spanx style="emph">vehicle version manifest</spanx> as described in <xref target="vehicle_version_manifest"/>.</t>

<t>Once the complete manifest is built, the Primary MAY send the manifest to the Director repository. However, it is not strictly required that the Primary send the manifest until step three. If permitted by the implementation, a Primary MAY send only a diff of the manifest to save bandwidth. If an implementation permits diffs, the Director SHOULD have a way to request a full manifest.</t>

<t>Secondaries MAY send their version report at any time so that it is already stored on the Primary when it wishes to check for updates. Alternatively, the Primary MAY request a version report from each Secondary at the time of the update check.</t>

<section anchor="vehicle_version_manifest" title="Vehicle version manifest">

<t>The vehicle version manifest is a metadata structure that MUST contain the following information:</t>

<t><list style="symbols">
  <t>An attribute containing the signature(s) of the payload, each specified by:
  <list style="symbols">
      <t>The public key identifier of the key being used to sign the payload</t>
      <t>The signing method (i.e., ed25519, rsassa-pss, etc.)</t>
      <t>A hash of the payload to be signed</t>
      <t>The hashing function used (i.e., SHA3-256, SHA-512/224, etc.)</t>
      <t>The signature of the hash</t>
    </list></t>
  <t>A payload representing the installed versions of each software image on the vehicle. This payload SHALL contain:
  <list style="symbols">
      <t>The vehicle’s unique identifier (e.g., the VIN)</t>
      <t>The Primary ECU’s unique identifier (e.g., the serial number)</t>
      <t>A list of ECU version reports as specified in <xref target="version_report"/></t>
    </list></t>
</list></t>

<t>Note that one of the ECU version reports should be the version report for the Primary itself.</t>

</section>
<section anchor="version_report" title="ECU version report">

<t>An ECU version report is a metadata structure that MUST contain the following information:</t>

<t><list style="symbols">
  <t>An attribute containing the signature(s) of the payload, each specified by:
  <list style="symbols">
      <t>The public key identifier of the key being used to sign the payload</t>
      <t>The signing method (i.e., ed25519, rsassa-pss, etc.)</t>
      <t>A hash of the payload to be signed</t>
      <t>The hashing function used (i.e., SHA3-256, SHA-512/224, etc.)</t>
      <t>The signature of the hash</t>
    </list></t>
  <t>A payload containing:
  <list style="symbols">
      <t>The ECU’s unique identifier (e.g., the serial number)</t>
      <t>The filename, length, and hashes of its currently installed image (i.e., the non-custom Targets metadata for this particular image)</t>
      <t>An indicator of any detected security attack</t>
      <t>The latest time the ECU can verify at the time this version report was generated</t>
      <t>A nonce or counter to prevent a replay of the ECU version report. This value MUST change each update cycle. It MAY be a cryptographic nonce used with a time server as described in <spanx style="emph">Uptane Deployment Best Practices</spanx>  (<xref target="DEPLOY"/>).</t>
    </list></t>
</list></t>

</section>
</section>
<section anchor="check_time_primary" title="Download and check current time">

<t>The Primary SHALL load the current time from a secure source.</t>

</section>
<section anchor="download_meta_primary" title="Download and verify metadata">

<t>The Primary SHALL download metadata for all targets and perform a full verification on it as specified in <xref target="full_verification"/>.</t>

</section>
<section anchor="download_images_primary" title="Download and verify images">

<t>The Primary SHALL download and verify images for itself and for all of its associated Secondaries. Images SHALL be verified by checking that the hash of the image file matches the hash specified in the Director’s Targets metadata for that image.</t>

<t>There may be several different filenames that all refer to the same image binary, as described in <xref target="metadata_filename_rules"/>. If the Primary has received multiple hashes for a given image binary via the Targets role (see <xref target="targets_images_meta"/>) then it SHALL verify every hash for this image even though the image is identified by a single hash as part of its filename.</t>

</section>
<section anchor="send_time_primary" title="Send latest time to Secondaries">

<t>Unless the Secondary ECU has its own way of verifying the time or does not have the capacity to verify a time message, the Primary is CONDITIONALLY REQUIRED to send the time to each ECU. The Secondary will verify the time message, then overwrite its current time with the received time.</t>

</section>
<section anchor="send_metadata_primary" title="Send metadata to Secondaries">

<t>The Primary SHALL send its latest downloaded metadata to all of its associated Secondaries. The metadata it sends to each Secondary MUST include all of the metadata required for verification on that Secondary. For full verification Secondaries, this includes the metadata for all four roles from both repositories, plus any delegated Targets metadata files the Secondary will recurse through to find the proper delegation. For partial verification Secondaries, this MAY include fewer metadata files; at a minimum, it includes only the Targets metadata file from the Director repository.</t>

<t>The Primary SHOULD determine the minimal set of metadata files to send to each Secondary by performing delegation resolution as described in <xref target="full_verification"/>.</t>

<t>Each Secondary SHALL store the latest copy of all metadata required for its own verification.</t>

</section>
<section anchor="send_images_primary" title="Send images to Secondaries">

<t>The Primary SHALL send the latest image to each of its associated Secondaries that have sufficient storage to receive it.</t>

<t>For Secondaries without sufficient storage to store a copy of the image, the Primary SHOULD wait for a request from the Secondary to stream the new image file to it. The Secondary will send the request once it has verified the metadata sent in the previous step.</t>

</section>
</section>
<section anchor="installing-images-on-primary-or-secondary-ecus" title="Installing images on Primary or Secondary ECUs">

<t>An ECU SHALL perform the following steps when attempting to install a new image:</t>

<t><list style="numbers">
  <t>Verify latest attested time. This is optional if the ECU does not have the capacity to verify a time message (<xref target="verify_time"/>)</t>
  <t>Verify metadata (<xref target="verify_metadata"/>)</t>
  <t>Download latest image (<xref target="download_image"/>)</t>
  <t>Verify image (<xref target="verify_image"/>)</t>
  <t>Install image (<xref target="install_image"/>)</t>
  <t>Create and send version report (<xref target="create_version_report"/>)</t>
</list></t>

<section anchor="verify_time" title="Load and verify the latest attested time">

<t>IF the ECU has the capability to verify a time message, the ECU is CONDITIONALLY REQUIRED to load and verify the current time, or the most recent securely attested time.</t>

</section>
<section anchor="verify_metadata" title="Verify metadata">

<t>The ECU SHALL verify the latest downloaded metadata (<xref target="metadata_verification"/>) using either full or partial verification. If the metadata verification fails for any reason, the ECU SHALL jump to the final step (<xref target="create_version_report"/>).</t>

</section>
<section anchor="download_image" title="Download latest image">

<t>If the ECU has limited secondary storage, i.e., insufficient buffer storage to temporarily store the latest image before installing it, it SHALL download the latest image from the Primary. (If the ECU has sufficient secondary storage, it will already have the latest image in its secondary storage as specified in <xref target="send_images_primary"/>, and should skip to the next step.) The ECU MAY first create a backup of its previous working image and store it elsewhere (e.g., the Primary).</t>

<t>The filename used to identify the latest known image (i.e., the file to request from the Primary) SHALL be determined as follows:</t>

<t><list style="numbers">
  <t>Load the Targets metadata file from the Director repository.</t>
  <t>Find the Targets metadata associated with this ECU identifier.</t>
  <t>Construct the Image filename using the rule in <xref target="metadata_filename_rules"/>, or use the download URL specified in the Director metadata.</t>
  <t>If there is no Targets metadata about this image, abort the update cycle and report that there is no such image. Additionally, in the case of failure, the ECU SHALL retain its previous Targets metadata instead of using the new Targets metadata. Otherwise, download the image (up to the number of bytes specified in the Targets metadata) and verify it according to <xref target="verify_image"/>.</t>
</list></t>

<t>When the Primary responds to the download request, the ECU SHALL overwrite its current image with the downloaded image from the Primary.</t>

<t>If any part of this step fails, the ECU SHALL jump to the final step (<xref target="create_version_report"/>).</t>

</section>
<section anchor="verify_image" title="Verify image">

<t>The ECU SHALL verify that the latest image matches the latest metadata as follows:</t>

<t><list style="numbers">
  <t>Load the latest Targets metadata file from the Director.</t>
  <t>Find the Targets metadata associated with this ECU identifier.</t>
  <t>Check that the hardware identifier in the metadata matches the ECU’s hardware identifier.</t>
  <t>Check that the image filename is valid for this ECU. This MAY be a comparison against a wildcard path, which restricts the ECUs to which a delegation will apply.</t>
  <t>Check that the release counter of the image in the previous metadata, if it exists, is less than or equal to the release counter in the latest metadata.</t>
  <t>If the image is encrypted, decrypt the image with a decryption key to be chosen as follows:
  <list style="symbols">
      <t>If the ECU key is a symmetric key, the ECU SHALL use the ECU key for image decryption.</t>
      <t>If the ECU key is asymmetric, the ECU SHALL check the Targets metadata for an encrypted symmetric key. If such a key is found, the ECU SHALL decrypt the symmetric key using its ECU key, and use the decrypted symmetric key for image decryption.</t>
      <t>If the ECU key is asymmetric and there is no symmetric key in the Targets metadata, the ECU SHALL use its ECU key for image decryption.</t>
    </list></t>
  <t>Check that all hashes listed in the metadata match the corresponding hashes of the image.</t>
</list></t>

<t>If the ECU has enough secondary storage capacity to store the image, the checks SHOULD be performed on the image in secondary storage before it is installed.</t>

<t>When checking hashes, the ECU SHOULD additionally check that the length of the image matches the length listed in the metadata.</t>

<t>NOTE: Verifying image size along with the hashes will become a requirement in a future version of the Uptane Standard.</t>

<t>NOTE: See <xref target="DEPLOY"/> for guidance on how to deal with Secondary ECU failures for ECUs that have limited secondary storage.</t>

<t>If any step fails, the ECU SHALL jump to the final step (<xref target="create_version_report"/>).</t>

</section>
<section anchor="install_image" title="Install image">

<t>The ECU SHALL attempt to install the update. This installation SHOULD occur at a time when all pre-conditions are met. These pre-conditions MAY include ensuring the vehicle is in a safe environment for install (e.g., the vehicle is parked when updating a specific ECU). Another pre-condition MAY include ensuring the ECU has a backup of its current image and metadata in case the current installation fails.</t>

</section>
<section anchor="create_version_report" title="Create and send version report">

<t>The ECU SHALL create a version report as described in <xref target="version_report"/>, and send it to the Primary (or simply save it to disk, if the ECU is a Primary). The Primary SHOULD write the version reports it receives to disk and associate them with the Secondaries that sent them.</t>

</section>
</section>
<section anchor="metadata_verification" title="Metadata verification procedures">

<t>A Primary ECU MUST perform full verification of metadata. A Secondary ECU SHOULD perform full verification of metadata. If a Secondary cannot perform full verification, it SHALL, at the very least, perform partial verification.</t>

<t>If a step in the following workflows does not succeed (e.g., the update is aborted because a new metadata file was not signed), an ECU SHOULD still be able to update again in the future. Errors raised during the update process SHOULD NOT leave ECUs in an unrecoverable state.</t>

<section anchor="partial_verification" title="Partial verification">

<t>In order to perform partial verification, an ECU SHALL perform the following steps:</t>

<t><list style="numbers">
  <t>Load and verify the current time or the most recent securely attested time.</t>
  <t>Download and check the Targets metadata file from the Director repository, following the procedure in <xref target="check_targets"/>.</t>
</list></t>

<t>Note that this verification procedure is the smallest set of Uptane checks permissible for an Uptane Secondary ECU. An ECU MAY additionally implement more metadata checks.</t>

<t>For example, an ECU MAY also fetch and verify Root metadata from the Director (following the procedure in <xref target="check_root"/>) before checking Targets metadata. Performing this additional check would provide the ECU with a secure way to receive and validate a rotation of the Director’s Targets key.</t>

<t>See <xref target="DEPLOY"/> for more discussion on this topic.</t>

</section>
<section anchor="full_verification" title="Full verification">

<t>Full verification of metadata means that the ECU checks that the Targets metadata about images from the Director repository matches the Targets metadata about the same images from the Image repository. This provides resilience to a key compromise in the system.</t>

<t>Full verification MUST be performed by Primary ECUs and SHOULD be performed by Secondary ECUs. In the following instructions, whenever an ECU is directed to download metadata, it applies only to Primary ECUs.</t>

<t>Before starting full verification, the repository mapping metadata MUST be consulted to determine where to download metadata from. This procedure assumes the basic Uptane case: there are only two repositories (Director and Image), and all image paths are required to be signed by both repositories. If a more complex repository layout is being used, refer to <xref target="DEPLOY"/> for guidance on how to determine where metadata should be downloaded from.</t>

<t>In order to perform full verification, an ECU SHALL perform the following steps:</t>

<t><list style="numbers">
  <t>Load and verify the current time or the most recent securely attested time.</t>
  <t>Download and check the Root metadata file from the Director repository, following the procedure in <xref target="check_root"/>.</t>
  <t>Download and check the Timestamp metadata file from the Director repository, following the procedure in <xref target="check_timestamp"/>.</t>
  <t>Check the previously downloaded Snapshot metadata file from the Directory repository (if available). If the hashes and version number of that file match the hashes and version number listed in the new Timestamp metadata, there are no new updates and the verification process MAY be stopped and considered complete. Otherwise, download and check the Snapshot metadata file from the Director repository, following the procedure in <xref target="check_snapshot"/>.</t>
  <t>Download and check the Targets metadata file from the Director repository, following the procedure in <xref target="check_targets"/>.</t>
  <t>If the Targets metadata from the Directory repository indicates that there are no new targets that are not already currently installed, the verification process MAY be stopped and considered complete. Otherwise, download and check the Root metadata file from the Image repository, following the procedure in <xref target="check_root"/>.</t>
  <t>Download and check the Timestamp metadata file from the Image repository, following the procedure in <xref target="check_timestamp"/>.</t>
  <t>Check the previously downloaded Snapshot metadata file from the Image repository (if available). If the hashes and version number of that file match the hashes and version number listed in the new Timestamp metadata, the ECU MAY skip to the last step. Otherwise, download and check the Snapshot metadata file from the Image repository, following the procedure in <xref target="check_snapshot"/>.</t>
  <t>Download and check the top-level Targets metadata file from the Image repository, following the procedure in <xref target="check_targets"/>.</t>
  <t>Verify that Targets metadata from the Director and Image repositories match. A Primary ECU MUST perform this check on metadata for all images listed in the Targets metadata file from the Director repository downloaded in step 6. A Secondary ECU MAY elect to perform this check only on the metadata for the image it will install. (That is, the image metadata from the Director that contains the ECU identifier of the current ECU.) To check that the metadata for an image matches, complete the following procedure:
  <list style="numbers">
      <t>Locate and download a Targets metadata file from the Image repository that contains an image with exactly the same filename listed in the Director metadata, following the procedure in <xref target="resolve_delegations"/>.</t>
      <t>Check that the Targets metadata from the Image repository matches the Targets metadata from the Director repository:
      <list style="numbers">
          <t>Check that the non-custom metadata (i.e., length and hashes) of the unencrypted or encrypted image are the same in both sets of metadata. Note: the Primary is responsible for validating encrypted images and associated metadata. The target ECU (Primary or Secondary) is responsible for validating the unencrypted image and associated metadata.</t>
          <t>Check that all MUST match custom metadata (e.g., hardware identifier and release counter) are the same in both sets of metadata.</t>
          <t>Check that the release counter in the previous Targets metadata file is less than or equal to the release counter in this Targets metadata file.</t>
        </list></t>
    </list></t>
</list></t>

<t>If any step fails, the ECU MUST return an error code indicating the failure. If a check for a specific type of security attack fails (i.e., rollback, freeze, arbitrary software, etc.), the ECU SHOULD return an error code that indicates the type of attack.</t>

</section>
<section anchor="check_root" title="How to check Root metadata">

<t>To properly check Root metadata, an ECU SHOULD:</t>

<t><list style="numbers">
  <t>Load the previous Root metadata file.</t>
  <t>Update to the latest Root metadata file.
  <list style="numbers">
      <t>Let N denote the version number of the latest Root metadata file (which at first could be the same as the previous Root metadata file).</t>
      <t>Try downloading a new version N+1 of the Root metadata file, up to some X number of bytes. The value for X is set by the implementer. For example, X may be tens of kilobytes. The filename used to download the Root metadata file is of the fixed form VERSION_NUMBER.FILENAME.EXT (e.g., 42.root.json). If this file is not available, the current Root metadata file is the latest; continue with step 3.</t>
      <t>Version N+1 of the Root metadata file MUST have been signed by the following: (1) a threshold of keys specified in the latest Root metadata file (version N), and (2) a threshold of keys specified in the new Root metadata file being validated (version N+1). If version N+1 is not signed as required, discard it, abort the update cycle, and report the signature failure. On the next update cycle, begin at version N of the Root metadata file. (Checks for an arbitrary software attack.)</t>
      <t>The version number of the latest Root metadata file (version N) must be less than or equal to the version number of the new Root metadata file (version N+1). Effectively, this means checking that the version number signed in the new Root metadata file is indeed N+1. If the version of the new Root metadata file is less than the latest metadata file, discard it, abort the update cycle, and report the rollback attack. On the next update cycle, begin at step 1 and version N of the Root metadata file. (Checks for a rollback attack.)</t>
      <t>Set the latest Root metadata file to the new Root metadata file.</t>
      <t>Repeat steps 2.1 to 2.6.</t>
    </list></t>
  <t>Check that the current (or latest securely attested) time is lower than the expiration timestamp in the latest Root metadata file. (Checks for a freeze attack.)</t>
  <t>If the Timestamp and/or Snapshot keys have been rotated, delete the previous Timestamp and Snapshot metadata files. (Checks for recovery from fast-forward attacks <xref target="MERCURY"/>.)</t>
</list></t>

</section>
<section anchor="check_timestamp" title="How to check Timestamp metadata">

<t>To properly check Timestamp metadata, an ECU SHOULD:</t>

<t><list style="numbers">
  <t>Download up to Y number of bytes. The value for Y is set by the implementer. For example, Y may be tens of kilobytes. The filename used to download the Timestamp metadata file is of the fixed form FILENAME.EXT (e.g., timestamp.json).</t>
  <t>Check that it has been signed by the threshold of keys specified in the latest Root metadata file. If the new Timestamp metadata file is not properly signed, discard it, abort the update cycle, and report the signature failure. (Checks for an arbitrary software attack.)</t>
  <t>Check that the version number of the previous Timestamp metadata file, if any, is less than or equal to the version number of this Timestamp metadata file. If the new Timestamp metadata file is older than the trusted Timestamp metadata file, discard it, abort the update cycle, and report the potential rollback attack. (Checks for a rollback attack.)</t>
  <t>Check that the current (or latest securely attested) time is lower than the expiration timestamp in this Timestamp metadata file. If the new Timestamp metadata file has expired, discard it, abort the update cycle, and report the potential freeze attack. (Checks for a freeze attack.)</t>
</list></t>

</section>
<section anchor="check_snapshot" title="How to check Snapshot metadata">

<t>To properly check Snapshot metadata, an ECU SHOULD:</t>

<t><list style="numbers">
  <t>Download up to the number of bytes specified in the Timestamp metadata file, constructing the metadata filename as defined in <xref target="metadata_filename_rules"/>.</t>
  <t>The hashes and version number of the new Snapshot metadata file MUST match the hashes and version number listed in the Timestamp metadata. If the hashes and version number do not match, discard the new Snapshot metadata, abort the update cycle, and report the failure. (Checks for a mix-and-match attack.)</t>
  <t>Check that it has been signed by the threshold of keys specified in the latest Root metadata file. If the new Snapshot metadata file is not signed as required, discard it, abort the update cycle, and report the signature failure. (Checks for an arbitrary software attack.)</t>
  <t>Check that the version number of the previous Snapshot metadata file, if any, is less than or equal to the version number of this Snapshot metadata file. If this Snapshot metadata file is older than the previous Snapshot metadata file, discard it, abort the update cycle, and report the potential rollback attack. (Checks for a rollback attack.)</t>
  <t>Check that the version number listed by the previous Snapshot metadata file for each Targets metadata file is less than or equal to its version number in this Snapshot metadata file. If this condition is not met, discard the new Snapshot metadata file, abort the update cycle, and report the failure. (Checks for a rollback attack.)</t>
  <t>Check that each Targets metadata filename listed in the previous Snapshot metadata file is also listed in this Snapshot metadata file. If this condition is not met, discard the new Snapshot metadata file, abort the update cycle, and report the failure. (Checks for a rollback attack.)</t>
  <t>Check that the current (or latest securely attested) time is lower than the expiration timestamp in this Snapshot metadata file. If the new Snapshot metadata file is expired, discard it, abort the update cycle, and report the potential freeze attack. (Checks for a freeze attack.)</t>
</list></t>

</section>
<section anchor="check_targets" title="How to check Targets metadata">

<t>To properly check Targets metadata, an ECU SHOULD:</t>

<t><list style="numbers">
  <t>Download up to Z number of bytes, constructing the metadata filename as defined in <xref target="metadata_filename_rules"/>. The value for Z is set by the implementer. For example, Z may be tens of kilobytes.</t>
  <t>The version number of the new Targets metadata file MUST match the version number listed in the latest Snapshot metadata. If the version number does not match, discard it, abort the update cycle, and report the failure. (Checks for a mix-and-match attack.) This step MAY be skipped when checking Targets metadata on a partial verification ECU; partial verification ECUs might not have Snapshot metadata.</t>
  <t>Check that the Targets metadata has been signed by the threshold of keys specified in the relevant metadata file. (Checks for an arbitrary software attack.):
  <list style="numbers">
      <t>If checking top-level Targets metadata, the threshold of keys is specified in the Root metadata.</t>
      <t>If checking delegated Targets metadata, the threshold of keys is specified in the Targets metadata file that delegated authority to this role.</t>
    </list></t>
  <t>Check that the version number of the previous Targets metadata file, if any, is less than or equal to the version number of this Targets metadata file. (Checks for a rollback attack.)</t>
  <t>Check that the current (or latest securely attested) time is lower than the expiration timestamp in this Targets metadata file. (Checks for a freeze attack.)</t>
  <t>If checking Targets metadata from the Director repository, verify that there are no delegations.</t>
  <t>If checking Targets metadata from the Director repository, check that no ECU identifier is represented more than once.</t>
  <t>If checking Targets metadata from the Director repository, and the ECU performing the verification is the Primary ECU, check that all listed ECU identifiers correspond to ECUs that are actually present in the vehicle.</t>
</list></t>

</section>
<section anchor="resolve_delegations" title="How to resolve delegations">

<t>To properly check Targets metadata for an image, an ECU MUST locate the metadata file(s) for the role (or roles) that have the authority to sign the image. This metadata might be located in the top-level Targets metadata, but it also may be delegated to another role or to multiple roles. Therefore, all delegations MUST be resolved using the following recursive procedure, beginning with the top-level Targets metadata file.</t>

<t><list style="numbers">
  <t>Download and check the current metadata file, following the procedure in <xref target="check_targets"/>. If the file cannot be loaded, or if any verification step fails, abort the delegation resolution, and indicate that image metadata cannot be found because of a missing or invalid role.</t>
  <t>If the current metadata file contains signed metadata about the image, end the delegation resolution and return the metadata to be checked.</t>
  <t>If the current metadata file was reached via a terminating delegation and does not contain signed metadata about the image, abort the delegation resolution for this image and return an error indicating that image metadata could not be found.</t>
  <t>Search the list of delegations, in listed order. For each delegation:
  <list style="numbers">
      <t>Check if the delegation applies to the image being processed. For the delegation to apply, it MUST include the hardware identifier of the target, and the target name MUST match one of the delegation’s image paths. If either of these tests fail, move on to the next delegation in the list.</t>
      <t>If the delegation is a multi-role delegation, follow the procedure described in <xref target="multirole_delegations"/>. If the multi-role delegation is terminating and no valid image metadata is found, abort the delegation resolution and return an error indicating that image metadata could not be found.</t>
      <t>If the delegation is a normal delegation, perform delegation resolution, starting at step 1. Note that this may recurse an arbitrary number of levels deep. If a delegation that applies to the image is found but no image metadata is found in the delegated roles or any of its sub-delegations, simply continue on with the next delegation in the list. The search is only completed or aborted if image metadata or a terminating delegation that applies to the image is found.</t>
    </list></t>
  <t>If the end of the list of delegations in the top-level metadata is reached without finding valid image metadata, return an error indicating that image metadata could not be found.</t>
</list></t>

</section>
<section anchor="multirole_delegations" title="Multi-role delegations">

<t>It is possible to delegate signing authority to multiple delegated roles as described in <xref target="TAP-3"/>. Each multi-role delegation effectively contains a list of ordinary delegations, plus a threshold of those roles that must be in agreement about the non-custom metadata for the image. All multi-role delegations MUST be resolved using the following procedure. Note that there may be sub-delegations inside multi-role delegations.</t>

<t><list style="numbers">
  <t>For each of the roles in the delegation, find and load the image metadata following the procedure in <xref target="resolve_delegations"/>.</t>
  <t>Inspect the non-custom part of the metadata loaded in step 1:
  <list style="numbers">
      <t>Locate all sets of roles that have agreeing (i.e., identical) non-custom metadata and “MUST match” custom metadata. Discard any set of roles with a size smaller than the threshold of roles that must be in agreement for this delegation.</t>
      <t>Check for a conflict. A conflict exists if there is more than one agreeing set of roles, yet each set has different metadata. If a conflict is found, choose and return the metadata from the set of roles which includes the earliest role in the multi-delegation list.</t>
      <t>If there is no conflict, check if there is any single set of roles with matching non-custom metadata. If there is, choose and return the metadata from this set.</t>
      <t>If no agreeing set can be found that meets the agreement threshold, return an error indicating that image metadata could not be found.</t>
    </list></t>
</list></t>

</section>
</section>
</section>
</section>


  </middle>

  <back>

    <references title='Normative References'>





<reference  anchor="RFC2119" target='https://www.rfc-editor.org/info/rfc2119'>
<front>
<title>Key words for use in RFCs to Indicate Requirement Levels</title>
<author initials='S.' surname='Bradner' fullname='S. Bradner'><organization /></author>
<date year='1997' month='March' />
<abstract><t>In many standards track documents several words are used to signify the requirements in the specification.  These words are often capitalized. This document defines these words as they should be interpreted in IETF documents.  This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t></abstract>
</front>
<seriesInfo name='BCP' value='14'/>
<seriesInfo name='RFC' value='2119'/>
<seriesInfo name='DOI' value='10.17487/RFC2119'/>
</reference>



<reference  anchor="RFC3647" target='https://www.rfc-editor.org/info/rfc3647'>
<front>
<title>Internet X.509 Public Key Infrastructure Certificate Policy and Certification Practices Framework</title>
<author initials='S.' surname='Chokhani' fullname='S. Chokhani'><organization /></author>
<author initials='W.' surname='Ford' fullname='W. Ford'><organization /></author>
<author initials='R.' surname='Sabett' fullname='R. Sabett'><organization /></author>
<author initials='C.' surname='Merrill' fullname='C. Merrill'><organization /></author>
<author initials='S.' surname='Wu' fullname='S. Wu'><organization /></author>
<date year='2003' month='November' />
<abstract><t>This document presents a framework to assist the writers of certificate policies or certification practice statements for participants within public key infrastructures, such as certification authorities, policy authorities, and communities of interest that wish to rely on certificates.  In particular, the framework provides a comprehensive list of topics that potentially (at the writer's discretion) need to be covered in a certificate policy or a certification practice statement.  This document supersedes RFC 2527.</t></abstract>
</front>
<seriesInfo name='RFC' value='3647'/>
<seriesInfo name='DOI' value='10.17487/RFC3647'/>
</reference>



<reference  anchor="RFC5198" target='https://www.rfc-editor.org/info/rfc5198'>
<front>
<title>Unicode Format for Network Interchange</title>
<author initials='J.' surname='Klensin' fullname='J. Klensin'><organization /></author>
<author initials='M.' surname='Padlipsky' fullname='M. Padlipsky'><organization /></author>
<date year='2008' month='March' />
<abstract><t>The Internet today is in need of a standardized form for the transmission of internationalized &quot;text&quot; information, paralleling the specifications for the use of ASCII that date from the early days of the ARPANET.  This document specifies that format, using UTF-8 with normalization and specific line-ending sequences.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='5198'/>
<seriesInfo name='DOI' value='10.17487/RFC5198'/>
</reference>


<reference anchor="NFC" target="https://www.unicode.org/reports/tr15/">
  <front>
    <title>Unicode Standard Annex #15: Unicode Normalization Forms</title>
    <author initials="M." surname="Davis">
      <organization></organization>
    </author>
    <author initials="M." surname="Duerst">
      <organization></organization>
    </author>
    <date year="2018" month="October"/>
  </front>
</reference>
<reference anchor="TAP-3" target="https://github.com/theupdateframework/taps/blob/d0818e580c322815a473520f2e8cc5f5eb8df499/tap3.md">
  <front>
    <title>The Update Framework TAP 3 - Multi-role delegations</title>
    <author initials="T.K." surname="Kuppusamy">
      <organization></organization>
    </author>
    <author initials="S." surname="Awwad">
      <organization></organization>
    </author>
    <author initials="E." surname="Cordell">
      <organization></organization>
    </author>
    <author initials="V." surname="Diaz">
      <organization></organization>
    </author>
    <author initials="J." surname="Moshenko">
      <organization></organization>
    </author>
    <author initials="J." surname="Cappos">
      <organization></organization>
    </author>
    <date year="2018" month="January" day="18"/>
  </front>
</reference>
<reference anchor="TAP-4" target="https://github.com/theupdateframework/taps/blob/2cb67d913ec19424d1e354b38f862886fbfd4105/tap4.md">
  <front>
    <title>The Update Framework TAP 4 - Multiple repository consensus on entrusted targets</title>
    <author initials="T.K." surname="Kuppusamy">
      <organization></organization>
    </author>
    <author initials="S." surname="Awwad">
      <organization></organization>
    </author>
    <author initials="E." surname="Cordell">
      <organization></organization>
    </author>
    <author initials="V." surname="Diaz">
      <organization></organization>
    </author>
    <author initials="J." surname="Moshenko">
      <organization></organization>
    </author>
    <author initials="J." surname="Cappos">
      <organization></organization>
    </author>
    <date year="2017" month="December" day="15"/>
  </front>
</reference>
<reference anchor="TUF-spec" target="https://github.com/theupdateframework/specification/blob/2b4e18472fe25d5b57f36f6fa50104967c8faeaa/tuf-spec.md">
  <front>
    <title>The Update Framework Specification</title>
    <author initials="J." surname="Samuel">
      <organization></organization>
    </author>
    <author initials="N." surname="Mathewson">
      <organization></organization>
    </author>
    <author initials="G." surname="Condra">
      <organization></organization>
    </author>
    <author initials="V." surname="Diaz">
      <organization></organization>
    </author>
    <author initials="T.K." surname="Kuppusamy">
      <organization></organization>
    </author>
    <author initials="S." surname="Awwad">
      <organization></organization>
    </author>
    <author initials="S." surname="Tobias">
      <organization></organization>
    </author>
    <author initials="J." surname="Wright">
      <organization></organization>
    </author>
    <author initials="H." surname="Mehnert">
      <organization></organization>
    </author>
    <author initials="E." surname="Tryzelaar">
      <organization></organization>
    </author>
    <author initials="J." surname="Cappos">
      <organization></organization>
    </author>
    <author initials="R." surname="Dingledine">
      <organization></organization>
    </author>
    <date year="2018" month="September" day="19"/>
  </front>
</reference>


    </references>

    <references title='Informative References'>

<reference anchor="MERCURY" target="https://www.usenix.org/system/files/conference/atc17/atc17-kuppusamy.pdf">
  <front>
    <title>Mercury: Bandwidth-Effective Prevention of Rollback Attacks Against Community Repositories</title>
    <author initials="T.K." surname="Kuppusamy">
      <organization></organization>
    </author>
    <author initials="V." surname="Diaz">
      <organization></organization>
    </author>
    <author initials="J." surname="Cappos">
      <organization></organization>
    </author>
    <date year="2017" month="July" day="12"/>
  </front>
  <seriesInfo name="ISBN" value="978-1-931971-38-6"/>
</reference>
<reference anchor="UPTANEESCAR" target="https://ssl.engineering.nyu.edu/papers/kuppusamy_escar_16.pdf">
  <front>
    <title>Securing Software Updates for Automobiles</title>
    <author initials="T.K." surname="Kuppusamy">
      <organization></organization>
    </author>
    <author initials="A." surname="Brown">
      <organization></organization>
    </author>
    <author initials="S." surname="Awwad">
      <organization></organization>
    </author>
    <author initials="D." surname="McCoy">
      <organization></organization>
    </author>
    <author initials="R." surname="Bielawski">
      <organization></organization>
    </author>
    <author initials="C." surname="Mott">
      <organization></organization>
    </author>
    <author initials="S." surname="Lauzon">
      <organization></organization>
    </author>
    <author initials="A." surname="Weimerskirch">
      <organization></organization>
    </author>
    <author initials="J." surname="Cappos">
      <organization></organization>
    </author>
    <date year="2016" month="October" day="16"/>
  </front>
</reference>
<reference anchor="PEP-458" target="https://www.python.org/dev/peps/pep-0458/">
  <front>
    <title>PEP 458 -- Surviving a Compromise of PyPI</title>
    <author initials="T.K." surname="Kuppusamy">
      <organization></organization>
    </author>
    <author initials="V." surname="Diaz">
      <organization></organization>
    </author>
    <author initials="D." surname="Stufft">
      <organization></organization>
    </author>
    <author initials="J." surname="Cappos">
      <organization></organization>
    </author>
    <date year="2013" month="September" day="27"/>
  </front>
</reference>
<reference anchor="DEPLOY" target="https://uptane.github.io/deployment-considerations/index.html">
  <front>
    <title>Uptane Deployment Best Practices</title>
    <author initials="." surname="Members of the Uptane Community">
      <organization></organization>
    </author>
    <date year="n.d."/>
  </front>
</reference>
<reference anchor="USATODAY" target="https://www.usatoday.com/story/tech/columnist/2016/06/28/your-average-car-lot-more-code-driven-than-you-think/86437052/">
  <front>
    <title>Your average car is a lot more code-driven than you think</title>
    <author initials="B." surname="O'Donnell">
      <organization></organization>
    </author>
    <date year="2016" month="June" day="28"/>
  </front>
</reference>
<reference anchor="CR-OTA" target="https://www.consumerreports.org/automotive-technology/automakers-embrace-over-the-air-updates-can-we-trust-digital-car-repair/">
  <front>
    <title>Automakers Embrace Over-the-Air Updates, but Can We Trust Digital Car Repair?</title>
    <author initials="K." surname="Barry">
      <organization></organization>
    </author>
    <date year="2018" month="April" day="20"/>
  </front>
</reference>
<reference anchor="IN-TOTO" target="https://in-toto.io/">
  <front>
    <title>in-toto: A framework to secure the integrity of software supply chains</title>
    <author >
      <organization></organization>
    </author>
    <date year="2018" month="October" day="29"/>
  </front>
</reference>


    </references>



  </back>

<!-- ##markdown-source:
H4sIAO6OI2AAA+2923bbRrYo+q6vwIgfImmTtCVf4jgPeyu2vKK1fDuWnXTW
Hme4QRKUsEwCbACUzHj438+8Vs0qFCjZSfc+a4zdD2mLAOoya9a8X8bj8V5X
dsviSfZ+3eVVkZ3Df+d5M88WdZM9K9ryosrgl+xstV4Wq6Lq8q6sq718Om2K
K/jqzbuTV6d783pW5SsYZUOjjFsZZTynEfZmeVdc1M32SVZWi3pvr1w3T7Kq
flY05RUMeFW075pN2x3fu/fjveO9vCnyJ9m7189e713XzceLpt6s5e+PxRZ+
mj/JzqquaKqiGz9r8kW3t0czfsiXdQWr2Bbt3rp8kv3vrp6NsrZuuqZYtPCv
7Qr/8f/u7eWb7rJunuxl2RiW1D7JXharadG0Wb3IustCofG0Xq02Vdlt4cUs
4y0mH9XNRV6VfxBwnmT/XpdVB9C7Kpb1GoGWPa83ABB8mr1p6v8qZh0s58WL
pyMHdwBF0Wb7s7s1vrGYZP8OACmr7Gm+XtftAc1SrPJy2QNy+78u6vpiWRCc
2smsXtHLLWy66J5kj2BvXVO/K2aX9PsMltLhUbw/P6EfmuKCVv3qd34Oe3qS
/dzU9cfltpJP5rDxo6Pje0d7e1XdrOjMEHp3sv/gE8nmxSLbf/n+/N0oO//l
5MWLUfby5PdRVnSzCS7+7fOnx0dHP/I3f5s8vPdj9uY/zrJ2Xcz46f1HD37g
p6+KDo89e1+VODFhImxqnTdldYHbgv9r+aOHRz8+5o/05Ve4uqWcBIC9WWVP
4YVXz58+oa10eXOBULnsunX75O7d6+vryYa/ncAh3m2KNaBLe7drjh7e5S/4
fnynM7gbclJVxafsztHDJztmb7+jQTy+4f8U5ybZs/yqbPu/bgAVO/oZkAYm
B8A/Hh/do52+O3mT3c/yDs7tKpvfe3z0uHgID+Dn8f30Hi/K7nIzRcS4C7i9
WeOYiwaQGcF8t8vX7d3psp7elcEe35vdPz5+fPQwf/DD/YfH9xbHxePZ7OHi
YTF9PF88+PFH/OT+ZDW34HlHlwZHzp7r0LLUcfZys+zKcVMvC0ATQFQCTzsM
mHeT/5hk/7FZrzdtvtqGz84n2cn1dT4Pfz2dwIVsYPBl+PuvAMwy/yP88d8n
2cu6vSyqj3XvAV+3GPT3jsZHjx30Hyj0j2fTRz/MfxToP/hz0JfBju4Xs6Mf
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
Aaxh0T4HMwEA

-->

</rfc>


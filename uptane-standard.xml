<?xml version="1.0" encoding="UTF-8"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc2629 version 1.2.9 -->

<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
]>

<?rfc toc="yes"?>
<?rfc sortrefs="yes"?>
<?rfc symrefs="yes"?>

<rfc ipr="noDerivativesTrust200902" docName="uptane-standard-design" category="info">

  <front>
    <title abbrev="UPTANE">Uptane Standard for Design and Implementation</title>

    <author initials="." surname="Members of the Uptane Alliance Community" fullname="Uptane Alliance Community">
      <organization>Uptane Alliance (c/o Prof. Justin Cappos)</organization>
      <address>
        <postal>
          <street>6 MetroTech</street>
          <city>Brooklyn</city>
          <region>NY</region>
          <code>11201</code>
          <country>USA</country>
        </postal>
        <email>uptane-standards@googlegroups.com</email>
      </address>
    </author>

    <date year="2020" month="November" day="19"/>

    <area>TODO</area>
    <workgroup>TODO</workgroup>
    <keyword>Internet-Draft</keyword>

    <abstract>


<t>This document describes a framework for securing ground vehicle software update systems.</t>



    </abstract>


  </front>

  <middle>


<section anchor="introduction" title="Introduction">

<t>Uptane is a secure software update framework for ground vehicles. This document describes procedures to enable programmers for OEMs and suppliers to securely design and implement this framework in a manner that better protects connected units on ground vehicles. Integrating Uptane as outlined in the sections that follow can reduce the ability of attackers to compromise critical systems. It also assures a faster and easier recovery process should a compromise occur.</t>

<t>These instructions specify the components necessary for a compliant implementation. Individual implementers can make their own technological choices within those requirements. This flexibility makes Uptane adaptable to the many customized update solutions used by manufacturers. If implementers wish to have compatible formats, they may use POUFs. POUFs contain a description of implementation choices as well as data binding formats. An implementer who adopts a POUF, as well as the Uptane Standard, will be able to interoperate with other implementations using that POUF.</t>

</section>
<section anchor="terminology" title="Terminology">

<section anchor="conformance-terminology" title="Conformance terminology">

<t>The keywords MUST, MUST NOT, REQUIRED, SHALL, SHALL NOT, SHOULD, SHOULD NOT, RECOMMENDED, MAY, and OPTIONAL in this document are to be interpreted as described in <xref target="RFC2119"/>.</t>

<t>In order to be considered Uptane-compliant, an implementation MUST follow all of these rules as specified in the document.</t>

</section>
<section anchor="terminology-1" title="Terminology">

<t><spanx style="emph">Bundle</spanx>: A set of images released by the repository that is meant to be installed by one or more target ECUs on a vehicle during the same update cycle.</t>

<t><spanx style="emph">Bus</spanx>: An internal communications network that interconnects components within a vehicle. A vehicle can have a number of buses that will vary in terms of power, speed, and resources.</t>

<t><spanx style="emph">ECU Identifier</spanx>: An attribute used to identify a specific ECU (e.g., a unique serial number).</t>

<t><spanx style="emph">ECU Version Manifest</spanx>: Metadata which details the software version currently installed on the ECU.</t>

<t><spanx style="emph">Hardware Identifier</spanx>: An attribute used to identify a model of an ECU.</t>

<t><spanx style="emph">Image</spanx>: File containing software for an ECU to install. May contain a binary image to flash, installation instructions, and other necessary information for the ECU to properly apply the update. Each ECU typically holds only one image, although this may vary in some cases.</t>

<t><spanx style="emph">Metadata</spanx>:  Information describing the characteristics of data including, for example, structural
metadata describing data structures (e.g., data format, syntax, and semantics) and
descriptive metadata describing data contents (e.g., information security labels). As used in Uptane, metadata can be described as information associated with a role or an image that contains the characteristics or parameters thereof (e.g., cryptographic material parameters, filenames, and versions.)</t>

<t><spanx style="emph">Primary/Secondary ECUs</spanx>: Terms used to describe the control units within a ground vehicle. A Primary ECU downloads and verifies update images and metadata for itself and for Secondary ECUs, and distributes images and metadata to Secondaries. Thus, it requires extra storage space and a means to download images and metadata.  Secondary ECUs receive their update images and metadata from the Primary, and only need to verify and install their own metadata and images.</t>

<t><spanx style="emph">POUF</spanx>: A document that contains the protocol, operations, usage, and formats (POUF) of a specific Uptane implementation. The POUF contains decisions about SHOULDs and MAYs in an implementation, as well as descriptions of data binding formats. POUFs MAY be used to create compatible Uptane implementations.</t>

<t><spanx style="emph">Repository</spanx>: A server containing metadata about images. May also contain the images themselves. Other data may be stored on the repository to be accessed by ECUs during the update process.</t>

<t><spanx style="emph">Suppliers</spanx>: Independent companies to which vehicle manufacturers may outsource the production of ECUs. Tier-1 suppliers directly serve the manufacturers. Tier-2 suppliers are those that perform outsourced work for Tier-1 suppliers.</t>

<t><spanx style="emph">Vehicle Version Manifest</spanx>: A compilation of all ECU version reports on a vehicle. It serves as a master list of all images currently running on all ECUs in the vehicle.</t>

</section>
<section anchor="uptane-role-terminology" title="Uptane role terminology">

<t>These terms are defined in greater detail in <xref target="roles"/>.</t>

<t><spanx style="emph">Delegation</spanx>: A process by which the responsibility of signing metadata about images is assigned to another party.
<spanx style="emph">Role</spanx>: A party (human or machine) responsible for signing a certain type of metadata. The role controls keys and is responsible for signing metadata entrusted to it with these keys. The roles mechanism of Uptane allows the system to distribute signing responsibilities so that the compromise of one key does not necessarily impact the security of the entire system.</t>

<t><list style="symbols">
  <t><spanx style="emph">Root role</spanx>: Signs metadata that distributes and revokes public keys used to verify the Root, Timestamp, Snapshot, and Targets role metadata.</t>
  <t><spanx style="emph">Snapshot role</spanx>: Signs metadata that indicates which images the repository has released at the same time.</t>
  <t><spanx style="emph">Targets role</spanx>: Signs metadata used to verify the image, such as cryptographic hashes and file size.</t>
  <t><spanx style="emph">Timestamp role</spanx>: Signs metadata that indicates if there are any new metadata or images on the repository.</t>
</list></t>

</section>
<section anchor="acronyms-and-abbreviations" title="Acronyms and abbreviations">

<t><spanx style="emph">CAN Bus</spanx>: Controller Area Network bus standard</t>

<t><spanx style="emph">CDN</spanx>: Content Delivery Network</t>

<t><spanx style="emph">ECUs</spanx>: Electronic Control Units, the computing units on a vehicle</t>

<t><spanx style="emph">LIN Bus</spanx>: Local Interconnect Bus</t>

<t><spanx style="emph">OBD</spanx>: On-board diagnostics</t>

<t><spanx style="emph">SOTA</spanx>: Software Updates Over-the-Air</t>

<t><spanx style="emph">UDS</spanx>: Unified Diagnostic Services</t>

<t><spanx style="emph">VIN</spanx>: Vehicle Identification Number</t>

</section>
</section>
<section anchor="rationale-for-and-scope-of-the-uptane-standard" title="Rationale for and scope of the Uptane Standard">

<t>This Standard document provides the essential components for the secure design, implementation, and deployment of Uptane by OEMs and suppliers. These guidelines contribute to compromise resilience, or the ability to minimize the extent of the threat posed by any given attack.</t>

<t>However, this specification is intended as an implementation guide, and not as a detailed technical argument about the security properties that Uptane provides.  Readers interested in such documentation should refer to published papers that cover this topic.  <xref target="UPTANEESCAR"/></t>

<section anchor="why-uptane-requires-a-standards-document" title="Why Uptane requires a standards document">

<t>A standards document that can guide the safe design, integration, and deployment of Uptane in vehicles is needed at this time because:</t>

<t><list style="symbols">
  <t>The number of connected units on the average vehicle continues to grow, with mainstream cars now containing up to 100 million lines of code. <xref target="USATODAY"/></t>
  <t>The expanded use of software over-the-air strategies creates new attack surfaces for malicious parties. <xref target="CR-OTA"/></t>
  <t>Legacy update strategies, such as SSL/TLS or GPG/RSA, are not feasible for use on vehicle ECUs because they force manufacturers to chose between enhanced security and customizability.</t>
  <t>Conventional strategies are also complicated by the differing resources of the ECUs, which can vary greatly in memory, storage space, and Internet connectivity.</t>
  <t>The design of Uptane makes it possible to offer improved design flexibility without sacrificing security.</t>
  <t>This added design flexibility, however, could be a liability if the framework is implemented incorrectly.</t>
  <t>Standardization of crucial steps in the design, implementation, and use of Uptane can assure that customizability does not impact security or functionality.</t>
</list></t>

</section>
<section anchor="scope-of-standard-coverage" title="Scope of Standard coverage">

<t>This document sets guidelines for implementing Uptane in most systems capable of updating software on connected units in ground vehicles, including passenger vehicles, light-duty trucks, heavy-duty trucks, and motorcycles. Uptane could potentially also be applied to other ground vehicles, such as automated shuttles, recreational vehicles, and military ground vehicles. Uptane could even be applied to domains such as IoT devices, medical devices, and autonomous aerial vehicles. In this section, we define the scope of that applicability by providing sample use cases and possible exceptions, aspects of software update security that are not applicable to Uptane, and the design requirements governing the preparation of these standards.</t>

<section anchor="assumptions" title="Assumptions">

<t>We assume the following system preconditions for Uptane:</t>

<t><list style="symbols">
  <t>Vehicles have the ability to establish connectivity to required backend services. For example, this could be done through cellular, Wi-Fi, or hard-wired mechanisms.</t>
  <t>ECUs are either directly connected to the communication channel, or are indirectly connected via some sort of network gateway.</t>
  <t>ECUs are programmable and provide sufficient performance to be updated.</t>
  <t>ECUs must be able to perform public key cryptography operations and calculate hashes of images and metadata files.</t>
  <t>There are state-of-the-art secure servers in place, such as the Director and Image repository servers.</t>
</list></t>

<t>It is important that any bugs detected in Uptane implementations be patched promptly. Failure to do so could interfere with the effectiveness of Uptane’s operations.</t>

</section>
<section anchor="use-cases" title="Use cases">

<t>The following use cases provide a number of scenarios illustrating the manner in which software updates could be accomplished using Uptane.</t>

<section anchor="oems-initializing-uptane-at-the-factory-using-sota" title="OEMs initializing Uptane at the factory using SOTA">

<t>An OEM plans to install Uptane on new vehicles. This entails the following components: code to perform full and partial verification, the latest copy of the relevant metadata, the public keys, and an accurate attestation of the latest time. The OEM then either requires its tier-1 suppliers to provide these materials to the suppliers’ assembly lines or can choose to add the materials later at the OEM’s assembly lines. The OEM’s in-vehicle implementation is Uptane-compliant if:</t>

<t><list style="numbers">
  <t>all Primaries perform full verification;</t>
  <t>all Secondaries that are updated via OTA at least perform partial verification; and</t>
  <t>all other ECUs that do not perform any type of verification cannot be updated via OTA.</t>
</list></t>

</section>
<section anchor="updating-one-ecu-with-a-complete-image" title="Updating one ECU with a complete image">

<t>A tier-1 supplier completes work on a revised image for an electronic brake control module. This module will control the brakes on all models of an SUV produced by the OEM mentioned above. Assuming supplier delegation is supported by the OEM for this ECU, each tier-1 supplier digitally signs the image, then delivers the signature, all of its metadata, including delegations, and associated images to the OEM. The OEM adds these metadata and images to its Image repository, along with information about any dependencies and conflicts between this image and those for other ECUs used in the OEM’s vehicles. The OEM also updates the inventory database, so that the Director repository can instruct the ECU on how to install these updated images.</t>

</section>
<section anchor="updating-individual-ecus-on-demand" title="Updating individual ECUs on demand">

<t>An OEM has issued a recall to address a problem with a keyless entry device that has been locking people out of their cars. The OEM prepares an updated flash image in the manner described above. The OEM then ships USB flash drives to vehicle owners and dealerships that allow those parties to update the firmware of their vehicles.</t>

</section>
<section anchor="update-one-ecu-with-multiple-deltas" title="Update one ECU with multiple deltas">

<t>The OEM wants to use delta updates to save over-the-air bytes. The delta images contain only the code and/or data that has changed from the previous image version. To do so, the OEM must first modify the Director repository, using the vehicle version manifest and dependency resolution to determine the differences between the previous and latest images. The OEM then adds the following to the custom Targets metadata used by the Director repository: (1) the algorithm used to apply a delta image, and (2) the Targets metadata about the delta image. The OEM will also check whether the delta images match the Targets metadata from the Director repository.</t>

</section>
</section>
</section>
<section anchor="exceptions" title="Exceptions">

<t>There are a number of factors that could impede the completion of the above scenarios:</t>

<t><list style="symbols">
  <t>ECUs may be lacking the necessary resources to function as designated. These resources could include weaknesses, in terms of CPU or RAM, that render performance of public key cryptography infeasible; a lack of sufficient storage to undo installation of bad software; or an ECU simply may reside on a low-speed network (e.g., LIN).</t>
  <t>ECUs may reside on different network segments, and may not be able to directly reach each other, requiring a gateway to facilitate communication.</t>
  <t>A user may replace OEM-installed ECUs with aftermarket ECUs.</t>
  <t>A vehicle may be able to download only a limited amount of data via a cellular channel due to limits on a data plan.</t>
  <t>A system may lack sufficient power to download or install software updates.</t>
  <t>Vehicles may be offline for extended periods of time, thus missing required updates (e.g., key rotations).</t>
  <t>OEMs may be unwilling to implement costly security or hardware requirements.</t>
</list></t>

</section>
<section anchor="out-of-scope" title="Out of scope">

<t>The following topics will not be addressed in this document, as they represent threats outside the scope of Uptane:</t>

<t><list style="symbols">
  <t>Physical attacks, such as manual tampering with ECUs outside the vehicle.</t>
  <t>Compromise of the packaged software, such as malware embedded in a trusted package.</t>
  <t>Compromise of the supply chain (e.g., build system, version control system, packaging process). A number of strategies (e.g., git signing, TPMs, in-toto <xref target="IN-TOTO"/>)  already exist to address this problem. Therefore, there is no need to duplicate those techniques here.</t>
  <t>Problems associated with OBD or UDS programming of ECUs, such as authentication of communications between ECUs.</t>
  <t>Malicious mirrors of package repositories, which may substitute original packages with malicious packages with matching version numbers <xref target="MERCURY"/>.</t>
</list></t>

</section>
<section anchor="design-requirements" title="Design requirements">

<t>The design requirements for this document are governed by the following principal parameters:</t>

<t><list style="symbols">
  <t>to clearly mandate the design and implementation steps that are security critical and must be followed as is, while offering flexibility in the implementation of non-critical steps. In this manner, users can adapt to support different use models and deployment scenarios.</t>
  <t>to ensure that, if Uptane is implemented, the security practices mandated or suggested in this document do not interfere with the functionality of ECUs, vehicles, or the systems that maintain them.</t>
  <t>to delineate guidelines to ensure that, should any part of the SOTA mechanism of a vehicle be attacked, an attacker must compromise two or more modules to breach the SOTA mechanism.</t>
</list></t>

</section>
</section>
<section anchor="threat-model-and-attack-strategies" title="Threat model and attack strategies">

<t>The overarching goal of Uptane is to provide a system that is resilient in the face of various types of compromise. In this section, we describe the goals an attacker may have (<xref target="attacker_goals"/>) and the capabilities they may have or could develop (<xref target="capabilities"/>). We then describe and classify types of attacks on the system according to the attacker’s goals (<xref target="threats"/>).</t>

<section anchor="attacker_goals" title="Attacker goals">

<t>We assume that attackers may want to achieve one or more of the following goals, in increasing order of severity:</t>

<t><list style="symbols">
  <t>Read the contents of updates to discover confidential information, reverse-engineer firmware, or compare two firmware images to identify security fixes and hence determine the fixed security vulnerability.</t>
  <t>Deny installation of updates to prevent vehicles from fixing software problems.</t>
  <t>Cause one or more ECUs in the vehicle to fail, denying use of the vehicle or of certain functions.</t>
  <t>Control ECUs within the vehicle, and possibly the vehicle itself.</t>
</list></t>

</section>
<section anchor="capabilities" title="Attacker capabilities">

<t>Uptane is designed with resilience to compromise in mind. We assume that attackers may develop one or more of the following capabilities:</t>

<t><list style="symbols">
  <t>Intercept and modify network traffic (i.e., perform man-in-the-middle attacks). This capability may be developed in two domains:
  <list style="symbols">
      <t>Outside the vehicle, intercepting and modifying traffic between the vehicle and software repositories.</t>
      <t>Inside the vehicle, intercepting and modifying traffic on one or more vehicle buses (e.g., via an OBD port or using a compromised ECU as a vector).</t>
    </list></t>
  <t>Compromise and control either a Director repository or Image repository server, and any keys stored on that repository, but not both the Director and Image repositories.</t>
  <t>Compromise either a Primary ECU or a Secondary ECU, but not both in the same vehicle.</t>
</list></t>

</section>
<section anchor="threats" title="Description of threats">

<t>Uptane’s threat model includes the following types of attacks, organized according to the attacker goals listed in <xref target="attacker_goals"/>.</t>

<section anchor="read_updates" title="Read updates">

<t><list style="symbols">
  <t><spanx style="emph">Eavesdrop attack:</spanx> Read sensitive or confidential information from an update intended to be encrypted for a specific ECU. (Note: Not all implementations will have a need for protecting information in this way.)</t>
</list></t>

</section>
<section anchor="deny_updates" title="Deny installation of updates">

<t>An attacker seeking to deny the installation of updates may attempt one or more of the following strategies, among others:</t>

<t><list style="symbols">
  <t><spanx style="emph">Drop-request attack:</spanx> Block network traffic outside or inside the vehicle.</t>
  <t><spanx style="emph">Slow retrieval attack:</spanx> Slow down network traffic, in the extreme case sending barely enough packets to avoid a timeout. Similar to a drop-request attack, except that both the sender and receiver of the traffic still think network traffic is unimpeded.</t>
  <t><spanx style="emph">Freeze attack:</spanx> Continue to send a properly signed, but old, update bundle to the ECUs, even if newer updates exist.</t>
  <t><spanx style="emph">Partial bundle installation attack:</spanx> Install a valid (signed) update bundle, and then block selected updates within the bundle.</t>
  <t>Conduct a denial of service attack against the Uptane repositories or infrastructure.</t>
</list></t>

</section>
<section anchor="change_functionality" title="Interfere with ECU functionality">

<t>Attackers seeking to interfere with the functionality of vehicle ECUs in order to cause an operational failure or unexpected behavior may do so in one of the following ways:</t>

<t><list style="symbols">
  <t><spanx style="emph">Rollback attack:</spanx> Cause an ECU to install a previously valid software revision that is older than the currently installed version.</t>
  <t><spanx style="emph">Endless data attack:</spanx> Send a large amount of data to an ECU, until it runs out of storage, possibly causing the ECU to fail to operate.</t>
  <t><spanx style="emph">Mix-and-match attack:</spanx> Install a malicious software bundle in which some of the updates do not interoperate properly. This may be accomplished even if all of the individual images being installed are valid, as long as valid versions exist that are mutually incompatible.</t>
</list></t>

</section>
<section anchor="control_ecu" title="Control an ECU or vehicle">

<t>Full control of a vehicle, or one or more ECUs within a vehicle, is the most severe threat.</t>

<t><list style="symbols">
  <t><spanx style="emph">Arbitrary software attack:</spanx> Cause an ECU to install and run arbitrary code of the attacker’s choice.</t>
</list></t>

</section>
</section>
</section>
<section anchor="design" title="Detailed design of Uptane">

<t>Uptane does not specify implementation details. Instead, this Standard describes the components necessary for a compliant implementation and leaves it up to individual implementers to make their own technological choices within those requirements.</t>

<t>At a high level, Uptane requires:</t>

<t><list style="symbols">
  <t>Two software repositories:
  <list style="symbols">
      <t>An Image repository containing binary images to install and signed metadata about those images.</t>
      <t>A Director repository connected to an inventory database that can sign metadata on demand for images in the Image repository.</t>
    </list></t>
  <t>Repository tools for generating Uptane-specific metadata about images.</t>
  <t>A public key infrastructure supporting the required metadata production and signing roles on each repository:
  <list style="symbols">
      <t>Root - The certificate authority for the Uptane ecosystem. Distributes public keys for verifying all the other roles’ metadata.</t>
      <t>Timestamp - Indicates whether there are new metadata or images.</t>
      <t>Snapshot - Indicates images released by the repository at a point in time via signing metadata about Targets metadata.</t>
      <t>Targets - Indicates metadata about images, such as hashes and file sizes.</t>
    </list></t>
  <t>A secure way for ECUs to know the time.</t>
  <t>An ECU capable of downloading images and associated metadata from the Uptane servers.</t>
  <t>An in-vehicle client on a Primary ECU capable of verifying the signatures on all update metadata and downloading updates on behalf of its associated Secondary ECUs. The Primary ECU MAY be the same ECU that communicates with the server.</t>
  <t>A client or library on each Secondary ECU capable of performing either full or partial verification of metadata.</t>
</list></t>

<section anchor="roles" title="Roles on repositories">

<t>A repository contains images and metadata. Each role has a particular type of metadata associated with it, as described in <xref target="meta_structures"/>.</t>

<section anchor="root_role" title="The Root role">

<t>A repository’s Root role SHALL be responsible for a Certificate Authority as defined in <xref target="RFC3647"/>.
A repository’s Root role SHALL produce and sign Root metadata as described in <xref target="root_meta"/>.
A repository’s Root role SHALL sign the public keys used to verify the metadata produced by the Timestamp, Snapshot, and Targets roles.
A repository’s Root role SHALL revoke keys for the other roles if they are compromised.</t>

</section>
<section anchor="targets_role" title="The Targets role">

<t>A repository’s Targets role SHALL produce and sign metadata about images and delegations as described in <xref target="targets_meta"/>.</t>

<section anchor="targets_role_delegations" title="Delegations">

<t>The Targets role on the Image repository MAY delegate the responsibility of signing metadata to other, custom-defined roles referred to as delegated targets. If it does, it MUST do so as specified in <xref target="delegations_meta"/>.</t>

<t>Responsibility for signing images or a subset of images MAY be delegated to more than one role and therefore it is possible for two different roles to be trusted for signing a particular image. For this reason, delegations MUST be prioritized.</t>

<t>A particular delegation for a subset of images MAY be designated as <spanx style="strong">terminating</spanx>. For terminating delegations, the client SHALL NOT search any further if it does not find validly signed metadata about those images. Delegations SHOULD NOT be terminating by default; terminating delegations SHOULD only be used when there is a compelling technical reason to do so.</t>

<t>A delegation for a subset of images MAY be a multi-role delegation <xref target="TAP-3"/>. A multi-role delegation indicates that multiple roles are needed to sign a particular image and each of the delegatee roles MUST sign the same metadata.</t>

<t>Delegations only apply to the Image repository. The Targets role on the Director repository MUST NOT delegate metadata signing responsibility.</t>

</section>
</section>
<section anchor="snapshot_role" title="The Snapshot role">

<t>A repository’s Snapshot role SHALL produce and sign metadata about all Targets metadata the repository releases, including the current version number of the top-level Targets metadata, and the version numbers of all delegated Targets metadata, as described in <xref target="snapshot_meta"/>.</t>

</section>
<section anchor="timestamp_role" title="The Timestamp role">

<t>A repository’s Timestamp role SHALL produce and sign metadata indicating whether there are new metadata or images on the repository. It MUST do so by signing the metadata about the Snapshot metadata file.</t>

</section>
</section>
<section anchor="meta_structures" title="Metadata structures">

<t>Uptane’s security guarantees all rely on properly created metadata that follows a designated structure. The Uptane Standard <spanx style="strong">does not</spanx> mandate any particular format or encoding for the metadata as a whole. ASN.1 (with any encoding scheme like BER, DER, XER, etc.), JSON, XML, or any other encoding format that is capable of providing the required structure MAY be used.</t>

<t>However, string comparison is required as part of metadata verification. To ensure an accurate basis for comparing strings, all strings MUST be encoded in the Unicode Format for Network Interchange as defined in <xref target="RFC5198"/>, including normalization into Unicode Normalization Form C (<xref target="NFC"/>).</t>

<t>In the <spanx style="emph">Deployment Best Practices</spanx> (<xref target="DEPLOY"/>), Joint Development Foundation Projects, LLC, Uptane Series provides some examples of compliant metadata structures in ASN.1 and JSON.</t>

<section anchor="common_metadata" title="Common metadata structures">

<t>Every public key MUST be represented using a public key identifier.  A public key identifier is EITHER all of the following:</t>

<t><list style="symbols">
  <t>The value of the public key itself (which MAY be, for example, formatted as a PEM string)</t>
  <t>The public key cryptographic algorithm used by the key (such as RSA or ECDSA)</t>
  <t>The particular scheme used to verify the signature (such as <spanx style="verb">rsassa-pss-sha256</spanx> or <spanx style="verb">ecdsa-sha2-nistp256</spanx>)</t>
</list></t>

<t>OR a secure hash over at least the above components (such as the keyid mechanism in TUF).</t>

<t>All four Uptane roles (Root, Targets, Snapshot, and Timestamp) share a common structure. They SHALL contain the following two attributes:</t>

<t><list style="symbols">
  <t>A payload of metadata to be signed</t>
  <t>An attribute containing the signature(s) of the payload, where each entry specifies:
  <list style="symbols">
      <t>The public key identifier of the key being used to sign the payload</t>
      <t>A signature with this key over the payload</t>
    </list></t>
</list></t>

<t>The payload differs depending on the role. However, the payload for all roles shares a common structure. It SHALL contain the following four attributes:</t>

<t><list style="symbols">
  <t>An indicator of the type of role (Root, Targets, Snapshot, or Timestamp)</t>
  <t>An expiration date and time</t>
  <t>An integer version number, which SHOULD be incremented each time the metadata file is updated</t>
  <t>The role-specific metadata for the role indicated</t>
</list></t>

<t>The following sections describe the role-specific metadata. All roles SHALL follow the common structures described here.</t>

</section>
<section anchor="root_meta" title="Root metadata">

<t>A repository’s Root metadata distributes the public keys of the top-level Root, Targets, Snapshot, and Timestamp roles, as well as revocations of those keys. It SHALL contain two attributes:</t>

<t><list style="symbols">
  <t>A representation of the public keys for all four roles. Each key SHALL have a unique public key identifier.</t>
  <t>An attribute mapping each role to (1) its public key(s), and (2) the threshold of signatures required for that role.</t>
</list></t>

<t>Additionally, it MAY contain a mapping of roles to a list of valid URLs from which the role metadata can be downloaded.  If this mapping of URLs is used, the implementer SHOULD implement this functionality following <xref target="TAP-5"/> to avoid adding unforeseen security risks.</t>

</section>
<section anchor="targets_meta" title="Targets metadata">

<t>The Targets metadata on a repository contains all of the information about images to be installed on ECUs. This includes filenames, hashes, file sizes, and MAY also include other useful information about images, such as what types of hardware are compatible with a particular image.</t>

<t>Targets metadata can also contain metadata about delegations, allowing one Targets role to delegate its authority to another. This means that an individual Targets metadata file might contain only metadata about delegations, only metadata about images, or some combination of the two. The details of how ECUs traverse the delegation tree to find valid metadata about images is specified in <xref target="resolve_delegations"/>.</t>

<section anchor="targets_images_meta" title="Metadata about images">

<t>To be available to install on clients, all images on the repository MUST have their metadata listed in a Targets role.  Each Targets role MAY provide a list of some images on the repository.  This list MUST provide, at a minimum, the following information about each image:</t>

<t><list style="symbols">
  <t>The image filename</t>
  <t>The size of the image in bytes</t>
  <t>One or more hashes of the image file, along with the hashing function used</t>
</list></t>

<section anchor="custom-metadata-about-images" title="Custom metadata about images">

<t>In addition to the required metadata, Targets metadata files MAY contain extra metadata for images on the repository. This metadata can be customized for a particular use case. Examples of use cases for different types of custom metadata can be found in the <spanx style="emph">Deployment Best Practices</spanx> document (<xref target="DEPLOY"/>). However, there are a few important pieces of custom metadata that SHOULD be present in most implementations. In addition, there is one element in the custom metadata that MUST be present in the Targets metadata from the Director.</t>

<t>Custom metadata MAY also contain a demarcated field or section that MUST match whenever two pieces of metadata are checked against each other, such as when Targets metadata from the Director repository is checked against Targets metadata from the Image repository.</t>

<t>The information listed below SHOULD be provided for each image on both the Image repository and the Director repository. If a “MUST match section” is to be implemented, that is where this information SHOULD be placed.</t>

<t><list style="symbols">
  <t>A release counter, to be incremented each time a new version of the image is released. This can be used to prevent rollback attacks even in cases where the Director repository is compromised.</t>
  <t>A hardware identifier, or list of hardware identifiers, representing models of ECUs with which the image is compatible. This can be used to ensure that an ECU cannot be ordered to install an incompatible image, even in cases where the Director repository is compromised.</t>
</list></t>

<t>The following information is CONDITIONALLY REQUIRED for each image on the Director repository IF that image is encrypted:</t>

<t><list style="symbols">
  <t>Information about filenames, hashes, and file size of the encrypted image.</t>
  <t>Information about the encryption method, and other relevant information–for example, a symmetric encryption key encrypted by the ECU’s asymmetric key could be included in the Director repository metadata.</t>
</list></t>

<t>The following information MUST be provided for each image in the Targets metadata from the Director repository:</t>

<t><list style="symbols">
  <t>An ECU identifier (such as a serial number), specifying the ECU that should install the image.</t>
</list></t>

<t>The Director repository MAY provide a download URL for the image file. This may be useful, for example, when the image is on a public CDN and the Director wishes to provide a signed URL.</t>

</section>
</section>
<section anchor="delegations_meta" title="Metadata about delegations">

<t>A Targets metadata file on the Image repository (but not the Director repository) MUST be able to delegate signing authority to other entities. For example, it could delegate signing authority for a particular ECU’s firmware to that ECU’s supplier. A metadata file MAY contain any number of delegations and MUST keep the delegations in prioritized order.</t>

<t>Any metadata file with delegations MUST provide the following information:</t>

<t><list style="symbols">
  <t>A list of public keys of all delegatees. Each key should have a unique public key identifier and a key type.</t>
  <t>A list of delegations, each of which contains:
  <list style="symbols">
      <t>A list of the filenames to which this role applies. This MAY be expressed using wildcards, or by enumerating a list, or a combination of the two.</t>
      <t>An optional list of the hardware identifiers to which this role applies.  If this is omitted, any hardware identifier will match.</t>
      <t>An indicator of whether or not this is a terminating delegation. (See <xref target="targets_role_delegations"/>.)</t>
      <t>A list of the roles to which this delegation applies. Each role needs to specify:
      <list style="symbols">
          <t>A name for the role (e.g., “supplier1-qa”)</t>
          <t>The key identifiers for each key this role uses</t>
          <t>A threshold of keys that must sign for this role</t>
        </list></t>
    </list></t>
</list></t>

<t>Note that <spanx style="strong">any</spanx> Targets metadata file stored on the Image repository may contain delegations, and these delegations can be in chains of arbitrary length.</t>

</section>
</section>
<section anchor="snapshot_meta" title="Snapshot metadata">

<t>The Snapshot metadata lists version numbers and filenames of all Targets metadata files. It protects against mix-and-match attacks if a delegated supplier key is compromised.</t>

<t>For each Targets metadata file on the repository, the Snapshot metadata SHALL contain the following information:</t>

<t><list style="symbols">
  <t>The filename and version number of the Targets metadata file.</t>
</list></t>

<t>The Snapshot metadata MAY also list the Root metadata filename and version number. This is not required, particularly for implementations of <xref target="TAP-5"/>, but MAY be included in all cases for backward compatibility.</t>

</section>
<section anchor="timestamp_meta" title="Timestamp metadata">

<t>The Timestamp metadata SHALL contain the following information:</t>

<t><list style="symbols">
  <t>The filename and version number of the latest Snapshot metadata on the repository.</t>
  <t>One or more hashes of the Snapshot metadata file, along with the hashing function used.</t>
</list></t>

</section>
<section anchor="repo_mapping_meta" title="Repository mapping metadata">

<t>As described in the introduction to <xref target="design"/>, Uptane requires a Director repository and an Image repository. However, it is possible to have an Uptane-compliant implementation that has more than two repositories.</t>

<t>Repository mapping metadata informs a Primary ECU about which repositories to trust for images or image paths. <xref target="TAP-4"/> describes how to make use of more complex repository mapping metadata in order to have more than the two required repositories.</t>

<t>Repository mapping metadata, or the equivalent informational content, MUST be present on all Primary ECUs, and MUST contain the following information:</t>

<t><list style="symbols">
  <t>A list of repository names and one or more URLs at which the named repository can be accessed. At a minimum, this MUST include the Director and Image repositories.</t>
  <t>A list of mappings of image paths to repositories, each of which contains:
  <list style="symbols">
      <t>A list of image paths. Image paths MAY be expressed using wildcards, or by enumerating a list, or a combination of the two.</t>
      <t>A list of repositories that MUST provide signed Targets metadata for images stored at those paths.</t>
    </list></t>
</list></t>

<t>For example, in the most basic Uptane case, the repository mapping metadata would contain:</t>

<t><list style="symbols">
  <t>The name and URL of the Director repository.</t>
  <t>The name and URL of the Image repository.</t>
  <t>A single mapping indicating that all images (<spanx style="verb">*</spanx>) MUST be signed by both the Director and Image repository.</t>
</list></t>

<t>Note that the metadata need not be in the form of a metadata file. For example, in the basic case where there is only one Director and one Image repository, and all images need to have signed metadata from both repositories, it would be sufficient to have a configuration file with URLs for the two repositories and a client that always checks for metadata matches between them. In this case, no explicit mapping would be defined, because the mapping is defined as part of the Uptane client implementation.</t>

<t>The <spanx style="emph">Uptane Deployment Best Practices</spanx> document (<xref target="DEPLOY"/>) provides more guidance on how to implement repository mapping metadata for more complex use cases. It also discusses strategies for updating repository mapping metadata, if required.</t>

</section>
<section anchor="metadata_filename_rules" title="Rules for filenames in repositories and metadata">

<t>There is a difference between the filename in a metadata file or an ECU, and the filename on a repository. This difference exists in order to avoid race conditions, where metadata and images are read from, and written to, at the same time. For more details, the reader should read the TUF specification <xref target="TUF-spec"/> and PEP 458 <xref target="PEP-458"/>.</t>

<t>Unless stated otherwise, all files SHALL be written to repositories in accordance with the following two rules:</t>

<t><list style="numbers">
  <t>Metadata filenames SHALL be qualified with version numbers. If a metadata file A is specified as FILENAME.EXT in another metadata file B, then it SHALL be written as VERSION.FILENAME.EXT, where VERSION is A’s version number, as defined in <xref target="common_metadata"/>, with one exception: If the version number of the Timestamp metadata file might not be known in advance by a client, it MAY be read from, and written to, a repository using a filename without a version number qualification, i.e., FILENAME.EXT.</t>
  <t>If an image is specified in a Targets metadata file as FILENAME.EXT, it SHALL be written to the repository as HASH.FILENAME.EXT, where HASH is one of the hash digests of the file, as specified in <xref target="targets_images_meta"/>. The file MUST be written to the repository using <spanx style="emph">n</spanx> different filenames, one for each hash digest listed in its corresponding Targets metadata.</t>
</list></t>

<t>For example:</t>

<t><list style="symbols">
  <t>The version number of the Snapshot metadata file is 61, and its filename in the Timestamp metadata is “snapshot.json”. The filename on the repository will be “61.snapshot.json”.</t>
  <t>There is an image with the filename “acme_firmware.bin” specified in the Targets metadata, with a SHA3-256 of “aaaa” and a SHA-512/224 of “bbbb”. It will have two filenames on the repository: “aaaa.acme_firmware.bin” and “bbbb.acme_firmware.bin”.</t>
</list></t>

</section>
</section>
<section anchor="server-repository-implementation-requirements" title="Server / repository implementation requirements">

<t>An Uptane implementation SHALL make the following services available to vehicles:</t>

<t><list style="symbols">
  <t>Image repository</t>
  <t>Director repository</t>
</list></t>

<t>Additionally, an Uptane implementation requires ECUs to have a secure way to know the current time.</t>

<section anchor="image-repository" title="Image repository">

<t>The Image repository exists to allow an OEM and/or its suppliers to upload images and their associated metadata. It makes these images and their metadata available to vehicles. The Image repository is designed to be primarily controlled by human actors, and updated relatively infrequently.</t>

<t>The Image repository SHALL expose an interface permitting the download of metadata and images. This interface SHOULD be public.</t>

<t>The Image repository SHALL require authorization for writing metadata and images.</t>

<t>The Image repository SHALL provide a method for authorized users to upload images and their associated metadata. It SHALL check that a user writing metadata and images is authorized to do so for that specific image by checking the chain of delegations as described in <xref target="delegations_meta"/>.</t>

<t>The Image repository SHALL implement storage which permits authorized users to write an image file using a unique filename, and later read the same file using the same name. It MAY use any filesystem, key-value store, or database that fulfills this requirement.</t>

<t>The Image repository MAY require authentication for read access.</t>

</section>
<section anchor="director_repository" title="Director repository">

<t>The Director repository instructs ECUs as to which images should be installed by producing signed metadata on demand. Unlike the Image repository, it is mostly controlled by automated, online processes. It also consults a private inventory database containing information on vehicles, ECUs, and software revisions.</t>

<t>The Director repository SHALL expose an interface for Primaries to upload vehicle version manifests (<xref target="vehicle_version_manifest"/>) and download metadata. This interface SHOULD be public.
The Director MAY encrypt images for ECUs that require them, either by encrypting on-the-fly or by storing encrypted images on the repository.</t>

<t>The Director repository SHALL implement storage which permits an automated service to write generated metadata files. It MAY use any filesystem, key-value store, or database that fulfills this requirement.</t>

<section anchor="directing-installation-of-images-on-vehicles" title="Directing installation of images on vehicles">

<t>A Director repository MUST conform to the following six-step process for directing the installation of software images on a vehicle.</t>

<t><list style="numbers">
  <t>The Director SHOULD first identify the vehicle. This MAY be done when the Director receives a vehicle version manifest sent by a Primary (as described in <xref target="construct_manifest_primary"/>), decodes the manifest, and determines the unique vehicle identifier. Additionally, the Director MAY utilize other mechanisms to uniquely identify a vehicle (e.g., 2-way TLS with unique client certificates).</t>
  <t>Using the vehicle identifier, the Director queries its inventory database (as described in <xref target="inventory_db"/>) for relevant information about each ECU in the vehicle.</t>
  <t>The Director SHALL check the manifest for accuracy compared to the information in the inventory database. If any of the required checks fail, the Director MAY drop the request. An implementer MAY make additional checks if desired. At a minimum, the Director SHALL check the following:
  <list style="symbols">
      <t>Each ECU recorded in the inventory database is also represented in the manifest.</t>
      <t>The signature of the manifest matches the ECU key of the Primary that sent it.</t>
      <t>The signature of each Secondary’s contribution to the manifest matches the ECU key of that Secondary.</t>
    </list></t>
  <t>The Director SHOULD check that the nonce or counter in each ECU version report has not been used before to prevent a replay of the ECU version report. If the nonce or counter is reused the Director SHOULD drop the request.</t>
  <t>The Director extracts information about currently installed images from the vehicle version manifest. Using this information, it determines if the vehicle is already up-to-date, and if not, determines a set of images that should be installed. The exact process by which this determination takes place is out of scope of this Standard. However, the Director MUST take into account <spanx style="emph">dependencies</spanx> and <spanx style="emph">conflicts</spanx> between images and SHOULD consult well-established techniques for dependency resolution.</t>
  <t>The Director MAY encrypt images for ECUs that require it.</t>
  <t>The Director generates new metadata representing the desired set of images to be installed on the vehicle, based on the dependency resolution in step 4. This includes Targets (<xref target="targets_meta"/>), Snapshot (<xref target="snapshot_meta"/>), and Timestamp (<xref target="timestamp_meta"/>) metadata. It then sends this metadata to the Primary as described in <xref target="download_meta_primary"/>.</t>
</list></t>

</section>
<section anchor="inventory_db" title="Inventory Database">

<t>The Director SHALL use a private inventory database to store information about ECUs and vehicles. An implementer MAY use any durable database for this purpose.</t>

<t>The inventory database MUST record the following pieces of information:</t>

<t><list style="symbols">
  <t>Per vehicle:
  <list style="symbols">
      <t>A unique identifier (such as a VIN)</t>
    </list></t>
  <t>Per ECU:
  <list style="symbols">
      <t>A unique identifier (such as a serial number)</t>
      <t>The vehicle identifier the ECU is associated with</t>
      <t>An ECU key (symmetric or asymmetric; for asymmetric keys, only the public part SHOULD be stored)</t>
      <t>The ECU key identifier (as defined in <xref target="common_metadata"/>)</t>
      <t>Whether the ECU is a Primary or a Secondary</t>
    </list></t>
</list></t>

<t>The inventory database MAY record other information about ECUs and vehicles. It SHOULD record a hardware identifier for each ECU to protect against the possibility of directing the ECU to install incompatible firmware.</t>

</section>
</section>
</section>
<section anchor="in-vehicle-implementation-requirements" title="In-vehicle implementation requirements">

<t>An Uptane-compliant ECU SHALL be able to download and verify image metadata and image binaries before installing a new image and MUST have a secure way of verifying the current time, or a sufficiently recent attestation of the time.</t>

<t>Each ECU receiving over-the-air updates in a vehicle is either a Primary or a Secondary ECU. A Primary ECU collects and delivers vehicle manifests to the Director (<xref target="vehicle_version_manifest"/>) that contain information about which images have been installed on ECUs in the vehicle. It also verifies the time and downloads and verifies the latest metadata and images for itself and for its Secondaries. A Secondary ECU verifies the time, and downloads and verifies the latest metadata and images for itself from its associated Primary ECU. It also sends signed information about its installed images to its associated Primary.</t>

<t>All ECUs MUST verify image metadata as specified in <xref target="metadata_verification"/> before installing an image or making it available to other ECUs. A Primary ECU MUST perform full verification (<xref target="full_verification"/>). A Secondary ECU SHOULD perform full verification if possible. If a Secondary cannot perform full verification, it SHALL, at the very least, perform partial verification. In addition, it MAY also perform some steps from the full verification process. See the <spanx style="emph">Uptane Deployment Best Practices</spanx> document (<xref target="DEPLOY"/>) for a discussion of how to choose between partial and full verification.</t>

<t>ECUs MUST have a secure source of time. An OEM/Uptane implementer MAY use any external source of time that is demonstrably secure. The <spanx style="emph">Uptane Deployment Best Practices</spanx> document (<xref target="DEPLOY"/>) describes one way to implement an external time server to cryptographically attest time, as well as the security properties required.</t>

<section anchor="build-time-prerequisite-requirements-for-ecus" title="Build-time prerequisite requirements for ECUs">

<t>For an ECU to be capable of receiving Uptane-secured updates, it MUST have the following data provisioned at the time it is manufactured or installed in the vehicle:</t>

<t><list style="numbers">
  <t>A sufficiently recent copy of required Uptane metadata at the time of manufacture or install. This is necessary for the ECU to authenticate that the remote repository is legitimate when it first downloads metadata in the field. See the <spanx style="emph">Uptane Deployment Best Practices</spanx> document (<xref target="DEPLOY"/>) for more information.
  <list style="symbols">
      <t>Partial verification Secondary ECUs MUST have the Root and Targets metadata from the Director repository (to reduce the scope of rollback and replay attacks). These ECUs MAY also have metadata from other roles or the Image repository if they will be used by the Secondary.</t>
      <t>Full verification ECUs MUST have a complete set of metadata (Root, Targets, Snapshot, and Timestamp) from both repositories (to prevent rollback and replay attacks), as well as the repository mapping metadata (<xref target="repo_mapping_meta"/>). Delegations are not required.</t>
    </list></t>
  <t>The current time, or a secure attestation of a sufficiently recent time.</t>
  <t>An <spanx style="strong">ECU key</spanx>. This is a private key, unique to the ECU, used to sign ECU version reports and decrypt images. An ECU key MAY be either a symmetric key or an asymmetric key. If it is an asymmetric key, there MAY be separate keys for encryption and signing. For the purposes of this Standard, the set of private keys that an ECU uses is referred to as the ECU key (singular), even if it is actually multiple keys used for different purposes.</t>
</list></t>

</section>
<section anchor="what-the-primary-does" title="What the Primary does">

<t>A Primary downloads, verifies, and distributes the latest time, metadata, and images. To do so, it SHALL perform the following seven steps:</t>

<t><list style="numbers">
  <t>Construct and send vehicle version manifest (<xref target="construct_manifest_primary"/>)</t>
  <t>Download and check current time (<xref target="check_time_primary"/>)</t>
  <t>Download and verify metadata (<xref target="download_meta_primary"/>)</t>
  <t>Download and verify images (<xref target="download_images_primary"/>)</t>
  <t>OPTIONAL: Send latest time to Secondaries (<xref target="send_time_primary"/>)</t>
  <t>Send metadata to Secondaries (<xref target="send_metadata_primary"/>)</t>
  <t>Send images to Secondaries (<xref target="send_images_primary"/>)</t>
</list></t>

<t>Note that the subsequent sections concerning requirements for a Primary do not prohibit implementing Primary capabilities on an ECU that does not communicate directly with the Uptane repositories. This allows for implementations to have multiple ECUs within the vehicle performing functions equivalent to a Primary.
If multiple such Primaries are included within a vehicle, each Secondary ECU SHALL have a single Primary responsible for providing its updates.</t>

<section anchor="construct_manifest_primary" title="Construct and send vehicle version manifest">

<t>The Primary SHALL build a <spanx style="emph">vehicle version manifest</spanx> as described in <xref target="vehicle_version_manifest"/>.</t>

<t>Once the complete manifest is built, the Primary MAY send the manifest to the Director repository. However, it is not strictly required that the Primary send the manifest until step three. If permitted by the implementation, a Primary MAY send only a diff of the manifest to save bandwidth. If an implementation permits diffs, the Director SHOULD have a way to request a full manifest.</t>

<t>Secondaries MAY send their version report at any time so that it is already stored on the Primary when it wishes to check for updates. Alternatively, the Primary MAY request a version report from each Secondary at the time of the update check.</t>

<section anchor="vehicle_version_manifest" title="Vehicle version manifest">

<t>The vehicle version manifest is a metadata structure that MUST contain the following information:</t>

<t><list style="symbols">
  <t>An attribute containing the signature(s) of the payload, each specified by:
  <list style="symbols">
      <t>The public key identifier of the key being used to sign the payload</t>
      <t>The signing method (i.e., ed25519, rsassa-pss, etc.)</t>
      <t>A hash of the payload to be signed</t>
      <t>The hashing function used (i.e., SHA3-256, SHA-512/224, etc.)</t>
      <t>The signature of the hash</t>
    </list></t>
  <t>A payload representing the installed versions of each software image on the vehicle. This payload SHALL contain:
  <list style="symbols">
      <t>The vehicle’s unique identifier (e.g., the VIN)</t>
      <t>The Primary ECU’s unique identifier (e.g., the serial number)</t>
      <t>A list of ECU version reports as specified in <xref target="version_report"/></t>
    </list></t>
</list></t>

<t>Note that one of the ECU version reports should be the version report for the Primary itself.</t>

</section>
<section anchor="version_report" title="ECU version report">

<t>An ECU version report is a metadata structure that MUST contain the following information:</t>

<t><list style="symbols">
  <t>An attribute containing the signature(s) of the payload, each specified by:
  <list style="symbols">
      <t>The public key identifier of the key being used to sign the payload</t>
      <t>The signing method (i.e., ed25519, rsassa-pss, etc.)</t>
      <t>A hash of the payload to be signed</t>
      <t>The hashing function used (i.e., SHA3-256, SHA-512/224, etc.)</t>
      <t>The signature of the hash</t>
    </list></t>
  <t>A payload containing:
  <list style="symbols">
      <t>The ECU’s unique identifier (e.g., the serial number)</t>
      <t>The filename, length, and hashes of its currently installed image (i.e., the non-custom Targets metadata for this particular image)</t>
      <t>An indicator of any detected security attack</t>
      <t>The latest time the ECU can verify at the time this version report was generated</t>
      <t>A nonce or counter to prevent a replay of the ECU version report. This value MUST change each update cycle. It MAY be a cryptographic nonce used with a time server as described in the <spanx style="emph">Uptane Deployment Best Practices</spanx> document (<xref target="DEPLOY"/>).</t>
    </list></t>
</list></t>

</section>
</section>
<section anchor="check_time_primary" title="Download and check current time">

<t>The Primary SHALL load the current time from a secure source.</t>

</section>
<section anchor="download_meta_primary" title="Download and verify metadata">

<t>The Primary SHALL download metadata for all targets and perform a full verification on it as specified in <xref target="full_verification"/>.</t>

</section>
<section anchor="download_images_primary" title="Download and verify images">

<t>The Primary SHALL download and verify images for itself and for all of its associated Secondaries. Images SHALL be verified by checking that the hash of the image file matches the hash specified in the Director’s Targets metadata for that image.</t>

<t>There may be several different filenames that all refer to the same image binary, as described in <xref target="metadata_filename_rules"/>. If the Primary has received multiple hashes for a given image binary via the Targets role (see <xref target="targets_images_meta"/>) then it SHALL verify every hash for this image despite that the image is identified by a single hash as part of its filename.</t>

</section>
<section anchor="send_time_primary" title="Send latest time to Secondaries">

<t>Unless the Secondary ECU has its own way of verifying the time or does not have the capacity to verify a time message, the Primary is CONDITIONALLY REQUIRED to send the time to each ECU. The Secondary will verify the time message, then overwrite its current time with the received time.</t>

</section>
<section anchor="send_metadata_primary" title="Send metadata to Secondaries">

<t>The Primary SHALL send its latest downloaded metadata to all of its associated Secondaries. The metadata it sends to each Secondary MUST include all of the metadata required for verification on that Secondary. For full verification Secondaries, this includes the metadata for all four roles from both repositories, plus any delegated Targets metadata files the Secondary will recurse through to find the proper delegation. For partial verification Secondaries, this MAY include fewer metadata files; it includes only the Targets metadata file from the Director repository at a minimum.</t>

<t>The Primary SHOULD determine the minimal set of metadata files to send to each Secondary by performing delegation resolution as described in <xref target="full_verification"/>.</t>

<t>Each Secondary SHALL store the latest copy of all metadata required for its own verification.</t>

</section>
<section anchor="send_images_primary" title="Send images to Secondaries">

<t>The Primary SHALL send the latest image to each of its associated Secondaries that have storage to receive it.</t>

<t>For Secondaries without storage, the Primary SHOULD wait for a request from the Secondary to stream the new image file to it. The Secondary will send the request once it has verified the metadata sent in the previous step.</t>

</section>
</section>
<section anchor="installing-images-on-primary-or-secondary-ecus" title="Installing images on Primary or Secondary ECUs">

<t>An ECU SHALL perform the following steps when attempting to install a new image:</t>

<t><list style="numbers">
  <t>Verify latest attested time. This is optional if the ECU does not have the capacity to verify a time message (<xref target="verify_time"/>)</t>
  <t>Verify metadata (<xref target="verify_metadata"/>)</t>
  <t>Download latest image (<xref target="download_image"/>)</t>
  <t>Verify image (<xref target="verify_image"/>)</t>
  <t>Install image (<xref target="install_image"/>)</t>
  <t>Create and send version report (<xref target="create_version_report"/>)</t>
</list></t>

<section anchor="verify_time" title="Load and verify the latest attested time">

<t>IF the ECU has the capability to verify a time message, the ECU is CONDITIONALLY REQUIRED to load and verify the current time, or the most recent securely attested time.</t>

</section>
<section anchor="verify_metadata" title="Verify metadata">

<t>The ECU SHALL verify the latest downloaded metadata (<xref target="metadata_verification"/>) using either full or partial verification. If the metadata verification fails for any reason, the ECU SHALL jump to the final step (<xref target="create_version_report"/>).</t>

</section>
<section anchor="download_image" title="Download latest image">

<t>If the ECU does not have secondary storage, i.e., buffer storage to temporarily store the latest image before installing it, it SHALL download the latest image from the Primary. (If the ECU has secondary storage, it will already have the latest image in its secondary storage as specified in <xref target="send_images_primary"/>, and should skip to the next step.) The ECU MAY first create a backup of its previous working image and store it elsewhere (e.g., the Primary).</t>

<t>The filename used to identify the latest known image (i.e., the file to request from the Primary) SHALL be determined as follows:</t>

<t><list style="numbers">
  <t>Load the Targets metadata file from the Director repository.</t>
  <t>Find the Targets metadata associated with this ECU identifier.</t>
  <t>Construct the Image filename using the rule in <xref target="metadata_filename_rules"/>, or use the download URL specified in the Director metadata.</t>
  <t>If there is no Targets metadata about this image, abort the update cycle and report that there is no such image. Additionally, in the case of failure, the ECU SHALL retain its previous Targets metadata instead of using the new Targets metadata. Otherwise, download the image (up to the number of bytes specified in the Targets metadata) and verify it according to <xref target="verify_image"/>.</t>
</list></t>

<t>When the Primary responds to the download request, the ECU SHALL overwrite its current image with the downloaded image from the Primary.</t>

<t>If any part of this step fails, the ECU SHALL jump to the final step (<xref target="create_version_report"/>).</t>

</section>
<section anchor="verify_image" title="Verify image">

<t>The ECU SHALL verify that the latest image matches the latest metadata as follows:</t>

<t><list style="numbers">
  <t>Load the latest Targets metadata file from the Director.</t>
  <t>Find the Targets metadata associated with this ECU identifier.</t>
  <t>Check that the hardware identifier in the metadata matches the ECU’s hardware identifier.</t>
  <t>Check that the image filename is valid for this ECU. This MAY be a comparison against a wildcard path, which restricts the ECUs to which a delegation will apply.</t>
  <t>Check that the release counter of the image in the previous metadata, if it exists, is less than or equal to the release counter in the latest metadata.</t>
  <t>If the image is encrypted, decrypt the image with a decryption key to be chosen as follows:
  <list style="symbols">
      <t>If the ECU key is a symmetric key, the ECU SHALL use the ECU key for image decryption.</t>
      <t>If the ECU key is asymmetric, the ECU SHALL check the Targets metadata for an encrypted symmetric key. If such a key is found, the ECU SHALL decrypt the symmetric key using its ECU key, and use the decrypted symmetric key for image decryption.</t>
      <t>If the ECU key is asymmetric and there is no symmetric key in the Targets metadata, the ECU SHALL use its ECU key for image decryption.</t>
    </list></t>
  <t>Check that all hashes listed in the metadata match the corresponding hashes of the image.</t>
</list></t>

<t>If the ECU has secondary storage, the checks SHOULD be performed on the image in secondary storage before it is installed.</t>

<t>When checking hashes, the ECU SHOULD additionally check that the length of the image matches the length listed in the metadata.</t>

<t>NOTE: Verifying image size along with the hashes will become a requirement in a future version of the Uptane Standard.</t>

<t>NOTE: See <xref target="DEPLOY"/> for guidance on how to deal with Secondary ECU failures for ECUs that do not have secondary storage.</t>

<t>If any step fails, the ECU SHALL jump to the final step (<xref target="create_version_report"/>).</t>

</section>
<section anchor="install_image" title="Install image">

<t>The ECU SHALL attempt to install the update. This installation SHOULD occur at a time when all pre-conditions are met. These pre-conditions MAY include ensuring the vehicle is in a safe environment for install (e.g., the vehicle is parked when updating a specific ECU). Another pre-condition MAY include ensuring the ECU has a backup of its current image and metadata in case the current installation fails.</t>

</section>
<section anchor="create_version_report" title="Create and send version report">

<t>The ECU SHALL create a version report as described in <xref target="version_report"/>, and send it to the Primary (or simply save it to disk, if the ECU is a Primary). The Primary SHOULD write the version reports it receives to disk and associate them with the Secondaries that sent them.</t>

</section>
</section>
<section anchor="metadata_verification" title="Metadata verification procedures">

<t>A Primary ECU MUST perform full verification of metadata. A Secondary ECU SHOULD perform full verification of metadata. If a Secondary cannot perform full verification, it SHALL, at the very least, perform partial verification.</t>

<t>If a step in the following workflows does not succeed (e.g., the update is aborted because a new metadata file was not signed), an ECU SHOULD still be able to update again in the future. Errors raised during the update process SHOULD NOT leave ECUs in an unrecoverable state.</t>

<section anchor="partial_verification" title="Partial verification">

<t>In order to perform partial verification, an ECU SHALL perform the following steps:</t>

<t><list style="numbers">
  <t>Load and verify the current time or the most recent securely attested time.</t>
  <t>Download and check the Targets metadata file from the Director repository, following the procedure in <xref target="check_targets"/>.</t>
</list></t>

<t>Note that this verification procedure is the smallest set of Uptane checks permissible for an Uptane Secondary ECU. An ECU MAY additionally implement more metadata checks.</t>

<t>For example, an ECU MAY also fetch and verify Root metadata from the Director (following the procedure in <xref target="check_root"/>) before checking Targets metadata. Performing this additional check would provide the ECU with a secure way to receive and validate a rotation of the Director’s Targets key.</t>

<t>See <xref target="DEPLOY"/> for more discussion on this topic.</t>

</section>
<section anchor="full_verification" title="Full verification">

<t>Full verification of metadata means that the ECU checks that the Targets metadata about images from the Director repository matches the Targets metadata about the same images from the Image repository. This provides resilience to a key compromise in the system.</t>

<t>Full verification MUST be performed by Primary ECUs and SHOULD be performed by Secondary ECUs. In the following instructions, whenever an ECU is directed to download metadata, it applies only to Primary ECUs.</t>

<t>If <xref target="TAP-5"/> is supported and a Primary has an external connection to the Uptane repositories, a Primary ECU SHALL download metadata and images following the rules specified in that TAP.  If <xref target="TAP-5"/> is not supported, or if the Primary does not have an external connection to the Uptane repositories, the download SHOULD follow the <xref target="TUF-spec"/> and the metadata file renaming rules specified in <xref target="metadata_filename_rules"/>.</t>

<t>Before starting full verification, the repository mapping metadata MUST be consulted to determine where to download metadata from. This procedure assumes the basic Uptane case: there are only two repositories (Director and Image), and all image paths are required to be signed by both repositories. If a more complex repository layout is being used, refer to <xref target="DEPLOY"/> for guidance on how to determine where metadata should be downloaded from.</t>

<t>In order to perform full verification, an ECU SHALL perform the following steps:</t>

<t><list style="numbers">
  <t>Load and verify the current time or the most recent securely attested time.</t>
  <t>Download and check the Root metadata file from the Director repository, following the procedure in <xref target="check_root"/>.</t>
  <t>Download and check the Timestamp metadata file from the Director repository, following the procedure in <xref target="check_timestamp"/>.</t>
  <t>Check the previously downloaded Snapshot metadata file from the Directory repository (if available). If the hashes and version number of that file match the hashes and version number listed in the new Timestamp metadata, there are no new updates and the verification process MAY be stopped and considered complete. Otherwise, download and check the Snapshot metadata file from the Director repository, following the procedure in <xref target="check_snapshot"/>.</t>
  <t>Download and check the Targets metadata file from the Director repository, following the procedure in <xref target="check_targets"/>.</t>
  <t>If the Targets metadata from the Directory repository indicates that there are no new targets that are not already currently installed, the verification process MAY be stopped and considered complete. Otherwise, download and check the Root metadata file from the Image repository, following the procedure in <xref target="check_root"/>.</t>
  <t>Download and check the Timestamp metadata file from the Image repository, following the procedure in <xref target="check_timestamp"/>.</t>
  <t>Check the previously downloaded Snapshot metadata file from the Image repository (if available). If the hashes and version number of that file match the hashes and version number listed in the new Timestamp metadata, the ECU MAY skip to the last step. Otherwise, download and check the Snapshot metadata file from the Image repository, following the procedure in <xref target="check_snapshot"/>.</t>
  <t>Download and check the top-level Targets metadata file from the Image repository, following the procedure in <xref target="check_targets"/>.</t>
  <t>Verify that Targets metadata from the Director and Image repositories match. A Primary ECU MUST perform this check on metadata for all images listed in the Targets metadata file from the Director repository downloaded in step 6. A Secondary ECU MAY elect to perform this check only on the metadata for the image it will install. (That is, the image metadata from the Director that contains the ECU identifier of the current ECU.) To check that the metadata for an image matches, complete the following procedure:
  <list style="numbers">
      <t>Locate and download a Targets metadata file from the Image repository that contains an image with exactly the same filename listed in the Director metadata, following the procedure in <xref target="resolve_delegations"/>.</t>
      <t>Check that the Targets metadata from the Image repository matches the Targets metadata from the Director repository:
      <list style="numbers">
          <t>Check that the non-custom metadata (i.e., length and hashes) of the unencrypted or encrypted image are the same in both sets of metadata. Note: the Primary is responsible for validating encrypted images and associated metadata. The target ECU (Primary or Secondary) is responsible for validating the unencrypted image and associated metadata.</t>
          <t>Check that all “MUST match” custom metadata (e.g., hardware identifier and release counter) are the same in both sets of metadata.</t>
          <t>Check that the release counter in the previous Targets metadata file is less than or equal to the release counter in this Targets metadata file.</t>
        </list></t>
    </list></t>
</list></t>

<t>If any step fails, the ECU MUST return an error code indicating the failure. If a check for a specific type of security attack fails (i.e., rollback, freeze, arbitrary software, etc.), the ECU SHOULD return an error code that indicates the type of attack.</t>

</section>
<section anchor="check_root" title="How to check Root metadata">

<t>To properly check Root metadata, an ECU SHOULD:</t>

<t><list style="numbers">
  <t>Load the previous Root metadata file.</t>
  <t>Update to the latest Root metadata file.
  <list style="numbers">
      <t>Let N denote the version number of the latest Root metadata file (which at first could be the same as the previous Root metadata file).</t>
      <t>Try downloading a new version N+1 of the Root metadata file, up to some X number of bytes. The value for X is set by the implementer. For example, X may be tens of kilobytes. The filename used to download the Root metadata file is of the fixed form VERSION_NUMBER.FILENAME.EXT (e.g., 42.root.json). If this file is not available, the current Root metadata file is the latest; continue with step 3.</t>
      <t>Version N+1 of the Root metadata file MUST have been signed by the following: (1) a threshold of keys specified in the latest Root metadata file (version N), and (2) a threshold of keys specified in the new Root metadata file being validated (version N+1). If version N+1 is not signed as required, discard it, abort the update cycle, and report the signature failure. On the next update cycle, begin at version N of the Root metadata file. (Checks for an arbitrary software attack.)</t>
      <t>The version number of the latest Root metadata file (version N) must be less than or equal to the version number of the new Root metadata file (version N+1). Effectively, this means checking that the version number signed in the new Root metadata file is indeed N+1. If the version of the new Root metadata file is less than the latest metadata file, discard it, abort the update cycle, and report the rollback attack. On the next update cycle, begin at step 1 and version N of the Root metadata file. (Checks for a rollback attack.)</t>
      <t>Set the latest Root metadata file to the new Root metadata file.</t>
      <t>Repeat steps 2.1 to 2.6.</t>
    </list></t>
  <t>Check that the current (or latest securely attested) time is lower than the expiration timestamp in the latest Root metadata file. (Checks for a freeze attack.)</t>
  <t>If the Timestamp and/or Snapshot keys have been rotated, delete the previous Timestamp and Snapshot metadata files. (Checks for recovery from fast-forward attacks <xref target="MERCURY"/>.)</t>
</list></t>

</section>
<section anchor="check_timestamp" title="How to check Timestamp metadata">

<t>To properly check Timestamp metadata, an ECU SHOULD:</t>

<t><list style="numbers">
  <t>Download up to Y number of bytes. The value for Y is set by the implementer. For example, Y may be tens of kilobytes. The filename used to download the Timestamp metadata file is of the fixed form FILENAME.EXT (e.g., timestamp.json).</t>
  <t>Check that it has been signed by the threshold of keys specified in the latest Root metadata file. If the new Timestamp metadata file is not properly signed, discard it, abort the update cycle, and report the signature failure. (Checks for an arbitrary software attack.)</t>
  <t>Check that the version number of the previous Timestamp metadata file, if any, is less than or equal to the version number of this Timestamp metadata file. If the new Timestamp metadata file is older than the trusted Timestamp metadata file, discard it, abort the update cycle, and report the potential rollback attack. (Checks for a rollback attack.)</t>
  <t>Check that the current (or latest securely attested) time is lower than the expiration timestamp in this Timestamp metadata file. If the new Timestamp metadata file has expired, discard it, abort the update cycle, and report the potential freeze attack. (Checks for a freeze attack.)</t>
</list></t>

</section>
<section anchor="check_snapshot" title="How to check Snapshot metadata">

<t>To properly check Snapshot metadata, an ECU SHOULD:</t>

<t><list style="numbers">
  <t>Download up to the number of bytes specified in the Timestamp metadata file, constructing the metadata filename as defined in <xref target="metadata_filename_rules"/>.</t>
  <t>The hashes and version number of the new Snapshot metadata file MUST match the hashes and version number listed in Timestamp metadata. If the hashes and version number do not match, discard the new Snapshot metadata, abort the update cycle, and report the failure. (Checks for a mix-and-match attack.)</t>
  <t>Check that it has been signed by the threshold of keys specified in the latest Root metadata file. If the new Snapshot metadata file is not signed as required, discard it, abort the update cycle, and report the signature failure. (Checks for an arbitrary software attack.)</t>
  <t>Check that the version number of the previous Snapshot metadata file, if any, is less than or equal to the version number of this Snapshot metadata file. If this Snapshot metadata file is older than the previous Snapshot metadata file, discard it, abort the update cycle, and report the potential rollback attack. (Checks for a rollback attack.)</t>
  <t>Check that the version number listed by the previous Snapshot metadata file for each Targets metadata file is less than or equal to its version number in this Snapshot metadata file. If this condition is not met, discard the new Snapshot metadata file, abort the update cycle, and report the failure. (Checks for a rollback attack.)</t>
  <t>Check that each Targets metadata filename listed in the previous Snapshot metadata file is also listed in this Snapshot metadata file. If this condition is not met, discard the new Snapshot metadata file, abort the update cycle, and report the failure. (Checks for a rollback attack.)</t>
  <t>Check that the current (or latest securely attested) time is lower than the expiration timestamp in this Snapshot metadata file. If the new Snapshot metadata file is expired, discard it, abort the update cycle, and report the potential freeze attack. (Checks for a freeze attack.)</t>
</list></t>

</section>
<section anchor="check_targets" title="How to check Targets metadata">

<t>To properly check Targets metadata, an ECU SHOULD:</t>

<t><list style="numbers">
  <t>Download up to Z number of bytes, constructing the metadata filename as defined in <xref target="metadata_filename_rules"/>. The value for Z is set by the implementer. For example, Z may be tens of kilobytes.</t>
  <t>The version number of the new Targets metadata file MUST match the version number listed in the latest Snapshot metadata. If the version number does not match, discard it, abort the update cycle, and report the failure. (Checks for a mix-and-match attack.) This step MAY be skipped when checking Targets metadata on a partial verification ECU; partial verification ECUs might not have Snapshot metadata.</t>
  <t>Check that the Targets metadata has been signed by the threshold of keys specified in the relevant metadata file (Checks for an arbitrary software attack):
  <list style="numbers">
      <t>If checking top-level Targets metadata, the threshold of keys is specified in the Root metadata.</t>
      <t>If checking delegated Targets metadata, the threshold of keys is specified in the Targets metadata file that delegated authority to this role.</t>
    </list></t>
  <t>Check that the version number of the previous Targets metadata file, if any, is less than or equal to the version number of this Targets metadata file. (Checks for a rollback attack.)</t>
  <t>Check that the current (or latest securely attested) time is lower than the expiration timestamp in this Targets metadata file. (Checks for a freeze attack.)</t>
  <t>If checking Targets metadata from the Director repository, verify that there are no delegations.</t>
  <t>If checking Targets metadata from the Director repository, check that no ECU identifier is represented more than once.</t>
  <t>If checking Targets metadata from the Director repository, and the ECU performing the verification is the Primary ECU, check that all listed ECU identifiers correspond to ECUs that are actually present in the vehicle.</t>
</list></t>

</section>
<section anchor="resolve_delegations" title="How to resolve delegations">

<t>To properly check Targets metadata for an image, an ECU MUST locate the metadata file(s) for the role (or roles) that have the authority to sign the image. This metadata might be located in the top-level Targets metadata, but it also may be delegated to another role or to multiple roles. Therefore, all delegations MUST be resolved using the following recursive procedure, beginning with the top-level Targets metadata file.</t>

<t><list style="numbers">
  <t>Download the current metadata file, and check it following the procedure in <xref target="check_targets"/>. If the file cannot be loaded, or if any verification step fails, abort the delegation resolution, and indicate that image metadata cannot be found because of a missing or invalid role.</t>
  <t>If the current metadata file contains signed metadata about the image, end the delegation resolution and return the metadata to be checked.</t>
  <t>If the current metadata file was reached via a terminating delegation and does not contain signed metadata about the image, abort the delegation resolution for this image and return an error indicating that image metadata could not be found.</t>
  <t>Search the list of delegations, in listed order. For each delegation:
  <list style="numbers">
      <t>Check if the delegation applies to the image being processed. For the delegation to apply, it MUST include the hardware identifier of the target, and the target name MUST match one of the delegation’s image paths. If either of these tests fail, move on to the next delegation in the list.</t>
      <t>If the delegation is a multi-role delegation, follow the procedure described in <xref target="multirole_delegations"/>. If the multi-role delegation is terminating and no valid image metadata is found, abort the delegation resolution and return an error indicating that image metadata could not be found.</t>
      <t>If the delegation is a normal delegation, perform delegation resolution, starting at step 1. Note that this may recurse an arbitrary number of levels deep. If a delegation that applies to the image is found but no image metadata is found in the delegated roles or any of its sub-delegations, simply continue on with the next delegation in the list. The search is only completed or aborted if image metadata or a terminating delegation that applies to the image is found.</t>
    </list></t>
  <t>If the end of the list of delegations in the top-level metadata is reached without finding valid image metadata, return an error indicating that image metadata could not be found.</t>
</list></t>

</section>
<section anchor="multirole_delegations" title="Multi-role delegations">

<t>It is possible to delegate signing authority to multiple delegated roles as described in <xref target="TAP-3"/>. Each multi-role delegation effectively contains a list of ordinary delegations, plus a threshold of those roles that must be in agreement about the non-custom metadata for the image. All multi-role delegations MUST be resolved using the following procedure. Note that there may be sub-delegations inside multi-role delegations.</t>

<t><list style="numbers">
  <t>For each of the roles in the delegation, find and load the image metadata following the procedure in <xref target="resolve_delegations"/>.</t>
  <t>Inspect the non-custom part of the metadata loaded in step 1:
  <list style="numbers">
      <t>Locate all sets of roles which have agreeing (i.e., identical) non-custom metadata and “MUST match” custom metadata. Discard any set of roles with a size smaller than the threshold of roles that must be in agreement for this delegation.</t>
      <t>Check for a conflict. A conflict exists if there remains more than one agreeing set of roles, each set having different metadata. If a conflict is found, choose and return the metadata from the set of roles which includes the earliest role in the multi-delegation list.</t>
      <t>If there is no conflict, check if there is any single set of roles with matching non-custom metadata. If there is, choose and return the metadata from this set.</t>
      <t>If no agreeing set can be found that meets the agreement threshold, return an error indicating that image metadata could not be found.</t>
    </list></t>
</list></t>

</section>
</section>
</section>
</section>


  </middle>

  <back>

    <references title='Normative References'>





<reference  anchor="RFC2119" target='https://www.rfc-editor.org/info/rfc2119'>
<front>
<title>Key words for use in RFCs to Indicate Requirement Levels</title>
<author initials='S.' surname='Bradner' fullname='S. Bradner'><organization /></author>
<date year='1997' month='March' />
<abstract><t>In many standards track documents several words are used to signify the requirements in the specification.  These words are often capitalized. This document defines these words as they should be interpreted in IETF documents.  This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t></abstract>
</front>
<seriesInfo name='BCP' value='14'/>
<seriesInfo name='RFC' value='2119'/>
<seriesInfo name='DOI' value='10.17487/RFC2119'/>
</reference>



<reference  anchor="RFC3647" target='https://www.rfc-editor.org/info/rfc3647'>
<front>
<title>Internet X.509 Public Key Infrastructure Certificate Policy and Certification Practices Framework</title>
<author initials='S.' surname='Chokhani' fullname='S. Chokhani'><organization /></author>
<author initials='W.' surname='Ford' fullname='W. Ford'><organization /></author>
<author initials='R.' surname='Sabett' fullname='R. Sabett'><organization /></author>
<author initials='C.' surname='Merrill' fullname='C. Merrill'><organization /></author>
<author initials='S.' surname='Wu' fullname='S. Wu'><organization /></author>
<date year='2003' month='November' />
<abstract><t>This document presents a framework to assist the writers of certificate policies or certification practice statements for participants within public key infrastructures, such as certification authorities, policy authorities, and communities of interest that wish to rely on certificates.  In particular, the framework provides a comprehensive list of topics that potentially (at the writer's discretion) need to be covered in a certificate policy or a certification practice statement.  This document supersedes RFC 2527.</t></abstract>
</front>
<seriesInfo name='RFC' value='3647'/>
<seriesInfo name='DOI' value='10.17487/RFC3647'/>
</reference>



<reference  anchor="RFC5198" target='https://www.rfc-editor.org/info/rfc5198'>
<front>
<title>Unicode Format for Network Interchange</title>
<author initials='J.' surname='Klensin' fullname='J. Klensin'><organization /></author>
<author initials='M.' surname='Padlipsky' fullname='M. Padlipsky'><organization /></author>
<date year='2008' month='March' />
<abstract><t>The Internet today is in need of a standardized form for the transmission of internationalized &quot;text&quot; information, paralleling the specifications for the use of ASCII that date from the early days of the ARPANET.  This document specifies that format, using UTF-8 with normalization and specific line-ending sequences.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='5198'/>
<seriesInfo name='DOI' value='10.17487/RFC5198'/>
</reference>


<reference anchor="NFC" target="http://www.unicode.org/reports/tr15/">
  <front>
    <title>Unicode Standard Annex #15: Unicode Normalization Forms</title>
    <author initials="M." surname="Davis">
      <organization></organization>
    </author>
    <author initials="M." surname="Duerst">
      <organization></organization>
    </author>
    <date year="2018" month="October"/>
  </front>
</reference>
<reference anchor="TAP-3" target="https://github.com/theupdateframework/taps/blob/d0818e580c322815a473520f2e8cc5f5eb8df499/tap3.md">
  <front>
    <title>The Update Framework TAP 3 - Multi-role delegations</title>
    <author initials="T.K." surname="Kuppusamy">
      <organization></organization>
    </author>
    <author initials="S." surname="Awwad">
      <organization></organization>
    </author>
    <author initials="E." surname="Cordell">
      <organization></organization>
    </author>
    <author initials="V." surname="Diaz">
      <organization></organization>
    </author>
    <author initials="J." surname="Moshenko">
      <organization></organization>
    </author>
    <author initials="J." surname="Cappos">
      <organization></organization>
    </author>
    <date year="2018" month="January" day="18"/>
  </front>
</reference>
<reference anchor="TAP-4" target="https://github.com/theupdateframework/taps/blob/2cb67d913ec19424d1e354b38f862886fbfd4105/tap4.md">
  <front>
    <title>The Update Framework TAP 4 - Multiple repository consensus on entrusted targets</title>
    <author initials="T.K." surname="Kuppusamy">
      <organization></organization>
    </author>
    <author initials="S." surname="Awwad">
      <organization></organization>
    </author>
    <author initials="E." surname="Cordell">
      <organization></organization>
    </author>
    <author initials="V." surname="Diaz">
      <organization></organization>
    </author>
    <author initials="J." surname="Moshenko">
      <organization></organization>
    </author>
    <author initials="J." surname="Cappos">
      <organization></organization>
    </author>
    <date year="2017" month="December" day="15"/>
  </front>
</reference>
<reference anchor="TAP-5" target="https://github.com/theupdateframework/taps/blob/01726d203c9b9c029d26f6612069ce3180500d9a/tap5.md#downloading-metadata-and-target-files">
  <front>
    <title>The Update Framework TAP 5 - Setting URLs for roles in the root metadata file</title>
    <author initials="T.K." surname="Kuppusamy">
      <organization></organization>
    </author>
    <author initials="S." surname="Awwad">
      <organization></organization>
    </author>
    <author initials="E." surname="Cordell">
      <organization></organization>
    </author>
    <author initials="V." surname="Diaz">
      <organization></organization>
    </author>
    <author initials="J." surname="Moshenko">
      <organization></organization>
    </author>
    <author initials="J." surname="Cappos">
      <organization></organization>
    </author>
    <date year="2018" month="January" day="22"/>
  </front>
</reference>
<reference anchor="TUF-spec" target="https://github.com/theupdateframework/specification/blob/2b4e18472fe25d5b57f36f6fa50104967c8faeaa/tuf-spec.md">
  <front>
    <title>The Update Framework Specification</title>
    <author initials="J." surname="Samuel">
      <organization></organization>
    </author>
    <author initials="N." surname="Mathewson">
      <organization></organization>
    </author>
    <author initials="G." surname="Condra">
      <organization></organization>
    </author>
    <author initials="V." surname="Diaz">
      <organization></organization>
    </author>
    <author initials="T.K." surname="Kuppusamy">
      <organization></organization>
    </author>
    <author initials="S." surname="Awwad">
      <organization></organization>
    </author>
    <author initials="S." surname="Tobias">
      <organization></organization>
    </author>
    <author initials="J." surname="Wright">
      <organization></organization>
    </author>
    <author initials="H." surname="Mehnert">
      <organization></organization>
    </author>
    <author initials="E." surname="Tryzelaar">
      <organization></organization>
    </author>
    <author initials="J." surname="Cappos">
      <organization></organization>
    </author>
    <author initials="R." surname="Dingledine">
      <organization></organization>
    </author>
    <date year="2018" month="September" day="19"/>
  </front>
</reference>


    </references>

    <references title='Informative References'>

<reference anchor="MERCURY" target="https://www.usenix.org/system/files/conference/atc17/atc17-kuppusamy.pdf">
  <front>
    <title>Mercury: Bandwidth-Effective Prevention of Rollback Attacks Against Community Repositories</title>
    <author initials="T.K." surname="Kuppusamy">
      <organization></organization>
    </author>
    <author initials="V." surname="Diaz">
      <organization></organization>
    </author>
    <author initials="J." surname="Cappos">
      <organization></organization>
    </author>
    <date year="2017" month="July" day="12"/>
  </front>
  <seriesInfo name="ISBN" value="978-1-931971-38-6"/>
</reference>
<reference anchor="UPTANEESCAR" target="https://ssl.engineering.nyu.edu/papers/kuppusamy_escar_16.pdf">
  <front>
    <title>Securing Software Updates for Automobiles</title>
    <author initials="T.K." surname="Kuppusamy">
      <organization></organization>
    </author>
    <author initials="A." surname="Brown">
      <organization></organization>
    </author>
    <author initials="S." surname="Awwad">
      <organization></organization>
    </author>
    <author initials="D." surname="McCoy">
      <organization></organization>
    </author>
    <author initials="R." surname="Bielawski">
      <organization></organization>
    </author>
    <author initials="C." surname="Mott">
      <organization></organization>
    </author>
    <author initials="S." surname="Lauzon">
      <organization></organization>
    </author>
    <author initials="A." surname="Weimerskirch">
      <organization></organization>
    </author>
    <author initials="J." surname="Cappos">
      <organization></organization>
    </author>
    <date year="2016" month="October" day="16"/>
  </front>
</reference>
<reference anchor="PEP-458" target="https://www.python.org/dev/peps/pep-0458/">
  <front>
    <title>PEP 458 -- Surviving a Compromise of PyPI</title>
    <author initials="T.K." surname="Kuppusamy">
      <organization></organization>
    </author>
    <author initials="V." surname="Diaz">
      <organization></organization>
    </author>
    <author initials="D." surname="Stufft">
      <organization></organization>
    </author>
    <author initials="J." surname="Cappos">
      <organization></organization>
    </author>
    <date year="2013" month="September" day="27"/>
  </front>
</reference>
<reference anchor="DEPLOY" target="https://uptane.github.io/deployment-considerations/index.html">
  <front>
    <title>Uptane Deployment Best Practices</title>
    <author initials="." surname="Members of the Uptane Alliance Community">
      <organization></organization>
    </author>
    <date year="n.d."/>
  </front>
</reference>
<reference anchor="USATODAY" target="https://www.usatoday.com/story/tech/columnist/2016/06/28/your-average-car-lot-more-code-driven-than-you-think/86437052/">
  <front>
    <title>Your average car is a lot more code-driven than you think</title>
    <author initials="B." surname="O'Donnell">
      <organization></organization>
    </author>
    <date year="2016" month="June" day="28"/>
  </front>
</reference>
<reference anchor="CR-OTA" target="https://www.consumerreports.org/automotive-technology/automakers-embrace-over-the-air-updates-can-we-trust-digital-car-repair/">
  <front>
    <title>Automakers Embrace Over-the-Air Updates, but Can We Trust Digital Car Repair?</title>
    <author initials="K." surname="Barry">
      <organization></organization>
    </author>
    <date year="2018" month="April" day="20"/>
  </front>
</reference>
<reference anchor="IN-TOTO" target="https://in-toto.github.io/">
  <front>
    <title>in-toto: A framework to secure the integrity of software supply chains</title>
    <author >
      <organization></organization>
    </author>
    <date year="2018" month="October" day="29"/>
  </front>
</reference>


    </references>



  </back>

<!-- ##markdown-source:
H4sIAHyctl8AA+192XbbSJbgu74Cx35ISU3Slmx5y4cZ2ZI71eVtLDmzsufM
cYEkKKJNAiwAlMz08b/PXSNuBABKtrOqp86ZesiyCCCWGzfuvgyHw50mbxbZ
s+TDqkmLLDmH/07TaprMyio5yer8skjgl+RsuVpky6xo0iYvi510PK6yK/jq
3cXxm9OdaTkp0iWMsqZRhrWMMpzSCDuTtMkuy2rzLMmLWbmzk6+qZ0lRnmRV
fgUDXmX1RbWum8P795/eP9xJqyx9lly8PXm7c11Wny6rcr2Svz9lG/hp+iw5
K5qsKrJmeFKls2Znh2b8mC7KAlaxyeqdVf4s+d9NORkkdVk1VTar4V+bJf7j
/+zspOtmXlbPdpJkCEuqnyWvs+U4q+qknCXNPFNoHC8WeVpMsuRFuVyui7zZ
wBdJwnvd/k5ZXaZF/geBq/3u7uRembyrytko+Q/YeF4kL9LVqqz36NtsmeaL
FjDr/3lZlpeLjOBRjyblkl6uYXNZ8yx5BHtoqvIim8zp90m5LhoE+YfzY/qh
yi5pLW9+5+ew0mfJ86osPy02hXwyhX0dHBzeP9jZKcpqSWeDULqb/IUhn0yz
WbL7+sP5xSA5/+X41atB8vr490GSNZMRLv79yxeHBwdP+Zu/jo7uP03e/eUs
qVfZhJ8+ePTwMT99kzV4vMmHIseJCeNgU6u0yotL3Bb8X80fHR08fcIf6ctv
cHULgW/yEv5KXsALb16+eEZbadLqEqEyb5rVs3v3rq+vR2v+dAQnc6/KVoAV
9b2mOji6xx/wNbijE7iLcFwU2efk7sHRsy2T13doEI9W+D9FrVFykl7ldfvX
NWBcQz9P4YI8SwDuT4YH92mjF8fvkgdJ2sCxXSXT+08OnmRH8AB+Hj5ob7GG
PV7mzXw9Rry4Byi8XuGYswpQFaF8r0lX9b3xohzfk8Ge3J88ODx8cnCUPnz8
4Ojw/uwwezKZHM2OsvGT6ezh06f4yYPRcmrBc0F3A0dOXurQstRh8nq9aPJh
VS4ywBLAUwJP3Q+Yi9FfRslf1qvVuk6Xm/DZ+Sg5vr5Op+GvpyO4ZRUMvgh/
/xWAmad/hD/+xyh5XdbzrPhUth7wbYtBf/9gePDEQf+hQv9wMn70ePpUoP/w
x6Avgx08yCYHTx8ePpweZA+OHo4fPJk9eXT45Mmj2Xg2fXhw/wg/eXhb6D9U
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

-->

</rfc>


<?xml version="1.0" encoding="UTF-8"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc2629 version 1.2.9 -->

<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
]>

<?rfc toc="yes"?>
<?rfc sortrefs="yes"?>
<?rfc symrefs="yes"?>

<rfc ipr="noDerivativesTrust200902" docName="uptane-standard-design" category="info">

  <front>
    <title abbrev="UPTANE">Uptane Standard for Design and Implementation</title>

    <author initials="." surname="Members of the Uptane Community" fullname="Uptane Community">
      <organization>Joint Development Foundation Projects, LLC, Uptane Series (c/o Prof. Justin Cappos)</organization>
      <address>
        <postal>
          <street>6 MetroTech</street>
          <city>Brooklyn</city>
          <region>NY</region>
          <code>11201</code>
          <country>USA</country>
        </postal>
        <email>uptane-standards@googlegroups.com</email>
      </address>
    </author>

    <date year="2022" month="January" day="18"/>

    <area>TODO</area>
    <workgroup>TODO</workgroup>
    <keyword>Internet-Draft</keyword>

    <abstract>


<t>This document describes a framework for securing ground vehicle software update systems.</t>



    </abstract>


  </front>

  <middle>


<section anchor="introduction" title="Introduction">

<t>Uptane is a secure software update framework for ground vehicles. This document describes procedures to enable programmers for OEMs and suppliers to securely design and implement this framework in a manner that better protects connected units on ground vehicles. Integrating Uptane as outlined in the sections that follow can reduce the ability of attackers to compromise critical systems. It also assures a faster and easier recovery process should a compromise occur.</t>

<t>These instructions specify the components necessary for a compliant implementation. Individual implementers can make their own technological choices within those requirements. This flexibility makes Uptane adaptable to the many customized update solutions used by manufacturers. If implementers wish to have compatible formats, they may use POUFs. POUFs contain a description of implementation choices as well as data binding formats. An implementer who adopts a POUF, as well as the Uptane Standard, will be able to interoperate with other implementations using that POUF.</t>

</section>
<section anchor="terminology" title="Terminology">

<t>With the exception of the Conformance terminology and Uptane role terminology presented below, please refer to the <eref target="https://uptane.github.io/deployment-considerations/glossary.html">glossary</eref> in the Deployment Best Practices volume for definitions of all terms used in this Standard.</t>

<section anchor="conformance-terminology" title="Conformance terminology">

<t>The keywords REQUIRED, SHALL, SHALL NOT, SHOULD, SHOULD NOT, RECOMMENDED, MAY, and OPTIONAL in this document are to be interpreted as described in <xref target="RFC2119"/>. Given the importance of interpreting these terms correctly, we present these definitions here. Note that when referring to actions in the Standard that mandate compliance, the word SHALL will be used, rather than the word MUST.</t>

<t><spanx style="emph">SHALL</spanx> This word or the term “REQUIRED” mean that the definition is an absolute requirement of the specification.
<spanx style="emph">SHALL NOT</spanx> This phrase means that the definition is an absolute prohibition of the specification.
<spanx style="emph">SHOULD</spanx> This word or the adjective “RECOMMENDED” mean that, in particular circumstances, there may exist valid reasons to ignore a particular item, but the full implications must be understood and carefully weighed before choosing a different course.
<spanx style="emph">SHOULD NOT</spanx> This phrase or the phrase “NOT RECOMMENDED” mean that there may exist valid reasons in particular circumstances when the particular behavior is acceptable or even useful, but the full implications should be understood and the case carefully weighed before implementing any behavior described with this label.
<spanx style="emph">MAY</spanx> This word or the adjective “OPTIONAL,” mean that an item is truly optional.</t>

<t>In order to be considered Uptane-compliant, an implementation SHALL follow all of these rules as specified in the document.</t>

<t>Note that, following the recommendations of <xref target="RFC2119"/> imperatives of the type defined here “must be used with care and sparingly.  In particular, they MUST only be used where it is actually required for interoperation or to limit behavior which has potential for causing harm (e.g., limiting retransmisssions)</t>

</section>
<section anchor="uptane-role-terminology" title="Uptane role terminology">

<t>These terms are defined in greater detail in <xref target="roles"/>.</t>

<t><spanx style="emph">Delegation</spanx>: A process by which the responsibility of signing metadata about images is assigned to another party.</t>

<t><spanx style="emph">Role</spanx>: A party (human or machine) responsible for signing a certain type of metadata. The role controls keys and is responsible for signing the metadata entrusted to it with these keys. The roles mechanism of Uptane allows the system to distribute signing responsibilities so that the compromise of one key does not necessarily impact the security of the entire system.</t>

<t><list style="symbols">
  <t><spanx style="emph">Root role</spanx>: Signs metadata that distributes and revokes public keys used to verify the Root, Timestamp, Snapshot, and Targets role metadata.</t>
  <t><spanx style="emph">Snapshot role</spanx>: Signs metadata that indicates which images the repository has released at the same time.</t>
  <t><spanx style="emph">Targets role</spanx>: Signs metadata used to verify the image, such as cryptographic hashes and file size.</t>
  <t><spanx style="emph">Timestamp role</spanx>: Signs metadata that indicates if there are any new metadata or images on the repository.</t>
</list></t>

</section>
<section anchor="acronyms-and-abbreviations" title="Acronyms and abbreviations">

<t><spanx style="emph">CDN</spanx>: Content Delivery Network</t>

<t><spanx style="emph">ECUs</spanx>: Electronic Control Units, the computing units on a vehicle</t>

<t><spanx style="emph">LIN Bus</spanx>: Local Interconnect Bus</t>

<t><spanx style="emph">OBD</spanx>: On-board diagnostics</t>

<t><spanx style="emph">SOTA</spanx>: Software Updates Over-the-Air</t>

<t><spanx style="emph">UDS</spanx>: Unified Diagnostic Services</t>

<t><spanx style="emph">VIN</spanx>: Vehicle Identification Number</t>

</section>
</section>
<section anchor="rationale-for-and-scope-of-the-uptane-standard" title="Rationale for and scope of the Uptane Standard">

<t>This Standard document provides the essential components for the secure design, implementation, and deployment of Uptane by OEMs and suppliers. These guidelines contribute to compromise resilience, or the ability to minimize the extent of the threat posed by any given attack.</t>

<t>However, this specification is intended as an implementation guide, and not as a detailed technical argument about the security properties that Uptane provides.  Readers interested in such documentation should refer to published papers that cover this topic.  <xref target="UPTANEESCAR"/></t>

<section anchor="why-uptane-requires-a-standards-document" title="Why Uptane requires a standards document">

<t>A standards document that can guide the safe design, integration, and deployment of Uptane in vehicles is needed at this time because:</t>

<t><list style="symbols">
  <t>The number of connected units on the average vehicle continues to grow, with mainstream cars now containing up to 100 million lines of code. <xref target="USATODAY"/></t>
  <t>The expanded use of software over-the-air strategies creates new attack surfaces for malicious parties. <xref target="CR-OTA"/></t>
  <t>Legacy update strategies, such as SSL/TLS or GPG/RSA, are not feasible for use on vehicle ECUs because they force manufacturers to chose between enhanced security and customizability.</t>
  <t>Conventional strategies are also complicated by the differing resources of the ECUs, which can vary greatly in memory, storage space, and Internet connectivity.</t>
  <t>The design of Uptane makes it possible to offer improved design flexibility without sacrificing security.</t>
  <t>This added design flexibility, however, could be a liability if the framework is implemented incorrectly.</t>
  <t>Standardization of crucial steps in the design, implementation, and use of Uptane can assure that customizability does not impact security or functionality.</t>
</list></t>

</section>
<section anchor="scope-of-standard-coverage" title="Scope of Standard coverage">

<t>This document sets guidelines for implementing Uptane in most systems capable of updating software on connected units in ground vehicles, including passenger vehicles, light-duty trucks, heavy-duty trucks, and motorcycles. Uptane could potentially also be applied to other ground vehicles, such as automated shuttles, recreational vehicles, and military ground vehicles. Uptane could even be applied to domains such as IoT devices, medical devices, and autonomous aerial vehicles. In this section, we define the scope of that applicability by providing sample use cases and possible exceptions, aspects of software update security that are not applicable to Uptane, and the design requirements governing the preparation of these standards.</t>

<section anchor="assumptions" title="Assumptions">

<t>We assume the following system preconditions for Uptane:</t>

<t><list style="symbols">
  <t>Vehicles have the ability to establish connectivity to required backend services. For example, this could be done through cellular, Wi-Fi, or hard-wired mechanisms.</t>
  <t>ECUs are either directly connected to the communication channel, or are indirectly connected via some sort of network gateway.</t>
  <t>ECUs are programmable and provide sufficient performance to be updated.</t>
  <t>ECUs must be able to perform public key cryptography operations and calculate hashes of images and metadata files.</t>
  <t>There are state-of-the-art secure servers in place, such as the Director and Image repository servers.</t>
</list></t>

<t>It is important that any bugs detected in Uptane implementations be patched promptly. Failure to do so could interfere with the effectiveness of Uptane’s operations.</t>

</section>
<section anchor="use-cases" title="Use cases">

<t>The following use cases provide a number of scenarios illustrating the manner in which software updates could be accomplished using Uptane.</t>

<section anchor="oems-initializing-uptane-at-the-factory-using-sota" title="OEMs initializing Uptane at the factory using SOTA">

<t>An OEM plans to install Uptane on new vehicles. This entails the following components: code to perform full and partial verification, the latest copy of the relevant metadata, the public keys, and an accurate attestation of the latest time. The OEM then either requires its tier-1 suppliers to provide these materials to the suppliers’ assembly lines or can choose to add the materials later at the OEM’s assembly lines. The OEM’s in-vehicle implementation is Uptane-compliant if:</t>

<t><list style="numbers">
  <t>all Primaries perform full verification;</t>
  <t>all Secondaries that are updated via OTA at least perform partial verification; and</t>
  <t>any ECUs that do not perform any type of verification cannot be updated via OTA.</t>
</list></t>

</section>
<section anchor="updating-one-ecu-with-a-complete-image" title="Updating one ECU with a complete image">

<t>A tier-1 supplier completes work on a revised image for an electronic brake control module. This module will control the brakes on all models of an SUV produced by the OEM mentioned above. Assuming supplier delegation is supported by the OEM for this ECU, each tier-1 supplier digitally signs the image, then delivers the signature, all of its metadata, including delegations, and associated images to the OEM. The OEM adds these metadata and images to its Image repository, along with information about any dependencies and conflicts between this image and those for other ECUs used in the OEM’s vehicles. The OEM also updates the inventory database, so that the Director repository can instruct the ECU on how to install these updated images.</t>

</section>
<section anchor="updating-individual-ecus-on-demand" title="Updating individual ECUs on demand">

<t>An OEM has issued a recall to address a problem with a keyless entry device that has been locking people out of their cars. The OEM prepares an updated flash image in the manner described above. The OEM then ships USB flash drives to vehicle owners and dealerships that allow those parties to update the firmware of their vehicles.</t>

</section>
<section anchor="update-one-ecu-with-multiple-deltas" title="Update one ECU with multiple deltas">

<t>The OEM wants to use delta updates to save over-the-air bytes. The delta images contain only the code and/or data that has changed from the previous image version. To do so, the OEM must first modify the Director repository, using the vehicle version manifest and dependency resolution to determine the differences between the previous and latest images. The OEM then adds the following to the custom Targets metadata used by the Director repository: (1) the algorithm used to apply a delta image, and (2) the Targets metadata about the delta image. The OEM will also check whether the delta images match the Targets metadata from the Director repository.</t>

</section>
</section>
</section>
<section anchor="exceptions" title="Exceptions">

<t>There are a number of factors that could impede the completion of the above scenarios:</t>

<t><list style="symbols">
  <t>ECUs may be lacking the necessary resources to function as designated. These insufficient resources could include limited CPU or RAM inadequate for performance of public key cryptography; a lack of sufficient storage to undo installation of bad software; or a location on a low-speed network (e.g., LIN).</t>
  <t>ECUs may reside on different network segments, and may not be able to directly reach each other, requiring a gateway to facilitate communication.</t>
  <t>A user may replace OEM-installed ECUs with aftermarket ECUs.</t>
  <t>A vehicle may be able to download only a limited amount of data via a cellular channel due to limits on a data plan.</t>
  <t>A system may lack sufficient power to download or install software updates.</t>
  <t>Vehicles may be offline for extended periods of time, thus missing required updates (e.g., key rotations).</t>
  <t>OEMs may be unwilling to implement costly security or hardware requirements.</t>
</list></t>

</section>
<section anchor="out-of-scope" title="Out of scope">

<t>The following topics will not be addressed in this document, as they represent threats outside the scope of Uptane:</t>

<t><list style="symbols">
  <t>Physical attacks, such as manual tampering with ECUs outside the vehicle.</t>
  <t>Compromise of the packaged software, such as malware embedded in a trusted package.</t>
  <t>Compromise of the supply chain (e.g., build system, version control system, packaging process). A number of strategies (e.g., git signing, TPMs, in-toto <xref target="IN-TOTO"/>)  already exist to address this problem. Therefore, there is no need to duplicate those techniques here.</t>
  <t>Problems associated with OBD or UDS programming of ECUs, such as authentication of communications between ECUs.</t>
  <t>Malicious mirrors of package repositories, which may substitute original packages with malicious packages with matching version numbers <xref target="MERCURY"/>.</t>
</list></t>

</section>
<section anchor="design-requirements" title="Design requirements">

<t>The design requirements for this document are governed by the following principal parameters:</t>

<t><list style="symbols">
  <t>to clearly mandate the design and implementation steps that are security critical and must be followed as is, while offering flexibility in the implementation of non-critical steps. In this manner, users can adapt to support different use models and deployment scenarios.</t>
  <t>to ensure that, if Uptane is implemented, the security practices mandated or suggested in this document do not interfere with the functionality of ECUs, vehicles, or the systems that maintain them.</t>
  <t>to delineate guidelines to ensure that, should any part of the SOTA mechanism of a vehicle be attacked, an attacker must compromise two or more modules to breach the SOTA mechanism.</t>
</list></t>

</section>
</section>
<section anchor="threat-model-and-attack-strategies" title="Threat model and attack strategies">

<t>The overarching goal of Uptane is to provide a system that is resilient in the face of various types of compromise. In this section, we describe the goals an attacker may have (<xref target="attacker_goals"/>) and the capabilities they may have or could develop (<xref target="capabilities"/>). We then describe and classify types of attacks on the system according to the attacker’s goals (<xref target="threats"/>).</t>

<section anchor="attacker_goals" title="Attacker goals">

<t>We assume that attackers may want to achieve one or more of the following goals, in increasing order of severity:</t>

<t><list style="symbols">
  <t>Read the contents of updates to discover confidential information, reverse-engineer firmware, or compare two firmware images to identify security fixes and hence determine the fixed security vulnerability.</t>
  <t>Deny installation of updates to prevent vehicles from fixing software problems.</t>
  <t>Cause one or more ECUs in the vehicle to fail, denying use of the vehicle or of certain functions.</t>
  <t>Control ECUs within the vehicle, and possibly the vehicle itself.</t>
</list></t>

</section>
<section anchor="capabilities" title="Attacker capabilities">

<t>Uptane is designed with resilience to compromise in mind. We assume that attackers may develop one or more of the following capabilities:</t>

<t><list style="symbols">
  <t>Intercept and modify network traffic (i.e., perform man-in-the-middle attacks). This capability may be developed in two domains:
  <list style="symbols">
      <t>Outside the vehicle, intercepting and modifying traffic between the vehicle and software repositories.</t>
      <t>Inside the vehicle, intercepting and modifying traffic on one or more vehicle buses (e.g., via an OBD port or by using a compromised ECU as a vector).</t>
    </list></t>
  <t>Compromise and control either a Director repository or Image repository server, and any keys stored on that repository, but not both the Director and Image repositories.</t>
  <t>Compromise either a Primary ECU or a Secondary ECU, but not both in the same vehicle.</t>
</list></t>

</section>
<section anchor="threats" title="Description of threats">

<t>Uptane’s threat model includes the following types of attacks, organized according to the attacker goals listed in <xref target="attacker_goals"/>.</t>

<section anchor="read_updates" title="Read updates">

<t><list style="symbols">
  <t><spanx style="emph">Eavesdrop attack:</spanx> Read sensitive or confidential information from an update intended to be encrypted for a specific ECU. (Note: Not all implementations will have a need to protect information in this way.)</t>
</list></t>

</section>
<section anchor="deny_updates" title="Deny installation of updates">

<t>An attacker seeking to deny the installation of updates may attempt one or more of the following strategies:</t>

<t><list style="symbols">
  <t><spanx style="emph">Drop-request attack:</spanx> Block network traffic outside or inside the vehicle.</t>
  <t><spanx style="emph">Slow retrieval attack:</spanx> Slow down network traffic, in the extreme case sending barely enough packets to avoid a timeout. Similar to a drop-request attack, except that both the sender and receiver of the traffic still think network traffic is unimpeded.</t>
  <t><spanx style="emph">Freeze attack:</spanx> Continue to send a properly signed, but old, update bundle to the ECUs, even if newer updates exist.</t>
  <t><spanx style="emph">Partial bundle installation attack:</spanx> Install a valid (signed) update bundle, and then block selected updates within the bundle.</t>
  <t><spanx style="emph">Denial of service attack</spanx> against the Uptane repositories or infrastructure.</t>
</list></t>

</section>
<section anchor="change_functionality" title="Interfere with ECU functionality">

<t>Attackers seeking to interfere with the functionality of vehicle ECUs in order to cause an operational failure or unexpected behavior may do so in one of the following ways:</t>

<t><list style="symbols">
  <t><spanx style="emph">Rollback attack:</spanx> Cause an ECU to install a previously valid software revision that is older than the currently installed version.</t>
  <t><spanx style="emph">Endless data attack:</spanx> Send a large amount of data to an ECU until it runs out of storage, possibly causing the ECU to fail to operate.</t>
  <t><spanx style="emph">Mix-and-match attack:</spanx> Install a malicious software bundle in which some of the updates do not interoperate properly. This may be accomplished even if all of the individual images being installed are valid, as long as valid versions exist that are mutually incompatible.</t>
</list></t>

</section>
<section anchor="control_ecu" title="Control an ECU or vehicle">

<t>Full control of a vehicle, or one or more ECUs within a vehicle, is the most severe threat.</t>

<t><list style="symbols">
  <t><spanx style="emph">Arbitrary software attack:</spanx> Cause an ECU to install and run arbitrary code of the attacker’s choice.</t>
</list></t>

</section>
</section>
</section>
<section anchor="design" title="Detailed design of Uptane">

<t>Uptane does not specify implementation details. Instead, this Standard describes the components necessary for a compliant implementation and leaves it up to individual implementers to make their own technological choices within those requirements.</t>

<t>At a high level, Uptane requires:</t>

<t><list style="symbols">
  <t>Two software repositories:
  <list style="symbols">
      <t>An Image repository containing binary images to install and signed metadata about those images.</t>
      <t>A Director repository connected to an inventory database that can sign metadata on demand for images in the Image repository.</t>
    </list></t>
  <t>Repository tools for generating Uptane-specific metadata about images.</t>
  <t>A public key infrastructure supporting the required metadata production and signing roles on each repository:
  <list style="symbols">
      <t>Root - The certificate authority for the Uptane ecosystem. Distributes public keys for verifying all the other roles’ metadata.</t>
      <t>Timestamp - Indicates whether there are new metadata or images.</t>
      <t>Snapshot - Indicates images released by the repository at a point in time via signing metadata about Targets metadata.</t>
      <t>Targets - Indicates metadata about images, such as hashes and file sizes.</t>
    </list></t>
  <t>A secure way for ECUs to know the time.</t>
  <t>An ECU capable of downloading images and associated metadata from the Uptane servers.</t>
  <t>An in-vehicle client on a Primary ECU capable of verifying the signatures on all update metadata and downloading updates on behalf of its associated Secondary ECUs. The Primary ECU MAY be the same ECU that communicates with the server.</t>
  <t>A client or library on each Secondary ECU capable of performing either full or partial verification of metadata.</t>
</list></t>

<section anchor="roles" title="Roles on repositories">

<t>A repository contains images and metadata. Each role has a particular type of metadata associated with it, as described in <xref target="meta_structures"/>.</t>

<section anchor="root_role" title="The Root role">

<t>A repository’s Root role SHALL be responsible for a Certificate Authority as defined in <xref target="RFC3647"/>.
A repository’s Root role SHALL produce and sign Root metadata as described in <xref target="root_meta"/>.
A repository’s Root role SHALL sign the public keys used to verify the metadata produced by the Timestamp, Snapshot, and Targets roles.
A repository’s Root role SHALL revoke keys for the other roles if they are compromised.</t>

</section>
<section anchor="targets_role" title="The Targets role">

<t>A repository’s Targets role SHALL produce and sign metadata about images and delegations as described in <xref target="targets_meta"/>.</t>

<section anchor="targets_role_delegations" title="Delegations">

<t>The Targets role on the Image repository MAY delegate the responsibility of signing metadata to other, custom-defined roles referred to as delegated targets. If it does, it SHALL do so as specified in <xref target="delegations_meta"/>.</t>

<t>As responsibility for signing images or a subset of images MAY be delegated to more than one role, it is possible that two different roles will be trusted to sign a particular image. For this reason, delegations SHALL be prioritized.</t>

<t>A particular delegation for a subset of images MAY be designated as <spanx style="strong">terminating</spanx>. For terminating delegations, the client SHALL NOT search any further if it does not find validly signed metadata about those images. Delegations SHOULD NOT be terminating by default; terminating delegations SHOULD only be used when there is a compelling technical reason to do so.</t>

<t>A delegation for a subset of images MAY be a multi-role delegation <xref target="TAP-3"/>. A multi-role delegation indicates that multiple roles are needed to sign a particular image and each of the delegatee roles SHALL sign the same metadata.</t>

<t>Delegations only apply to the Image repository. The Targets role on the Director repository SHALL NOT delegate metadata signing responsibility.</t>

</section>
</section>
<section anchor="snapshot_role" title="The Snapshot role">

<t>A repository’s Snapshot role SHALL produce and sign metadata about all Targets metadata the repository releases, including the current version number of the top-level Targets metadata, and the version numbers of all delegated Targets metadata, as described in <xref target="snapshot_meta"/>.</t>

</section>
<section anchor="timestamp_role" title="The Timestamp role">

<t>A repository’s Timestamp role SHALL produce and sign metadata indicating whether there are new metadata or images on the repository. It SHALL do so by signing the metadata about the Snapshot metadata file.</t>

</section>
</section>
<section anchor="meta_structures" title="Metadata structures">

<t>Uptane’s security guarantees all rely on properly created metadata that follows a designated structure. The Uptane Standard <spanx style="strong">does not</spanx> mandate any particular format or encoding for the metadata as a whole. ASN.1 (with any encoding scheme like BER, DER, XER, etc.), JSON, XML, or any other encoding format that is capable of providing the required structure MAY be used.</t>

<t>However, string comparison is required as part of metadata verification. To ensure an accurate basis for comparing strings, all strings SHALL be encoded in the Unicode Format for Network Interchange as defined in <xref target="RFC5198"/>, including normalization into Unicode Normalization Form C (<xref target="NFC"/>).</t>

<t>The <spanx style="emph">Deployment Best Practices</spanx> (<xref target="DEPLOY"/>), Joint Development Foundation Projects, LLC, Uptane Series provides some examples of compliant metadata structures in ASN.1 and JSON.</t>

<section anchor="common_metadata" title="Common metadata structures">

<t>Every public key SHALL be represented using a public key identifier.  A public key identifier is EITHER all of the following:</t>

<t><list style="symbols">
  <t>The value of the public key itself (which MAY be, for example, formatted as a PEM string)</t>
  <t>The public key cryptographic algorithm used by the key (such as RSA or ECDSA)</t>
  <t>The particular scheme used to verify the signature (such as <spanx style="verb">rsassa-pss-sha256</spanx> or <spanx style="verb">ecdsa-sha2-nistp256</spanx>)</t>
</list></t>

<t>OR a secure hash over at least the above components (such as the keyid mechanism in TUF).</t>

<t>All four Uptane roles (Root, Targets, Snapshot, and Timestamp) share a common structure. They SHALL contain the following two attributes:</t>

<t><list style="symbols">
  <t>A payload of metadata to be signed</t>
  <t>An attribute containing the signature(s) of the payload, where each entry specifies:
  <list style="symbols">
      <t>The public key identifier of the key being used to sign the payload</t>
      <t>A signature with this key over the payload</t>
    </list></t>
</list></t>

<t>The payload differs depending on the role. However, the payload for all roles shares a common structure. It SHALL contain the following four attributes:</t>

<t><list style="symbols">
  <t>An indicator of the type of role (Root, Targets, Snapshot, or Timestamp)</t>
  <t>An expiration date and time</t>
  <t>An integer version number, which SHOULD be incremented each time the metadata file is updated</t>
  <t>The role-specific metadata for the role indicated</t>
</list></t>

<t>The following sections describe the role-specific metadata. All roles SHALL follow the common structures described here.</t>

</section>
<section anchor="root_meta" title="Root metadata">

<t>A repository’s Root metadata distributes the public keys of the top-level Root, Targets, Snapshot, and Timestamp roles, as well as revocations of those keys. It SHALL contain two attributes:</t>

<t><list style="symbols">
  <t>A representation of the public keys for all four roles. Each key SHALL have a unique public key identifier.</t>
  <t>An attribute mapping each role to (1) its public key(s), and (2) the threshold of signatures required for that role.</t>
</list></t>

</section>
<section anchor="targets_meta" title="Targets metadata">

<t>The Targets metadata on a repository contains all of the information about images to be installed on ECUs. This includes filenames, hashes, and file sizes. It MAY also include other useful information, such as what types of hardware are compatible with a particular image.</t>

<t>Targets metadata can also contain metadata about delegations, allowing one Targets role to delegate its authority to another. This means that an individual Targets metadata file might contain only metadata about delegations, only metadata about images, or some combination of the two. The details of how ECUs traverse the delegation tree to find valid metadata about images is specified in <xref target="resolve_delegations"/>.</t>

<section anchor="targets_images_meta" title="Metadata about images">

<t>To be available to install on clients, all images on the repository SHALL have their metadata listed in a Targets role.  Each Targets role MAY provide a list of some images on the repository.  This list SHALL provide, at a minimum, the following information about each image:</t>

<t><list style="symbols">
  <t>The image filename</t>
  <t>The size of the image in bytes</t>
  <t>One or more hashes of the image file, along with the hashing function used</t>
</list></t>

<t>If there are no images included in the Targets metadata from the Director repository, then the metadata SHALL include a vehicle identifier in order to avoid a replay attack.</t>

<section anchor="custom-metadata-about-images" title="Custom metadata about images">

<t>In addition to what is required, Targets metadata files MAY contain extra metadata for images on the repository. This metadata can be customized for a particular use case. Examples of use cases for different types of custom metadata can be found in the <spanx style="emph">Deployment Best Practices</spanx> document (<xref target="DEPLOY"/>). However, there are a few important pieces of custom metadata that SHOULD be present in most implementations. In addition, there is one element in the custom metadata that SHALL be present in the Targets metadata from the Director.</t>

<t>Custom metadata MAY also contain a demarcated field or section that SHALL match whenever two pieces of metadata are checked against each other, such as when Targets metadata from the Director repository is checked against Targets metadata from the Image repository.</t>

<t>The information listed below SHOULD be provided for each image on both the Image repository and the Director repository. If a “SHALL match section” is to be implemented, that is where this information SHOULD be placed.</t>

<t><list style="symbols">
  <t>A release counter, to be incremented each time a new version of the image is released. This can be used to prevent rollback attacks even in cases where the Director repository is compromised.</t>
  <t>A hardware identifier, or list of hardware identifiers, representing models of ECUs with which the image is compatible. This can be used to ensure that an ECU cannot be ordered to install an incompatible image, even in cases where the Director repository is compromised.</t>
</list></t>

<t>The following information is CONDITIONALLY REQUIRED for each image on the Director repository IF that image is encrypted:</t>

<t><list style="symbols">
  <t>Information about filenames, hashes, and file size of the encrypted image.</t>
  <t>Information about the encryption method, and other relevant information–for example, a symmetric encryption key encrypted by the ECU’s asymmetric key could be included in the Director repository metadata.</t>
</list></t>

<t>The following information SHALL be provided from the Director repository for each image in the Targets metadata:</t>

<t><list style="symbols">
  <t>An ECU identifier (such as a serial number), specifying the ECU that should install the image.</t>
</list></t>

<t>The Director repository MAY provide a download URL for the image file. This may be useful, for example, when the image is on a public CDN and the Director wishes to provide a signed URL.</t>

</section>
</section>
<section anchor="delegations_meta" title="Metadata about delegations">

<t>A Targets metadata file on the Image repository (but not the Director repository) SHALL be able to delegate signing authority to other entities. For example, it could delegate signing authority for a particular ECU’s firmware to that ECU’s supplier. A metadata file MAY contain any number of delegations and SHALL keep the delegations in prioritized order.</t>

<t>Any metadata file with delegations SHALL provide the following information:</t>

<t><list style="symbols">
  <t>A list of public keys of all delegatees. Each key should have a unique public key identifier and a key type.</t>
  <t>A list of delegations, each of which contains:
  <list style="symbols">
      <t>A list of the filenames to which this role applies. This MAY be expressed using wildcards, or by enumerating a list, or a combination of the two.</t>
      <t>An optional list of the hardware identifiers to which this role applies.  If this is omitted, any hardware identifier will match.</t>
      <t>An indicator of whether or not this is a terminating delegation. (See <xref target="targets_role_delegations"/>.)</t>
      <t>A list of the roles to which this delegation applies. Each role needs to specify:
      <list style="symbols">
          <t>A name for the role (e.g., “supplier1-qa”)</t>
          <t>The key identifiers for each key this role uses</t>
          <t>A threshold of keys that must sign for this role</t>
        </list></t>
    </list></t>
</list></t>

<t>Note that <spanx style="strong">any</spanx> Targets metadata file stored on the Image repository may contain delegations, and these delegations can be in chains of arbitrary length.</t>

</section>
</section>
<section anchor="snapshot_meta" title="Snapshot metadata">

<t>The Snapshot metadata lists version numbers and filenames of all Targets metadata files. It protects against mix-and-match attacks if a delegated supplier key is compromised.</t>

<t>For each Targets metadata file on the repository, the Snapshot metadata SHALL contain the following information:</t>

<t><list style="symbols">
  <t>The filename and version number of the Targets metadata file.</t>
</list></t>

<t>The Snapshot metadata MAY also list the Root metadata filename and version number for the purpose of backwards compatibility. Historically, this was a requirement in TUF, but it is no longer required and does not provide a significant security benefit.</t>

</section>
<section anchor="timestamp_meta" title="Timestamp metadata">

<t>The Timestamp metadata SHALL contain the following information:</t>

<t><list style="symbols">
  <t>The filename and version number of the latest Snapshot metadata on the repository.</t>
  <t>One or more hashes of the Snapshot metadata file, along with the hashing function used.</t>
</list></t>

</section>
<section anchor="repo_mapping_meta" title="Repository mapping metadata">

<t>As described in the introduction to <xref target="design"/>, Uptane requires a Director repository and an Image repository. However, it is possible to have an Uptane-compliant implementation that has more than two repositories.</t>

<t>Repository mapping metadata informs a Primary ECU about which repositories to trust for images or image paths. <xref target="TAP-4"/> describes how to make use of more complex repository mapping metadata in order to have more than the two required repositories.</t>

<t>Repository mapping metadata, or the equivalent informational content, SHALL be present on all Primary ECUs, and SHALL contain the following information:</t>

<t><list style="symbols">
  <t>A list of repository names and one or more URLs at which the named repository can be accessed. At a minimum, this SHALL include the Director and Image repositories.</t>
  <t>A list of mappings of image paths to repositories, each of which contains:
  <list style="symbols">
      <t>A list of image paths. Image paths MAY be expressed using wildcards, or by enumerating a list, or a combination of the two.</t>
      <t>A list of repositories that SHALL provide signed Targets metadata for images stored at those paths.</t>
    </list></t>
</list></t>

<t>For example, in the most basic Uptane case, the repository mapping metadata would contain:</t>

<t><list style="symbols">
  <t>The name and URL of the Director repository.</t>
  <t>The name and URL of the Image repository.</t>
  <t>A single mapping indicating that all images (<spanx style="verb">*</spanx>) SHALL be signed by both the Director and Image repository.</t>
</list></t>

<t>Note that the metadata need not be in the form of a metadata file. For example, in the basic case where there is only one Director and one Image repository, and all images need to have signed metadata from both repositories, it would be sufficient to have a configuration file with URLs for the two repositories and a client that always checks for metadata matches between them. In this case, no explicit mapping would be defined, because the mapping is defined as part of the Uptane client implementation.</t>

<t>The <spanx style="emph">Uptane Deployment Best Practices</spanx> document (<xref target="DEPLOY"/>) provides more guidance on how to implement repository mapping metadata for more complex use cases. It also discusses strategies for updating repository mapping metadata, if required.</t>

</section>
<section anchor="metadata_filename_rules" title="Rules for filenames in repositories and metadata">

<t>There is a difference between the filename in a metadata file or an ECU, and the filename on a repository. This difference exists in order to avoid race conditions, where metadata and images are read from, and written to, at the same time. For more details, the reader should read the TUF specification <xref target="TUF-spec"/> and PEP 458 <xref target="PEP-458"/>.</t>

<t>Unless stated otherwise, all files SHALL be written to repositories in accordance with the following two rules:</t>

<t><list style="numbers">
  <t>Metadata filenames SHALL be qualified with version numbers. If a metadata file A is specified as FILENAME.EXT in another metadata file B, then it SHALL be written as VERSION.FILENAME.EXT, where VERSION is A’s version number, as defined in <xref target="common_metadata"/>, with one exception: If the version number of the Timestamp metadata file is not be known in advance by a client, it MAY be read from, and written to, a repository using a filename without a version number qualification, i.e., FILENAME.EXT.</t>
  <t>If an image is specified in a Targets metadata file as FILENAME.EXT, it SHALL be written to the repository as HASH.FILENAME.EXT, where HASH is one of the hash digests of the file, as specified in <xref target="targets_images_meta"/>. The file MUST be written to the repository using <spanx style="emph">n</spanx> different filenames, one for each hash digest listed in its corresponding Targets metadata.</t>
  <t>Filenames of images SHOULD be encoded to prevent a path traversal on the client system, either by using URL encoding or by limiting the allowed character set in the filename.</t>
</list></t>

<t>For example:</t>

<t><list style="symbols">
  <t>The version number of the Snapshot metadata file is 61, and its filename in the Timestamp metadata is <spanx style="emph">snapshot.json</spanx>. The filename on the repository will be <spanx style="emph">61.snapshot.json</spanx>.</t>
  <t>There is an image with the <spanx style="emph">filename acme_firmware.bin</spanx> specified in the Targets metadata, with a SHA3-256 of <spanx style="emph">aaaa</spanx> and a SHA-512/224 of <spanx style="emph">bbbb</spanx>. It will have two filenames on the repository: <spanx style="emph">aaaa.acme_firmware.bin</spanx> and <spanx style="emph">bbbb.acme_firmware.bin</spanx>.</t>
</list></t>

</section>
</section>
<section anchor="server-repository-implementation-requirements" title="Server / repository implementation requirements">

<t>An Uptane implementation SHALL make the following services available to vehicles:</t>

<t><list style="symbols">
  <t>Image repository</t>
  <t>Director repository</t>
</list></t>

<t>Additionally, an Uptane implementation requires ECUs to have a secure way to know the current time.</t>

<section anchor="image-repository" title="Image repository">

<t>The Image repository exists to allow an OEM and/or its suppliers to upload images and their associated metadata. It makes these images and their metadata available to vehicles. The Image repository is designed to be primarily controlled by human actors, and updated relatively infrequently.</t>

<t>The Image repository SHALL expose an interface permitting the download of metadata and images. This interface SHOULD be public.</t>

<t>The Image repository SHALL require authorization for writing metadata and images.</t>

<t>The Image repository SHALL provide a method for authorized users to upload images and their associated metadata. It SHALL check that a user writing metadata and images is authorized to do so for that specific image by checking the chain of delegations as described in <xref target="delegations_meta"/>.</t>

<t>The Image repository SHALL implement storage that permits authorized users to write an image file using a unique filename, and later read the same file using the same name. It MAY use any filesystem, key-value store, or database that fulfills this requirement.</t>

<t>The Image repository MAY require authentication for read access.</t>

</section>
<section anchor="director_repository" title="Director repository">

<t>The Director repository instructs ECUs as to which images should be installed by producing signed metadata on demand. Unlike the Image repository, it is mostly controlled by automated, online processes. It also consults a private inventory database containing information on vehicles, ECUs, and software revisions.</t>

<t>The Director repository SHALL expose an interface for Primaries to upload vehicle version manifests (<xref target="vehicle_version_manifest"/>) and download metadata. This interface SHOULD be public.</t>

<t>The Director MAY encrypt images for ECUs that require them, either by encrypting on-the-fly or by storing encrypted images on the repository.</t>

<t>The Director repository SHALL implement storage that permits an automated service to write generated metadata files. It MAY use any filesystem, key-value store, or database that fulfills this requirement.</t>

<section anchor="directing-installation-of-images-on-vehicles" title="Directing installation of images on vehicles">

<t>A Director repository SHALL conform to the following six-step process for directing the installation of software images on a vehicle.</t>

<t><list style="numbers">
  <t>The Director SHOULD first identify the vehicle. This MAY be done when the Director receives a vehicle version manifest sent by a Primary (as described in <xref target="construct_manifest_primary"/>), decodes the manifest, and determines the unique vehicle identifier. Additionally, the Director MAY utilize other mechanisms to uniquely identify a vehicle (e.g., 2-way TLS with unique client certificates).</t>
  <t>Using the vehicle identifier, the Director queries its inventory database (as described in <xref target="inventory_db"/>) for relevant information about each ECU in the vehicle.</t>
  <t>The Director SHALL check the manifest for accuracy compared to the information in the inventory database. If any of the required checks fail, the Director MAY drop the request. An implementer MAY make additional checks if desired. At a minimum, the Director SHALL check the following:
  <list style="symbols">
      <t>Each ECU recorded in the inventory database is also represented in the manifest.</t>
      <t>The signature of the manifest matches the ECU key of the Primary that sent it.</t>
      <t>The signature of each Secondary’s contribution to the manifest matches the ECU key of that Secondary.</t>
    </list></t>
  <t>The Director SHOULD check that the nonce or counter in each ECU version report has not been used before to prevent a replay of the ECU version report. If the nonce or counter is reused the Director SHOULD drop the request.</t>
  <t>The Director extracts information about currently installed images from the vehicle version manifest. Using this information, it determines if the vehicle is already up-to-date, and if not, determines a set of images that should be installed. The exact process by which this determination takes place is out of scope for this Standard. However, the Director SHALL take into account <spanx style="emph">dependencies</spanx> and <spanx style="emph">conflicts</spanx> between images and SHOULD consult well-established techniques for dependency resolution.</t>
  <t>The Director MAY encrypt images for ECUs that require it.</t>
  <t>The Director generates new metadata representing the desired set of images to be installed on the vehicle, based on the dependency resolution in step 4. This includes Targets (<xref target="targets_meta"/>), Snapshot (<xref target="snapshot_meta"/>), and Timestamp (<xref target="timestamp_meta"/>) metadata. It then sends this metadata to the Primary as described in <xref target="download_meta_primary"/>.</t>
</list></t>

</section>
<section anchor="inventory_db" title="Inventory Database">

<t>The Director SHALL use a private inventory database to store information about ECUs and vehicles. An implementer MAY use any durable database for this purpose.</t>

<t>The inventory database SHALL record the following pieces of information:</t>

<t><list style="symbols">
  <t>Per vehicle:
  <list style="symbols">
      <t>A unique identifier (such as a VIN)</t>
    </list></t>
  <t>Per ECU:
  <list style="symbols">
      <t>A unique identifier (such as a serial number)</t>
      <t>The vehicle identifier the ECU is associated with</t>
      <t>An ECU key (symmetric or asymmetric; for asymmetric keys, only the public part SHOULD be stored)</t>
      <t>The ECU key identifier (as defined in <xref target="common_metadata"/>)</t>
      <t>Whether the ECU is a Primary or a Secondary</t>
    </list></t>
</list></t>

<t>The inventory database MAY record other information about ECUs and vehicles. It SHOULD record a hardware identifier for each ECU to protect against the possibility of directing the ECU to install incompatible firmware.</t>

</section>
</section>
</section>
<section anchor="in-vehicle-implementation-requirements" title="In-vehicle implementation requirements">

<t>An Uptane-compliant ECU SHALL be able to download and verify image metadata and image binaries before installing a new image and MUST have a secure way of verifying the current time, or a sufficiently recent attestation of the time.</t>

<t>All ECUs SHALL monitor the download speed of image metadata and image binaries to detect and respond to a slow retrieval attack. If the download is slower than a pre-defined threshold, the ECU SHOULD send an alert to the Director repository, for example as part of the next vehicle version manifest.</t>

<t>Each ECU receiving over-the-air updates in a vehicle is either a Primary or a Secondary ECU. A Primary ECU collects and delivers to the Director vehicle manifests (<xref target="vehicle_version_manifest"/>) that contain information about which images have been installed on ECUs in the vehicle. It also verifies the time, and downloads and verifies the latest metadata and images for itself and for its Secondaries. A Secondary ECU verifies the time, and downloads and verifies the latest metadata and images for itself from its associated Primary ECU. It also sends signed information about its installed images to its associated Primary.</t>

<t>All ECUs SHALL verify image metadata as specified in <xref target="metadata_verification"/> before installing an image or making it available to other ECUs. A Primary ECU SHALL perform full verification (<xref target="full_verification"/>). A Secondary ECU SHOULD perform full verification if possible. If a Secondary cannot perform full verification, it SHALL, at the very least, perform partial verification. In addition, it MAY also perform some steps from the full verification process. See the <spanx style="emph">Uptane Deployment Best Practices</spanx> document (<xref target="DEPLOY"/>) for a discussion of how to choose between partial and full verification.</t>

<t>ECUs SHALL have a secure source of time. An OEM/Uptane implementer MAY use any external source of time that is demonstrably secure.</t>

<section anchor="build-time-prerequisite-requirements-for-ecus" title="Build-time prerequisite requirements for ECUs">

<t>For an ECU to be capable of receiving Uptane-secured updates, it SHALL have the following data provisioned at the time it is manufactured or installed in the vehicle:</t>

<t><list style="numbers">
  <t>A sufficiently recent copy of required Uptane metadata at the time of manufacture or install. This is necessary for the ECU to authenticate that the remote repository is legitimate when it first downloads metadata in the field. See <spanx style="emph">Uptane Deployment Best Practices</spanx> (<xref target="DEPLOY"/>) for more information.
  <list style="symbols">
      <t>Partial verification Secondary ECUs SHALL have the Root and Targets metadata from the Director repository (to reduce the scope of rollback and replay attacks). These ECUs MAY also have metadata from other roles or the Image repository if they will be used by the Secondary.</t>
      <t>Full verification ECUs SHALL have a complete set of metadata (Root, Targets, Snapshot, and Timestamp) from both repositories (to prevent rollback and replay attacks), as well as the repository mapping metadata (<xref target="repo_mapping_meta"/>). Delegations are not required.</t>
    </list></t>
  <t>The current time, or a secure attestation of a sufficiently recent time.</t>
  <t>An <spanx style="strong">ECU signing key</spanx>. This is a private key, unique to the ECU, used to sign ECU version reports and decrypt images. An ECU key MAY be either a symmetric key or an asymmetric key. If it is an asymmetric key, there MAY be separate keys for encryption and signing. For the purposes of this Standard, the set of private keys that an ECU uses is referred to as the ECU key (singular), even if it is actually multiple keys used for different purposes. Note that while signing keys are required to be unique to the ECU to avoid replay attacks, the secret keys used to decrypt images need not be unique.</t>
</list></t>

</section>
<section anchor="what-the-primary-does" title="What the Primary does">

<t>A Primary downloads, verifies, and distributes the latest time, metadata, and images. To do so, it SHALL perform the following seven steps:</t>

<t><list style="numbers">
  <t>Construct and send vehicle version manifest (<xref target="construct_manifest_primary"/>)</t>
  <t>Download and check current time (<xref target="check_time_primary"/>)</t>
  <t>Download and verify metadata (<xref target="download_meta_primary"/>)</t>
  <t>Download and verify images (<xref target="download_images_primary"/>)</t>
  <t>Send latest time to Secondaries (<xref target="send_time_primary"/>)</t>
  <t>Send metadata to Secondaries (<xref target="send_metadata_primary"/>)</t>
  <t>Send images to Secondaries (<xref target="send_images_primary"/>)</t>
</list></t>

<t>Note that the subsequent sections concerning requirements for a Primary do not prohibit implementing Primary capabilities on an ECU that does not communicate directly with the Uptane repositories. This allows for implementations to have multiple ECUs within the vehicle performing functions equivalent to a Primary.
If multiple such Primaries are included within a vehicle, each Primary SHOULD have a designated set of Secondaries and each Secondary SHALL have at least one Primary responsible for providing its updates</t>

<section anchor="construct_manifest_primary" title="Construct and send vehicle version manifest">

<t>The Primary SHALL build a <spanx style="emph">vehicle version manifest</spanx> as described in <xref target="vehicle_version_manifest"/>.</t>

<t>Once the complete manifest is built, the Primary MAY send the manifest to the Director repository. However, it is not strictly required that the Primary send the manifest until step three. If permitted by the implementation, a Primary MAY send only a diff of the manifest to save bandwidth. If an implementation permits diffs, the Director SHOULD have a way to request a full manifest.</t>

<t>Secondaries MAY send their version report at any time so that it is already stored on the Primary when it wishes to check for updates. Alternatively, the Primary MAY request a version report from each Secondary at the time of the update check.</t>

<section anchor="vehicle_version_manifest" title="Vehicle version manifest">

<t>The vehicle version manifest is a metadata structure that SHALL contain the following information:</t>

<t><list style="symbols">
  <t>An attribute containing the signature(s) of the payload, each specified by:
  <list style="symbols">
      <t>The public key identifier of the key being used to sign the payload</t>
      <t>The signing method (i.e., ed25519, rsassa-pss, etc.)</t>
      <t>A hash of the payload to be signed</t>
      <t>The hashing function used (i.e., SHA3-256, SHA-512/224, etc.)</t>
      <t>The signature of the hash</t>
    </list></t>
  <t>A payload representing the installed versions of each software image on the vehicle. This payload SHALL contain:
  <list style="symbols">
      <t>The vehicle’s unique identifier (e.g., the VIN)</t>
      <t>The Primary ECU’s unique identifier (e.g., the serial number)</t>
      <t>A list of ECU version reports as specified in <xref target="version_report"/></t>
    </list></t>
</list></t>

<t>Note that one of the ECU version reports should be the version report for the Primary itself.</t>

</section>
<section anchor="version_report" title="ECU version report">

<t>An ECU version report is a metadata structure that SHALL contain the following information:</t>

<t><list style="symbols">
  <t>An attribute containing the signature(s) of the payload, each specified by:
  <list style="symbols">
      <t>The public key identifier of the key being used to sign the payload</t>
      <t>The signing method (i.e., ed25519, rsassa-pss, etc.)</t>
      <t>A hash of the payload to be signed</t>
      <t>The hashing function used (i.e., SHA3-256, SHA-512/224, etc.)</t>
      <t>The signature of the hash</t>
    </list></t>
  <t>A payload containing:
  <list style="symbols">
      <t>The ECU’s unique identifier (e.g., the serial number)</t>
      <t>The filename, length, and hashes of its currently installed image (i.e., the non-custom Targets metadata for this particular image)</t>
      <t>An indicator of any detected security attack</t>
      <t>The latest time the ECU can verify at the time this version report was generated</t>
      <t>A nonce or counter to prevent a replay of the ECU version report. This value SHALL change each update cycle.</t>
    </list></t>
</list></t>

</section>
</section>
<section anchor="check_time_primary" title="Download and check current time">

<t>The Primary SHALL load the current time from a secure source.</t>

</section>
<section anchor="download_meta_primary" title="Download and verify metadata">

<t>The Primary SHALL download metadata for all targets and perform a full verification on it as specified in <xref target="full_verification"/>.</t>

</section>
<section anchor="download_images_primary" title="Download and verify images">

<t>The Primary SHALL download and verify images for itself and for all of its associated Secondaries. Images SHALL be verified by checking that the hash of the image file matches the hash specified in the Director’s Targets metadata for that image.</t>

<t>There may be several different filenames that all refer to the same image binary, as described in <xref target="metadata_filename_rules"/>. If the Primary has received multiple hashes for a given image binary via the Targets role (see <xref target="targets_images_meta"/>) then it SHALL verify every hash for this image even though the image is identified by a single hash as part of its filename.</t>

</section>
<section anchor="send_time_primary" title="Send latest time to Secondaries">

<t>The Primary SHOULD send the time to each ECU.</t>

</section>
<section anchor="send_metadata_primary" title="Send metadata to Secondaries">

<t>The Primary SHALL send its latest downloaded metadata to all of its associated Secondaries. The metadata it sends to each Secondary SHALL include all of the metadata required for verification on that Secondary. For full verification Secondaries, this includes the metadata for all four roles from both repositories, plus any delegated Targets metadata files the Secondary will recurse through to find the proper delegation. For partial verification Secondaries, this MAY include fewer metadata files; at a minimum, it includes only the Targets metadata file from the Director repository.</t>

<t>The Primary SHOULD determine the minimal set of metadata files to send to each Secondary by performing delegation resolution as described in <xref target="full_verification"/>.</t>

<t>Each Secondary SHALL store the latest copy of all metadata required for its own verification.</t>

</section>
<section anchor="send_images_primary" title="Send images to Secondaries">

<t>The Primary SHALL send the latest image to each of its associated Secondaries that have sufficient storage to receive it.</t>

<t>For Secondaries without sufficient storage to store a copy of the image, the Primary SHOULD wait for a request from the Secondary to stream the new image file to it. The Secondary will send the request once it has verified the metadata sent in the previous step.</t>

</section>
</section>
<section anchor="installing-images-on-primary-or-secondary-ecus" title="Installing images on Primary or Secondary ECUs">

<t>An ECU SHALL perform the following steps when attempting to install a new image:</t>

<t><list style="numbers">
  <t>Verify latest attested time. This is optional if the ECU does not have the capacity to verify a time message (<xref target="verify_time"/>)</t>
  <t>Verify metadata (<xref target="verify_metadata"/>)</t>
  <t>Download latest image (<xref target="download_image"/>)</t>
  <t>Verify image (<xref target="verify_image"/>)</t>
  <t>Install image (<xref target="install_image"/>)</t>
  <t>Create and send version report (<xref target="create_version_report"/>)</t>
</list></t>

<section anchor="verify_time" title="Load and verify the latest attested time">

<t>IF the ECU has the capability to verify a time message, the ECU SHOULD load and verify the current time, or the most recent securely attested time.</t>

</section>
<section anchor="verify_metadata" title="Verify metadata">

<t>The ECU SHALL verify the latest downloaded metadata (<xref target="metadata_verification"/>) using either full or partial verification. If the metadata verification fails for any reason, the ECU SHALL jump to the final step (<xref target="create_version_report"/>).</t>

</section>
<section anchor="download_image" title="Download latest image">

<t>If the ECU has limited secondary storage, i.e., insufficient buffer storage to temporarily store the latest image before installing it, it SHALL download the latest image from the Primary. (If the ECU has sufficient secondary storage, it will already have the latest image in its secondary storage as specified in <xref target="send_images_primary"/>, and should skip to the next step.) The ECU MAY first create a backup of its previous working image and store it elsewhere (e.g., the Primary).</t>

<t>The filename used to identify the latest known image (i.e., the file to request from the Primary) SHALL be determined as follows:</t>

<t><list style="numbers">
  <t>Load the Targets metadata file from the Director repository.</t>
  <t>Find the Targets metadata associated with this ECU identifier.</t>
  <t>Construct the Image filename using the rule in <xref target="metadata_filename_rules"/>, or use the download URL specified in the Director metadata.</t>
  <t>If there is no Targets metadata about this image, abort the update cycle and report that there is no such image. Additionally, in the case of failure, the ECU SHALL retain its previous Targets metadata instead of using the new Targets metadata. Otherwise, download the image (up to the number of bytes specified in the Targets metadata) and verify it according to <xref target="verify_image"/>.</t>
</list></t>

<t>When the Primary responds to the download request, the ECU SHALL overwrite its current image with the downloaded image from the Primary.</t>

<t>If any part of this step fails, the ECU SHALL jump to the final step (<xref target="create_version_report"/>).</t>

</section>
<section anchor="verify_image" title="Verify image">

<t>The ECU SHALL verify that the latest image matches the latest metadata as follows:</t>

<t><list style="numbers">
  <t>Load the latest Targets metadata file from the Director.</t>
  <t>Find the Targets metadata associated with this ECU identifier.</t>
  <t>Check that the hardware identifier in the metadata matches the ECU’s hardware identifier.</t>
  <t>Check that the image filename is valid for this ECU. This MAY be a comparison against a wildcard path, which restricts the ECUs to which a delegation will apply.</t>
  <t>Check that the release counter of the image in the previous metadata, if it exists, is less than or equal to the release counter in the latest metadata.</t>
  <t>If the image is encrypted, decrypt the image with a decryption key to be chosen as follows:
  <list style="symbols">
      <t>If the ECU key is a symmetric key, the ECU SHALL use the ECU key for image decryption.</t>
      <t>If the ECU key is asymmetric, the ECU SHALL check the Targets metadata for an encrypted symmetric key. If such a key is found, the ECU SHALL decrypt the symmetric key using its ECU key, and use the decrypted symmetric key for image decryption.</t>
      <t>If the ECU key is asymmetric and there is no symmetric key in the Targets metadata, the ECU SHALL use its ECU key for image decryption.</t>
    </list></t>
  <t>Check that all hashes listed in the metadata match the corresponding hashes of the image.</t>
</list></t>

<t>If the ECU has enough secondary storage capacity to store the image, the checks SHOULD be performed on the image in secondary storage before it is installed.</t>

<t>When checking hashes, the ECU SHALL additionally check that the length of the image matches the length listed in the metadata.</t>

<t>NOTE: See <xref target="DEPLOY"/> for guidance on how to deal with Secondary ECU failures for ECUs that have limited secondary storage.</t>

<t>If any step fails, the ECU SHALL jump to the final step (<xref target="create_version_report"/>).</t>

</section>
<section anchor="install_image" title="Install image">

<t>The ECU SHALL attempt to install the update. This installation SHOULD occur at a time when all pre-conditions are met. These pre-conditions MAY include ensuring the vehicle is in a safe environment for install (e.g., the vehicle is parked when updating a specific ECU). Another pre-condition MAY include ensuring the ECU has a backup of its current image and metadata in case the current installation fails.</t>

</section>
<section anchor="create_version_report" title="Create and send version report">

<t>The ECU SHALL create a version report as described in <xref target="version_report"/>, and send it to the Primary (or simply save it to disk, if the ECU is a Primary). The Primary SHOULD write the version reports it receives to disk and associate them with the Secondaries that sent them.</t>

</section>
</section>
<section anchor="metadata_verification" title="Metadata verification procedures">

<t>A Primary ECU SHALL perform full verification of metadata. A Secondary ECU SHOULD perform full verification of metadata. If a Secondary cannot perform full verification, it SHALL, at the very least, perform partial verification.</t>

<t>If a step in the following workflows does not succeed (e.g., the update is aborted because a new metadata file was not signed), an ECU SHOULD still be able to update again in the future. Errors raised during the update process SHOULD NOT leave ECUs in an unrecoverable state.</t>

<section anchor="partial_verification" title="Partial verification">

<t>In order to perform partial verification, an ECU SHALL perform the following steps:</t>

<t><list style="numbers">
  <t>Load and verify the current time or the most recent securely attested time.</t>
  <t>Download and check the Targets metadata file from the Director repository, following the procedure in <xref target="check_targets"/>.</t>
</list></t>

<t>Note that this verification procedure is the smallest set of Uptane checks permissible for an Uptane Secondary ECU. An ECU MAY additionally implement more metadata checks.</t>

<t>For example, an ECU MAY also fetch and verify Root metadata from the Director (following the procedure in <xref target="check_root"/>) before checking Targets metadata. Performing this additional check would provide the ECU with a secure way to receive and validate a rotation of the Director’s Targets key.</t>

<t>See <xref target="DEPLOY"/> for more discussion on this topic.</t>

</section>
<section anchor="full_verification" title="Full verification">

<t>Full verification of metadata means that the ECU checks that the Targets metadata about images from the Director repository matches the Targets metadata about the same images from the Image repository. This provides resilience to a key compromise in the system.</t>

<t>Full verification SHALL be performed by Primary ECUs and SHOULD be performed by Secondary ECUs. In the following instructions, whenever an ECU is directed to download metadata, it applies only to Primary ECUs.</t>

<t>Before starting full verification, the repository mapping metadata SHALL be consulted to determine where to download metadata from. This procedure assumes the basic Uptane case: there are only two repositories (Director and Image), and all image paths are required to be signed by both repositories. If a more complex repository layout is being used, refer to <xref target="DEPLOY"/> for guidance on how to determine where metadata should be downloaded from.</t>

<t>In order to perform full verification, an ECU SHALL perform the following steps:</t>

<t><list style="numbers">
  <t>Load and verify the current time or the most recent securely attested time.</t>
  <t>Download and check the Root metadata file from the Director repository, following the procedure in <xref target="check_root"/>.</t>
  <t>Download and check the Timestamp metadata file from the Director repository, following the procedure in <xref target="check_timestamp"/>.</t>
  <t>Check the previously downloaded Snapshot metadata file from the Directory repository (if available). If the hashes and version number of that file match the hashes and version number listed in the new Timestamp metadata, there are no new updates and the verification process MAY be stopped and considered complete. Otherwise, download and check the Snapshot metadata file from the Director repository, following the procedure in <xref target="check_snapshot"/>.</t>
  <t>Download and check the Targets metadata file from the Director repository, following the procedure in <xref target="check_targets"/>.</t>
  <t>If the Targets metadata from the Directory repository indicates that there are no new targets that are not already currently installed, the verification process MAY be stopped and considered complete. Otherwise, download and check the Root metadata file from the Image repository, following the procedure in <xref target="check_root"/>.</t>
  <t>Download and check the Timestamp metadata file from the Image repository, following the procedure in <xref target="check_timestamp"/>.</t>
  <t>Check the previously downloaded Snapshot metadata file from the Image repository (if available). If the hashes and version number of that file match the hashes and version number listed in the new Timestamp metadata, the ECU MAY skip to the last step. Otherwise, download and check the Snapshot metadata file from the Image repository, following the procedure in <xref target="check_snapshot"/>.</t>
  <t>Download and check the top-level Targets metadata file from the Image repository, following the procedure in <xref target="check_targets"/>.</t>
  <t>Verify that Targets metadata from the Director and Image repositories match. A Primary ECU SHALL perform this check on metadata for all images listed in the Targets metadata file from the Director repository downloaded in step 6. A Secondary ECU MAY elect to perform this check only on the metadata for the image it will install. (That is, the image metadata from the Director that contains the ECU identifier of the current ECU.) To check that the metadata for an image matches, complete the following procedure:
  <list style="numbers">
      <t>Locate and download a Targets metadata file from the Image repository that contains an image with exactly the same filename listed in the Director metadata, following the procedure in <xref target="resolve_delegations"/>.</t>
      <t>Check that the Targets metadata from the Image repository matches the Targets metadata from the Director repository:
      <list style="numbers">
          <t>Check that the non-custom metadata (i.e., length and hashes) of the unencrypted or encrypted image are the same in both sets of metadata. Note: the Primary is responsible for validating encrypted images and associated metadata. The target ECU (Primary or Secondary) is responsible for validating the unencrypted image and associated metadata.</t>
          <t>Check that all SHALL match custom metadata (e.g., hardware identifier and release counter) are the same in both sets of metadata.</t>
          <t>Check that the release counter, if one is used, in the previous Targets metadata file is less than or equal to the release counter in this Targets metadata file.</t>
        </list></t>
    </list></t>
</list></t>

<t>If any step fails, the ECU SHALL return an error code indicating the failure. If a check for a specific type of security attack fails (i.e., rollback, freeze, arbitrary software, etc.), the ECU SHOULD return an error code that indicates the type of attack.</t>

</section>
<section anchor="check_root" title="How to check Root metadata">

<t>To properly check Root metadata, an ECU SHOULD:</t>

<t><list style="numbers">
  <t>Load the previous Root metadata file.</t>
  <t>Update to the latest Root metadata file.
  <list style="numbers">
      <t>Let N denote the version number of the latest Root metadata file (which at first could be the same as the previous Root metadata file).</t>
      <t>Try downloading a new version N+1 of the Root metadata file, up to some X number of bytes. The value for X is set by the implementer. For example, X may be tens of kilobytes. The filename used to download the Root metadata file is of the fixed form VERSION_NUMBER.FILENAME.EXT (e.g., 42.root.json). If this file is not available, the current Root metadata file is the latest; continue with step 3.</t>
      <t>Version N+1 of the Root metadata file SHALL have been signed by the following: (1) a threshold of unique keys specified in the latest Root metadata file (version N), and (2) a threshold of unique keys specified in the new Root metadata file being validated (version N+1). If version N+1 is not signed as required, discard it, abort the update cycle, and report the signature failure. On the next update cycle, begin at version N of the Root metadata file. (Checks for an arbitrary software attack.)</t>
      <t>The version number of the latest Root metadata file (version N) must be less than or equal to the version number of the new Root metadata file (version N+1). Effectively, this means checking that the version number signed in the new Root metadata file is indeed N+1. If the version of the new Root metadata file is less than the latest metadata file, discard it, abort the update cycle, and report the rollback attack. On the next update cycle, begin at step 1 and version N of the Root metadata file. (Checks for a rollback attack.)</t>
      <t>Set the latest Root metadata file to the new Root metadata file.</t>
      <t>Repeat steps 2.1 to 2.6.</t>
    </list></t>
  <t>Check that the current (or latest securely attested) time is lower than the expiration timestamp in the latest Root metadata file. (Checks for a freeze attack.)</t>
  <t>If the Timestamp and/or Snapshot keys have been rotated, delete the previous Timestamp and Snapshot metadata files. (Checks for recovery from fast-forward attacks <xref target="MERCURY"/>.)</t>
</list></t>

</section>
<section anchor="check_timestamp" title="How to check Timestamp metadata">

<t>To properly check Timestamp metadata, an ECU SHOULD:</t>

<t><list style="numbers">
  <t>Download up to Y number of bytes. The value for Y is set by the implementer. For example, Y may be tens of kilobytes. The filename used to download the Timestamp metadata file is of the fixed form FILENAME.EXT (e.g., timestamp.json).</t>
  <t>Check that it has been signed by the threshold of unique keys specified in the latest Root metadata file. If the new Timestamp metadata file is not properly signed, discard it, abort the update cycle, and report the signature failure. (Checks for an arbitrary software attack.)</t>
  <t>Check that the version number of the previous Timestamp metadata file, if any, is less than or equal to the version number of this Timestamp metadata file. If the new Timestamp metadata file is older than the trusted Timestamp metadata file, discard it, abort the update cycle, and report the potential rollback attack. (Checks for a rollback attack.)</t>
  <t>Check that the current (or latest securely attested) time is lower than the expiration timestamp in this Timestamp metadata file. If the new Timestamp metadata file has expired, discard it, abort the update cycle, and report the potential freeze attack. (Checks for a freeze attack.)</t>
</list></t>

</section>
<section anchor="check_snapshot" title="How to check Snapshot metadata">

<t>To properly check Snapshot metadata, an ECU SHOULD:</t>

<t><list style="numbers">
  <t>Download up to the number of bytes specified in the Timestamp metadata file, constructing the metadata filename as defined in <xref target="metadata_filename_rules"/>.</t>
  <t>The hashes and version number of the new Snapshot metadata file SHALL match the hashes and version number listed in the Timestamp metadata. If the hashes and version number do not match, discard the new Snapshot metadata, abort the update cycle, and report the failure. (Checks for a mix-and-match attack.)</t>
  <t>Check that it has been signed by the threshold of unique keys specified in the latest Root metadata file. If the new Snapshot metadata file is not signed as required, discard it, abort the update cycle, and report the signature failure. (Checks for an arbitrary software attack.)</t>
  <t>Check that the version number of the previous Snapshot metadata file, if any, is less than or equal to the version number of this Snapshot metadata file. If this Snapshot metadata file is older than the previous Snapshot metadata file, discard it, abort the update cycle, and report the potential rollback attack. (Checks for a rollback attack.)</t>
  <t>Check that the version number listed by the previous Snapshot metadata file for each Targets metadata file is less than or equal to its version number in this Snapshot metadata file. If this condition is not met, discard the new Snapshot metadata file, abort the update cycle, and report the failure. (Checks for a rollback attack.)</t>
  <t>Check that each Targets metadata filename listed in the previous Snapshot metadata file is also listed in this Snapshot metadata file. If this condition is not met, discard the new Snapshot metadata file, abort the update cycle, and report the failure. (Checks for a rollback attack.)</t>
  <t>Check that the current (or latest securely attested) time is lower than the expiration timestamp in this Snapshot metadata file. If the new Snapshot metadata file is expired, discard it, abort the update cycle, and report the potential freeze attack. (Checks for a freeze attack.)</t>
</list></t>

</section>
<section anchor="check_targets" title="How to check Targets metadata">

<t>To properly check Targets metadata, an ECU SHOULD:</t>

<t><list style="numbers">
  <t>Download up to Z number of bytes, constructing the metadata filename as defined in <xref target="metadata_filename_rules"/>. The value for Z is set by the implementer. For example, Z may be tens of kilobytes.</t>
  <t>The version number of the new Targets metadata file SHALL match the version number listed in the latest Snapshot metadata. If the version number does not match, discard it, abort the update cycle, and report the failure. (Checks for a mix-and-match attack.) This step MAY be skipped when checking Targets metadata on a partial verification ECU, as these ECUs might not have Snapshot metadata.</t>
  <t>Check that the Targets metadata has been signed by the threshold of unique keys specified in the relevant metadata file. (Checks for an arbitrary software attack.):
  <list style="numbers">
      <t>If checking top-level Targets metadata, the threshold of keys is specified in the Root metadata.</t>
      <t>If checking delegated Targets metadata, the threshold of keys is specified in the Targets metadata file that delegated authority to this role.</t>
    </list></t>
  <t>Check that the version number of the previous Targets metadata file, if any, is less than or equal to the version number of this Targets metadata file. (Checks for a rollback attack.)</t>
  <t>Check that the current (or latest securely attested) time is lower than the expiration timestamp in this Targets metadata file. (Checks for a freeze attack.)</t>
  <t>If checking Targets metadata from the Director repository, verify that there are no delegations.</t>
  <t>If checking Targets metadata from the Director repository, check that no ECU identifier is represented more than once.</t>
  <t>If checking Targets metadata from the Director repository, and the ECU performing the verification is the Primary ECU, check that all listed ECU identifiers correspond to ECUs that are actually present in the vehicle.</t>
</list></t>

</section>
<section anchor="resolve_delegations" title="How to resolve delegations">

<t>To properly check Targets metadata for an image, an ECU SHALL locate the metadata file(s) for the role (or roles) that have the authority to sign the image. This metadata might be located in the top-level Targets metadata, but it may also be delegated to another role or to multiple roles. Therefore, all delegations SHALL be resolved using the following recursive procedure, beginning with the top-level Targets metadata file.</t>

<t><list style="numbers">
  <t>Download and check the current metadata file, following the procedure in <xref target="check_targets"/>. If the file cannot be loaded, or if any verification step fails, abort the delegation resolution, and indicate that image metadata cannot be found because of a missing or invalid role.</t>
  <t>If the current metadata file contains signed metadata about the image, end the delegation resolution and return the metadata to be checked.</t>
  <t>If the current metadata file was reached via a terminating delegation and does not contain signed metadata about the image, abort the delegation resolution for this image and return an error indicating that image metadata could not be found.</t>
  <t>Search the list of delegations, in listed order. For each delegation:
  <list style="numbers">
      <t>Check if the delegation applies to the image being processed. For the delegation to apply, it SHALL include the hardware identifier of the target, and the target name SHALL match one of the delegation’s image paths. If either of these tests fail, move on to the next delegation in the list.</t>
      <t>If the delegation is a multi-role delegation, follow the procedure described in <xref target="multirole_delegations"/>. If the multi-role delegation is terminating and no valid image metadata is found, abort the delegation resolution and return an error indicating that image metadata could not be found.</t>
      <t>If the delegation is a normal delegation, perform delegation resolution, starting at step 1. Note that this may recurse an arbitrary number of levels deep. If a delegation that applies to the image is found but no image metadata is found in the delegated roles or any of its sub-delegations, simply continue on with the next delegation in the list. The search is only completed or aborted if image metadata or a terminating delegation that applies to the image is found.</t>
    </list></t>
  <t>If the end of the list of delegations in the top-level metadata is reached without finding valid image metadata, return an error indicating that image metadata could not be found.</t>
</list></t>

</section>
<section anchor="multirole_delegations" title="Multi-role delegations">

<t>It is possible to delegate signing authority to multiple delegated roles as described in <xref target="TAP-3"/>. Each multi-role delegation effectively contains a list of ordinary delegations, plus a threshold of those roles that must be in agreement about the non-custom metadata for the image. All multi-role delegations SHALL be resolved using the following procedure. Note that there may be sub-delegations inside multi-role delegations.</t>

<t><list style="numbers">
  <t>For each of the roles in the delegation, find and load the image metadata following the procedure in <xref target="resolve_delegations"/>.</t>
  <t>Inspect the non-custom part of the metadata loaded in step 1:
  <list style="numbers">
      <t>Locate all sets of roles that have agreeing (i.e., identical) non-custom metadata and “SHALL match” custom metadata. Discard any set of roles with a size smaller than the threshold of roles that must be in agreement for this delegation.</t>
      <t>Check for a conflict. A conflict exists if there is more than one agreeing set of roles, yet each set has different metadata. If a conflict is found, choose and return the metadata from the set of roles that include the earliest role in the multi-delegation list.</t>
      <t>If there is no conflict, check if there is any single set of roles with matching non-custom metadata. If there is, choose and return the metadata from this set.</t>
      <t>If no agreeing set can be found that meets the agreement threshold, return an error indicating that image metadata could not be found.</t>
    </list></t>
</list></t>

</section>
</section>
</section>
</section>


  </middle>

  <back>

    <references title='Normative References'>





<reference  anchor="RFC2119" target='https://www.rfc-editor.org/info/rfc2119'>
<front>
<title>Key words for use in RFCs to Indicate Requirement Levels</title>
<author initials='S.' surname='Bradner' fullname='S. Bradner'><organization /></author>
<date year='1997' month='March' />
<abstract><t>In many standards track documents several words are used to signify the requirements in the specification.  These words are often capitalized. This document defines these words as they should be interpreted in IETF documents.  This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t></abstract>
</front>
<seriesInfo name='BCP' value='14'/>
<seriesInfo name='RFC' value='2119'/>
<seriesInfo name='DOI' value='10.17487/RFC2119'/>
</reference>



<reference  anchor="RFC3647" target='https://www.rfc-editor.org/info/rfc3647'>
<front>
<title>Internet X.509 Public Key Infrastructure Certificate Policy and Certification Practices Framework</title>
<author initials='S.' surname='Chokhani' fullname='S. Chokhani'><organization /></author>
<author initials='W.' surname='Ford' fullname='W. Ford'><organization /></author>
<author initials='R.' surname='Sabett' fullname='R. Sabett'><organization /></author>
<author initials='C.' surname='Merrill' fullname='C. Merrill'><organization /></author>
<author initials='S.' surname='Wu' fullname='S. Wu'><organization /></author>
<date year='2003' month='November' />
<abstract><t>This document presents a framework to assist the writers of certificate policies or certification practice statements for participants within public key infrastructures, such as certification authorities, policy authorities, and communities of interest that wish to rely on certificates.  In particular, the framework provides a comprehensive list of topics that potentially (at the writer's discretion) need to be covered in a certificate policy or a certification practice statement.  This document supersedes RFC 2527.</t></abstract>
</front>
<seriesInfo name='RFC' value='3647'/>
<seriesInfo name='DOI' value='10.17487/RFC3647'/>
</reference>



<reference  anchor="RFC5198" target='https://www.rfc-editor.org/info/rfc5198'>
<front>
<title>Unicode Format for Network Interchange</title>
<author initials='J.' surname='Klensin' fullname='J. Klensin'><organization /></author>
<author initials='M.' surname='Padlipsky' fullname='M. Padlipsky'><organization /></author>
<date year='2008' month='March' />
<abstract><t>The Internet today is in need of a standardized form for the transmission of internationalized &quot;text&quot; information, paralleling the specifications for the use of ASCII that date from the early days of the ARPANET.  This document specifies that format, using UTF-8 with normalization and specific line-ending sequences.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='5198'/>
<seriesInfo name='DOI' value='10.17487/RFC5198'/>
</reference>


<reference anchor="NFC" target="https://www.unicode.org/reports/tr15/">
  <front>
    <title>Unicode Standard Annex #15: Unicode Normalization Forms</title>
    <author initials="M." surname="Davis">
      <organization></organization>
    </author>
    <author initials="M." surname="Duerst">
      <organization></organization>
    </author>
    <date year="2018" month="October"/>
  </front>
</reference>
<reference anchor="TAP-3" target="https://github.com/theupdateframework/taps/blob/d0818e580c322815a473520f2e8cc5f5eb8df499/tap3.md">
  <front>
    <title>The Update Framework TAP 3 - Multi-role delegations</title>
    <author initials="T.K." surname="Kuppusamy">
      <organization></organization>
    </author>
    <author initials="S." surname="Awwad">
      <organization></organization>
    </author>
    <author initials="E." surname="Cordell">
      <organization></organization>
    </author>
    <author initials="V." surname="Diaz">
      <organization></organization>
    </author>
    <author initials="J." surname="Moshenko">
      <organization></organization>
    </author>
    <author initials="J." surname="Cappos">
      <organization></organization>
    </author>
    <date year="2018" month="January" day="18"/>
  </front>
</reference>
<reference anchor="TAP-4" target="https://github.com/theupdateframework/taps/blob/2cb67d913ec19424d1e354b38f862886fbfd4105/tap4.md">
  <front>
    <title>The Update Framework TAP 4 - Multiple repository consensus on entrusted targets</title>
    <author initials="T.K." surname="Kuppusamy">
      <organization></organization>
    </author>
    <author initials="S." surname="Awwad">
      <organization></organization>
    </author>
    <author initials="E." surname="Cordell">
      <organization></organization>
    </author>
    <author initials="V." surname="Diaz">
      <organization></organization>
    </author>
    <author initials="J." surname="Moshenko">
      <organization></organization>
    </author>
    <author initials="J." surname="Cappos">
      <organization></organization>
    </author>
    <date year="2017" month="December" day="15"/>
  </front>
</reference>
<reference anchor="TUF-spec" target="https://github.com/theupdateframework/specification/blob/2b4e18472fe25d5b57f36f6fa50104967c8faeaa/tuf-spec.md">
  <front>
    <title>The Update Framework Specification</title>
    <author initials="J." surname="Samuel">
      <organization></organization>
    </author>
    <author initials="N." surname="Mathewson">
      <organization></organization>
    </author>
    <author initials="G." surname="Condra">
      <organization></organization>
    </author>
    <author initials="V." surname="Diaz">
      <organization></organization>
    </author>
    <author initials="T.K." surname="Kuppusamy">
      <organization></organization>
    </author>
    <author initials="S." surname="Awwad">
      <organization></organization>
    </author>
    <author initials="S." surname="Tobias">
      <organization></organization>
    </author>
    <author initials="J." surname="Wright">
      <organization></organization>
    </author>
    <author initials="H." surname="Mehnert">
      <organization></organization>
    </author>
    <author initials="E." surname="Tryzelaar">
      <organization></organization>
    </author>
    <author initials="J." surname="Cappos">
      <organization></organization>
    </author>
    <author initials="R." surname="Dingledine">
      <organization></organization>
    </author>
    <date year="2018" month="September" day="19"/>
  </front>
</reference>


    </references>

    <references title='Informative References'>

<reference anchor="MERCURY" target="https://www.usenix.org/system/files/conference/atc17/atc17-kuppusamy.pdf">
  <front>
    <title>Mercury: Bandwidth-Effective Prevention of Rollback Attacks Against Community Repositories</title>
    <author initials="T.K." surname="Kuppusamy">
      <organization></organization>
    </author>
    <author initials="V." surname="Diaz">
      <organization></organization>
    </author>
    <author initials="J." surname="Cappos">
      <organization></organization>
    </author>
    <date year="2017" month="July" day="12"/>
  </front>
  <seriesInfo name="ISBN" value="978-1-931971-38-6"/>
</reference>
<reference anchor="UPTANEESCAR" target="https://ssl.engineering.nyu.edu/papers/kuppusamy_escar_16.pdf">
  <front>
    <title>Securing Software Updates for Automobiles</title>
    <author initials="T.K." surname="Kuppusamy">
      <organization></organization>
    </author>
    <author initials="A." surname="Brown">
      <organization></organization>
    </author>
    <author initials="S." surname="Awwad">
      <organization></organization>
    </author>
    <author initials="D." surname="McCoy">
      <organization></organization>
    </author>
    <author initials="R." surname="Bielawski">
      <organization></organization>
    </author>
    <author initials="C." surname="Mott">
      <organization></organization>
    </author>
    <author initials="S." surname="Lauzon">
      <organization></organization>
    </author>
    <author initials="A." surname="Weimerskirch">
      <organization></organization>
    </author>
    <author initials="J." surname="Cappos">
      <organization></organization>
    </author>
    <date year="2016" month="October" day="16"/>
  </front>
</reference>
<reference anchor="PEP-458" target="https://www.python.org/dev/peps/pep-0458/">
  <front>
    <title>Secure PyPI downloads with signed repository metadata</title>
    <author initials="T.K." surname="Kuppusamy">
      <organization></organization>
    </author>
    <author initials="V." surname="Diaz">
      <organization></organization>
    </author>
    <author initials="M." surname="Moore">
      <organization></organization>
    </author>
    <author initials="L." surname="Pühringer">
      <organization></organization>
    </author>
    <author initials="J." surname="Locke">
      <organization></organization>
    </author>
    <author initials="L.A." surname="DeLong">
      <organization></organization>
    </author>
    <author initials="J." surname="Cappos">
      <organization></organization>
    </author>
    <date year="2019" month="November" day="13"/>
  </front>
</reference>
<reference anchor="DEPLOY" target="https://uptane.github.io/deployment-considerations/index.html">
  <front>
    <title>Uptane Deployment Best Practices</title>
    <author initials="." surname="Members of the Uptane Community">
      <organization></organization>
    </author>
    <date year="n.d."/>
  </front>
</reference>
<reference anchor="USATODAY" target="https://www.usatoday.com/story/tech/columnist/2016/06/28/your-average-car-lot-more-code-driven-than-you-think/86437052/">
  <front>
    <title>Your average car is a lot more code-driven than you think</title>
    <author initials="B." surname="O'Donnell">
      <organization></organization>
    </author>
    <date year="2016" month="June" day="28"/>
  </front>
</reference>
<reference anchor="CR-OTA" target="https://www.consumerreports.org/automotive-technology/automakers-embrace-over-the-air-updates-can-we-trust-digital-car-repair/">
  <front>
    <title>Automakers Embrace Over-the-Air Updates, but Can We Trust Digital Car Repair?</title>
    <author initials="K." surname="Barry">
      <organization></organization>
    </author>
    <date year="2018" month="April" day="20"/>
  </front>
</reference>
<reference anchor="IN-TOTO" target="https://in-toto.io/">
  <front>
    <title>in-toto: A framework to secure the integrity of software supply chains</title>
    <author >
      <organization></organization>
    </author>
    <date year="2018" month="October" day="29"/>
  </front>
</reference>


    </references>



  </back>

<!-- ##markdown-source:
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
1NyAChbD3QckJi+gTb3N1pmssgYecISfHU8e9YUjKkHDqACZtmOLPZBykXAE
oZIxfpx9WufSktpsFzfSmDY0WKwIsHgQjFc2pjTyM5WfaE8gjOTo4pA9U6WC
wOZHGbAa1PGixJm8ZSVikdbNGB5fI2JJITXQal6evn36/u1voMkc9AksPSYi
n1POdp4+0aXPYNIjv5hpgnn0bzex599uzZ5/+0PseUer3S6P7mPKBh1hy3ux
jigpZj0M8U/gf6FtSa/lKpIM7Nh4FX8Wa/oKltK9zf20v+cqtMhmThrHDVG1
fYPng4PeFpRwXp6kNNWGTA2DS/0GKK9BEi8ohKND628izN0Q678TwfyDgKTg
UBz8GxExgCgmxzfQ6j7C16WwSvfMuNpH9jqf3YbqEVhuzNIYQiWrG6c6c/R7
IZpW1JZiMBXHirjeYEznYxywXXvLyNfY2bs7vIVtXyol0mwBZwZXeGtU6qdk
ySr/NIY3x7y7ARr2jyPuw02w/76ax1eQ9y7tuYG89+/pj1H3/jGDrjwMxxZh
v3GV/1jC3k1L6b9hgn43rD40fflK8yDGHbcmVnZwE+RDpLMgLbx3i3ss0P5j
l7kLz0cRPIdB0eNOuAm22snPf/VfDj4//AMFiZ2QuYn8/WdIET3aUxt3THcS
52iv5tRJ6LlZgvjXtvzwJ4sFLS3sX2+thf3rsBam3e2G5Yt+KtQWL3bKFIKS
HUTp2G1MnJDg8pZA8RXo81WSA4f9kSFGQ0k+5hRKch0lJXVAQd16e+v5UOl7
tq1rP4RVfnHZhLIeXWjsdV1KnRn/sEhjHWW/2fxoXmQ4vGDMGwxjGHUXSCvL
exYXCVqTvnmGazR9zTz9OM01u20CaWTPiXDcVbqU/rpfqSr3zfYHFeVed9+N
nKO79L+jCnqbJbbJd+u0v8oTP2pneYd4MxctMPmDc7iIDBi4FcZBXu/QI3jF
yZN4rMUs+6Mza0Ajzrn2Ef+tqDhxHrnonGjV6DYX8hyvvnZZpIh+IX+Rbr/2
npDttfucxZxXwjQ84IHt9gVv3Ib5RuEurRDiZSn9e1q8FWvTahAPVxkspRCc
tHqzUinRPbeis1Jk4jzqbsokHF0mNKvRk13Ub0qtzYgDk+g5zRyNwVD/IjTD
oXDmMpRTpPUSg64oOH5Ep+eBahHvAtu5K1kRAmm4Sh2mdVg4jXggqJCuJc/d
EIw22dsRyKaUpEXlvipITeUBIseS5UbQxhgvqlDCRDNGeB/cEMSD3vJy0hNE
IgaSUF/TZfzYtJSYbrlr1CuHkoywtyHqVlwPgZnCsa29Fw4hTEr4dk/aiGC3
FkMbKI9HYg6FQkQor4UDAJ6YTX3/huVckzkCNCss7p2n6JbVHtBxZT4OEbM2
Flw6+sY93HAK7ZqdblMW3xGFoPScEgUy+IOiGhbvsrQSiVRrfbvbQhE4Qvso
V0HkZNQww2sm3zCrlDxWDxPJYxEWrSWgLNSurrHttjYMch/ibcdKFq40lGYV
s32tG6mkLUnpigQeIAFYpEB4UdyVJQ/zfl/7XBPCDKn1xa9iMjJ1yMQ7NAKu
dcUV3V2NJ7cJlelzbXofUN+/RYXIkY6NibCFn5QktOhBuxAtfopftiL9rABZ
39DE+hweI7SASfM9bSFQKDxxE7L+Sdgp4RoDoCqw+voyApOGqg4QMsuTMh+y
b/bEDvd0awVKI5k+SJNE7VEDxUBpCu/y+ErMvw/bFXrE3QDEA8BVZAkMz1q+
IRWXZPl6Mx1Ht1RSyi3shcrACIvahY5ce51JQC55ZhoTS8GUmo+cdxr2kjQ6
QANvBgOVppGTpYYmiyES1JUYPNCUJGvpTiwla8EurSWP/gykZKHtZd9lokT4
3lu4t3dG2WXadJRTxviErTh/JFWZQNNGhG79gfOTN+P7eNGpwGv/Nc9CaImL
PzZwU50sauDkkYrL/MYKYoOFdmQpBDINicHQjAvQTSgjOLC3voDeKFIcu7Ys
+1d9W1nNSGJ8nX3t7/i+YFQ6pvX2z8oym7E5wUzecnw7mTZjjSqkeK1SZm67
Xx+dfUz1QNfZrANF32LapmiF9B91wtapZizH5bqz4/Y+eGq4Ogk5ZVY6S5cH
vYeHO/3OMdDv2lHEIO6K8YnCaDn3nCfV9On8d81O975nj2Y3IZiJQ65UdBzS
ztoy4Ppimc8azHHQv0sVKxFTOF/e650OJH71o2SbiW0dH6NZKZSSj+xzYVrH
M6Wb7pA0aopsBDCJ1g0CD1BqpKkN6z5akofQ2N32IGkY+7RiTLo01XA9FOjA
uMh799zotBEoPVgRzXLbvbItdqKxeTACLC8CPfa1MK2CkSHLpABawAXXx/1P
oO//F2fP5SjpLgEA

-->

</rfc>


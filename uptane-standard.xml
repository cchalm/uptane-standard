<?xml version="1.0" encoding="UTF-8"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc2629 version 1.2.9 -->

<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
]>

<?rfc toc="yes"?>
<?rfc sortrefs="yes"?>
<?rfc symrefs="yes"?>

<rfc ipr="noDerivativesTrust200902" docName="uptane-standard-design" category="info">

  <front>
    <title abbrev="UPTANE">Uptane Standard for Design and Implementation</title>

    <author initials="." surname="Members of the Uptane Community" fullname="Uptane Community">
      <organization>Joint Development Foundation Projects, LLC, Uptane Series (c/o Prof. Justin Cappos)</organization>
      <address>
        <postal>
          <street>6 MetroTech</street>
          <city>Brooklyn</city>
          <region>NY</region>
          <code>11201</code>
          <country>USA</country>
        </postal>
        <email>uptane-standards@googlegroups.com</email>
      </address>
    </author>

    <date year="2021" month="September" day="13"/>

    <area>TODO</area>
    <workgroup>TODO</workgroup>
    <keyword>Internet-Draft</keyword>

    <abstract>


<t>This document describes a framework for securing ground vehicle software update systems.</t>



    </abstract>


  </front>

  <middle>


<section anchor="introduction" title="Introduction">

<t>Uptane is a secure software update framework for ground vehicles. This document describes procedures to enable programmers for OEMs and suppliers to securely design and implement this framework in a manner that better protects connected units on ground vehicles. Integrating Uptane as outlined in the sections that follow can reduce the ability of attackers to compromise critical systems. It also assures a faster and easier recovery process should a compromise occur.</t>

<t>These instructions specify the components necessary for a compliant implementation. Individual implementers can make their own technological choices within those requirements. This flexibility makes Uptane adaptable to the many customized update solutions used by manufacturers. If implementers wish to have compatible formats, they may use POUFs. POUFs contain a description of implementation choices as well as data binding formats. An implementer who adopts a POUF, as well as the Uptane Standard, will be able to interoperate with other implementations using that POUF.</t>

</section>
<section anchor="terminology" title="Terminology">

<t>With the exception of the Conformance terminology and Uptane role terminology presented on this page, please refer to the <eref target="https://uptane.github.io/deployment-considerations/glossary.html">glossary</eref> in the Deployment Best Practices volume for definitions of all terms used in this Standard.</t>

<section anchor="conformance-terminology" title="Conformance terminology">

<t>The keywords MUST, MUST NOT, REQUIRED, SHALL, SHALL NOT, SHOULD, SHOULD NOT, RECOMMENDED, MAY, and OPTIONAL in this document are to be interpreted as described in <xref target="RFC2119"/>. Given the importance of interpreting these terms correctly, we present these definitions here. Note that when referring to actions in the Standard that mandate compliance, the word SHALL will be used, rather than the word MUST. Hence, MUST and MUST NOT are not included in these definitions.</t>

<t><spanx style="emph">SHALL</spanx> This word or the term “REQUIRED” mean that the definition is an absolute requirement of the specification.
<spanx style="emph">SHALL NOT</spanx> This phrase means that the definition is an absolute prohibition of the specification.
<spanx style="emph">SHOULD</spanx> This word or the adjective “RECOMMENDED” mean that, in particular circumstances, there may exist valid reasons to ignore a particular item, but the full implications must be understood and carefully weighed before choosing a different course.
<spanx style="emph">SHOULD NOT</spanx> This phrase or the phrase “NOT RECOMMENDED” mean that there may exist valid reasons in particular circumstances when the particular behavior is acceptable or even useful, but the full implications should be understood and the case carefully weighed before implementing any behavior described with this label.
<spanx style="emph">MAY</spanx> This word or the adjective “OPTIONAL,” mean that an item is truly optional.</t>

<t>In order to be considered Uptane-compliant, an implementation SHALL follow all of these rules as specified in the document.</t>

<t>Note that, following the recommendations of <xref target="RFC2119"/> imperatives of the type defined here “must be used with care and sparingly.  In particular, they MUST only be used where it is actually required for interoperation or to limit behavior which has potential for causing harm (e.g., limiting retransmisssions)</t>

</section>
<section anchor="uptane-role-terminology" title="Uptane role terminology">

<t>These terms are defined in greater detail in <xref target="roles"/>.</t>

<t><spanx style="emph">Delegation</spanx>: A process by which the responsibility of signing metadata about images is assigned to another party.
<spanx style="emph">Role</spanx>: A party (human or machine) responsible for signing a certain type of metadata. The role controls keys and is responsible for signing metadata entrusted to it with these keys. The roles mechanism of Uptane allows the system to distribute signing responsibilities so that the compromise of one key does not necessarily impact the security of the entire system.</t>

<t><list style="symbols">
  <t><spanx style="emph">Root role</spanx>: Signs metadata that distributes and revokes public keys used to verify the Root, Timestamp, Snapshot, and Targets role metadata.</t>
  <t><spanx style="emph">Snapshot role</spanx>: Signs metadata that indicates which images the repository has released at the same time.</t>
  <t><spanx style="emph">Targets role</spanx>: Signs metadata used to verify the image, such as cryptographic hashes and file size.</t>
  <t><spanx style="emph">Timestamp role</spanx>: Signs metadata that indicates if there are any new metadata or images on the repository.</t>
</list></t>

</section>
<section anchor="acronyms-and-abbreviations" title="Acronyms and abbreviations">

<t><spanx style="emph">CDN</spanx>: Content Delivery Network</t>

<t><spanx style="emph">ECUs</spanx>: Electronic Control Units, the computing units on a vehicle</t>

<t><spanx style="emph">LIN Bus</spanx>: Local Interconnect Bus</t>

<t><spanx style="emph">OBD</spanx>: On-board diagnostics</t>

<t><spanx style="emph">SOTA</spanx>: Software Updates Over-the-Air</t>

<t><spanx style="emph">UDS</spanx>: Unified Diagnostic Services</t>

<t><spanx style="emph">VIN</spanx>: Vehicle Identification Number</t>

</section>
</section>
<section anchor="rationale-for-and-scope-of-the-uptane-standard" title="Rationale for and scope of the Uptane Standard">

<t>This Standard document provides the essential components for the secure design, implementation, and deployment of Uptane by OEMs and suppliers. These guidelines contribute to compromise resilience, or the ability to minimize the extent of the threat posed by any given attack.</t>

<t>However, this specification is intended as an implementation guide, and not as a detailed technical argument about the security properties that Uptane provides.  Readers interested in such documentation should refer to published papers that cover this topic.  <xref target="UPTANEESCAR"/></t>

<section anchor="why-uptane-requires-a-standards-document" title="Why Uptane requires a standards document">

<t>A standards document that can guide the safe design, integration, and deployment of Uptane in vehicles is needed at this time because:</t>

<t><list style="symbols">
  <t>The number of connected units on the average vehicle continues to grow, with mainstream cars now containing up to 100 million lines of code. <xref target="USATODAY"/></t>
  <t>The expanded use of software over-the-air strategies creates new attack surfaces for malicious parties. <xref target="CR-OTA"/></t>
  <t>Legacy update strategies, such as SSL/TLS or GPG/RSA, are not feasible for use on vehicle ECUs because they force manufacturers to chose between enhanced security and customizability.</t>
  <t>Conventional strategies are also complicated by the differing resources of the ECUs, which can vary greatly in memory, storage space, and Internet connectivity.</t>
  <t>The design of Uptane makes it possible to offer improved design flexibility without sacrificing security.</t>
  <t>This added design flexibility, however, could be a liability if the framework is implemented incorrectly.</t>
  <t>Standardization of crucial steps in the design, implementation, and use of Uptane can assure that customizability does not impact security or functionality.</t>
</list></t>

</section>
<section anchor="scope-of-standard-coverage" title="Scope of Standard coverage">

<t>This document sets guidelines for implementing Uptane in most systems capable of updating software on connected units in ground vehicles, including passenger vehicles, light-duty trucks, heavy-duty trucks, and motorcycles. Uptane could potentially also be applied to other ground vehicles, such as automated shuttles, recreational vehicles, and military ground vehicles. Uptane could even be applied to domains such as IoT devices, medical devices, and autonomous aerial vehicles. In this section, we define the scope of that applicability by providing sample use cases and possible exceptions, aspects of software update security that are not applicable to Uptane, and the design requirements governing the preparation of these standards.</t>

<section anchor="assumptions" title="Assumptions">

<t>We assume the following system preconditions for Uptane:</t>

<t><list style="symbols">
  <t>Vehicles have the ability to establish connectivity to required backend services. For example, this could be done through cellular, Wi-Fi, or hard-wired mechanisms.</t>
  <t>ECUs are either directly connected to the communication channel, or are indirectly connected via some sort of network gateway.</t>
  <t>ECUs are programmable and provide sufficient performance to be updated.</t>
  <t>ECUs must be able to perform public key cryptography operations and calculate hashes of images and metadata files.</t>
  <t>There are state-of-the-art secure servers in place, such as the Director and Image repository servers.</t>
</list></t>

<t>It is important that any bugs detected in Uptane implementations be patched promptly. Failure to do so could interfere with the effectiveness of Uptane’s operations.</t>

</section>
<section anchor="use-cases" title="Use cases">

<t>The following use cases provide a number of scenarios illustrating the manner in which software updates could be accomplished using Uptane.</t>

<section anchor="oems-initializing-uptane-at-the-factory-using-sota" title="OEMs initializing Uptane at the factory using SOTA">

<t>An OEM plans to install Uptane on new vehicles. This entails the following components: code to perform full and partial verification, the latest copy of the relevant metadata, the public keys, and an accurate attestation of the latest time. The OEM then either requires its tier-1 suppliers to provide these materials to the suppliers’ assembly lines or can choose to add the materials later at the OEM’s assembly lines. The OEM’s in-vehicle implementation is Uptane-compliant if:</t>

<t><list style="numbers">
  <t>all Primaries perform full verification;</t>
  <t>all Secondaries that are updated via OTA at least perform partial verification; and</t>
  <t>all other ECUs that do not perform any type of verification cannot be updated via OTA.</t>
</list></t>

</section>
<section anchor="updating-one-ecu-with-a-complete-image" title="Updating one ECU with a complete image">

<t>A tier-1 supplier completes work on a revised image for an electronic brake control module. This module will control the brakes on all models of an SUV produced by the OEM mentioned above. Assuming supplier delegation is supported by the OEM for this ECU, each tier-1 supplier digitally signs the image, then delivers the signature, all of its metadata, including delegations, and associated images to the OEM. The OEM adds these metadata and images to its Image repository, along with information about any dependencies and conflicts between this image and those for other ECUs used in the OEM’s vehicles. The OEM also updates the inventory database, so that the Director repository can instruct the ECU on how to install these updated images.</t>

</section>
<section anchor="updating-individual-ecus-on-demand" title="Updating individual ECUs on demand">

<t>An OEM has issued a recall to address a problem with a keyless entry device that has been locking people out of their cars. The OEM prepares an updated flash image in the manner described above. The OEM then ships USB flash drives to vehicle owners and dealerships that allow those parties to update the firmware of their vehicles.</t>

</section>
<section anchor="update-one-ecu-with-multiple-deltas" title="Update one ECU with multiple deltas">

<t>The OEM wants to use delta updates to save over-the-air bytes. The delta images contain only the code and/or data that has changed from the previous image version. To do so, the OEM must first modify the Director repository, using the vehicle version manifest and dependency resolution to determine the differences between the previous and latest images. The OEM then adds the following to the custom Targets metadata used by the Director repository: (1) the algorithm used to apply a delta image, and (2) the Targets metadata about the delta image. The OEM will also check whether the delta images match the Targets metadata from the Director repository.</t>

</section>
</section>
</section>
<section anchor="exceptions" title="Exceptions">

<t>There are a number of factors that could impede the completion of the above scenarios:</t>

<t><list style="symbols">
  <t>ECUs may be lacking the necessary resources to function as designated. These insufficient resources could include limited CPU or RAM inadequate for performance of public key cryptography; a lack of sufficient storage to undo installation of bad software; or a location on a low-speed network (e.g., LIN).</t>
  <t>ECUs may reside on different network segments, and may not be able to directly reach each other, requiring a gateway to facilitate communication.</t>
  <t>A user may replace OEM-installed ECUs with aftermarket ECUs.</t>
  <t>A vehicle may be able to download only a limited amount of data via a cellular channel due to limits on a data plan.</t>
  <t>A system may lack sufficient power to download or install software updates.</t>
  <t>Vehicles may be offline for extended periods of time, thus missing required updates (e.g., key rotations).</t>
  <t>OEMs may be unwilling to implement costly security or hardware requirements.</t>
</list></t>

</section>
<section anchor="out-of-scope" title="Out of scope">

<t>The following topics will not be addressed in this document, as they represent threats outside the scope of Uptane:</t>

<t><list style="symbols">
  <t>Physical attacks, such as manual tampering with ECUs outside the vehicle.</t>
  <t>Compromise of the packaged software, such as malware embedded in a trusted package.</t>
  <t>Compromise of the supply chain (e.g., build system, version control system, packaging process). A number of strategies (e.g., git signing, TPMs, in-toto <xref target="IN-TOTO"/>)  already exist to address this problem. Therefore, there is no need to duplicate those techniques here.</t>
  <t>Problems associated with OBD or UDS programming of ECUs, such as authentication of communications between ECUs.</t>
  <t>Malicious mirrors of package repositories, which may substitute original packages with malicious packages with matching version numbers <xref target="MERCURY"/>.</t>
</list></t>

</section>
<section anchor="design-requirements" title="Design requirements">

<t>The design requirements for this document are governed by the following principal parameters:</t>

<t><list style="symbols">
  <t>to clearly mandate the design and implementation steps that are security critical and must be followed as is, while offering flexibility in the implementation of non-critical steps. In this manner, users can adapt to support different use models and deployment scenarios.</t>
  <t>to ensure that, if Uptane is implemented, the security practices mandated or suggested in this document do not interfere with the functionality of ECUs, vehicles, or the systems that maintain them.</t>
  <t>to delineate guidelines to ensure that, should any part of the SOTA mechanism of a vehicle be attacked, an attacker must compromise two or more modules to breach the SOTA mechanism.</t>
</list></t>

</section>
</section>
<section anchor="threat-model-and-attack-strategies" title="Threat model and attack strategies">

<t>The overarching goal of Uptane is to provide a system that is resilient in the face of various types of compromise. In this section, we describe the goals an attacker may have (<xref target="attacker_goals"/>) and the capabilities they may have or could develop (<xref target="capabilities"/>). We then describe and classify types of attacks on the system according to the attacker’s goals (<xref target="threats"/>).</t>

<section anchor="attacker_goals" title="Attacker goals">

<t>We assume that attackers may want to achieve one or more of the following goals, in increasing order of severity:</t>

<t><list style="symbols">
  <t>Read the contents of updates to discover confidential information, reverse-engineer firmware, or compare two firmware images to identify security fixes and hence determine the fixed security vulnerability.</t>
  <t>Deny installation of updates to prevent vehicles from fixing software problems.</t>
  <t>Cause one or more ECUs in the vehicle to fail, denying use of the vehicle or of certain functions.</t>
  <t>Control ECUs within the vehicle, and possibly the vehicle itself.</t>
</list></t>

</section>
<section anchor="capabilities" title="Attacker capabilities">

<t>Uptane is designed with resilience to compromise in mind. We assume that attackers may develop one or more of the following capabilities:</t>

<t><list style="symbols">
  <t>Intercept and modify network traffic (i.e., perform man-in-the-middle attacks). This capability may be developed in two domains:
  <list style="symbols">
      <t>Outside the vehicle, intercepting and modifying traffic between the vehicle and software repositories.</t>
      <t>Inside the vehicle, intercepting and modifying traffic on one or more vehicle buses (e.g., via an OBD port or using a compromised ECU as a vector).</t>
    </list></t>
  <t>Compromise and control either a Director repository or Image repository server, and any keys stored on that repository, but not both the Director and Image repositories.</t>
  <t>Compromise either a Primary ECU or a Secondary ECU, but not both in the same vehicle.</t>
</list></t>

</section>
<section anchor="threats" title="Description of threats">

<t>Uptane’s threat model includes the following types of attacks, organized according to the attacker goals listed in <xref target="attacker_goals"/>.</t>

<section anchor="read_updates" title="Read updates">

<t><list style="symbols">
  <t><spanx style="emph">Eavesdrop attack:</spanx> Read sensitive or confidential information from an update intended to be encrypted for a specific ECU. (Note: Not all implementations will have a need to protect information in this way.)</t>
</list></t>

</section>
<section anchor="deny_updates" title="Deny installation of updates">

<t>An attacker seeking to deny the installation of updates may attempt one or more of the following strategies:</t>

<t><list style="symbols">
  <t><spanx style="emph">Drop-request attack:</spanx> Block network traffic outside or inside the vehicle.</t>
  <t><spanx style="emph">Slow retrieval attack:</spanx> Slow down network traffic, in the extreme case sending barely enough packets to avoid a timeout. Similar to a drop-request attack, except that both the sender and receiver of the traffic still think network traffic is unimpeded.</t>
  <t><spanx style="emph">Freeze attack:</spanx> Continue to send a properly signed, but old, update bundle to the ECUs, even if newer updates exist.</t>
  <t><spanx style="emph">Partial bundle installation attack:</spanx> Install a valid (signed) update bundle, and then block selected updates within the bundle.</t>
  <t>Conduct a denial of service attack against the Uptane repositories or infrastructure.</t>
</list></t>

</section>
<section anchor="change_functionality" title="Interfere with ECU functionality">

<t>Attackers seeking to interfere with the functionality of vehicle ECUs in order to cause an operational failure or unexpected behavior may do so in one of the following ways:</t>

<t><list style="symbols">
  <t><spanx style="emph">Rollback attack:</spanx> Cause an ECU to install a previously valid software revision that is older than the currently installed version.</t>
  <t><spanx style="emph">Endless data attack:</spanx> Send a large amount of data to an ECU until it runs out of storage, possibly causing the ECU to fail to operate.</t>
  <t><spanx style="emph">Mix-and-match attack:</spanx> Install a malicious software bundle in which some of the updates do not interoperate properly. This may be accomplished even if all of the individual images being installed are valid, as long as valid versions exist that are mutually incompatible.</t>
</list></t>

</section>
<section anchor="control_ecu" title="Control an ECU or vehicle">

<t>Full control of a vehicle, or one or more ECUs within a vehicle, is the most severe threat.</t>

<t><list style="symbols">
  <t><spanx style="emph">Arbitrary software attack:</spanx> Cause an ECU to install and run arbitrary code of the attacker’s choice.</t>
</list></t>

</section>
</section>
</section>
<section anchor="design" title="Detailed design of Uptane">

<t>Uptane does not specify implementation details. Instead, this Standard describes the components necessary for a compliant implementation and leaves it up to individual implementers to make their own technological choices within those requirements.</t>

<t>At a high level, Uptane requires:</t>

<t><list style="symbols">
  <t>Two software repositories:
  <list style="symbols">
      <t>An Image repository containing binary images to install and signed metadata about those images.</t>
      <t>A Director repository connected to an inventory database that can sign metadata on demand for images in the Image repository.</t>
    </list></t>
  <t>Repository tools for generating Uptane-specific metadata about images.</t>
  <t>A public key infrastructure supporting the required metadata production and signing roles on each repository:
  <list style="symbols">
      <t>Root - The certificate authority for the Uptane ecosystem. Distributes public keys for verifying all the other roles’ metadata.</t>
      <t>Timestamp - Indicates whether there are new metadata or images.</t>
      <t>Snapshot - Indicates images released by the repository at a point in time via signing metadata about Targets metadata.</t>
      <t>Targets - Indicates metadata about images, such as hashes and file sizes.</t>
    </list></t>
  <t>A secure way for ECUs to know the time.</t>
  <t>An ECU capable of downloading images and associated metadata from the Uptane servers.</t>
  <t>An in-vehicle client on a Primary ECU capable of verifying the signatures on all update metadata and downloading updates on behalf of its associated Secondary ECUs. The Primary ECU MAY be the same ECU that communicates with the server.</t>
  <t>A client or library on each Secondary ECU capable of performing either full or partial verification of metadata.</t>
</list></t>

<section anchor="roles" title="Roles on repositories">

<t>A repository contains images and metadata. Each role has a particular type of metadata associated with it, as described in <xref target="meta_structures"/>.</t>

<section anchor="root_role" title="The Root role">

<t>A repository’s Root role SHALL be responsible for a Certificate Authority as defined in <xref target="RFC3647"/>.
A repository’s Root role SHALL produce and sign Root metadata as described in <xref target="root_meta"/>.
A repository’s Root role SHALL sign the public keys used to verify the metadata produced by the Timestamp, Snapshot, and Targets roles.
A repository’s Root role SHALL revoke keys for the other roles if they are compromised.</t>

</section>
<section anchor="targets_role" title="The Targets role">

<t>A repository’s Targets role SHALL produce and sign metadata about images and delegations as described in <xref target="targets_meta"/>.</t>

<section anchor="targets_role_delegations" title="Delegations">

<t>The Targets role on the Image repository MAY delegate the responsibility of signing metadata to other, custom-defined roles referred to as delegated targets. If it does, it MUST do so as specified in <xref target="delegations_meta"/>.</t>

<t>As responsibility for signing images or a subset of images MAY be delegated to more than one role, it is possible that two different roles will be trusted to sign a particular image. For this reason, delegations MUST be prioritized.</t>

<t>A particular delegation for a subset of images MAY be designated as <spanx style="strong">terminating</spanx>. For terminating delegations, the client SHALL NOT search any further if it does not find validly signed metadata about those images. Delegations SHOULD NOT be terminating by default; terminating delegations SHOULD only be used when there is a compelling technical reason to do so.</t>

<t>A delegation for a subset of images MAY be a multi-role delegation <xref target="TAP-3"/>. A multi-role delegation indicates that multiple roles are needed to sign a particular image and each of the delegatee roles MUST sign the same metadata.</t>

<t>Delegations only apply to the Image repository. The Targets role on the Director repository MUST NOT delegate metadata signing responsibility.</t>

</section>
</section>
<section anchor="snapshot_role" title="The Snapshot role">

<t>A repository’s Snapshot role SHALL produce and sign metadata about all Targets metadata the repository releases, including the current version number of the top-level Targets metadata, and the version numbers of all delegated Targets metadata, as described in <xref target="snapshot_meta"/>.</t>

</section>
<section anchor="timestamp_role" title="The Timestamp role">

<t>A repository’s Timestamp role SHALL produce and sign metadata indicating whether there are new metadata or images on the repository. It MUST do so by signing the metadata about the Snapshot metadata file.</t>

</section>
</section>
<section anchor="meta_structures" title="Metadata structures">

<t>Uptane’s security guarantees all rely on properly created metadata that follows a designated structure. The Uptane Standard <spanx style="strong">does not</spanx> mandate any particular format or encoding for the metadata as a whole. ASN.1 (with any encoding scheme like BER, DER, XER, etc.), JSON, XML, or any other encoding format that is capable of providing the required structure MAY be used.</t>

<t>However, string comparison is required as part of metadata verification. To ensure an accurate basis for comparing strings, all strings MUST be encoded in the Unicode Format for Network Interchange as defined in <xref target="RFC5198"/>, including normalization into Unicode Normalization Form C (<xref target="NFC"/>).</t>

<t>In the <spanx style="emph">Deployment Best Practices</spanx> (<xref target="DEPLOY"/>), Joint Development Foundation Projects, LLC, Uptane Series provides some examples of compliant metadata structures in ASN.1 and JSON.</t>

<section anchor="common_metadata" title="Common metadata structures">

<t>Every public key MUST be represented using a public key identifier.  A public key identifier is EITHER all of the following:</t>

<t><list style="symbols">
  <t>The value of the public key itself (which MAY be, for example, formatted as a PEM string)</t>
  <t>The public key cryptographic algorithm used by the key (such as RSA or ECDSA)</t>
  <t>The particular scheme used to verify the signature (such as <spanx style="verb">rsassa-pss-sha256</spanx> or <spanx style="verb">ecdsa-sha2-nistp256</spanx>)</t>
</list></t>

<t>OR a secure hash over at least the above components (such as the keyid mechanism in TUF).</t>

<t>All four Uptane roles (Root, Targets, Snapshot, and Timestamp) share a common structure. They SHALL contain the following two attributes:</t>

<t><list style="symbols">
  <t>A payload of metadata to be signed</t>
  <t>An attribute containing the signature(s) of the payload, where each entry specifies:
  <list style="symbols">
      <t>The public key identifier of the key being used to sign the payload</t>
      <t>A signature with this key over the payload</t>
    </list></t>
</list></t>

<t>The payload differs depending on the role. However, the payload for all roles shares a common structure. It SHALL contain the following four attributes:</t>

<t><list style="symbols">
  <t>An indicator of the type of role (Root, Targets, Snapshot, or Timestamp)</t>
  <t>An expiration date and time</t>
  <t>An integer version number, which SHOULD be incremented each time the metadata file is updated</t>
  <t>The role-specific metadata for the role indicated</t>
</list></t>

<t>The following sections describe the role-specific metadata. All roles SHALL follow the common structures described here.</t>

</section>
<section anchor="root_meta" title="Root metadata">

<t>A repository’s Root metadata distributes the public keys of the top-level Root, Targets, Snapshot, and Timestamp roles, as well as revocations of those keys. It SHALL contain two attributes:</t>

<t><list style="symbols">
  <t>A representation of the public keys for all four roles. Each key SHALL have a unique public key identifier.</t>
  <t>An attribute mapping each role to (1) its public key(s), and (2) the threshold of signatures required for that role.</t>
</list></t>

</section>
<section anchor="targets_meta" title="Targets metadata">

<t>The Targets metadata on a repository contains all of the information about images to be installed on ECUs. This includes filenames, hashes, and file sizes. It MAY also include other useful information, such as what types of hardware are compatible with a particular image.</t>

<t>Targets metadata can also contain metadata about delegations, allowing one Targets role to delegate its authority to another. This means that an individual Targets metadata file might contain only metadata about delegations, only metadata about images, or some combination of the two. The details of how ECUs traverse the delegation tree to find valid metadata about images is specified in <xref target="resolve_delegations"/>.</t>

<section anchor="targets_images_meta" title="Metadata about images">

<t>To be available to install on clients, all images on the repository MUST have their metadata listed in a Targets role.  Each Targets role MAY provide a list of some images on the repository.  This list MUST provide, at a minimum, the following information about each image:</t>

<t><list style="symbols">
  <t>The image filename</t>
  <t>The size of the image in bytes</t>
  <t>One or more hashes of the image file, along with the hashing function used</t>
</list></t>

<t>If there are no images included in the Targets metadata from the Director repository, then the metadata SHOULD include a vehicle identifier in order to avoid a replay attack.</t>

<section anchor="custom-metadata-about-images" title="Custom metadata about images">

<t>In addition to what is required, Targets metadata files MAY contain extra metadata for images on the repository. This metadata can be customized for a particular use case. Examples of use cases for different types of custom metadata can be found in the <spanx style="emph">Deployment Best Practices</spanx> document (<xref target="DEPLOY"/>). However, there are a few important pieces of custom metadata that SHOULD be present in most implementations. In addition, there is one element in the custom metadata that MUST be present in the Targets metadata from the Director.</t>

<t>Custom metadata MAY also contain a demarcated field or section that MUST match whenever two pieces of metadata are checked against each other, such as when Targets metadata from the Director repository is checked against Targets metadata from the Image repository.</t>

<t>The information listed below SHOULD be provided for each image on both the Image repository and the Director repository. If a “MUST match section” is to be implemented, that is where this information SHOULD be placed.</t>

<t><list style="symbols">
  <t>A release counter, to be incremented each time a new version of the image is released. This can be used to prevent rollback attacks even in cases where the Director repository is compromised.</t>
  <t>A hardware identifier, or list of hardware identifiers, representing models of ECUs with which the image is compatible. This can be used to ensure that an ECU cannot be ordered to install an incompatible image, even in cases where the Director repository is compromised.</t>
</list></t>

<t>The following information is CONDITIONALLY REQUIRED for each image on the Director repository IF that image is encrypted:</t>

<t><list style="symbols">
  <t>Information about filenames, hashes, and file size of the encrypted image.</t>
  <t>Information about the encryption method, and other relevant information–for example, a symmetric encryption key encrypted by the ECU’s asymmetric key could be included in the Director repository metadata.</t>
</list></t>

<t>The following information MUST be provided from the Director repository for each image in the Targets metadata:</t>

<t><list style="symbols">
  <t>An ECU identifier (such as a serial number), specifying the ECU that should install the image.</t>
</list></t>

<t>The Director repository MAY provide a download URL for the image file. This may be useful, for example, when the image is on a public CDN and the Director wishes to provide a signed URL.</t>

</section>
</section>
<section anchor="delegations_meta" title="Metadata about delegations">

<t>A Targets metadata file on the Image repository (but not the Director repository) MUST be able to delegate signing authority to other entities. For example, it could delegate signing authority for a particular ECU’s firmware to that ECU’s supplier. A metadata file MAY contain any number of delegations and MUST keep the delegations in prioritized order.</t>

<t>Any metadata file with delegations MUST provide the following information:</t>

<t><list style="symbols">
  <t>A list of public keys of all delegatees. Each key should have a unique public key identifier and a key type.</t>
  <t>A list of delegations, each of which contains:
  <list style="symbols">
      <t>A list of the filenames to which this role applies. This MAY be expressed using wildcards, or by enumerating a list, or a combination of the two.</t>
      <t>An optional list of the hardware identifiers to which this role applies.  If this is omitted, any hardware identifier will match.</t>
      <t>An indicator of whether or not this is a terminating delegation. (See <xref target="targets_role_delegations"/>.)</t>
      <t>A list of the roles to which this delegation applies. Each role needs to specify:
      <list style="symbols">
          <t>A name for the role (e.g., “supplier1-qa”)</t>
          <t>The key identifiers for each key this role uses</t>
          <t>A threshold of keys that must sign for this role</t>
        </list></t>
    </list></t>
</list></t>

<t>Note that <spanx style="strong">any</spanx> Targets metadata file stored on the Image repository may contain delegations, and these delegations can be in chains of arbitrary length.</t>

</section>
</section>
<section anchor="snapshot_meta" title="Snapshot metadata">

<t>The Snapshot metadata lists version numbers and filenames of all Targets metadata files. It protects against mix-and-match attacks if a delegated supplier key is compromised.</t>

<t>For each Targets metadata file on the repository, the Snapshot metadata SHALL contain the following information:</t>

<t><list style="symbols">
  <t>The filename and version number of the Targets metadata file.</t>
</list></t>

<t>The Snapshot metadata MAY also list the Root metadata filename and version number for the purpose of backwards compatibility. Historically, this was a requirement in TUF, but it is no longer required and does not provide a significant security benefit.</t>

</section>
<section anchor="timestamp_meta" title="Timestamp metadata">

<t>The Timestamp metadata SHALL contain the following information:</t>

<t><list style="symbols">
  <t>The filename and version number of the latest Snapshot metadata on the repository.</t>
  <t>One or more hashes of the Snapshot metadata file, along with the hashing function used.</t>
</list></t>

</section>
<section anchor="repo_mapping_meta" title="Repository mapping metadata">

<t>As described in the introduction to <xref target="design"/>, Uptane requires a Director repository and an Image repository. However, it is possible to have an Uptane-compliant implementation that has more than two repositories.</t>

<t>Repository mapping metadata informs a Primary ECU about which repositories to trust for images or image paths. <xref target="TAP-4"/> describes how to make use of more complex repository mapping metadata in order to have more than the two required repositories.</t>

<t>Repository mapping metadata, or the equivalent informational content, MUST be present on all Primary ECUs, and MUST contain the following information:</t>

<t><list style="symbols">
  <t>A list of repository names and one or more URLs at which the named repository can be accessed. At a minimum, this MUST include the Director and Image repositories.</t>
  <t>A list of mappings of image paths to repositories, each of which contains:
  <list style="symbols">
      <t>A list of image paths. Image paths MAY be expressed using wildcards, or by enumerating a list, or a combination of the two.</t>
      <t>A list of repositories that MUST provide signed Targets metadata for images stored at those paths.</t>
    </list></t>
</list></t>

<t>For example, in the most basic Uptane case, the repository mapping metadata would contain:</t>

<t><list style="symbols">
  <t>The name and URL of the Director repository.</t>
  <t>The name and URL of the Image repository.</t>
  <t>A single mapping indicating that all images (<spanx style="verb">*</spanx>) MUST be signed by both the Director and Image repository.</t>
</list></t>

<t>Note that the metadata need not be in the form of a metadata file. For example, in the basic case where there is only one Director and one Image repository, and all images need to have signed metadata from both repositories, it would be sufficient to have a configuration file with URLs for the two repositories and a client that always checks for metadata matches between them. In this case, no explicit mapping would be defined, because the mapping is defined as part of the Uptane client implementation.</t>

<t>The <spanx style="emph">Uptane Deployment Best Practices</spanx> document (<xref target="DEPLOY"/>) provides more guidance on how to implement repository mapping metadata for more complex use cases. It also discusses strategies for updating repository mapping metadata, if required.</t>

</section>
<section anchor="metadata_filename_rules" title="Rules for filenames in repositories and metadata">

<t>There is a difference between the filename in a metadata file or an ECU, and the filename on a repository. This difference exists in order to avoid race conditions, where metadata and images are read from, and written to, at the same time. For more details, the reader should read the TUF specification <xref target="TUF-spec"/> and PEP 458 <xref target="PEP-458"/>.</t>

<t>Unless stated otherwise, all files SHALL be written to repositories in accordance with the following two rules:</t>

<t><list style="numbers">
  <t>Metadata filenames SHALL be qualified with version numbers. If a metadata file A is specified as FILENAME.EXT in another metadata file B, then it SHALL be written as VERSION.FILENAME.EXT, where VERSION is A’s version number, as defined in <xref target="common_metadata"/>, with one exception: If the version number of the Timestamp metadata file might not be known in advance by a client, it MAY be read from, and written to, a repository using a filename without a version number qualification, i.e., FILENAME.EXT.</t>
  <t>If an image is specified in a Targets metadata file as FILENAME.EXT, it SHALL be written to the repository as HASH.FILENAME.EXT, where HASH is one of the hash digests of the file, as specified in <xref target="targets_images_meta"/>. The file MUST be written to the repository using <spanx style="emph">n</spanx> different filenames, one for each hash digest listed in its corresponding Targets metadata.</t>
</list></t>

<t>For example:</t>

<t><list style="symbols">
  <t>The version number of the Snapshot metadata file is 61, and its filename in the Timestamp metadata is <spanx style="emph">snapshot.json</spanx>. The filename on the repository will be <spanx style="emph">61.snapshot.json</spanx>.</t>
  <t>There is an image with the <spanx style="emph">filename acme_firmware.bin</spanx> specified in the Targets metadata, with a SHA3-256 of <spanx style="emph">aaaa</spanx> and a SHA-512/224 of <spanx style="emph">bbbb</spanx>. It will have two filenames on the repository: <spanx style="emph">aaaa.acme_firmware.bin</spanx> and <spanx style="emph">bbbb.acme_firmware.bin</spanx>.</t>
</list></t>

</section>
</section>
<section anchor="server-repository-implementation-requirements" title="Server / repository implementation requirements">

<t>An Uptane implementation SHALL make the following services available to vehicles:</t>

<t><list style="symbols">
  <t>Image repository</t>
  <t>Director repository</t>
</list></t>

<t>Additionally, an Uptane implementation requires ECUs to have a secure way to know the current time.</t>

<section anchor="image-repository" title="Image repository">

<t>The Image repository exists to allow an OEM and/or its suppliers to upload images and their associated metadata. It makes these images and their metadata available to vehicles. The Image repository is designed to be primarily controlled by human actors, and updated relatively infrequently.</t>

<t>The Image repository SHALL expose an interface permitting the download of metadata and images. This interface SHOULD be public.</t>

<t>The Image repository SHALL require authorization for writing metadata and images.</t>

<t>The Image repository SHALL provide a method for authorized users to upload images and their associated metadata. It SHALL check that a user writing metadata and images is authorized to do so for that specific image by checking the chain of delegations as described in <xref target="delegations_meta"/>.</t>

<t>The Image repository SHALL implement storage which permits authorized users to write an image file using a unique filename, and later read the same file using the same name. It MAY use any filesystem, key-value store, or database that fulfills this requirement.</t>

<t>The Image repository MAY require authentication for read access.</t>

</section>
<section anchor="director_repository" title="Director repository">

<t>The Director repository instructs ECUs as to which images should be installed by producing signed metadata on demand. Unlike the Image repository, it is mostly controlled by automated, online processes. It also consults a private inventory database containing information on vehicles, ECUs, and software revisions.</t>

<t>The Director repository SHALL expose an interface for Primaries to upload vehicle version manifests (<xref target="vehicle_version_manifest"/>) and download metadata. This interface SHOULD be public.
The Director MAY encrypt images for ECUs that require them, either by encrypting on-the-fly or by storing encrypted images on the repository.</t>

<t>The Director repository SHALL implement storage which permits an automated service to write generated metadata files. It MAY use any filesystem, key-value store, or database that fulfills this requirement.</t>

<section anchor="directing-installation-of-images-on-vehicles" title="Directing installation of images on vehicles">

<t>A Director repository MUST conform to the following six-step process for directing the installation of software images on a vehicle.</t>

<t><list style="numbers">
  <t>The Director SHOULD first identify the vehicle. This MAY be done when the Director receives a vehicle version manifest sent by a Primary (as described in <xref target="construct_manifest_primary"/>), decodes the manifest, and determines the unique vehicle identifier. Additionally, the Director MAY utilize other mechanisms to uniquely identify a vehicle (e.g., 2-way TLS with unique client certificates).</t>
  <t>Using the vehicle identifier, the Director queries its inventory database (as described in <xref target="inventory_db"/>) for relevant information about each ECU in the vehicle.</t>
  <t>The Director SHALL check the manifest for accuracy compared to the information in the inventory database. If any of the required checks fail, the Director MAY drop the request. An implementer MAY make additional checks if desired. At a minimum, the Director SHALL check the following:
  <list style="symbols">
      <t>Each ECU recorded in the inventory database is also represented in the manifest.</t>
      <t>The signature of the manifest matches the ECU key of the Primary that sent it.</t>
      <t>The signature of each Secondary’s contribution to the manifest matches the ECU key of that Secondary.</t>
    </list></t>
  <t>The Director SHOULD check that the nonce or counter in each ECU version report has not been used before to prevent a replay of the ECU version report. If the nonce or counter is reused the Director SHOULD drop the request.</t>
  <t>The Director extracts information about currently installed images from the vehicle version manifest. Using this information, it determines if the vehicle is already up-to-date, and if not, determines a set of images that should be installed. The exact process by which this determination takes place is out of scope for this Standard. However, the Director MUST take into account <spanx style="emph">dependencies</spanx> and <spanx style="emph">conflicts</spanx> between images and SHOULD consult well-established techniques for dependency resolution.</t>
  <t>The Director MAY encrypt images for ECUs that require it.</t>
  <t>The Director generates new metadata representing the desired set of images to be installed on the vehicle, based on the dependency resolution in step 4. This includes Targets (<xref target="targets_meta"/>), Snapshot (<xref target="snapshot_meta"/>), and Timestamp (<xref target="timestamp_meta"/>) metadata. It then sends this metadata to the Primary as described in <xref target="download_meta_primary"/>.</t>
</list></t>

</section>
<section anchor="inventory_db" title="Inventory Database">

<t>The Director SHALL use a private inventory database to store information about ECUs and vehicles. An implementer MAY use any durable database for this purpose.</t>

<t>The inventory database MUST record the following pieces of information:</t>

<t><list style="symbols">
  <t>Per vehicle:
  <list style="symbols">
      <t>A unique identifier (such as a VIN)</t>
    </list></t>
  <t>Per ECU:
  <list style="symbols">
      <t>A unique identifier (such as a serial number)</t>
      <t>The vehicle identifier the ECU is associated with</t>
      <t>An ECU key (symmetric or asymmetric; for asymmetric keys, only the public part SHOULD be stored)</t>
      <t>The ECU key identifier (as defined in <xref target="common_metadata"/>)</t>
      <t>Whether the ECU is a Primary or a Secondary</t>
    </list></t>
</list></t>

<t>The inventory database MAY record other information about ECUs and vehicles. It SHOULD record a hardware identifier for each ECU to protect against the possibility of directing the ECU to install incompatible firmware.</t>

</section>
</section>
</section>
<section anchor="in-vehicle-implementation-requirements" title="In-vehicle implementation requirements">

<t>An Uptane-compliant ECU SHALL be able to download and verify image metadata and image binaries before installing a new image and MUST have a secure way of verifying the current time, or a sufficiently recent attestation of the time.</t>

<t>All ECUs SHOULD monitor the download speed of image metadata and image binaries to detect and respond to a slow retrieval attack. If the download is slower than a pre-defined threshold, the ECU SHOULD send an alert to the Director repository, for example as part of the next vehicle version manifest.</t>

<t>Each ECU receiving over-the-air updates in a vehicle is either a Primary or a Secondary ECU. A Primary ECU collects and delivers to the Director vehicle manifests (<xref target="vehicle_version_manifest"/>) that contain information about which images have been installed on ECUs in the vehicle. It also verifies the time, and downloads and verifies the latest metadata and images for itself and for its Secondaries. A Secondary ECU verifies the time, and downloads and verifies the latest metadata and images for itself from its associated Primary ECU. It also sends signed information about its installed images to its associated Primary.</t>

<t>All ECUs MUST verify image metadata as specified in <xref target="metadata_verification"/> before installing an image or making it available to other ECUs. A Primary ECU MUST perform full verification (<xref target="full_verification"/>). A Secondary ECU SHOULD perform full verification if possible. If a Secondary cannot perform full verification, it SHALL, at the very least, perform partial verification. In addition, it MAY also perform some steps from the full verification process. See the <spanx style="emph">Uptane Deployment Best Practices</spanx> document (<xref target="DEPLOY"/>) for a discussion of how to choose between partial and full verification.</t>

<t>ECUs MUST have a secure source of time. An OEM/Uptane implementer MAY use any external source of time that is demonstrably secure. The <spanx style="emph">Uptane Deployment Best Practices</spanx> document (<xref target="DEPLOY"/>) describes one way to implement an external time server to cryptographically attest time, as well as the security properties required.</t>

<section anchor="build-time-prerequisite-requirements-for-ecus" title="Build-time prerequisite requirements for ECUs">

<t>For an ECU to be capable of receiving Uptane-secured updates, it MUST have the following data provisioned at the time it is manufactured or installed in the vehicle:</t>

<t><list style="numbers">
  <t>A sufficiently recent copy of required Uptane metadata at the time of manufacture or install. This is necessary for the ECU to authenticate that the remote repository is legitimate when it first downloads metadata in the field. See <spanx style="emph">Uptane Deployment Best Practices</spanx> (<xref target="DEPLOY"/>) for more information.
  <list style="symbols">
      <t>Partial verification Secondary ECUs MUST have the Root and Targets metadata from the Director repository (to reduce the scope of rollback and replay attacks). These ECUs MAY also have metadata from other roles or the Image repository if they will be used by the Secondary.</t>
      <t>Full verification ECUs MUST have a complete set of metadata (Root, Targets, Snapshot, and Timestamp) from both repositories (to prevent rollback and replay attacks), as well as the repository mapping metadata (<xref target="repo_mapping_meta"/>). Delegations are not required.</t>
    </list></t>
  <t>The current time, or a secure attestation of a sufficiently recent time.</t>
  <t>An <spanx style="strong">ECU key</spanx>. This is a private key, unique to the ECU, used to sign ECU version reports and decrypt images. An ECU key MAY be either a symmetric key or an asymmetric key. If it is an asymmetric key, there MAY be separate keys for encryption and signing. For the purposes of this Standard, the set of private keys that an ECU uses is referred to as the ECU key (singular), even if it is actually multiple keys used for different purposes.</t>
</list></t>

</section>
<section anchor="what-the-primary-does" title="What the Primary does">

<t>A Primary downloads, verifies, and distributes the latest time, metadata, and images. To do so, it SHALL perform the following seven steps:</t>

<t><list style="numbers">
  <t>Construct and send vehicle version manifest (<xref target="construct_manifest_primary"/>)</t>
  <t>Download and check current time (<xref target="check_time_primary"/>)</t>
  <t>Download and verify metadata (<xref target="download_meta_primary"/>)</t>
  <t>Download and verify images (<xref target="download_images_primary"/>)</t>
  <t>OPTIONAL: Send latest time to Secondaries (<xref target="send_time_primary"/>)</t>
  <t>Send metadata to Secondaries (<xref target="send_metadata_primary"/>)</t>
  <t>Send images to Secondaries (<xref target="send_images_primary"/>)</t>
</list></t>

<t>Note that the subsequent sections concerning requirements for a Primary do not prohibit implementing Primary capabilities on an ECU that does not communicate directly with the Uptane repositories. This allows for implementations to have multiple ECUs within the vehicle performing functions equivalent to a Primary.
If multiple such Primaries are included within a vehicle, each Secondary ECU SHALL have a single Primary responsible for providing its updates.</t>

<section anchor="construct_manifest_primary" title="Construct and send vehicle version manifest">

<t>The Primary SHALL build a <spanx style="emph">vehicle version manifest</spanx> as described in <xref target="vehicle_version_manifest"/>.</t>

<t>Once the complete manifest is built, the Primary MAY send the manifest to the Director repository. However, it is not strictly required that the Primary send the manifest until step three. If permitted by the implementation, a Primary MAY send only a diff of the manifest to save bandwidth. If an implementation permits diffs, the Director SHOULD have a way to request a full manifest.</t>

<t>Secondaries MAY send their version report at any time so that it is already stored on the Primary when it wishes to check for updates. Alternatively, the Primary MAY request a version report from each Secondary at the time of the update check.</t>

<section anchor="vehicle_version_manifest" title="Vehicle version manifest">

<t>The vehicle version manifest is a metadata structure that MUST contain the following information:</t>

<t><list style="symbols">
  <t>An attribute containing the signature(s) of the payload, each specified by:
  <list style="symbols">
      <t>The public key identifier of the key being used to sign the payload</t>
      <t>The signing method (i.e., ed25519, rsassa-pss, etc.)</t>
      <t>A hash of the payload to be signed</t>
      <t>The hashing function used (i.e., SHA3-256, SHA-512/224, etc.)</t>
      <t>The signature of the hash</t>
    </list></t>
  <t>A payload representing the installed versions of each software image on the vehicle. This payload SHALL contain:
  <list style="symbols">
      <t>The vehicle’s unique identifier (e.g., the VIN)</t>
      <t>The Primary ECU’s unique identifier (e.g., the serial number)</t>
      <t>A list of ECU version reports as specified in <xref target="version_report"/></t>
    </list></t>
</list></t>

<t>Note that one of the ECU version reports should be the version report for the Primary itself.</t>

</section>
<section anchor="version_report" title="ECU version report">

<t>An ECU version report is a metadata structure that MUST contain the following information:</t>

<t><list style="symbols">
  <t>An attribute containing the signature(s) of the payload, each specified by:
  <list style="symbols">
      <t>The public key identifier of the key being used to sign the payload</t>
      <t>The signing method (i.e., ed25519, rsassa-pss, etc.)</t>
      <t>A hash of the payload to be signed</t>
      <t>The hashing function used (i.e., SHA3-256, SHA-512/224, etc.)</t>
      <t>The signature of the hash</t>
    </list></t>
  <t>A payload containing:
  <list style="symbols">
      <t>The ECU’s unique identifier (e.g., the serial number)</t>
      <t>The filename, length, and hashes of its currently installed image (i.e., the non-custom Targets metadata for this particular image)</t>
      <t>An indicator of any detected security attack</t>
      <t>The latest time the ECU can verify at the time this version report was generated</t>
      <t>A nonce or counter to prevent a replay of the ECU version report. This value MUST change each update cycle. It MAY be a cryptographic nonce used with a time server as described in <spanx style="emph">Uptane Deployment Best Practices</spanx>  (<xref target="DEPLOY"/>).</t>
    </list></t>
</list></t>

</section>
</section>
<section anchor="check_time_primary" title="Download and check current time">

<t>The Primary SHALL load the current time from a secure source.</t>

</section>
<section anchor="download_meta_primary" title="Download and verify metadata">

<t>The Primary SHALL download metadata for all targets and perform a full verification on it as specified in <xref target="full_verification"/>.</t>

</section>
<section anchor="download_images_primary" title="Download and verify images">

<t>The Primary SHALL download and verify images for itself and for all of its associated Secondaries. Images SHALL be verified by checking that the hash of the image file matches the hash specified in the Director’s Targets metadata for that image.</t>

<t>There may be several different filenames that all refer to the same image binary, as described in <xref target="metadata_filename_rules"/>. If the Primary has received multiple hashes for a given image binary via the Targets role (see <xref target="targets_images_meta"/>) then it SHALL verify every hash for this image even though the image is identified by a single hash as part of its filename.</t>

</section>
<section anchor="send_time_primary" title="Send latest time to Secondaries">

<t>Unless the Secondary ECU has its own way of verifying the time or does not have the capacity to verify a time message, the Primary is CONDITIONALLY REQUIRED to send the time to each ECU. The Secondary will verify the time message, then overwrite its current time with the received time.</t>

</section>
<section anchor="send_metadata_primary" title="Send metadata to Secondaries">

<t>The Primary SHALL send its latest downloaded metadata to all of its associated Secondaries. The metadata it sends to each Secondary MUST include all of the metadata required for verification on that Secondary. For full verification Secondaries, this includes the metadata for all four roles from both repositories, plus any delegated Targets metadata files the Secondary will recurse through to find the proper delegation. For partial verification Secondaries, this MAY include fewer metadata files; at a minimum, it includes only the Targets metadata file from the Director repository.</t>

<t>The Primary SHOULD determine the minimal set of metadata files to send to each Secondary by performing delegation resolution as described in <xref target="full_verification"/>.</t>

<t>Each Secondary SHALL store the latest copy of all metadata required for its own verification.</t>

</section>
<section anchor="send_images_primary" title="Send images to Secondaries">

<t>The Primary SHALL send the latest image to each of its associated Secondaries that have sufficient storage to receive it.</t>

<t>For Secondaries without sufficient storage to store a copy of the image, the Primary SHOULD wait for a request from the Secondary to stream the new image file to it. The Secondary will send the request once it has verified the metadata sent in the previous step.</t>

</section>
</section>
<section anchor="installing-images-on-primary-or-secondary-ecus" title="Installing images on Primary or Secondary ECUs">

<t>An ECU SHALL perform the following steps when attempting to install a new image:</t>

<t><list style="numbers">
  <t>Verify latest attested time. This is optional if the ECU does not have the capacity to verify a time message (<xref target="verify_time"/>)</t>
  <t>Verify metadata (<xref target="verify_metadata"/>)</t>
  <t>Download latest image (<xref target="download_image"/>)</t>
  <t>Verify image (<xref target="verify_image"/>)</t>
  <t>Install image (<xref target="install_image"/>)</t>
  <t>Create and send version report (<xref target="create_version_report"/>)</t>
</list></t>

<section anchor="verify_time" title="Load and verify the latest attested time">

<t>IF the ECU has the capability to verify a time message, the ECU is CONDITIONALLY REQUIRED to load and verify the current time, or the most recent securely attested time.</t>

</section>
<section anchor="verify_metadata" title="Verify metadata">

<t>The ECU SHALL verify the latest downloaded metadata (<xref target="metadata_verification"/>) using either full or partial verification. If the metadata verification fails for any reason, the ECU SHALL jump to the final step (<xref target="create_version_report"/>).</t>

</section>
<section anchor="download_image" title="Download latest image">

<t>If the ECU has limited secondary storage, i.e., insufficient buffer storage to temporarily store the latest image before installing it, it SHALL download the latest image from the Primary. (If the ECU has sufficient secondary storage, it will already have the latest image in its secondary storage as specified in <xref target="send_images_primary"/>, and should skip to the next step.) The ECU MAY first create a backup of its previous working image and store it elsewhere (e.g., the Primary).</t>

<t>The filename used to identify the latest known image (i.e., the file to request from the Primary) SHALL be determined as follows:</t>

<t><list style="numbers">
  <t>Load the Targets metadata file from the Director repository.</t>
  <t>Find the Targets metadata associated with this ECU identifier.</t>
  <t>Construct the Image filename using the rule in <xref target="metadata_filename_rules"/>, or use the download URL specified in the Director metadata.</t>
  <t>If there is no Targets metadata about this image, abort the update cycle and report that there is no such image. Additionally, in the case of failure, the ECU SHALL retain its previous Targets metadata instead of using the new Targets metadata. Otherwise, download the image (up to the number of bytes specified in the Targets metadata) and verify it according to <xref target="verify_image"/>.</t>
</list></t>

<t>When the Primary responds to the download request, the ECU SHALL overwrite its current image with the downloaded image from the Primary.</t>

<t>If any part of this step fails, the ECU SHALL jump to the final step (<xref target="create_version_report"/>).</t>

</section>
<section anchor="verify_image" title="Verify image">

<t>The ECU SHALL verify that the latest image matches the latest metadata as follows:</t>

<t><list style="numbers">
  <t>Load the latest Targets metadata file from the Director.</t>
  <t>Find the Targets metadata associated with this ECU identifier.</t>
  <t>Check that the hardware identifier in the metadata matches the ECU’s hardware identifier.</t>
  <t>Check that the image filename is valid for this ECU. This MAY be a comparison against a wildcard path, which restricts the ECUs to which a delegation will apply.</t>
  <t>Check that the release counter of the image in the previous metadata, if it exists, is less than or equal to the release counter in the latest metadata.</t>
  <t>If the image is encrypted, decrypt the image with a decryption key to be chosen as follows:
  <list style="symbols">
      <t>If the ECU key is a symmetric key, the ECU SHALL use the ECU key for image decryption.</t>
      <t>If the ECU key is asymmetric, the ECU SHALL check the Targets metadata for an encrypted symmetric key. If such a key is found, the ECU SHALL decrypt the symmetric key using its ECU key, and use the decrypted symmetric key for image decryption.</t>
      <t>If the ECU key is asymmetric and there is no symmetric key in the Targets metadata, the ECU SHALL use its ECU key for image decryption.</t>
    </list></t>
  <t>Check that all hashes listed in the metadata match the corresponding hashes of the image.</t>
</list></t>

<t>If the ECU has enough secondary storage capacity to store the image, the checks SHOULD be performed on the image in secondary storage before it is installed.</t>

<t>When checking hashes, the ECU SHOULD additionally check that the length of the image matches the length listed in the metadata.</t>

<t>NOTE: Verifying image size along with the hashes will become a requirement in a future version of the Uptane Standard.</t>

<t>NOTE: See <xref target="DEPLOY"/> for guidance on how to deal with Secondary ECU failures for ECUs that have limited secondary storage.</t>

<t>If any step fails, the ECU SHALL jump to the final step (<xref target="create_version_report"/>).</t>

</section>
<section anchor="install_image" title="Install image">

<t>The ECU SHALL attempt to install the update. This installation SHOULD occur at a time when all pre-conditions are met. These pre-conditions MAY include ensuring the vehicle is in a safe environment for install (e.g., the vehicle is parked when updating a specific ECU). Another pre-condition MAY include ensuring the ECU has a backup of its current image and metadata in case the current installation fails.</t>

</section>
<section anchor="create_version_report" title="Create and send version report">

<t>The ECU SHALL create a version report as described in <xref target="version_report"/>, and send it to the Primary (or simply save it to disk, if the ECU is a Primary). The Primary SHOULD write the version reports it receives to disk and associate them with the Secondaries that sent them.</t>

</section>
</section>
<section anchor="metadata_verification" title="Metadata verification procedures">

<t>A Primary ECU MUST perform full verification of metadata. A Secondary ECU SHOULD perform full verification of metadata. If a Secondary cannot perform full verification, it SHALL, at the very least, perform partial verification.</t>

<t>If a step in the following workflows does not succeed (e.g., the update is aborted because a new metadata file was not signed), an ECU SHOULD still be able to update again in the future. Errors raised during the update process SHOULD NOT leave ECUs in an unrecoverable state.</t>

<section anchor="partial_verification" title="Partial verification">

<t>In order to perform partial verification, an ECU SHALL perform the following steps:</t>

<t><list style="numbers">
  <t>Load and verify the current time or the most recent securely attested time.</t>
  <t>Download and check the Targets metadata file from the Director repository, following the procedure in <xref target="check_targets"/>.</t>
</list></t>

<t>Note that this verification procedure is the smallest set of Uptane checks permissible for an Uptane Secondary ECU. An ECU MAY additionally implement more metadata checks.</t>

<t>For example, an ECU MAY also fetch and verify Root metadata from the Director (following the procedure in <xref target="check_root"/>) before checking Targets metadata. Performing this additional check would provide the ECU with a secure way to receive and validate a rotation of the Director’s Targets key.</t>

<t>See <xref target="DEPLOY"/> for more discussion on this topic.</t>

</section>
<section anchor="full_verification" title="Full verification">

<t>Full verification of metadata means that the ECU checks that the Targets metadata about images from the Director repository matches the Targets metadata about the same images from the Image repository. This provides resilience to a key compromise in the system.</t>

<t>Full verification MUST be performed by Primary ECUs and SHOULD be performed by Secondary ECUs. In the following instructions, whenever an ECU is directed to download metadata, it applies only to Primary ECUs.</t>

<t>Before starting full verification, the repository mapping metadata MUST be consulted to determine where to download metadata from. This procedure assumes the basic Uptane case: there are only two repositories (Director and Image), and all image paths are required to be signed by both repositories. If a more complex repository layout is being used, refer to <xref target="DEPLOY"/> for guidance on how to determine where metadata should be downloaded from.</t>

<t>In order to perform full verification, an ECU SHALL perform the following steps:</t>

<t><list style="numbers">
  <t>Load and verify the current time or the most recent securely attested time.</t>
  <t>Download and check the Root metadata file from the Director repository, following the procedure in <xref target="check_root"/>.</t>
  <t>Download and check the Timestamp metadata file from the Director repository, following the procedure in <xref target="check_timestamp"/>.</t>
  <t>Check the previously downloaded Snapshot metadata file from the Directory repository (if available). If the hashes and version number of that file match the hashes and version number listed in the new Timestamp metadata, there are no new updates and the verification process MAY be stopped and considered complete. Otherwise, download and check the Snapshot metadata file from the Director repository, following the procedure in <xref target="check_snapshot"/>.</t>
  <t>Download and check the Targets metadata file from the Director repository, following the procedure in <xref target="check_targets"/>.</t>
  <t>If the Targets metadata from the Directory repository indicates that there are no new targets that are not already currently installed, the verification process MAY be stopped and considered complete. Otherwise, download and check the Root metadata file from the Image repository, following the procedure in <xref target="check_root"/>.</t>
  <t>Download and check the Timestamp metadata file from the Image repository, following the procedure in <xref target="check_timestamp"/>.</t>
  <t>Check the previously downloaded Snapshot metadata file from the Image repository (if available). If the hashes and version number of that file match the hashes and version number listed in the new Timestamp metadata, the ECU MAY skip to the last step. Otherwise, download and check the Snapshot metadata file from the Image repository, following the procedure in <xref target="check_snapshot"/>.</t>
  <t>Download and check the top-level Targets metadata file from the Image repository, following the procedure in <xref target="check_targets"/>.</t>
  <t>Verify that Targets metadata from the Director and Image repositories match. A Primary ECU MUST perform this check on metadata for all images listed in the Targets metadata file from the Director repository downloaded in step 6. A Secondary ECU MAY elect to perform this check only on the metadata for the image it will install. (That is, the image metadata from the Director that contains the ECU identifier of the current ECU.) To check that the metadata for an image matches, complete the following procedure:
  <list style="numbers">
      <t>Locate and download a Targets metadata file from the Image repository that contains an image with exactly the same filename listed in the Director metadata, following the procedure in <xref target="resolve_delegations"/>.</t>
      <t>Check that the Targets metadata from the Image repository matches the Targets metadata from the Director repository:
      <list style="numbers">
          <t>Check that the non-custom metadata (i.e., length and hashes) of the unencrypted or encrypted image are the same in both sets of metadata. Note: the Primary is responsible for validating encrypted images and associated metadata. The target ECU (Primary or Secondary) is responsible for validating the unencrypted image and associated metadata.</t>
          <t>Check that all MUST match custom metadata (e.g., hardware identifier and release counter) are the same in both sets of metadata.</t>
          <t>Check that the release counter in the previous Targets metadata file is less than or equal to the release counter in this Targets metadata file.</t>
        </list></t>
    </list></t>
</list></t>

<t>If any step fails, the ECU MUST return an error code indicating the failure. If a check for a specific type of security attack fails (i.e., rollback, freeze, arbitrary software, etc.), the ECU SHOULD return an error code that indicates the type of attack.</t>

</section>
<section anchor="check_root" title="How to check Root metadata">

<t>To properly check Root metadata, an ECU SHOULD:</t>

<t><list style="numbers">
  <t>Load the previous Root metadata file.</t>
  <t>Update to the latest Root metadata file.
  <list style="numbers">
      <t>Let N denote the version number of the latest Root metadata file (which at first could be the same as the previous Root metadata file).</t>
      <t>Try downloading a new version N+1 of the Root metadata file, up to some X number of bytes. The value for X is set by the implementer. For example, X may be tens of kilobytes. The filename used to download the Root metadata file is of the fixed form VERSION_NUMBER.FILENAME.EXT (e.g., 42.root.json). If this file is not available, the current Root metadata file is the latest; continue with step 3.</t>
      <t>Version N+1 of the Root metadata file MUST have been signed by the following: (1) a threshold of unique keys specified in the latest Root metadata file (version N), and (2) a threshold of unique keys specified in the new Root metadata file being validated (version N+1). If version N+1 is not signed as required, discard it, abort the update cycle, and report the signature failure. On the next update cycle, begin at version N of the Root metadata file. (Checks for an arbitrary software attack.)</t>
      <t>The version number of the latest Root metadata file (version N) must be less than or equal to the version number of the new Root metadata file (version N+1). Effectively, this means checking that the version number signed in the new Root metadata file is indeed N+1. If the version of the new Root metadata file is less than the latest metadata file, discard it, abort the update cycle, and report the rollback attack. On the next update cycle, begin at step 1 and version N of the Root metadata file. (Checks for a rollback attack.)</t>
      <t>Set the latest Root metadata file to the new Root metadata file.</t>
      <t>Repeat steps 2.1 to 2.6.</t>
    </list></t>
  <t>Check that the current (or latest securely attested) time is lower than the expiration timestamp in the latest Root metadata file. (Checks for a freeze attack.)</t>
  <t>If the Timestamp and/or Snapshot keys have been rotated, delete the previous Timestamp and Snapshot metadata files. (Checks for recovery from fast-forward attacks <xref target="MERCURY"/>.)</t>
</list></t>

</section>
<section anchor="check_timestamp" title="How to check Timestamp metadata">

<t>To properly check Timestamp metadata, an ECU SHOULD:</t>

<t><list style="numbers">
  <t>Download up to Y number of bytes. The value for Y is set by the implementer. For example, Y may be tens of kilobytes. The filename used to download the Timestamp metadata file is of the fixed form FILENAME.EXT (e.g., timestamp.json).</t>
  <t>Check that it has been signed by the threshold of unique keys specified in the latest Root metadata file. If the new Timestamp metadata file is not properly signed, discard it, abort the update cycle, and report the signature failure. (Checks for an arbitrary software attack.)</t>
  <t>Check that the version number of the previous Timestamp metadata file, if any, is less than or equal to the version number of this Timestamp metadata file. If the new Timestamp metadata file is older than the trusted Timestamp metadata file, discard it, abort the update cycle, and report the potential rollback attack. (Checks for a rollback attack.)</t>
  <t>Check that the current (or latest securely attested) time is lower than the expiration timestamp in this Timestamp metadata file. If the new Timestamp metadata file has expired, discard it, abort the update cycle, and report the potential freeze attack. (Checks for a freeze attack.)</t>
</list></t>

</section>
<section anchor="check_snapshot" title="How to check Snapshot metadata">

<t>To properly check Snapshot metadata, an ECU SHOULD:</t>

<t><list style="numbers">
  <t>Download up to the number of bytes specified in the Timestamp metadata file, constructing the metadata filename as defined in <xref target="metadata_filename_rules"/>.</t>
  <t>The hashes and version number of the new Snapshot metadata file MUST match the hashes and version number listed in the Timestamp metadata. If the hashes and version number do not match, discard the new Snapshot metadata, abort the update cycle, and report the failure. (Checks for a mix-and-match attack.)</t>
  <t>Check that it has been signed by the threshold of unique keys specified in the latest Root metadata file. If the new Snapshot metadata file is not signed as required, discard it, abort the update cycle, and report the signature failure. (Checks for an arbitrary software attack.)</t>
  <t>Check that the version number of the previous Snapshot metadata file, if any, is less than or equal to the version number of this Snapshot metadata file. If this Snapshot metadata file is older than the previous Snapshot metadata file, discard it, abort the update cycle, and report the potential rollback attack. (Checks for a rollback attack.)</t>
  <t>Check that the version number listed by the previous Snapshot metadata file for each Targets metadata file is less than or equal to its version number in this Snapshot metadata file. If this condition is not met, discard the new Snapshot metadata file, abort the update cycle, and report the failure. (Checks for a rollback attack.)</t>
  <t>Check that each Targets metadata filename listed in the previous Snapshot metadata file is also listed in this Snapshot metadata file. If this condition is not met, discard the new Snapshot metadata file, abort the update cycle, and report the failure. (Checks for a rollback attack.)</t>
  <t>Check that the current (or latest securely attested) time is lower than the expiration timestamp in this Snapshot metadata file. If the new Snapshot metadata file is expired, discard it, abort the update cycle, and report the potential freeze attack. (Checks for a freeze attack.)</t>
</list></t>

</section>
<section anchor="check_targets" title="How to check Targets metadata">

<t>To properly check Targets metadata, an ECU SHOULD:</t>

<t><list style="numbers">
  <t>Download up to Z number of bytes, constructing the metadata filename as defined in <xref target="metadata_filename_rules"/>. The value for Z is set by the implementer. For example, Z may be tens of kilobytes.</t>
  <t>The version number of the new Targets metadata file MUST match the version number listed in the latest Snapshot metadata. If the version number does not match, discard it, abort the update cycle, and report the failure. (Checks for a mix-and-match attack.) This step MAY be skipped when checking Targets metadata on a partial verification ECU, as these ECUs might not have Snapshot metadata.</t>
  <t>Check that the Targets metadata has been signed by the threshold of unique keys specified in the relevant metadata file. (Checks for an arbitrary software attack.):
  <list style="numbers">
      <t>If checking top-level Targets metadata, the threshold of keys is specified in the Root metadata.</t>
      <t>If checking delegated Targets metadata, the threshold of keys is specified in the Targets metadata file that delegated authority to this role.</t>
    </list></t>
  <t>Check that the version number of the previous Targets metadata file, if any, is less than or equal to the version number of this Targets metadata file. (Checks for a rollback attack.)</t>
  <t>Check that the current (or latest securely attested) time is lower than the expiration timestamp in this Targets metadata file. (Checks for a freeze attack.)</t>
  <t>If checking Targets metadata from the Director repository, verify that there are no delegations.</t>
  <t>If checking Targets metadata from the Director repository, check that no ECU identifier is represented more than once.</t>
  <t>If checking Targets metadata from the Director repository, and the ECU performing the verification is the Primary ECU, check that all listed ECU identifiers correspond to ECUs that are actually present in the vehicle.</t>
</list></t>

</section>
<section anchor="resolve_delegations" title="How to resolve delegations">

<t>To properly check Targets metadata for an image, an ECU MUST locate the metadata file(s) for the role (or roles) that have the authority to sign the image. This metadata might be located in the top-level Targets metadata, but it may also be delegated to another role or to multiple roles. Therefore, all delegations MUST be resolved using the following recursive procedure, beginning with the top-level Targets metadata file.</t>

<t><list style="numbers">
  <t>Download and check the current metadata file, following the procedure in <xref target="check_targets"/>. If the file cannot be loaded, or if any verification step fails, abort the delegation resolution, and indicate that image metadata cannot be found because of a missing or invalid role.</t>
  <t>If the current metadata file contains signed metadata about the image, end the delegation resolution and return the metadata to be checked.</t>
  <t>If the current metadata file was reached via a terminating delegation and does not contain signed metadata about the image, abort the delegation resolution for this image and return an error indicating that image metadata could not be found.</t>
  <t>Search the list of delegations, in listed order. For each delegation:
  <list style="numbers">
      <t>Check if the delegation applies to the image being processed. For the delegation to apply, it MUST include the hardware identifier of the target, and the target name MUST match one of the delegation’s image paths. If either of these tests fail, move on to the next delegation in the list.</t>
      <t>If the delegation is a multi-role delegation, follow the procedure described in <xref target="multirole_delegations"/>. If the multi-role delegation is terminating and no valid image metadata is found, abort the delegation resolution and return an error indicating that image metadata could not be found.</t>
      <t>If the delegation is a normal delegation, perform delegation resolution, starting at step 1. Note that this may recurse an arbitrary number of levels deep. If a delegation that applies to the image is found but no image metadata is found in the delegated roles or any of its sub-delegations, simply continue on with the next delegation in the list. The search is only completed or aborted if image metadata or a terminating delegation that applies to the image is found.</t>
    </list></t>
  <t>If the end of the list of delegations in the top-level metadata is reached without finding valid image metadata, return an error indicating that image metadata could not be found.</t>
</list></t>

</section>
<section anchor="multirole_delegations" title="Multi-role delegations">

<t>It is possible to delegate signing authority to multiple delegated roles as described in <xref target="TAP-3"/>. Each multi-role delegation effectively contains a list of ordinary delegations, plus a threshold of those roles that must be in agreement about the non-custom metadata for the image. All multi-role delegations MUST be resolved using the following procedure. Note that there may be sub-delegations inside multi-role delegations.</t>

<t><list style="numbers">
  <t>For each of the roles in the delegation, find and load the image metadata following the procedure in <xref target="resolve_delegations"/>.</t>
  <t>Inspect the non-custom part of the metadata loaded in step 1:
  <list style="numbers">
      <t>Locate all sets of roles that have agreeing (i.e., identical) non-custom metadata and “MUST match” custom metadata. Discard any set of roles with a size smaller than the threshold of roles that must be in agreement for this delegation.</t>
      <t>Check for a conflict. A conflict exists if there is more than one agreeing set of roles, yet each set has different metadata. If a conflict is found, choose and return the metadata from the set of roles which includes the earliest role in the multi-delegation list.</t>
      <t>If there is no conflict, check if there is any single set of roles with matching non-custom metadata. If there is, choose and return the metadata from this set.</t>
      <t>If no agreeing set can be found that meets the agreement threshold, return an error indicating that image metadata could not be found.</t>
    </list></t>
</list></t>

</section>
</section>
</section>
</section>


  </middle>

  <back>

    <references title='Normative References'>





<reference  anchor="RFC2119" target='https://www.rfc-editor.org/info/rfc2119'>
<front>
<title>Key words for use in RFCs to Indicate Requirement Levels</title>
<author initials='S.' surname='Bradner' fullname='S. Bradner'><organization /></author>
<date year='1997' month='March' />
<abstract><t>In many standards track documents several words are used to signify the requirements in the specification.  These words are often capitalized. This document defines these words as they should be interpreted in IETF documents.  This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t></abstract>
</front>
<seriesInfo name='BCP' value='14'/>
<seriesInfo name='RFC' value='2119'/>
<seriesInfo name='DOI' value='10.17487/RFC2119'/>
</reference>



<reference  anchor="RFC3647" target='https://www.rfc-editor.org/info/rfc3647'>
<front>
<title>Internet X.509 Public Key Infrastructure Certificate Policy and Certification Practices Framework</title>
<author initials='S.' surname='Chokhani' fullname='S. Chokhani'><organization /></author>
<author initials='W.' surname='Ford' fullname='W. Ford'><organization /></author>
<author initials='R.' surname='Sabett' fullname='R. Sabett'><organization /></author>
<author initials='C.' surname='Merrill' fullname='C. Merrill'><organization /></author>
<author initials='S.' surname='Wu' fullname='S. Wu'><organization /></author>
<date year='2003' month='November' />
<abstract><t>This document presents a framework to assist the writers of certificate policies or certification practice statements for participants within public key infrastructures, such as certification authorities, policy authorities, and communities of interest that wish to rely on certificates.  In particular, the framework provides a comprehensive list of topics that potentially (at the writer's discretion) need to be covered in a certificate policy or a certification practice statement.  This document supersedes RFC 2527.</t></abstract>
</front>
<seriesInfo name='RFC' value='3647'/>
<seriesInfo name='DOI' value='10.17487/RFC3647'/>
</reference>



<reference  anchor="RFC5198" target='https://www.rfc-editor.org/info/rfc5198'>
<front>
<title>Unicode Format for Network Interchange</title>
<author initials='J.' surname='Klensin' fullname='J. Klensin'><organization /></author>
<author initials='M.' surname='Padlipsky' fullname='M. Padlipsky'><organization /></author>
<date year='2008' month='March' />
<abstract><t>The Internet today is in need of a standardized form for the transmission of internationalized &quot;text&quot; information, paralleling the specifications for the use of ASCII that date from the early days of the ARPANET.  This document specifies that format, using UTF-8 with normalization and specific line-ending sequences.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='5198'/>
<seriesInfo name='DOI' value='10.17487/RFC5198'/>
</reference>


<reference anchor="NFC" target="https://www.unicode.org/reports/tr15/">
  <front>
    <title>Unicode Standard Annex #15: Unicode Normalization Forms</title>
    <author initials="M." surname="Davis">
      <organization></organization>
    </author>
    <author initials="M." surname="Duerst">
      <organization></organization>
    </author>
    <date year="2018" month="October"/>
  </front>
</reference>
<reference anchor="TAP-3" target="https://github.com/theupdateframework/taps/blob/d0818e580c322815a473520f2e8cc5f5eb8df499/tap3.md">
  <front>
    <title>The Update Framework TAP 3 - Multi-role delegations</title>
    <author initials="T.K." surname="Kuppusamy">
      <organization></organization>
    </author>
    <author initials="S." surname="Awwad">
      <organization></organization>
    </author>
    <author initials="E." surname="Cordell">
      <organization></organization>
    </author>
    <author initials="V." surname="Diaz">
      <organization></organization>
    </author>
    <author initials="J." surname="Moshenko">
      <organization></organization>
    </author>
    <author initials="J." surname="Cappos">
      <organization></organization>
    </author>
    <date year="2018" month="January" day="18"/>
  </front>
</reference>
<reference anchor="TAP-4" target="https://github.com/theupdateframework/taps/blob/2cb67d913ec19424d1e354b38f862886fbfd4105/tap4.md">
  <front>
    <title>The Update Framework TAP 4 - Multiple repository consensus on entrusted targets</title>
    <author initials="T.K." surname="Kuppusamy">
      <organization></organization>
    </author>
    <author initials="S." surname="Awwad">
      <organization></organization>
    </author>
    <author initials="E." surname="Cordell">
      <organization></organization>
    </author>
    <author initials="V." surname="Diaz">
      <organization></organization>
    </author>
    <author initials="J." surname="Moshenko">
      <organization></organization>
    </author>
    <author initials="J." surname="Cappos">
      <organization></organization>
    </author>
    <date year="2017" month="December" day="15"/>
  </front>
</reference>
<reference anchor="TUF-spec" target="https://github.com/theupdateframework/specification/blob/2b4e18472fe25d5b57f36f6fa50104967c8faeaa/tuf-spec.md">
  <front>
    <title>The Update Framework Specification</title>
    <author initials="J." surname="Samuel">
      <organization></organization>
    </author>
    <author initials="N." surname="Mathewson">
      <organization></organization>
    </author>
    <author initials="G." surname="Condra">
      <organization></organization>
    </author>
    <author initials="V." surname="Diaz">
      <organization></organization>
    </author>
    <author initials="T.K." surname="Kuppusamy">
      <organization></organization>
    </author>
    <author initials="S." surname="Awwad">
      <organization></organization>
    </author>
    <author initials="S." surname="Tobias">
      <organization></organization>
    </author>
    <author initials="J." surname="Wright">
      <organization></organization>
    </author>
    <author initials="H." surname="Mehnert">
      <organization></organization>
    </author>
    <author initials="E." surname="Tryzelaar">
      <organization></organization>
    </author>
    <author initials="J." surname="Cappos">
      <organization></organization>
    </author>
    <author initials="R." surname="Dingledine">
      <organization></organization>
    </author>
    <date year="2018" month="September" day="19"/>
  </front>
</reference>


    </references>

    <references title='Informative References'>

<reference anchor="MERCURY" target="https://www.usenix.org/system/files/conference/atc17/atc17-kuppusamy.pdf">
  <front>
    <title>Mercury: Bandwidth-Effective Prevention of Rollback Attacks Against Community Repositories</title>
    <author initials="T.K." surname="Kuppusamy">
      <organization></organization>
    </author>
    <author initials="V." surname="Diaz">
      <organization></organization>
    </author>
    <author initials="J." surname="Cappos">
      <organization></organization>
    </author>
    <date year="2017" month="July" day="12"/>
  </front>
  <seriesInfo name="ISBN" value="978-1-931971-38-6"/>
</reference>
<reference anchor="UPTANEESCAR" target="https://ssl.engineering.nyu.edu/papers/kuppusamy_escar_16.pdf">
  <front>
    <title>Securing Software Updates for Automobiles</title>
    <author initials="T.K." surname="Kuppusamy">
      <organization></organization>
    </author>
    <author initials="A." surname="Brown">
      <organization></organization>
    </author>
    <author initials="S." surname="Awwad">
      <organization></organization>
    </author>
    <author initials="D." surname="McCoy">
      <organization></organization>
    </author>
    <author initials="R." surname="Bielawski">
      <organization></organization>
    </author>
    <author initials="C." surname="Mott">
      <organization></organization>
    </author>
    <author initials="S." surname="Lauzon">
      <organization></organization>
    </author>
    <author initials="A." surname="Weimerskirch">
      <organization></organization>
    </author>
    <author initials="J." surname="Cappos">
      <organization></organization>
    </author>
    <date year="2016" month="October" day="16"/>
  </front>
</reference>
<reference anchor="PEP-458" target="https://www.python.org/dev/peps/pep-0458/">
  <front>
    <title>PEP 458 -- Surviving a Compromise of PyPI</title>
    <author initials="T.K." surname="Kuppusamy">
      <organization></organization>
    </author>
    <author initials="V." surname="Diaz">
      <organization></organization>
    </author>
    <author initials="D." surname="Stufft">
      <organization></organization>
    </author>
    <author initials="J." surname="Cappos">
      <organization></organization>
    </author>
    <date year="2013" month="September" day="27"/>
  </front>
</reference>
<reference anchor="DEPLOY" target="https://uptane.github.io/deployment-considerations/index.html">
  <front>
    <title>Uptane Deployment Best Practices</title>
    <author initials="." surname="Members of the Uptane Community">
      <organization></organization>
    </author>
    <date year="n.d."/>
  </front>
</reference>
<reference anchor="USATODAY" target="https://www.usatoday.com/story/tech/columnist/2016/06/28/your-average-car-lot-more-code-driven-than-you-think/86437052/">
  <front>
    <title>Your average car is a lot more code-driven than you think</title>
    <author initials="B." surname="O'Donnell">
      <organization></organization>
    </author>
    <date year="2016" month="June" day="28"/>
  </front>
</reference>
<reference anchor="CR-OTA" target="https://www.consumerreports.org/automotive-technology/automakers-embrace-over-the-air-updates-can-we-trust-digital-car-repair/">
  <front>
    <title>Automakers Embrace Over-the-Air Updates, but Can We Trust Digital Car Repair?</title>
    <author initials="K." surname="Barry">
      <organization></organization>
    </author>
    <date year="2018" month="April" day="20"/>
  </front>
</reference>
<reference anchor="IN-TOTO" target="https://in-toto.io/">
  <front>
    <title>in-toto: A framework to secure the integrity of software supply chains</title>
    <author >
      <organization></organization>
    </author>
    <date year="2018" month="October" day="29"/>
  </front>
</reference>


    </references>



  </back>

<!-- ##markdown-source:
H4sIAClvP2EAA+192XbbVpbou74CK36IpCYpSx7iOA/3yrZcUbWna8lJpXv1
coEEKKFMAiwAlMx4+d/vns8AgJLtpPr2WjcPsQ0CZ9hnnz0P4/F4py3aRf44
ebdq0zJPzuD/WVpnybyqk2d5U1yUCTxJTperRb7MyzZti6rcSafTOr+Cr96c
H7862cmqWZkuYZQ1jTJuZJRxRiPszNI2v6jqzeOkKOfVzk6xqh8nZfUsr4sr
GPAqb87rddMe3b37492jnbTO08fJ+etnr3euq/rDRV2tV/LvD/kGHmWPk9Oy
zesyb8fP6nTe7uzQjO/TRVXCKjZ5s7MqHif/2VazUdJUdVvn8wb+tlniX/5r
Zyddt5dV/XgnScawpOZx8jJfTvO6Sap50l7mCo2n1XK5Lot2Ay8mCW+x96eq
vkjL4ncCzuPkr1VRtgC9q3xRrRBoyfNqDQDBX5M3dfWPfNbCcl68eDoyuAMo
8ibZnR1U+MZ8kvwVAFKUydN0taqaPZolX6bFogPk5n9fVNXFIic4NZNZtaSX
G9h03j5OHsLe2ro6z2eX9HwGS2nxKN6dHdODOr+gVb/6jX+HPT1OntRV9WGx
KeWTDDZ+eHh093Bnp6zqJZ0ZQu9O8u98IkmWz5Pdl+/OzkfJ2c/HL16MkpfH
v42SvJ1NcPFvnz89Ojz8kb/52+TB3R+TN/9+mjSrfMa/3nt4/wf+9VXe4rEn
78oCJyZMhE2t0rooL3Bb8EfDHz04/PERf6Qvv8LVLeQkAOz1MnkKL7x6/vQx
baVN6wuEymXbrprHBwfX19eTNX87gUM8qPMVoEtz0NaHDw74C74f3+kMdkOO
yzL/mNw5fPB4y+zNdzSIwzf8T3FukjxLr4qm+3QNqNjSY0AamBwA/2h8eJd2
en78JrmXpC2c21WS3X10+Ch/AD/A4/G9/j1eFO3leoqIcQC4vV7hmPMakBnB
fNCmq+ZguqimBzLYo7uze0dHjw4fpPd/uPfg6O78KH80mz2YP8inj7L5/R9/
xE/uTZaZD55zujQ4cvJch5aljpOX60VbjOtqkQOaAKISeJphwJxP/n2S/Pt6
tVo36XIT/nY2SY6vr9MsfHoygQtZw+CL8PkvAMwi/T18+NdJ8rJqLvPyQ9X5
ga9bDPq7h+PDRwb9+wr9o9n04Q/ZjwL9+98GfRns8F4+O/zx/tH97DC/9+D+
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

-->

</rfc>


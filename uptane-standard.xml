<?xml version="1.0" encoding="UTF-8"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc2629 version 1.2.9 -->

<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
]>

<?rfc toc="yes"?>
<?rfc sortrefs="yes"?>
<?rfc symrefs="yes"?>

<rfc ipr="noDerivativesTrust200902" docName="uptane-standard-design" category="info">

  <front>
    <title abbrev="UPTANE">Uptane Standard for Design and Implementation</title>

    <author initials="." surname="Members of the Uptane Community" fullname="Uptane Community">
      <organization>Joint Development Foundation Projects, LLC, Uptane Series (c/o Prof. Justin Cappos)</organization>
      <address>
        <postal>
          <street>6 MetroTech</street>
          <city>Brooklyn</city>
          <region>NY</region>
          <code>11201</code>
          <country>USA</country>
        </postal>
        <email>uptane-standards@googlegroups.com</email>
      </address>
    </author>

    <date year="2021" month="December" day="21"/>

    <area>TODO</area>
    <workgroup>TODO</workgroup>
    <keyword>Internet-Draft</keyword>

    <abstract>


<t>This document describes a framework for securing ground vehicle software update systems.</t>



    </abstract>


  </front>

  <middle>


<section anchor="introduction" title="Introduction">

<t>Uptane is a secure software update framework for ground vehicles. This document describes procedures to enable programmers for OEMs and suppliers to securely design and implement this framework in a manner that better protects connected units on ground vehicles. Integrating Uptane as outlined in the sections that follow can reduce the ability of attackers to compromise critical systems. It also assures a faster and easier recovery process should a compromise occur.</t>

<t>These instructions specify the components necessary for a compliant implementation. Individual implementers can make their own technological choices within those requirements. This flexibility makes Uptane adaptable to the many customized update solutions used by manufacturers. If implementers wish to have compatible formats, they may use POUFs. POUFs contain a description of implementation choices as well as data binding formats. An implementer who adopts a POUF, as well as the Uptane Standard, will be able to interoperate with other implementations using that POUF.</t>

</section>
<section anchor="terminology" title="Terminology">

<t>With the exception of the Conformance terminology and Uptane role terminology presented on this page, please refer to the <eref target="https://uptane.github.io/deployment-considerations/glossary.html">glossary</eref> in the Deployment Best Practices volume for definitions of all terms used in this Standard.</t>

<section anchor="conformance-terminology" title="Conformance terminology">

<t>The keywords MUST, MUST NOT, REQUIRED, SHALL, SHALL NOT, SHOULD, SHOULD NOT, RECOMMENDED, MAY, and OPTIONAL in this document are to be interpreted as described in <xref target="RFC2119"/>. Given the importance of interpreting these terms correctly, we present these definitions here. Note that when referring to actions in the Standard that mandate compliance, the word SHALL will be used, rather than the word MUST. Hence, MUST and MUST NOT are not included in these definitions.</t>

<t><spanx style="emph">SHALL</spanx> This word or the term “REQUIRED” mean that the definition is an absolute requirement of the specification.
<spanx style="emph">SHALL NOT</spanx> This phrase means that the definition is an absolute prohibition of the specification.
<spanx style="emph">SHOULD</spanx> This word or the adjective “RECOMMENDED” mean that, in particular circumstances, there may exist valid reasons to ignore a particular item, but the full implications must be understood and carefully weighed before choosing a different course.
<spanx style="emph">SHOULD NOT</spanx> This phrase or the phrase “NOT RECOMMENDED” mean that there may exist valid reasons in particular circumstances when the particular behavior is acceptable or even useful, but the full implications should be understood and the case carefully weighed before implementing any behavior described with this label.
<spanx style="emph">MAY</spanx> This word or the adjective “OPTIONAL,” mean that an item is truly optional.</t>

<t>In order to be considered Uptane-compliant, an implementation SHALL follow all of these rules as specified in the document.</t>

<t>Note that, following the recommendations of <xref target="RFC2119"/> imperatives of the type defined here “must be used with care and sparingly.  In particular, they MUST only be used where it is actually required for interoperation or to limit behavior which has potential for causing harm (e.g., limiting retransmisssions)</t>

</section>
<section anchor="uptane-role-terminology" title="Uptane role terminology">

<t>These terms are defined in greater detail in <xref target="roles"/>.</t>

<t><spanx style="emph">Delegation</spanx>: A process by which the responsibility of signing metadata about images is assigned to another party.
<spanx style="emph">Role</spanx>: A party (human or machine) responsible for signing a certain type of metadata. The role controls keys and is responsible for signing metadata entrusted to it with these keys. The roles mechanism of Uptane allows the system to distribute signing responsibilities so that the compromise of one key does not necessarily impact the security of the entire system.</t>

<t><list style="symbols">
  <t><spanx style="emph">Root role</spanx>: Signs metadata that distributes and revokes public keys used to verify the Root, Timestamp, Snapshot, and Targets role metadata.</t>
  <t><spanx style="emph">Snapshot role</spanx>: Signs metadata that indicates which images the repository has released at the same time.</t>
  <t><spanx style="emph">Targets role</spanx>: Signs metadata used to verify the image, such as cryptographic hashes and file size.</t>
  <t><spanx style="emph">Timestamp role</spanx>: Signs metadata that indicates if there are any new metadata or images on the repository.</t>
</list></t>

</section>
<section anchor="acronyms-and-abbreviations" title="Acronyms and abbreviations">

<t><spanx style="emph">CDN</spanx>: Content Delivery Network</t>

<t><spanx style="emph">ECUs</spanx>: Electronic Control Units, the computing units on a vehicle</t>

<t><spanx style="emph">LIN Bus</spanx>: Local Interconnect Bus</t>

<t><spanx style="emph">OBD</spanx>: On-board diagnostics</t>

<t><spanx style="emph">SOTA</spanx>: Software Updates Over-the-Air</t>

<t><spanx style="emph">UDS</spanx>: Unified Diagnostic Services</t>

<t><spanx style="emph">VIN</spanx>: Vehicle Identification Number</t>

</section>
</section>
<section anchor="rationale-for-and-scope-of-the-uptane-standard" title="Rationale for and scope of the Uptane Standard">

<t>This Standard document provides the essential components for the secure design, implementation, and deployment of Uptane by OEMs and suppliers. These guidelines contribute to compromise resilience, or the ability to minimize the extent of the threat posed by any given attack.</t>

<t>However, this specification is intended as an implementation guide, and not as a detailed technical argument about the security properties that Uptane provides.  Readers interested in such documentation should refer to published papers that cover this topic.  <xref target="UPTANEESCAR"/></t>

<section anchor="why-uptane-requires-a-standards-document" title="Why Uptane requires a standards document">

<t>A standards document that can guide the safe design, integration, and deployment of Uptane in vehicles is needed at this time because:</t>

<t><list style="symbols">
  <t>The number of connected units on the average vehicle continues to grow, with mainstream cars now containing up to 100 million lines of code. <xref target="USATODAY"/></t>
  <t>The expanded use of software over-the-air strategies creates new attack surfaces for malicious parties. <xref target="CR-OTA"/></t>
  <t>Legacy update strategies, such as SSL/TLS or GPG/RSA, are not feasible for use on vehicle ECUs because they force manufacturers to chose between enhanced security and customizability.</t>
  <t>Conventional strategies are also complicated by the differing resources of the ECUs, which can vary greatly in memory, storage space, and Internet connectivity.</t>
  <t>The design of Uptane makes it possible to offer improved design flexibility without sacrificing security.</t>
  <t>This added design flexibility, however, could be a liability if the framework is implemented incorrectly.</t>
  <t>Standardization of crucial steps in the design, implementation, and use of Uptane can assure that customizability does not impact security or functionality.</t>
</list></t>

</section>
<section anchor="scope-of-standard-coverage" title="Scope of Standard coverage">

<t>This document sets guidelines for implementing Uptane in most systems capable of updating software on connected units in ground vehicles, including passenger vehicles, light-duty trucks, heavy-duty trucks, and motorcycles. Uptane could potentially also be applied to other ground vehicles, such as automated shuttles, recreational vehicles, and military ground vehicles. Uptane could even be applied to domains such as IoT devices, medical devices, and autonomous aerial vehicles. In this section, we define the scope of that applicability by providing sample use cases and possible exceptions, aspects of software update security that are not applicable to Uptane, and the design requirements governing the preparation of these standards.</t>

<section anchor="assumptions" title="Assumptions">

<t>We assume the following system preconditions for Uptane:</t>

<t><list style="symbols">
  <t>Vehicles have the ability to establish connectivity to required backend services. For example, this could be done through cellular, Wi-Fi, or hard-wired mechanisms.</t>
  <t>ECUs are either directly connected to the communication channel, or are indirectly connected via some sort of network gateway.</t>
  <t>ECUs are programmable and provide sufficient performance to be updated.</t>
  <t>ECUs must be able to perform public key cryptography operations and calculate hashes of images and metadata files.</t>
  <t>There are state-of-the-art secure servers in place, such as the Director and Image repository servers.</t>
</list></t>

<t>It is important that any bugs detected in Uptane implementations be patched promptly. Failure to do so could interfere with the effectiveness of Uptane’s operations.</t>

</section>
<section anchor="use-cases" title="Use cases">

<t>The following use cases provide a number of scenarios illustrating the manner in which software updates could be accomplished using Uptane.</t>

<section anchor="oems-initializing-uptane-at-the-factory-using-sota" title="OEMs initializing Uptane at the factory using SOTA">

<t>An OEM plans to install Uptane on new vehicles. This entails the following components: code to perform full and partial verification, the latest copy of the relevant metadata, the public keys, and an accurate attestation of the latest time. The OEM then either requires its tier-1 suppliers to provide these materials to the suppliers’ assembly lines or can choose to add the materials later at the OEM’s assembly lines. The OEM’s in-vehicle implementation is Uptane-compliant if:</t>

<t><list style="numbers">
  <t>all Primaries perform full verification;</t>
  <t>all Secondaries that are updated via OTA at least perform partial verification; and</t>
  <t>all other ECUs that do not perform any type of verification cannot be updated via OTA.</t>
</list></t>

</section>
<section anchor="updating-one-ecu-with-a-complete-image" title="Updating one ECU with a complete image">

<t>A tier-1 supplier completes work on a revised image for an electronic brake control module. This module will control the brakes on all models of an SUV produced by the OEM mentioned above. Assuming supplier delegation is supported by the OEM for this ECU, each tier-1 supplier digitally signs the image, then delivers the signature, all of its metadata, including delegations, and associated images to the OEM. The OEM adds these metadata and images to its Image repository, along with information about any dependencies and conflicts between this image and those for other ECUs used in the OEM’s vehicles. The OEM also updates the inventory database, so that the Director repository can instruct the ECU on how to install these updated images.</t>

</section>
<section anchor="updating-individual-ecus-on-demand" title="Updating individual ECUs on demand">

<t>An OEM has issued a recall to address a problem with a keyless entry device that has been locking people out of their cars. The OEM prepares an updated flash image in the manner described above. The OEM then ships USB flash drives to vehicle owners and dealerships that allow those parties to update the firmware of their vehicles.</t>

</section>
<section anchor="update-one-ecu-with-multiple-deltas" title="Update one ECU with multiple deltas">

<t>The OEM wants to use delta updates to save over-the-air bytes. The delta images contain only the code and/or data that has changed from the previous image version. To do so, the OEM must first modify the Director repository, using the vehicle version manifest and dependency resolution to determine the differences between the previous and latest images. The OEM then adds the following to the custom Targets metadata used by the Director repository: (1) the algorithm used to apply a delta image, and (2) the Targets metadata about the delta image. The OEM will also check whether the delta images match the Targets metadata from the Director repository.</t>

</section>
</section>
</section>
<section anchor="exceptions" title="Exceptions">

<t>There are a number of factors that could impede the completion of the above scenarios:</t>

<t><list style="symbols">
  <t>ECUs may be lacking the necessary resources to function as designated. These insufficient resources could include limited CPU or RAM inadequate for performance of public key cryptography; a lack of sufficient storage to undo installation of bad software; or a location on a low-speed network (e.g., LIN).</t>
  <t>ECUs may reside on different network segments, and may not be able to directly reach each other, requiring a gateway to facilitate communication.</t>
  <t>A user may replace OEM-installed ECUs with aftermarket ECUs.</t>
  <t>A vehicle may be able to download only a limited amount of data via a cellular channel due to limits on a data plan.</t>
  <t>A system may lack sufficient power to download or install software updates.</t>
  <t>Vehicles may be offline for extended periods of time, thus missing required updates (e.g., key rotations).</t>
  <t>OEMs may be unwilling to implement costly security or hardware requirements.</t>
</list></t>

</section>
<section anchor="out-of-scope" title="Out of scope">

<t>The following topics will not be addressed in this document, as they represent threats outside the scope of Uptane:</t>

<t><list style="symbols">
  <t>Physical attacks, such as manual tampering with ECUs outside the vehicle.</t>
  <t>Compromise of the packaged software, such as malware embedded in a trusted package.</t>
  <t>Compromise of the supply chain (e.g., build system, version control system, packaging process). A number of strategies (e.g., git signing, TPMs, in-toto <xref target="IN-TOTO"/>)  already exist to address this problem. Therefore, there is no need to duplicate those techniques here.</t>
  <t>Problems associated with OBD or UDS programming of ECUs, such as authentication of communications between ECUs.</t>
  <t>Malicious mirrors of package repositories, which may substitute original packages with malicious packages with matching version numbers <xref target="MERCURY"/>.</t>
</list></t>

</section>
<section anchor="design-requirements" title="Design requirements">

<t>The design requirements for this document are governed by the following principal parameters:</t>

<t><list style="symbols">
  <t>to clearly mandate the design and implementation steps that are security critical and must be followed as is, while offering flexibility in the implementation of non-critical steps. In this manner, users can adapt to support different use models and deployment scenarios.</t>
  <t>to ensure that, if Uptane is implemented, the security practices mandated or suggested in this document do not interfere with the functionality of ECUs, vehicles, or the systems that maintain them.</t>
  <t>to delineate guidelines to ensure that, should any part of the SOTA mechanism of a vehicle be attacked, an attacker must compromise two or more modules to breach the SOTA mechanism.</t>
</list></t>

</section>
</section>
<section anchor="threat-model-and-attack-strategies" title="Threat model and attack strategies">

<t>The overarching goal of Uptane is to provide a system that is resilient in the face of various types of compromise. In this section, we describe the goals an attacker may have (<xref target="attacker_goals"/>) and the capabilities they may have or could develop (<xref target="capabilities"/>). We then describe and classify types of attacks on the system according to the attacker’s goals (<xref target="threats"/>).</t>

<section anchor="attacker_goals" title="Attacker goals">

<t>We assume that attackers may want to achieve one or more of the following goals, in increasing order of severity:</t>

<t><list style="symbols">
  <t>Read the contents of updates to discover confidential information, reverse-engineer firmware, or compare two firmware images to identify security fixes and hence determine the fixed security vulnerability.</t>
  <t>Deny installation of updates to prevent vehicles from fixing software problems.</t>
  <t>Cause one or more ECUs in the vehicle to fail, denying use of the vehicle or of certain functions.</t>
  <t>Control ECUs within the vehicle, and possibly the vehicle itself.</t>
</list></t>

</section>
<section anchor="capabilities" title="Attacker capabilities">

<t>Uptane is designed with resilience to compromise in mind. We assume that attackers may develop one or more of the following capabilities:</t>

<t><list style="symbols">
  <t>Intercept and modify network traffic (i.e., perform man-in-the-middle attacks). This capability may be developed in two domains:
  <list style="symbols">
      <t>Outside the vehicle, intercepting and modifying traffic between the vehicle and software repositories.</t>
      <t>Inside the vehicle, intercepting and modifying traffic on one or more vehicle buses (e.g., via an OBD port or using a compromised ECU as a vector).</t>
    </list></t>
  <t>Compromise and control either a Director repository or Image repository server, and any keys stored on that repository, but not both the Director and Image repositories.</t>
  <t>Compromise either a Primary ECU or a Secondary ECU, but not both in the same vehicle.</t>
</list></t>

</section>
<section anchor="threats" title="Description of threats">

<t>Uptane’s threat model includes the following types of attacks, organized according to the attacker goals listed in <xref target="attacker_goals"/>.</t>

<section anchor="read_updates" title="Read updates">

<t><list style="symbols">
  <t><spanx style="emph">Eavesdrop attack:</spanx> Read sensitive or confidential information from an update intended to be encrypted for a specific ECU. (Note: Not all implementations will have a need to protect information in this way.)</t>
</list></t>

</section>
<section anchor="deny_updates" title="Deny installation of updates">

<t>An attacker seeking to deny the installation of updates may attempt one or more of the following strategies:</t>

<t><list style="symbols">
  <t><spanx style="emph">Drop-request attack:</spanx> Block network traffic outside or inside the vehicle.</t>
  <t><spanx style="emph">Slow retrieval attack:</spanx> Slow down network traffic, in the extreme case sending barely enough packets to avoid a timeout. Similar to a drop-request attack, except that both the sender and receiver of the traffic still think network traffic is unimpeded.</t>
  <t><spanx style="emph">Freeze attack:</spanx> Continue to send a properly signed, but old, update bundle to the ECUs, even if newer updates exist.</t>
  <t><spanx style="emph">Partial bundle installation attack:</spanx> Install a valid (signed) update bundle, and then block selected updates within the bundle.</t>
  <t>Conduct a denial of service attack against the Uptane repositories or infrastructure.</t>
</list></t>

</section>
<section anchor="change_functionality" title="Interfere with ECU functionality">

<t>Attackers seeking to interfere with the functionality of vehicle ECUs in order to cause an operational failure or unexpected behavior may do so in one of the following ways:</t>

<t><list style="symbols">
  <t><spanx style="emph">Rollback attack:</spanx> Cause an ECU to install a previously valid software revision that is older than the currently installed version.</t>
  <t><spanx style="emph">Endless data attack:</spanx> Send a large amount of data to an ECU until it runs out of storage, possibly causing the ECU to fail to operate.</t>
  <t><spanx style="emph">Mix-and-match attack:</spanx> Install a malicious software bundle in which some of the updates do not interoperate properly. This may be accomplished even if all of the individual images being installed are valid, as long as valid versions exist that are mutually incompatible.</t>
</list></t>

</section>
<section anchor="control_ecu" title="Control an ECU or vehicle">

<t>Full control of a vehicle, or one or more ECUs within a vehicle, is the most severe threat.</t>

<t><list style="symbols">
  <t><spanx style="emph">Arbitrary software attack:</spanx> Cause an ECU to install and run arbitrary code of the attacker’s choice.</t>
</list></t>

</section>
</section>
</section>
<section anchor="design" title="Detailed design of Uptane">

<t>Uptane does not specify implementation details. Instead, this Standard describes the components necessary for a compliant implementation and leaves it up to individual implementers to make their own technological choices within those requirements.</t>

<t>At a high level, Uptane requires:</t>

<t><list style="symbols">
  <t>Two software repositories:
  <list style="symbols">
      <t>An Image repository containing binary images to install and signed metadata about those images.</t>
      <t>A Director repository connected to an inventory database that can sign metadata on demand for images in the Image repository.</t>
    </list></t>
  <t>Repository tools for generating Uptane-specific metadata about images.</t>
  <t>A public key infrastructure supporting the required metadata production and signing roles on each repository:
  <list style="symbols">
      <t>Root - The certificate authority for the Uptane ecosystem. Distributes public keys for verifying all the other roles’ metadata.</t>
      <t>Timestamp - Indicates whether there are new metadata or images.</t>
      <t>Snapshot - Indicates images released by the repository at a point in time via signing metadata about Targets metadata.</t>
      <t>Targets - Indicates metadata about images, such as hashes and file sizes.</t>
    </list></t>
  <t>A secure way for ECUs to know the time.</t>
  <t>An ECU capable of downloading images and associated metadata from the Uptane servers.</t>
  <t>An in-vehicle client on a Primary ECU capable of verifying the signatures on all update metadata and downloading updates on behalf of its associated Secondary ECUs. The Primary ECU MAY be the same ECU that communicates with the server.</t>
  <t>A client or library on each Secondary ECU capable of performing either full or partial verification of metadata.</t>
</list></t>

<section anchor="roles" title="Roles on repositories">

<t>A repository contains images and metadata. Each role has a particular type of metadata associated with it, as described in <xref target="meta_structures"/>.</t>

<section anchor="root_role" title="The Root role">

<t>A repository’s Root role SHALL be responsible for a Certificate Authority as defined in <xref target="RFC3647"/>.
A repository’s Root role SHALL produce and sign Root metadata as described in <xref target="root_meta"/>.
A repository’s Root role SHALL sign the public keys used to verify the metadata produced by the Timestamp, Snapshot, and Targets roles.
A repository’s Root role SHALL revoke keys for the other roles if they are compromised.</t>

</section>
<section anchor="targets_role" title="The Targets role">

<t>A repository’s Targets role SHALL produce and sign metadata about images and delegations as described in <xref target="targets_meta"/>.</t>

<section anchor="targets_role_delegations" title="Delegations">

<t>The Targets role on the Image repository MAY delegate the responsibility of signing metadata to other, custom-defined roles referred to as delegated targets. If it does, it MUST do so as specified in <xref target="delegations_meta"/>.</t>

<t>As responsibility for signing images or a subset of images MAY be delegated to more than one role, it is possible that two different roles will be trusted to sign a particular image. For this reason, delegations MUST be prioritized.</t>

<t>A particular delegation for a subset of images MAY be designated as <spanx style="strong">terminating</spanx>. For terminating delegations, the client SHALL NOT search any further if it does not find validly signed metadata about those images. Delegations SHOULD NOT be terminating by default; terminating delegations SHOULD only be used when there is a compelling technical reason to do so.</t>

<t>A delegation for a subset of images MAY be a multi-role delegation <xref target="TAP-3"/>. A multi-role delegation indicates that multiple roles are needed to sign a particular image and each of the delegatee roles MUST sign the same metadata.</t>

<t>Delegations only apply to the Image repository. The Targets role on the Director repository MUST NOT delegate metadata signing responsibility.</t>

</section>
</section>
<section anchor="snapshot_role" title="The Snapshot role">

<t>A repository’s Snapshot role SHALL produce and sign metadata about all Targets metadata the repository releases, including the current version number of the top-level Targets metadata, and the version numbers of all delegated Targets metadata, as described in <xref target="snapshot_meta"/>.</t>

</section>
<section anchor="timestamp_role" title="The Timestamp role">

<t>A repository’s Timestamp role SHALL produce and sign metadata indicating whether there are new metadata or images on the repository. It MUST do so by signing the metadata about the Snapshot metadata file.</t>

</section>
</section>
<section anchor="meta_structures" title="Metadata structures">

<t>Uptane’s security guarantees all rely on properly created metadata that follows a designated structure. The Uptane Standard <spanx style="strong">does not</spanx> mandate any particular format or encoding for the metadata as a whole. ASN.1 (with any encoding scheme like BER, DER, XER, etc.), JSON, XML, or any other encoding format that is capable of providing the required structure MAY be used.</t>

<t>However, string comparison is required as part of metadata verification. To ensure an accurate basis for comparing strings, all strings MUST be encoded in the Unicode Format for Network Interchange as defined in <xref target="RFC5198"/>, including normalization into Unicode Normalization Form C (<xref target="NFC"/>).</t>

<t>In the <spanx style="emph">Deployment Best Practices</spanx> (<xref target="DEPLOY"/>), Joint Development Foundation Projects, LLC, Uptane Series provides some examples of compliant metadata structures in ASN.1 and JSON.</t>

<section anchor="common_metadata" title="Common metadata structures">

<t>Every public key MUST be represented using a public key identifier.  A public key identifier is EITHER all of the following:</t>

<t><list style="symbols">
  <t>The value of the public key itself (which MAY be, for example, formatted as a PEM string)</t>
  <t>The public key cryptographic algorithm used by the key (such as RSA or ECDSA)</t>
  <t>The particular scheme used to verify the signature (such as <spanx style="verb">rsassa-pss-sha256</spanx> or <spanx style="verb">ecdsa-sha2-nistp256</spanx>)</t>
</list></t>

<t>OR a secure hash over at least the above components (such as the keyid mechanism in TUF).</t>

<t>All four Uptane roles (Root, Targets, Snapshot, and Timestamp) share a common structure. They SHALL contain the following two attributes:</t>

<t><list style="symbols">
  <t>A payload of metadata to be signed</t>
  <t>An attribute containing the signature(s) of the payload, where each entry specifies:
  <list style="symbols">
      <t>The public key identifier of the key being used to sign the payload</t>
      <t>A signature with this key over the payload</t>
    </list></t>
</list></t>

<t>The payload differs depending on the role. However, the payload for all roles shares a common structure. It SHALL contain the following four attributes:</t>

<t><list style="symbols">
  <t>An indicator of the type of role (Root, Targets, Snapshot, or Timestamp)</t>
  <t>An expiration date and time</t>
  <t>An integer version number, which SHOULD be incremented each time the metadata file is updated</t>
  <t>The role-specific metadata for the role indicated</t>
</list></t>

<t>The following sections describe the role-specific metadata. All roles SHALL follow the common structures described here.</t>

</section>
<section anchor="root_meta" title="Root metadata">

<t>A repository’s Root metadata distributes the public keys of the top-level Root, Targets, Snapshot, and Timestamp roles, as well as revocations of those keys. It SHALL contain two attributes:</t>

<t><list style="symbols">
  <t>A representation of the public keys for all four roles. Each key SHALL have a unique public key identifier.</t>
  <t>An attribute mapping each role to (1) its public key(s), and (2) the threshold of signatures required for that role.</t>
</list></t>

</section>
<section anchor="targets_meta" title="Targets metadata">

<t>The Targets metadata on a repository contains all of the information about images to be installed on ECUs. This includes filenames, hashes, and file sizes. It MAY also include other useful information, such as what types of hardware are compatible with a particular image.</t>

<t>Targets metadata can also contain metadata about delegations, allowing one Targets role to delegate its authority to another. This means that an individual Targets metadata file might contain only metadata about delegations, only metadata about images, or some combination of the two. The details of how ECUs traverse the delegation tree to find valid metadata about images is specified in <xref target="resolve_delegations"/>.</t>

<section anchor="targets_images_meta" title="Metadata about images">

<t>To be available to install on clients, all images on the repository MUST have their metadata listed in a Targets role.  Each Targets role MAY provide a list of some images on the repository.  This list MUST provide, at a minimum, the following information about each image:</t>

<t><list style="symbols">
  <t>The image filename</t>
  <t>The size of the image in bytes</t>
  <t>One or more hashes of the image file, along with the hashing function used</t>
</list></t>

<t>If there are no images included in the Targets metadata from the Director repository, then the metadata SHALL include a vehicle identifier in order to avoid a replay attack.</t>

<section anchor="custom-metadata-about-images" title="Custom metadata about images">

<t>In addition to what is required, Targets metadata files MAY contain extra metadata for images on the repository. This metadata can be customized for a particular use case. Examples of use cases for different types of custom metadata can be found in the <spanx style="emph">Deployment Best Practices</spanx> document (<xref target="DEPLOY"/>). However, there are a few important pieces of custom metadata that SHOULD be present in most implementations. In addition, there is one element in the custom metadata that MUST be present in the Targets metadata from the Director.</t>

<t>Custom metadata MAY also contain a demarcated field or section that MUST match whenever two pieces of metadata are checked against each other, such as when Targets metadata from the Director repository is checked against Targets metadata from the Image repository.</t>

<t>The information listed below SHOULD be provided for each image on both the Image repository and the Director repository. If a “MUST match section” is to be implemented, that is where this information SHOULD be placed.</t>

<t><list style="symbols">
  <t>A release counter, to be incremented each time a new version of the image is released. This can be used to prevent rollback attacks even in cases where the Director repository is compromised.</t>
  <t>A hardware identifier, or list of hardware identifiers, representing models of ECUs with which the image is compatible. This can be used to ensure that an ECU cannot be ordered to install an incompatible image, even in cases where the Director repository is compromised.</t>
</list></t>

<t>The following information is CONDITIONALLY REQUIRED for each image on the Director repository IF that image is encrypted:</t>

<t><list style="symbols">
  <t>Information about filenames, hashes, and file size of the encrypted image.</t>
  <t>Information about the encryption method, and other relevant information–for example, a symmetric encryption key encrypted by the ECU’s asymmetric key could be included in the Director repository metadata.</t>
</list></t>

<t>The following information MUST be provided from the Director repository for each image in the Targets metadata:</t>

<t><list style="symbols">
  <t>An ECU identifier (such as a serial number), specifying the ECU that should install the image.</t>
</list></t>

<t>The Director repository MAY provide a download URL for the image file. This may be useful, for example, when the image is on a public CDN and the Director wishes to provide a signed URL.</t>

</section>
</section>
<section anchor="delegations_meta" title="Metadata about delegations">

<t>A Targets metadata file on the Image repository (but not the Director repository) MUST be able to delegate signing authority to other entities. For example, it could delegate signing authority for a particular ECU’s firmware to that ECU’s supplier. A metadata file MAY contain any number of delegations and MUST keep the delegations in prioritized order.</t>

<t>Any metadata file with delegations MUST provide the following information:</t>

<t><list style="symbols">
  <t>A list of public keys of all delegatees. Each key should have a unique public key identifier and a key type.</t>
  <t>A list of delegations, each of which contains:
  <list style="symbols">
      <t>A list of the filenames to which this role applies. This MAY be expressed using wildcards, or by enumerating a list, or a combination of the two.</t>
      <t>An optional list of the hardware identifiers to which this role applies.  If this is omitted, any hardware identifier will match.</t>
      <t>An indicator of whether or not this is a terminating delegation. (See <xref target="targets_role_delegations"/>.)</t>
      <t>A list of the roles to which this delegation applies. Each role needs to specify:
      <list style="symbols">
          <t>A name for the role (e.g., “supplier1-qa”)</t>
          <t>The key identifiers for each key this role uses</t>
          <t>A threshold of keys that must sign for this role</t>
        </list></t>
    </list></t>
</list></t>

<t>Note that <spanx style="strong">any</spanx> Targets metadata file stored on the Image repository may contain delegations, and these delegations can be in chains of arbitrary length.</t>

</section>
</section>
<section anchor="snapshot_meta" title="Snapshot metadata">

<t>The Snapshot metadata lists version numbers and filenames of all Targets metadata files. It protects against mix-and-match attacks if a delegated supplier key is compromised.</t>

<t>For each Targets metadata file on the repository, the Snapshot metadata SHALL contain the following information:</t>

<t><list style="symbols">
  <t>The filename and version number of the Targets metadata file.</t>
</list></t>

<t>The Snapshot metadata MAY also list the Root metadata filename and version number for the purpose of backwards compatibility. Historically, this was a requirement in TUF, but it is no longer required and does not provide a significant security benefit.</t>

</section>
<section anchor="timestamp_meta" title="Timestamp metadata">

<t>The Timestamp metadata SHALL contain the following information:</t>

<t><list style="symbols">
  <t>The filename and version number of the latest Snapshot metadata on the repository.</t>
  <t>One or more hashes of the Snapshot metadata file, along with the hashing function used.</t>
</list></t>

</section>
<section anchor="repo_mapping_meta" title="Repository mapping metadata">

<t>As described in the introduction to <xref target="design"/>, Uptane requires a Director repository and an Image repository. However, it is possible to have an Uptane-compliant implementation that has more than two repositories.</t>

<t>Repository mapping metadata informs a Primary ECU about which repositories to trust for images or image paths. <xref target="TAP-4"/> describes how to make use of more complex repository mapping metadata in order to have more than the two required repositories.</t>

<t>Repository mapping metadata, or the equivalent informational content, MUST be present on all Primary ECUs, and MUST contain the following information:</t>

<t><list style="symbols">
  <t>A list of repository names and one or more URLs at which the named repository can be accessed. At a minimum, this MUST include the Director and Image repositories.</t>
  <t>A list of mappings of image paths to repositories, each of which contains:
  <list style="symbols">
      <t>A list of image paths. Image paths MAY be expressed using wildcards, or by enumerating a list, or a combination of the two.</t>
      <t>A list of repositories that MUST provide signed Targets metadata for images stored at those paths.</t>
    </list></t>
</list></t>

<t>For example, in the most basic Uptane case, the repository mapping metadata would contain:</t>

<t><list style="symbols">
  <t>The name and URL of the Director repository.</t>
  <t>The name and URL of the Image repository.</t>
  <t>A single mapping indicating that all images (<spanx style="verb">*</spanx>) MUST be signed by both the Director and Image repository.</t>
</list></t>

<t>Note that the metadata need not be in the form of a metadata file. For example, in the basic case where there is only one Director and one Image repository, and all images need to have signed metadata from both repositories, it would be sufficient to have a configuration file with URLs for the two repositories and a client that always checks for metadata matches between them. In this case, no explicit mapping would be defined, because the mapping is defined as part of the Uptane client implementation.</t>

<t>The <spanx style="emph">Uptane Deployment Best Practices</spanx> document (<xref target="DEPLOY"/>) provides more guidance on how to implement repository mapping metadata for more complex use cases. It also discusses strategies for updating repository mapping metadata, if required.</t>

</section>
<section anchor="metadata_filename_rules" title="Rules for filenames in repositories and metadata">

<t>There is a difference between the filename in a metadata file or an ECU, and the filename on a repository. This difference exists in order to avoid race conditions, where metadata and images are read from, and written to, at the same time. For more details, the reader should read the TUF specification <xref target="TUF-spec"/> and PEP 458 <xref target="PEP-458"/>.</t>

<t>Unless stated otherwise, all files SHALL be written to repositories in accordance with the following two rules:</t>

<t><list style="numbers">
  <t>Metadata filenames SHALL be qualified with version numbers. If a metadata file A is specified as FILENAME.EXT in another metadata file B, then it SHALL be written as VERSION.FILENAME.EXT, where VERSION is A’s version number, as defined in <xref target="common_metadata"/>, with one exception: If the version number of the Timestamp metadata file might not be known in advance by a client, it MAY be read from, and written to, a repository using a filename without a version number qualification, i.e., FILENAME.EXT.</t>
  <t>If an image is specified in a Targets metadata file as FILENAME.EXT, it SHALL be written to the repository as HASH.FILENAME.EXT, where HASH is one of the hash digests of the file, as specified in <xref target="targets_images_meta"/>. The file MUST be written to the repository using <spanx style="emph">n</spanx> different filenames, one for each hash digest listed in its corresponding Targets metadata.</t>
  <t>Filenames of images SHOULD be encoded to prevent a path traversal on the client system, either by using URL encoding or by limiting the allowed character set in the filename.</t>
</list></t>

<t>For example:</t>

<t><list style="symbols">
  <t>The version number of the Snapshot metadata file is 61, and its filename in the Timestamp metadata is <spanx style="emph">snapshot.json</spanx>. The filename on the repository will be <spanx style="emph">61.snapshot.json</spanx>.</t>
  <t>There is an image with the <spanx style="emph">filename acme_firmware.bin</spanx> specified in the Targets metadata, with a SHA3-256 of <spanx style="emph">aaaa</spanx> and a SHA-512/224 of <spanx style="emph">bbbb</spanx>. It will have two filenames on the repository: <spanx style="emph">aaaa.acme_firmware.bin</spanx> and <spanx style="emph">bbbb.acme_firmware.bin</spanx>.</t>
</list></t>

</section>
</section>
<section anchor="server-repository-implementation-requirements" title="Server / repository implementation requirements">

<t>An Uptane implementation SHALL make the following services available to vehicles:</t>

<t><list style="symbols">
  <t>Image repository</t>
  <t>Director repository</t>
</list></t>

<t>Additionally, an Uptane implementation requires ECUs to have a secure way to know the current time.</t>

<section anchor="image-repository" title="Image repository">

<t>The Image repository exists to allow an OEM and/or its suppliers to upload images and their associated metadata. It makes these images and their metadata available to vehicles. The Image repository is designed to be primarily controlled by human actors, and updated relatively infrequently.</t>

<t>The Image repository SHALL expose an interface permitting the download of metadata and images. This interface SHOULD be public.</t>

<t>The Image repository SHALL require authorization for writing metadata and images.</t>

<t>The Image repository SHALL provide a method for authorized users to upload images and their associated metadata. It SHALL check that a user writing metadata and images is authorized to do so for that specific image by checking the chain of delegations as described in <xref target="delegations_meta"/>.</t>

<t>The Image repository SHALL implement storage which permits authorized users to write an image file using a unique filename, and later read the same file using the same name. It MAY use any filesystem, key-value store, or database that fulfills this requirement.</t>

<t>The Image repository MAY require authentication for read access.</t>

</section>
<section anchor="director_repository" title="Director repository">

<t>The Director repository instructs ECUs as to which images should be installed by producing signed metadata on demand. Unlike the Image repository, it is mostly controlled by automated, online processes. It also consults a private inventory database containing information on vehicles, ECUs, and software revisions.</t>

<t>The Director repository SHALL expose an interface for Primaries to upload vehicle version manifests (<xref target="vehicle_version_manifest"/>) and download metadata. This interface SHOULD be public.
The Director MAY encrypt images for ECUs that require them, either by encrypting on-the-fly or by storing encrypted images on the repository.</t>

<t>The Director repository SHALL implement storage which permits an automated service to write generated metadata files. It MAY use any filesystem, key-value store, or database that fulfills this requirement.</t>

<section anchor="directing-installation-of-images-on-vehicles" title="Directing installation of images on vehicles">

<t>A Director repository MUST conform to the following six-step process for directing the installation of software images on a vehicle.</t>

<t><list style="numbers">
  <t>The Director SHOULD first identify the vehicle. This MAY be done when the Director receives a vehicle version manifest sent by a Primary (as described in <xref target="construct_manifest_primary"/>), decodes the manifest, and determines the unique vehicle identifier. Additionally, the Director MAY utilize other mechanisms to uniquely identify a vehicle (e.g., 2-way TLS with unique client certificates).</t>
  <t>Using the vehicle identifier, the Director queries its inventory database (as described in <xref target="inventory_db"/>) for relevant information about each ECU in the vehicle.</t>
  <t>The Director SHALL check the manifest for accuracy compared to the information in the inventory database. If any of the required checks fail, the Director MAY drop the request. An implementer MAY make additional checks if desired. At a minimum, the Director SHALL check the following:
  <list style="symbols">
      <t>Each ECU recorded in the inventory database is also represented in the manifest.</t>
      <t>The signature of the manifest matches the ECU key of the Primary that sent it.</t>
      <t>The signature of each Secondary’s contribution to the manifest matches the ECU key of that Secondary.</t>
    </list></t>
  <t>The Director SHOULD check that the nonce or counter in each ECU version report has not been used before to prevent a replay of the ECU version report. If the nonce or counter is reused the Director SHOULD drop the request.</t>
  <t>The Director extracts information about currently installed images from the vehicle version manifest. Using this information, it determines if the vehicle is already up-to-date, and if not, determines a set of images that should be installed. The exact process by which this determination takes place is out of scope for this Standard. However, the Director MUST take into account <spanx style="emph">dependencies</spanx> and <spanx style="emph">conflicts</spanx> between images and SHOULD consult well-established techniques for dependency resolution.</t>
  <t>The Director MAY encrypt images for ECUs that require it.</t>
  <t>The Director generates new metadata representing the desired set of images to be installed on the vehicle, based on the dependency resolution in step 4. This includes Targets (<xref target="targets_meta"/>), Snapshot (<xref target="snapshot_meta"/>), and Timestamp (<xref target="timestamp_meta"/>) metadata. It then sends this metadata to the Primary as described in <xref target="download_meta_primary"/>.</t>
</list></t>

</section>
<section anchor="inventory_db" title="Inventory Database">

<t>The Director SHALL use a private inventory database to store information about ECUs and vehicles. An implementer MAY use any durable database for this purpose.</t>

<t>The inventory database MUST record the following pieces of information:</t>

<t><list style="symbols">
  <t>Per vehicle:
  <list style="symbols">
      <t>A unique identifier (such as a VIN)</t>
    </list></t>
  <t>Per ECU:
  <list style="symbols">
      <t>A unique identifier (such as a serial number)</t>
      <t>The vehicle identifier the ECU is associated with</t>
      <t>An ECU key (symmetric or asymmetric; for asymmetric keys, only the public part SHOULD be stored)</t>
      <t>The ECU key identifier (as defined in <xref target="common_metadata"/>)</t>
      <t>Whether the ECU is a Primary or a Secondary</t>
    </list></t>
</list></t>

<t>The inventory database MAY record other information about ECUs and vehicles. It SHOULD record a hardware identifier for each ECU to protect against the possibility of directing the ECU to install incompatible firmware.</t>

</section>
</section>
</section>
<section anchor="in-vehicle-implementation-requirements" title="In-vehicle implementation requirements">

<t>An Uptane-compliant ECU SHALL be able to download and verify image metadata and image binaries before installing a new image and MUST have a secure way of verifying the current time, or a sufficiently recent attestation of the time.</t>

<t>All ECUs SHALL monitor the download speed of image metadata and image binaries to detect and respond to a slow retrieval attack. If the download is slower than a pre-defined threshold, the ECU SHOULD send an alert to the Director repository, for example as part of the next vehicle version manifest.</t>

<t>Each ECU receiving over-the-air updates in a vehicle is either a Primary or a Secondary ECU. A Primary ECU collects and delivers to the Director vehicle manifests (<xref target="vehicle_version_manifest"/>) that contain information about which images have been installed on ECUs in the vehicle. It also verifies the time, and downloads and verifies the latest metadata and images for itself and for its Secondaries. A Secondary ECU verifies the time, and downloads and verifies the latest metadata and images for itself from its associated Primary ECU. It also sends signed information about its installed images to its associated Primary.</t>

<t>All ECUs MUST verify image metadata as specified in <xref target="metadata_verification"/> before installing an image or making it available to other ECUs. A Primary ECU MUST perform full verification (<xref target="full_verification"/>). A Secondary ECU SHOULD perform full verification if possible. If a Secondary cannot perform full verification, it SHALL, at the very least, perform partial verification. In addition, it MAY also perform some steps from the full verification process. See the <spanx style="emph">Uptane Deployment Best Practices</spanx> document (<xref target="DEPLOY"/>) for a discussion of how to choose between partial and full verification.</t>

<t>ECUs MUST have a secure source of time. An OEM/Uptane implementer MAY use any external source of time that is demonstrably secure.</t>

<section anchor="build-time-prerequisite-requirements-for-ecus" title="Build-time prerequisite requirements for ECUs">

<t>For an ECU to be capable of receiving Uptane-secured updates, it MUST have the following data provisioned at the time it is manufactured or installed in the vehicle:</t>

<t><list style="numbers">
  <t>A sufficiently recent copy of required Uptane metadata at the time of manufacture or install. This is necessary for the ECU to authenticate that the remote repository is legitimate when it first downloads metadata in the field. See <spanx style="emph">Uptane Deployment Best Practices</spanx> (<xref target="DEPLOY"/>) for more information.
  <list style="symbols">
      <t>Partial verification Secondary ECUs MUST have the Root and Targets metadata from the Director repository (to reduce the scope of rollback and replay attacks). These ECUs MAY also have metadata from other roles or the Image repository if they will be used by the Secondary.</t>
      <t>Full verification ECUs MUST have a complete set of metadata (Root, Targets, Snapshot, and Timestamp) from both repositories (to prevent rollback and replay attacks), as well as the repository mapping metadata (<xref target="repo_mapping_meta"/>). Delegations are not required.</t>
    </list></t>
  <t>The current time, or a secure attestation of a sufficiently recent time.</t>
  <t>An <spanx style="strong">ECU key</spanx>. This is a private key, unique to the ECU, used to sign ECU version reports and decrypt images. An ECU key MAY be either a symmetric key or an asymmetric key. If it is an asymmetric key, there MAY be separate keys for encryption and signing. For the purposes of this Standard, the set of private keys that an ECU uses is referred to as the ECU key (singular), even if it is actually multiple keys used for different purposes. Note that while signing keys are required to be unique to the ECU to avoid replay attacks, the secret keys used to decrypt images need not be unique.</t>
</list></t>

</section>
<section anchor="what-the-primary-does" title="What the Primary does">

<t>A Primary downloads, verifies, and distributes the latest time, metadata, and images. To do so, it SHALL perform the following seven steps:</t>

<t><list style="numbers">
  <t>Construct and send vehicle version manifest (<xref target="construct_manifest_primary"/>)</t>
  <t>Download and check current time (<xref target="check_time_primary"/>)</t>
  <t>Download and verify metadata (<xref target="download_meta_primary"/>)</t>
  <t>Download and verify images (<xref target="download_images_primary"/>)</t>
  <t>Send latest time to Secondaries (<xref target="send_time_primary"/>)</t>
  <t>Send metadata to Secondaries (<xref target="send_metadata_primary"/>)</t>
  <t>Send images to Secondaries (<xref target="send_images_primary"/>)</t>
</list></t>

<t>Note that the subsequent sections concerning requirements for a Primary do not prohibit implementing Primary capabilities on an ECU that does not communicate directly with the Uptane repositories. This allows for implementations to have multiple ECUs within the vehicle performing functions equivalent to a Primary.
If multiple such Primaries are included within a vehicle, each Primary SHOULD have a designated set of Secondaries and each Secondary SHALL have at least one Primary responsible for providing its updates</t>

<section anchor="construct_manifest_primary" title="Construct and send vehicle version manifest">

<t>The Primary SHALL build a <spanx style="emph">vehicle version manifest</spanx> as described in <xref target="vehicle_version_manifest"/>.</t>

<t>Once the complete manifest is built, the Primary MAY send the manifest to the Director repository. However, it is not strictly required that the Primary send the manifest until step three. If permitted by the implementation, a Primary MAY send only a diff of the manifest to save bandwidth. If an implementation permits diffs, the Director SHOULD have a way to request a full manifest.</t>

<t>Secondaries MAY send their version report at any time so that it is already stored on the Primary when it wishes to check for updates. Alternatively, the Primary MAY request a version report from each Secondary at the time of the update check.</t>

<section anchor="vehicle_version_manifest" title="Vehicle version manifest">

<t>The vehicle version manifest is a metadata structure that MUST contain the following information:</t>

<t><list style="symbols">
  <t>An attribute containing the signature(s) of the payload, each specified by:
  <list style="symbols">
      <t>The public key identifier of the key being used to sign the payload</t>
      <t>The signing method (i.e., ed25519, rsassa-pss, etc.)</t>
      <t>A hash of the payload to be signed</t>
      <t>The hashing function used (i.e., SHA3-256, SHA-512/224, etc.)</t>
      <t>The signature of the hash</t>
    </list></t>
  <t>A payload representing the installed versions of each software image on the vehicle. This payload SHALL contain:
  <list style="symbols">
      <t>The vehicle’s unique identifier (e.g., the VIN)</t>
      <t>The Primary ECU’s unique identifier (e.g., the serial number)</t>
      <t>A list of ECU version reports as specified in <xref target="version_report"/></t>
    </list></t>
</list></t>

<t>Note that one of the ECU version reports should be the version report for the Primary itself.</t>

</section>
<section anchor="version_report" title="ECU version report">

<t>An ECU version report is a metadata structure that MUST contain the following information:</t>

<t><list style="symbols">
  <t>An attribute containing the signature(s) of the payload, each specified by:
  <list style="symbols">
      <t>The public key identifier of the key being used to sign the payload</t>
      <t>The signing method (i.e., ed25519, rsassa-pss, etc.)</t>
      <t>A hash of the payload to be signed</t>
      <t>The hashing function used (i.e., SHA3-256, SHA-512/224, etc.)</t>
      <t>The signature of the hash</t>
    </list></t>
  <t>A payload containing:
  <list style="symbols">
      <t>The ECU’s unique identifier (e.g., the serial number)</t>
      <t>The filename, length, and hashes of its currently installed image (i.e., the non-custom Targets metadata for this particular image)</t>
      <t>An indicator of any detected security attack</t>
      <t>The latest time the ECU can verify at the time this version report was generated</t>
      <t>A nonce or counter to prevent a replay of the ECU version report. This value MUST change each update cycle.</t>
    </list></t>
</list></t>

</section>
</section>
<section anchor="check_time_primary" title="Download and check current time">

<t>The Primary SHALL load the current time from a secure source.</t>

</section>
<section anchor="download_meta_primary" title="Download and verify metadata">

<t>The Primary SHALL download metadata for all targets and perform a full verification on it as specified in <xref target="full_verification"/>.</t>

</section>
<section anchor="download_images_primary" title="Download and verify images">

<t>The Primary SHALL download and verify images for itself and for all of its associated Secondaries. Images SHALL be verified by checking that the hash of the image file matches the hash specified in the Director’s Targets metadata for that image.</t>

<t>There may be several different filenames that all refer to the same image binary, as described in <xref target="metadata_filename_rules"/>. If the Primary has received multiple hashes for a given image binary via the Targets role (see <xref target="targets_images_meta"/>) then it SHALL verify every hash for this image even though the image is identified by a single hash as part of its filename.</t>

</section>
<section anchor="send_time_primary" title="Send latest time to Secondaries">

<t>The Primary SHOULD send the time to each ECU.</t>

</section>
<section anchor="send_metadata_primary" title="Send metadata to Secondaries">

<t>The Primary SHALL send its latest downloaded metadata to all of its associated Secondaries. The metadata it sends to each Secondary MUST include all of the metadata required for verification on that Secondary. For full verification Secondaries, this includes the metadata for all four roles from both repositories, plus any delegated Targets metadata files the Secondary will recurse through to find the proper delegation. For partial verification Secondaries, this MAY include fewer metadata files; at a minimum, it includes only the Targets metadata file from the Director repository.</t>

<t>The Primary SHOULD determine the minimal set of metadata files to send to each Secondary by performing delegation resolution as described in <xref target="full_verification"/>.</t>

<t>Each Secondary SHALL store the latest copy of all metadata required for its own verification.</t>

</section>
<section anchor="send_images_primary" title="Send images to Secondaries">

<t>The Primary SHALL send the latest image to each of its associated Secondaries that have sufficient storage to receive it.</t>

<t>For Secondaries without sufficient storage to store a copy of the image, the Primary SHOULD wait for a request from the Secondary to stream the new image file to it. The Secondary will send the request once it has verified the metadata sent in the previous step.</t>

</section>
</section>
<section anchor="installing-images-on-primary-or-secondary-ecus" title="Installing images on Primary or Secondary ECUs">

<t>An ECU SHALL perform the following steps when attempting to install a new image:</t>

<t><list style="numbers">
  <t>Verify latest attested time. This is optional if the ECU does not have the capacity to verify a time message (<xref target="verify_time"/>)</t>
  <t>Verify metadata (<xref target="verify_metadata"/>)</t>
  <t>Download latest image (<xref target="download_image"/>)</t>
  <t>Verify image (<xref target="verify_image"/>)</t>
  <t>Install image (<xref target="install_image"/>)</t>
  <t>Create and send version report (<xref target="create_version_report"/>)</t>
</list></t>

<section anchor="verify_time" title="Load and verify the latest attested time">

<t>IF the ECU has the capability to verify a time message, the ECU SHOULD load and verify the current time, or the most recent securely attested time.</t>

</section>
<section anchor="verify_metadata" title="Verify metadata">

<t>The ECU SHALL verify the latest downloaded metadata (<xref target="metadata_verification"/>) using either full or partial verification. If the metadata verification fails for any reason, the ECU SHALL jump to the final step (<xref target="create_version_report"/>).</t>

</section>
<section anchor="download_image" title="Download latest image">

<t>If the ECU has limited secondary storage, i.e., insufficient buffer storage to temporarily store the latest image before installing it, it SHALL download the latest image from the Primary. (If the ECU has sufficient secondary storage, it will already have the latest image in its secondary storage as specified in <xref target="send_images_primary"/>, and should skip to the next step.) The ECU MAY first create a backup of its previous working image and store it elsewhere (e.g., the Primary).</t>

<t>The filename used to identify the latest known image (i.e., the file to request from the Primary) SHALL be determined as follows:</t>

<t><list style="numbers">
  <t>Load the Targets metadata file from the Director repository.</t>
  <t>Find the Targets metadata associated with this ECU identifier.</t>
  <t>Construct the Image filename using the rule in <xref target="metadata_filename_rules"/>, or use the download URL specified in the Director metadata.</t>
  <t>If there is no Targets metadata about this image, abort the update cycle and report that there is no such image. Additionally, in the case of failure, the ECU SHALL retain its previous Targets metadata instead of using the new Targets metadata. Otherwise, download the image (up to the number of bytes specified in the Targets metadata) and verify it according to <xref target="verify_image"/>.</t>
</list></t>

<t>When the Primary responds to the download request, the ECU SHALL overwrite its current image with the downloaded image from the Primary.</t>

<t>If any part of this step fails, the ECU SHALL jump to the final step (<xref target="create_version_report"/>).</t>

</section>
<section anchor="verify_image" title="Verify image">

<t>The ECU SHALL verify that the latest image matches the latest metadata as follows:</t>

<t><list style="numbers">
  <t>Load the latest Targets metadata file from the Director.</t>
  <t>Find the Targets metadata associated with this ECU identifier.</t>
  <t>Check that the hardware identifier in the metadata matches the ECU’s hardware identifier.</t>
  <t>Check that the image filename is valid for this ECU. This MAY be a comparison against a wildcard path, which restricts the ECUs to which a delegation will apply.</t>
  <t>Check that the release counter of the image in the previous metadata, if it exists, is less than or equal to the release counter in the latest metadata.</t>
  <t>If the image is encrypted, decrypt the image with a decryption key to be chosen as follows:
  <list style="symbols">
      <t>If the ECU key is a symmetric key, the ECU SHALL use the ECU key for image decryption.</t>
      <t>If the ECU key is asymmetric, the ECU SHALL check the Targets metadata for an encrypted symmetric key. If such a key is found, the ECU SHALL decrypt the symmetric key using its ECU key, and use the decrypted symmetric key for image decryption.</t>
      <t>If the ECU key is asymmetric and there is no symmetric key in the Targets metadata, the ECU SHALL use its ECU key for image decryption.</t>
    </list></t>
  <t>Check that all hashes listed in the metadata match the corresponding hashes of the image.</t>
</list></t>

<t>If the ECU has enough secondary storage capacity to store the image, the checks SHOULD be performed on the image in secondary storage before it is installed.</t>

<t>When checking hashes, the ECU SHALL additionally check that the length of the image matches the length listed in the metadata.</t>

<t>NOTE: See <xref target="DEPLOY"/> for guidance on how to deal with Secondary ECU failures for ECUs that have limited secondary storage.</t>

<t>If any step fails, the ECU SHALL jump to the final step (<xref target="create_version_report"/>).</t>

</section>
<section anchor="install_image" title="Install image">

<t>The ECU SHALL attempt to install the update. This installation SHOULD occur at a time when all pre-conditions are met. These pre-conditions MAY include ensuring the vehicle is in a safe environment for install (e.g., the vehicle is parked when updating a specific ECU). Another pre-condition MAY include ensuring the ECU has a backup of its current image and metadata in case the current installation fails.</t>

</section>
<section anchor="create_version_report" title="Create and send version report">

<t>The ECU SHALL create a version report as described in <xref target="version_report"/>, and send it to the Primary (or simply save it to disk, if the ECU is a Primary). The Primary SHOULD write the version reports it receives to disk and associate them with the Secondaries that sent them.</t>

</section>
</section>
<section anchor="metadata_verification" title="Metadata verification procedures">

<t>A Primary ECU MUST perform full verification of metadata. A Secondary ECU SHOULD perform full verification of metadata. If a Secondary cannot perform full verification, it SHALL, at the very least, perform partial verification.</t>

<t>If a step in the following workflows does not succeed (e.g., the update is aborted because a new metadata file was not signed), an ECU SHOULD still be able to update again in the future. Errors raised during the update process SHOULD NOT leave ECUs in an unrecoverable state.</t>

<section anchor="partial_verification" title="Partial verification">

<t>In order to perform partial verification, an ECU SHALL perform the following steps:</t>

<t><list style="numbers">
  <t>Load and verify the current time or the most recent securely attested time.</t>
  <t>Download and check the Targets metadata file from the Director repository, following the procedure in <xref target="check_targets"/>.</t>
</list></t>

<t>Note that this verification procedure is the smallest set of Uptane checks permissible for an Uptane Secondary ECU. An ECU MAY additionally implement more metadata checks.</t>

<t>For example, an ECU MAY also fetch and verify Root metadata from the Director (following the procedure in <xref target="check_root"/>) before checking Targets metadata. Performing this additional check would provide the ECU with a secure way to receive and validate a rotation of the Director’s Targets key.</t>

<t>See <xref target="DEPLOY"/> for more discussion on this topic.</t>

</section>
<section anchor="full_verification" title="Full verification">

<t>Full verification of metadata means that the ECU checks that the Targets metadata about images from the Director repository matches the Targets metadata about the same images from the Image repository. This provides resilience to a key compromise in the system.</t>

<t>Full verification MUST be performed by Primary ECUs and SHOULD be performed by Secondary ECUs. In the following instructions, whenever an ECU is directed to download metadata, it applies only to Primary ECUs.</t>

<t>Before starting full verification, the repository mapping metadata MUST be consulted to determine where to download metadata from. This procedure assumes the basic Uptane case: there are only two repositories (Director and Image), and all image paths are required to be signed by both repositories. If a more complex repository layout is being used, refer to <xref target="DEPLOY"/> for guidance on how to determine where metadata should be downloaded from.</t>

<t>In order to perform full verification, an ECU SHALL perform the following steps:</t>

<t><list style="numbers">
  <t>Load and verify the current time or the most recent securely attested time.</t>
  <t>Download and check the Root metadata file from the Director repository, following the procedure in <xref target="check_root"/>.</t>
  <t>Download and check the Timestamp metadata file from the Director repository, following the procedure in <xref target="check_timestamp"/>.</t>
  <t>Check the previously downloaded Snapshot metadata file from the Directory repository (if available). If the hashes and version number of that file match the hashes and version number listed in the new Timestamp metadata, there are no new updates and the verification process MAY be stopped and considered complete. Otherwise, download and check the Snapshot metadata file from the Director repository, following the procedure in <xref target="check_snapshot"/>.</t>
  <t>Download and check the Targets metadata file from the Director repository, following the procedure in <xref target="check_targets"/>.</t>
  <t>If the Targets metadata from the Directory repository indicates that there are no new targets that are not already currently installed, the verification process MAY be stopped and considered complete. Otherwise, download and check the Root metadata file from the Image repository, following the procedure in <xref target="check_root"/>.</t>
  <t>Download and check the Timestamp metadata file from the Image repository, following the procedure in <xref target="check_timestamp"/>.</t>
  <t>Check the previously downloaded Snapshot metadata file from the Image repository (if available). If the hashes and version number of that file match the hashes and version number listed in the new Timestamp metadata, the ECU MAY skip to the last step. Otherwise, download and check the Snapshot metadata file from the Image repository, following the procedure in <xref target="check_snapshot"/>.</t>
  <t>Download and check the top-level Targets metadata file from the Image repository, following the procedure in <xref target="check_targets"/>.</t>
  <t>Verify that Targets metadata from the Director and Image repositories match. A Primary ECU MUST perform this check on metadata for all images listed in the Targets metadata file from the Director repository downloaded in step 6. A Secondary ECU MAY elect to perform this check only on the metadata for the image it will install. (That is, the image metadata from the Director that contains the ECU identifier of the current ECU.) To check that the metadata for an image matches, complete the following procedure:
  <list style="numbers">
      <t>Locate and download a Targets metadata file from the Image repository that contains an image with exactly the same filename listed in the Director metadata, following the procedure in <xref target="resolve_delegations"/>.</t>
      <t>Check that the Targets metadata from the Image repository matches the Targets metadata from the Director repository:
      <list style="numbers">
          <t>Check that the non-custom metadata (i.e., length and hashes) of the unencrypted or encrypted image are the same in both sets of metadata. Note: the Primary is responsible for validating encrypted images and associated metadata. The target ECU (Primary or Secondary) is responsible for validating the unencrypted image and associated metadata.</t>
          <t>Check that all MUST match custom metadata (e.g., hardware identifier and release counter) are the same in both sets of metadata.</t>
          <t>Check that the release counter in the previous Targets metadata file is less than or equal to the release counter in this Targets metadata file.</t>
        </list></t>
    </list></t>
</list></t>

<t>If any step fails, the ECU MUST return an error code indicating the failure. If a check for a specific type of security attack fails (i.e., rollback, freeze, arbitrary software, etc.), the ECU SHOULD return an error code that indicates the type of attack.</t>

</section>
<section anchor="check_root" title="How to check Root metadata">

<t>To properly check Root metadata, an ECU SHOULD:</t>

<t><list style="numbers">
  <t>Load the previous Root metadata file.</t>
  <t>Update to the latest Root metadata file.
  <list style="numbers">
      <t>Let N denote the version number of the latest Root metadata file (which at first could be the same as the previous Root metadata file).</t>
      <t>Try downloading a new version N+1 of the Root metadata file, up to some X number of bytes. The value for X is set by the implementer. For example, X may be tens of kilobytes. The filename used to download the Root metadata file is of the fixed form VERSION_NUMBER.FILENAME.EXT (e.g., 42.root.json). If this file is not available, the current Root metadata file is the latest; continue with step 3.</t>
      <t>Version N+1 of the Root metadata file MUST have been signed by the following: (1) a threshold of unique keys specified in the latest Root metadata file (version N), and (2) a threshold of unique keys specified in the new Root metadata file being validated (version N+1). If version N+1 is not signed as required, discard it, abort the update cycle, and report the signature failure. On the next update cycle, begin at version N of the Root metadata file. (Checks for an arbitrary software attack.)</t>
      <t>The version number of the latest Root metadata file (version N) must be less than or equal to the version number of the new Root metadata file (version N+1). Effectively, this means checking that the version number signed in the new Root metadata file is indeed N+1. If the version of the new Root metadata file is less than the latest metadata file, discard it, abort the update cycle, and report the rollback attack. On the next update cycle, begin at step 1 and version N of the Root metadata file. (Checks for a rollback attack.)</t>
      <t>Set the latest Root metadata file to the new Root metadata file.</t>
      <t>Repeat steps 2.1 to 2.6.</t>
    </list></t>
  <t>Check that the current (or latest securely attested) time is lower than the expiration timestamp in the latest Root metadata file. (Checks for a freeze attack.)</t>
  <t>If the Timestamp and/or Snapshot keys have been rotated, delete the previous Timestamp and Snapshot metadata files. (Checks for recovery from fast-forward attacks <xref target="MERCURY"/>.)</t>
</list></t>

</section>
<section anchor="check_timestamp" title="How to check Timestamp metadata">

<t>To properly check Timestamp metadata, an ECU SHOULD:</t>

<t><list style="numbers">
  <t>Download up to Y number of bytes. The value for Y is set by the implementer. For example, Y may be tens of kilobytes. The filename used to download the Timestamp metadata file is of the fixed form FILENAME.EXT (e.g., timestamp.json).</t>
  <t>Check that it has been signed by the threshold of unique keys specified in the latest Root metadata file. If the new Timestamp metadata file is not properly signed, discard it, abort the update cycle, and report the signature failure. (Checks for an arbitrary software attack.)</t>
  <t>Check that the version number of the previous Timestamp metadata file, if any, is less than or equal to the version number of this Timestamp metadata file. If the new Timestamp metadata file is older than the trusted Timestamp metadata file, discard it, abort the update cycle, and report the potential rollback attack. (Checks for a rollback attack.)</t>
  <t>Check that the current (or latest securely attested) time is lower than the expiration timestamp in this Timestamp metadata file. If the new Timestamp metadata file has expired, discard it, abort the update cycle, and report the potential freeze attack. (Checks for a freeze attack.)</t>
</list></t>

</section>
<section anchor="check_snapshot" title="How to check Snapshot metadata">

<t>To properly check Snapshot metadata, an ECU SHOULD:</t>

<t><list style="numbers">
  <t>Download up to the number of bytes specified in the Timestamp metadata file, constructing the metadata filename as defined in <xref target="metadata_filename_rules"/>.</t>
  <t>The hashes and version number of the new Snapshot metadata file MUST match the hashes and version number listed in the Timestamp metadata. If the hashes and version number do not match, discard the new Snapshot metadata, abort the update cycle, and report the failure. (Checks for a mix-and-match attack.)</t>
  <t>Check that it has been signed by the threshold of unique keys specified in the latest Root metadata file. If the new Snapshot metadata file is not signed as required, discard it, abort the update cycle, and report the signature failure. (Checks for an arbitrary software attack.)</t>
  <t>Check that the version number of the previous Snapshot metadata file, if any, is less than or equal to the version number of this Snapshot metadata file. If this Snapshot metadata file is older than the previous Snapshot metadata file, discard it, abort the update cycle, and report the potential rollback attack. (Checks for a rollback attack.)</t>
  <t>Check that the version number listed by the previous Snapshot metadata file for each Targets metadata file is less than or equal to its version number in this Snapshot metadata file. If this condition is not met, discard the new Snapshot metadata file, abort the update cycle, and report the failure. (Checks for a rollback attack.)</t>
  <t>Check that each Targets metadata filename listed in the previous Snapshot metadata file is also listed in this Snapshot metadata file. If this condition is not met, discard the new Snapshot metadata file, abort the update cycle, and report the failure. (Checks for a rollback attack.)</t>
  <t>Check that the current (or latest securely attested) time is lower than the expiration timestamp in this Snapshot metadata file. If the new Snapshot metadata file is expired, discard it, abort the update cycle, and report the potential freeze attack. (Checks for a freeze attack.)</t>
</list></t>

</section>
<section anchor="check_targets" title="How to check Targets metadata">

<t>To properly check Targets metadata, an ECU SHOULD:</t>

<t><list style="numbers">
  <t>Download up to Z number of bytes, constructing the metadata filename as defined in <xref target="metadata_filename_rules"/>. The value for Z is set by the implementer. For example, Z may be tens of kilobytes.</t>
  <t>The version number of the new Targets metadata file MUST match the version number listed in the latest Snapshot metadata. If the version number does not match, discard it, abort the update cycle, and report the failure. (Checks for a mix-and-match attack.) This step MAY be skipped when checking Targets metadata on a partial verification ECU, as these ECUs might not have Snapshot metadata.</t>
  <t>Check that the Targets metadata has been signed by the threshold of unique keys specified in the relevant metadata file. (Checks for an arbitrary software attack.):
  <list style="numbers">
      <t>If checking top-level Targets metadata, the threshold of keys is specified in the Root metadata.</t>
      <t>If checking delegated Targets metadata, the threshold of keys is specified in the Targets metadata file that delegated authority to this role.</t>
    </list></t>
  <t>Check that the version number of the previous Targets metadata file, if any, is less than or equal to the version number of this Targets metadata file. (Checks for a rollback attack.)</t>
  <t>Check that the current (or latest securely attested) time is lower than the expiration timestamp in this Targets metadata file. (Checks for a freeze attack.)</t>
  <t>If checking Targets metadata from the Director repository, verify that there are no delegations.</t>
  <t>If checking Targets metadata from the Director repository, check that no ECU identifier is represented more than once.</t>
  <t>If checking Targets metadata from the Director repository, and the ECU performing the verification is the Primary ECU, check that all listed ECU identifiers correspond to ECUs that are actually present in the vehicle.</t>
</list></t>

</section>
<section anchor="resolve_delegations" title="How to resolve delegations">

<t>To properly check Targets metadata for an image, an ECU MUST locate the metadata file(s) for the role (or roles) that have the authority to sign the image. This metadata might be located in the top-level Targets metadata, but it may also be delegated to another role or to multiple roles. Therefore, all delegations MUST be resolved using the following recursive procedure, beginning with the top-level Targets metadata file.</t>

<t><list style="numbers">
  <t>Download and check the current metadata file, following the procedure in <xref target="check_targets"/>. If the file cannot be loaded, or if any verification step fails, abort the delegation resolution, and indicate that image metadata cannot be found because of a missing or invalid role.</t>
  <t>If the current metadata file contains signed metadata about the image, end the delegation resolution and return the metadata to be checked.</t>
  <t>If the current metadata file was reached via a terminating delegation and does not contain signed metadata about the image, abort the delegation resolution for this image and return an error indicating that image metadata could not be found.</t>
  <t>Search the list of delegations, in listed order. For each delegation:
  <list style="numbers">
      <t>Check if the delegation applies to the image being processed. For the delegation to apply, it MUST include the hardware identifier of the target, and the target name MUST match one of the delegation’s image paths. If either of these tests fail, move on to the next delegation in the list.</t>
      <t>If the delegation is a multi-role delegation, follow the procedure described in <xref target="multirole_delegations"/>. If the multi-role delegation is terminating and no valid image metadata is found, abort the delegation resolution and return an error indicating that image metadata could not be found.</t>
      <t>If the delegation is a normal delegation, perform delegation resolution, starting at step 1. Note that this may recurse an arbitrary number of levels deep. If a delegation that applies to the image is found but no image metadata is found in the delegated roles or any of its sub-delegations, simply continue on with the next delegation in the list. The search is only completed or aborted if image metadata or a terminating delegation that applies to the image is found.</t>
    </list></t>
  <t>If the end of the list of delegations in the top-level metadata is reached without finding valid image metadata, return an error indicating that image metadata could not be found.</t>
</list></t>

</section>
<section anchor="multirole_delegations" title="Multi-role delegations">

<t>It is possible to delegate signing authority to multiple delegated roles as described in <xref target="TAP-3"/>. Each multi-role delegation effectively contains a list of ordinary delegations, plus a threshold of those roles that must be in agreement about the non-custom metadata for the image. All multi-role delegations MUST be resolved using the following procedure. Note that there may be sub-delegations inside multi-role delegations.</t>

<t><list style="numbers">
  <t>For each of the roles in the delegation, find and load the image metadata following the procedure in <xref target="resolve_delegations"/>.</t>
  <t>Inspect the non-custom part of the metadata loaded in step 1:
  <list style="numbers">
      <t>Locate all sets of roles that have agreeing (i.e., identical) non-custom metadata and “MUST match” custom metadata. Discard any set of roles with a size smaller than the threshold of roles that must be in agreement for this delegation.</t>
      <t>Check for a conflict. A conflict exists if there is more than one agreeing set of roles, yet each set has different metadata. If a conflict is found, choose and return the metadata from the set of roles which includes the earliest role in the multi-delegation list.</t>
      <t>If there is no conflict, check if there is any single set of roles with matching non-custom metadata. If there is, choose and return the metadata from this set.</t>
      <t>If no agreeing set can be found that meets the agreement threshold, return an error indicating that image metadata could not be found.</t>
    </list></t>
</list></t>

</section>
</section>
</section>
</section>


  </middle>

  <back>

    <references title='Normative References'>





<reference  anchor="RFC2119" target='https://www.rfc-editor.org/info/rfc2119'>
<front>
<title>Key words for use in RFCs to Indicate Requirement Levels</title>
<author initials='S.' surname='Bradner' fullname='S. Bradner'><organization /></author>
<date year='1997' month='March' />
<abstract><t>In many standards track documents several words are used to signify the requirements in the specification.  These words are often capitalized. This document defines these words as they should be interpreted in IETF documents.  This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t></abstract>
</front>
<seriesInfo name='BCP' value='14'/>
<seriesInfo name='RFC' value='2119'/>
<seriesInfo name='DOI' value='10.17487/RFC2119'/>
</reference>



<reference  anchor="RFC3647" target='https://www.rfc-editor.org/info/rfc3647'>
<front>
<title>Internet X.509 Public Key Infrastructure Certificate Policy and Certification Practices Framework</title>
<author initials='S.' surname='Chokhani' fullname='S. Chokhani'><organization /></author>
<author initials='W.' surname='Ford' fullname='W. Ford'><organization /></author>
<author initials='R.' surname='Sabett' fullname='R. Sabett'><organization /></author>
<author initials='C.' surname='Merrill' fullname='C. Merrill'><organization /></author>
<author initials='S.' surname='Wu' fullname='S. Wu'><organization /></author>
<date year='2003' month='November' />
<abstract><t>This document presents a framework to assist the writers of certificate policies or certification practice statements for participants within public key infrastructures, such as certification authorities, policy authorities, and communities of interest that wish to rely on certificates.  In particular, the framework provides a comprehensive list of topics that potentially (at the writer's discretion) need to be covered in a certificate policy or a certification practice statement.  This document supersedes RFC 2527.</t></abstract>
</front>
<seriesInfo name='RFC' value='3647'/>
<seriesInfo name='DOI' value='10.17487/RFC3647'/>
</reference>



<reference  anchor="RFC5198" target='https://www.rfc-editor.org/info/rfc5198'>
<front>
<title>Unicode Format for Network Interchange</title>
<author initials='J.' surname='Klensin' fullname='J. Klensin'><organization /></author>
<author initials='M.' surname='Padlipsky' fullname='M. Padlipsky'><organization /></author>
<date year='2008' month='March' />
<abstract><t>The Internet today is in need of a standardized form for the transmission of internationalized &quot;text&quot; information, paralleling the specifications for the use of ASCII that date from the early days of the ARPANET.  This document specifies that format, using UTF-8 with normalization and specific line-ending sequences.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='5198'/>
<seriesInfo name='DOI' value='10.17487/RFC5198'/>
</reference>


<reference anchor="NFC" target="https://www.unicode.org/reports/tr15/">
  <front>
    <title>Unicode Standard Annex #15: Unicode Normalization Forms</title>
    <author initials="M." surname="Davis">
      <organization></organization>
    </author>
    <author initials="M." surname="Duerst">
      <organization></organization>
    </author>
    <date year="2018" month="October"/>
  </front>
</reference>
<reference anchor="TAP-3" target="https://github.com/theupdateframework/taps/blob/d0818e580c322815a473520f2e8cc5f5eb8df499/tap3.md">
  <front>
    <title>The Update Framework TAP 3 - Multi-role delegations</title>
    <author initials="T.K." surname="Kuppusamy">
      <organization></organization>
    </author>
    <author initials="S." surname="Awwad">
      <organization></organization>
    </author>
    <author initials="E." surname="Cordell">
      <organization></organization>
    </author>
    <author initials="V." surname="Diaz">
      <organization></organization>
    </author>
    <author initials="J." surname="Moshenko">
      <organization></organization>
    </author>
    <author initials="J." surname="Cappos">
      <organization></organization>
    </author>
    <date year="2018" month="January" day="18"/>
  </front>
</reference>
<reference anchor="TAP-4" target="https://github.com/theupdateframework/taps/blob/2cb67d913ec19424d1e354b38f862886fbfd4105/tap4.md">
  <front>
    <title>The Update Framework TAP 4 - Multiple repository consensus on entrusted targets</title>
    <author initials="T.K." surname="Kuppusamy">
      <organization></organization>
    </author>
    <author initials="S." surname="Awwad">
      <organization></organization>
    </author>
    <author initials="E." surname="Cordell">
      <organization></organization>
    </author>
    <author initials="V." surname="Diaz">
      <organization></organization>
    </author>
    <author initials="J." surname="Moshenko">
      <organization></organization>
    </author>
    <author initials="J." surname="Cappos">
      <organization></organization>
    </author>
    <date year="2017" month="December" day="15"/>
  </front>
</reference>
<reference anchor="TUF-spec" target="https://github.com/theupdateframework/specification/blob/2b4e18472fe25d5b57f36f6fa50104967c8faeaa/tuf-spec.md">
  <front>
    <title>The Update Framework Specification</title>
    <author initials="J." surname="Samuel">
      <organization></organization>
    </author>
    <author initials="N." surname="Mathewson">
      <organization></organization>
    </author>
    <author initials="G." surname="Condra">
      <organization></organization>
    </author>
    <author initials="V." surname="Diaz">
      <organization></organization>
    </author>
    <author initials="T.K." surname="Kuppusamy">
      <organization></organization>
    </author>
    <author initials="S." surname="Awwad">
      <organization></organization>
    </author>
    <author initials="S." surname="Tobias">
      <organization></organization>
    </author>
    <author initials="J." surname="Wright">
      <organization></organization>
    </author>
    <author initials="H." surname="Mehnert">
      <organization></organization>
    </author>
    <author initials="E." surname="Tryzelaar">
      <organization></organization>
    </author>
    <author initials="J." surname="Cappos">
      <organization></organization>
    </author>
    <author initials="R." surname="Dingledine">
      <organization></organization>
    </author>
    <date year="2018" month="September" day="19"/>
  </front>
</reference>


    </references>

    <references title='Informative References'>

<reference anchor="MERCURY" target="https://www.usenix.org/system/files/conference/atc17/atc17-kuppusamy.pdf">
  <front>
    <title>Mercury: Bandwidth-Effective Prevention of Rollback Attacks Against Community Repositories</title>
    <author initials="T.K." surname="Kuppusamy">
      <organization></organization>
    </author>
    <author initials="V." surname="Diaz">
      <organization></organization>
    </author>
    <author initials="J." surname="Cappos">
      <organization></organization>
    </author>
    <date year="2017" month="July" day="12"/>
  </front>
  <seriesInfo name="ISBN" value="978-1-931971-38-6"/>
</reference>
<reference anchor="UPTANEESCAR" target="https://ssl.engineering.nyu.edu/papers/kuppusamy_escar_16.pdf">
  <front>
    <title>Securing Software Updates for Automobiles</title>
    <author initials="T.K." surname="Kuppusamy">
      <organization></organization>
    </author>
    <author initials="A." surname="Brown">
      <organization></organization>
    </author>
    <author initials="S." surname="Awwad">
      <organization></organization>
    </author>
    <author initials="D." surname="McCoy">
      <organization></organization>
    </author>
    <author initials="R." surname="Bielawski">
      <organization></organization>
    </author>
    <author initials="C." surname="Mott">
      <organization></organization>
    </author>
    <author initials="S." surname="Lauzon">
      <organization></organization>
    </author>
    <author initials="A." surname="Weimerskirch">
      <organization></organization>
    </author>
    <author initials="J." surname="Cappos">
      <organization></organization>
    </author>
    <date year="2016" month="October" day="16"/>
  </front>
</reference>
<reference anchor="PEP-458" target="https://www.python.org/dev/peps/pep-0458/">
  <front>
    <title>PEP 458 -- Surviving a Compromise of PyPI</title>
    <author initials="T.K." surname="Kuppusamy">
      <organization></organization>
    </author>
    <author initials="V." surname="Diaz">
      <organization></organization>
    </author>
    <author initials="D." surname="Stufft">
      <organization></organization>
    </author>
    <author initials="J." surname="Cappos">
      <organization></organization>
    </author>
    <date year="2013" month="September" day="27"/>
  </front>
</reference>
<reference anchor="DEPLOY" target="https://uptane.github.io/deployment-considerations/index.html">
  <front>
    <title>Uptane Deployment Best Practices</title>
    <author initials="." surname="Members of the Uptane Community">
      <organization></organization>
    </author>
    <date year="n.d."/>
  </front>
</reference>
<reference anchor="USATODAY" target="https://www.usatoday.com/story/tech/columnist/2016/06/28/your-average-car-lot-more-code-driven-than-you-think/86437052/">
  <front>
    <title>Your average car is a lot more code-driven than you think</title>
    <author initials="B." surname="O'Donnell">
      <organization></organization>
    </author>
    <date year="2016" month="June" day="28"/>
  </front>
</reference>
<reference anchor="CR-OTA" target="https://www.consumerreports.org/automotive-technology/automakers-embrace-over-the-air-updates-can-we-trust-digital-car-repair/">
  <front>
    <title>Automakers Embrace Over-the-Air Updates, but Can We Trust Digital Car Repair?</title>
    <author initials="K." surname="Barry">
      <organization></organization>
    </author>
    <date year="2018" month="April" day="20"/>
  </front>
</reference>
<reference anchor="IN-TOTO" target="https://in-toto.io/">
  <front>
    <title>in-toto: A framework to secure the integrity of software supply chains</title>
    <author >
      <organization></organization>
    </author>
    <date year="2018" month="October" day="29"/>
  </front>
</reference>


    </references>



  </back>

<!-- ##markdown-source:
H4sIANDvwWEAA+192XbbVpbou74CK36IpCZpSx7iuB7ulW25ompP15KTSvfq
5QIJUESZBFgAKJnx8r/fPZ8BACU7qerba908xDYInGGfffY8jMfjvbZol/mT
5P26Tcs8OYf/Z2mdJfOqTp7nTXFZJvAkOVutl/kqL9u0LapyL51O6/wKvnp7
cfL6dC+rZmW6glE2NMq4kVHGGY2wN0vb/LKqt0+SopxXe3vFun6SlNXzvC6u
YMCrvLmoN017fO/ej/eO99I6T58kF2+ev9m7ruqPl3W1Wcu/P+ZbeJQ9Sc7K
Nq/LvB0/r9N5u7dHM35Il1UJq9jmzd66eJL8Z1vNRklT1W2dzxv423aFf/mv
vb100y6q+slekoxhSc2T5FW+muZ1k1TzpF3kCo1n1Wq1KYt2Cy8mCW+x96eq
vkzL4jcCzpPkL1VRtgC9q3xZrRFoyYtqAwDBX5O3dfX3fNbCcl6+fDYyuAMo
8ibZn92t8I35JPkLAKQok2fpel01BzRLvkqLZQfIzf++rKrLZU5waiazakUv
N7DpvH2SPIK9tXV1kc8W9HwGS2nxKN6fn9CDOr+kVb/+lX+HPT1JntZV9XG5
LeWTDDZ+dHR872hvr6zqFZ0ZQu9O8u98IkmWz5P9V+/PL0bJ+U8nL1+Oklcn
v46SvJ1NcPHvXjw7Pjr6kb/56+ThvR+Tt/9+ljTrfMa/3n/04Af+9XXe4rEn
78sCJyZMhE2t07ooL3Fb8EfDHz08+vExf6Qvv8bVLeUkAOz1KnkGL7x+8ewJ
baVN60uEyqJt182Tu3evr68nG/52Aod4t87XgC7N3bY+eniXv+D78Z3OYDfk
pCzzT8mdo4dPdszefEeDOHzD/xTnJsnz9Kpouk83gIotPQakgckB8I/HR/do
pxcnb5P7SdrCuV0l2b3HR4/zh/ADPB7f79/jZdEuNlNEjLuA25s1jjmvAZkR
zHfbdN3cnS6r6V0Z7PG92f3j48dHD9MHP9x/eHxvfpw/ns0ezh/m08fZ/MGP
P+In9yerzAfPBV0aHDl5oUPLUsfJq82yLcZ1tcwBTQBRCTzNMGAuJv8+Sf59
s15vmnS1DX87nyQn19dpFj49ncCFrGHwZfj8ZwBmkf4WPvzLJHlVNYu8/Fh1
fuDrFoP+3tH46LFB/4FC/3g2ffRD9qNA/8Hvg74MdnQ/nx39+OD4QXaU33/4
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
YToFo0OeS4kzhw1eX/Y/gL7/X99jYyWtLgEA

-->

</rfc>


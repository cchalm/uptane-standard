<?xml version="1.0" encoding="UTF-8"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc2629 version 1.2.9 -->

<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
]>

<?rfc toc="yes"?>
<?rfc sortrefs="yes"?>
<?rfc symrefs="yes"?>

<rfc ipr="noDerivativesTrust200902" docName="uptane-standard-design" category="info">

  <front>
    <title abbrev="UPTANE">Uptane Standard for Design and Implementation</title>

    <author initials="." surname="Members of the Uptane Alliance Community" fullname="Uptane Alliance Community">
      <organization>Uptane Alliance (c/o Prof. Justin Cappos)</organization>
      <address>
        <postal>
          <street>6 MetroTech</street>
          <city>Brooklyn</city>
          <region>NY</region>
          <code>11201</code>
          <country>USA</country>
        </postal>
        <email>uptane-standards@googlegroups.com</email>
      </address>
    </author>

    <date year="2020" month="November" day="10"/>

    <area>TODO</area>
    <workgroup>TODO</workgroup>
    <keyword>Internet-Draft</keyword>

    <abstract>


<t>This document describes a framework for securing ground vehicle software update systems.</t>



    </abstract>


  </front>

  <middle>


<section anchor="introduction" title="Introduction">

<t>Uptane is a secure software update framework for ground vehicles. This document describes procedures to enable programmers for OEMs and suppliers to securely design and implement this framework in a manner that better protects connected units on ground vehicles. Integrating Uptane as outlined in the sections that follow can reduce the ability of attackers to compromise critical systems. It also assures a faster and easier recovery process should a compromise occur.</t>

<t>These instructions specify the components necessary for a compliant implementation. Individual implementers can make their own technological choices within those requirements. This flexibility makes Uptane adaptable to the many customized update solutions used by manufacturers. If implementers wish to have compatible formats, they may use POUFs. POUFs contain a description of implementation choices as well as data binding formats. An implementer who adopts a POUF, as well as the Uptane Standard, will be able to interoperate with other implementations using that POUF.</t>

</section>
<section anchor="terminology" title="Terminology">

<section anchor="conformance-terminology" title="Conformance terminology">

<t>The keywords MUST, MUST NOT, REQUIRED, SHALL, SHALL NOT, SHOULD, SHOULD NOT, RECOMMENDED, MAY, and OPTIONAL in this document are to be interpreted as described in <xref target="RFC2119"/>.</t>

<t>In order to be considered “Uptane-compliant,” an implementation MUST follow all of these rules as specified in the document.</t>

</section>
<section anchor="terminology-1" title="Terminology">

<t><spanx style="emph">Bundle</spanx>: A set of images released by the repository that is meant to be installed by one or more target ECUs on a vehicle during the same update cycle.</t>

<t><spanx style="emph">Bus</spanx>: An internal communications network that interconnects components within a vehicle. A vehicle can have a number of buses that will vary in terms of power, speed and resources.</t>

<t><spanx style="emph">ECU Identifier</spanx>: An attribute used to identify a specific ECU (e.g., such as a unique serial number).</t>

<t><spanx style="emph">ECU Version Manifest</spanx>: Metadata which details the software version currently installed on the ECU.</t>

<t><spanx style="emph">Hardware Identifier</spanx>: An attribute used to identify a model of an ECU.</t>

<t><spanx style="emph">Image</spanx>: File containing software for an ECU to install. May contain a binary image to flash, installation instructions, and other necessary information for the ECU to properly apply the update. Each ECU typically holds only one image, although this may vary in some cases.</t>

<t><spanx style="emph">Metadata</spanx>:  Information describing the characteristics of data including, for example, structural
metadata describing data structures (e.g., data format, syntax, and semantics) and
descriptive metadata describing data contents (e.g., information security labels). As used in Uptane, metadata can be described as information associated with a role or an image that contains the characteristics or parameters thereof (e.g. cryptographic material parameters, file names and versions.)</t>

<t><spanx style="emph">Primary/Secondary ECUs</spanx>: Terms used to describe the control units within a ground vehicle. A Primary ECU downloads and verifies update images and metadata for itself and for Secondary ECUs, and distributes images and metadata to Secondaries. Thus, it requires extra storage space and a means to download images and metadata.  Secondary ECUs receive their update images and metadata from the Primary, and only need to verify and install their own metadata and images.</t>

<t><spanx style="emph">POUF</spanx>: A document that contains the protocol, operations, usage, and formats (POUF) of a specific Uptane implementation. The POUF contains decisions about SHOULDs and MAYs in an implementation, as well as descriptions of data binding formats. POUFs MAY be used to create compatible Uptane implementations.</t>

<t><spanx style="emph">Repository</spanx>: A server containing metadata about images. May also contain the images themselves. Other data may be stored on the repository to be accessed by ECUs during the update process.</t>

<t><spanx style="emph">Suppliers</spanx>: Independent companies to which auto manufacturers may outsource the production of ECUs. Tier-1 suppliers directly serve the manufacturers. Tier-2 suppliers are those that perform outsourced work for Tier-1 suppliers.</t>

<t><spanx style="emph">Vehicle Version Manifest</spanx>: A compilation of all ECU version manifests on a vehicle. It serves as a master list of all images currently running on all ECUs in the vehicle.</t>

</section>
<section anchor="uptane-role-terminology" title="Uptane Role terminology">

<t>These terms are defined in greater detail in <xref target="roles"/>.</t>

<t><spanx style="emph">Delegations</spanx>: A process by which the responsibility of signing metadata about images is assigned to another party.<vspace />
<spanx style="emph">Role</spanx>: A party (human or machine) responsible for signing a certain type of metadata. The role controls keys and is responsible for signing metadata entrusted to it with these keys. The roles mechanism of Uptane allows the system to distribute signing responsibilities so that the compromise of one key does not necessarily impact the security of the entire system.</t>

<t><list style="symbols">
  <t><spanx style="emph">Root Role</spanx>: Signs metadata that distributes and revokes public keys used to verify the Root, Timestamp, Snapshot, and Targets role metadata.</t>
  <t><spanx style="emph">Snapshot Role</spanx>: Signs metadata that indicates which images the repository has released at the same time.</t>
  <t><spanx style="emph">Targets Role</spanx>: Signs metadata used to verify the image, such as cryptographic hashes and file size.</t>
  <t><spanx style="emph">Timestamp Role</spanx>: Signs metadata that indicates if there are any new metadata or images on the repository.</t>
</list></t>

</section>
<section anchor="acronyms-and-abbreviations" title="Acronyms and abbreviations">

<t><spanx style="emph">CAN Bus</spanx>: Controller Area Network bus standard</t>

<t><spanx style="emph">CDN</spanx>: Content Delivery Network</t>

<t><spanx style="emph">ECUs</spanx>: Electronic Control Units, the computing units on a vehicle</t>

<t><spanx style="emph">LIN Bus</spanx>: Local Interconnect Bus</t>

<t><spanx style="emph">OBD</spanx>: On-board diagnostics</t>

<t><spanx style="emph">SOTA</spanx>: Software Updates Over-the-Air</t>

<t><spanx style="emph">UDS</spanx>: Unified Diagnostic Services</t>

<t><spanx style="emph">VIN</spanx>: Vehicle Identification Number</t>

</section>
</section>
<section anchor="rationale-for-and-scope-of-uptane-standards" title="Rationale for and scope of Uptane Standards">

<t>This Standards document clarifies the essential components and best practices for the secure design, implementation and deployment of Uptane by OEMs and suppliers. These practices contribute to compromise resilience, or the ability to minimize the extent of the threat posed by any given attack.</t>

<t>However, this specification is intended as an implementation guide, and not as a detailed technical argument about the security properties that Uptane provides.  Readers interested in such documentation should refer to published papers that cover this topic.  <xref target="UPTANEESCAR"/></t>

<section anchor="why-uptane-requires-a-standards-document" title="Why Uptane requires a standards document">

<t>A standards document that can guide the safe design, integration and deployment of Uptane in vehicles is needed at this time because:</t>

<t><list style="symbols">
  <t>The number of connected units on the average vehicle continues to grow, with mainstream cars now containing up to 100 million lines of code. <xref target="USATODAY"/></t>
  <t>The expanded use of software over-the-air strategies creates new attack surfaces for malicious parties. <xref target="CR-OTA"/></t>
  <t>Legacy update strategies, such as SSL/TLS or GPG/RSA, are not feasible for use on vehicle ECUs because they force manufacturers to chose between enhanced security and customizability.</t>
  <t>Conventional strategies are also complicated by the differing resources of the ECUs, which can vary greatly in memory, storage space, and Internet connectivity.</t>
  <t>The design of Uptane makes it possible to offer improved design flexibility, without sacrificing security.</t>
  <t>This added design flexibility, however, could be a liability if the framework is implemented incorrectly.</t>
  <t>Standardization of crucial steps in the design, implementation and use of Uptane can assure that customizability does not impact security or functionality.</t>
</list></t>

</section>
<section anchor="scope-of-standards-coverage" title="Scope of Standards coverage">

<t>This document sets guidelines for implementing Uptane in most systems capable of updating software on connected units in ground vehicles, including passenger vehicles, light-duty trucks, heavy-duty trucks, and motorcycles. Uptane could potentially also be applied to other ground vehicles, such as automated shuttles, recreational vehicles, and military ground vehicles. Uptane could even be applied to domains such as IoT devices, medical devices, and unmanned aerial vehicles. In this section, we define the scope of that applicability by providing sample use cases and possible exceptions, aspects of software update security that are not applicable to Uptane, and the design requirements governing the preparation of these standards.</t>

<section anchor="assumptions" title="Assumptions">

<t>We assume the following system preconditions for Uptane:</t>

<t><list style="symbols">
  <t>Vehicles have the ability to establish connectivity to required backend services. For example, this could be done through cellular, Wi-Fi, or hard-wired mechanisms.</t>
  <t>ECUs are either directly connected to the communication channel, or are indirectly connected via some sort of network gateway.</t>
  <t>ECUs are programmable and provide sufficient performance to be updated.</t>
  <t>ECUs must be able to perform a public key cryptography operation as well as some supporting operations.</t>
  <t>There are state-of-the-art secure servers in place, such as the Director and Image repository servers.</t>
</list></t>

<t>It is important that any bugs detected in Uptane implementations be patched promptly. Failure to do so could interfere with the effectiveness of Uptane’s operations.</t>

</section>
<section anchor="use-cases" title="Use cases">

<t>The following use cases provide a number of scenarios illustrating the manner in which software updates could be accomplished using Uptane.</t>

<section anchor="oems-initializing-uptane-at-the-factory-using-sota" title="OEMs initializing Uptane at the factory using SOTA">

<t>An OEM plans to install Uptane on new vehicles. This entails the following components: code to perform full and partial verification, the latest copy of the relevant metadata, the public keys, and an accurate attestation of the latest time. The OEM then either requires its tier-1 suppliers to provide these materials to the suppliers’ assembly lines or can choose to add the materials later at the OEM’s assembly lines. The OEM’s in-vehicle implementation is Uptane-compliant if:</t>

<t><list style="numbers">
  <t>all Primaries perform full verification;</t>
  <t>all Secondaries that are updated via OTA at least perform partial verification; and</t>
  <t>all other ECUs that do not perform any type of verification cannot be updated via OTA.</t>
</list></t>

</section>
<section anchor="updating-one-ecu-with-a-complete-image" title="Updating one ECU with a complete image">

<t>A tier-1 supplier completes work on a revised image for an electronic brake control module. This module will control the brakes on all models of an SUV produced by the OEM mentioned above. Assuming supplier delegation is supported by the OEM for this ECU, each tier-1 supplier digitally signs the image, then delivers the signature and all of its metadata, including delegations, and associated images to the OEM. The OEM adds these metadata and images to its image repository, along with information about any dependencies and conflicts between this image and those for other ECUs used in the OEM’s vehicles. The OEM also updates the inventory database, so that the director repository can instruct the ECU on how to install these updated images.</t>

</section>
<section anchor="updating-individual-ecus-on-demand" title="Updating individual ECUs on demand">

<t>An OEM has issued a recall to address a problem with a keyless entry device that has been locking people out of their cars. The OEM prepares an updated flash image in the manner described above. The OEM then ships USB flash drives to vehicle owners and dealerships that allow those parties to update the firmware of their vehicles.</t>

</section>
<section anchor="update-one-ecu-with-multiple-deltas" title="Update one ECU with multiple deltas">

<t>The OEM wants to use delta updates to save over-the-air bytes. The delta images contain only the code and/or data that has changed from the previous image version. To do so, the OEM must first modify the Director repository, using the vehicle version manifest and dependency resolution to determine the differences between the previous and latest images. The OEM then adds the following to the custom Targets metadata used by the Director repository: (1) the algorithm used to apply a delta image, and (2) the Targets metadata about the delta image. The OEM will also check whether the delta images match the Targets metadata from the Director repository.</t>

</section>
</section>
</section>
<section anchor="exceptions" title="Exceptions">

<t>There are a number of factors that could impede the completion of the above scenarios:</t>

<t><list style="symbols">
  <t>ECUs may be lacking the necessary resources to function as designated. These resources could include weaknesses, in terms of CPU or RAM, that render performance of public key cryptography infeasible; a lack of sufficient storage to undo installation of bad software; or an ECU simply may reside on a low-speed network (e.g., LIN).</t>
  <t>ECUs may reside on different network segments, and may not be able to directly reach each other, requiring a gateway to facilitate communication.</t>
  <t>A user may replace OEM-installed ECUs with aftermarket ECUs.</t>
  <t>A vehicle may be able to download only a limited amount of data via a cellular channel, due to limits on a data plan.</t>
  <t>A system may lack sufficient power to download or install software updates.</t>
  <t>Vehicles may be offline for extended periods of time, thus missing required updates (e.g., key rotations).</t>
  <t>OEMs may be unwilling to implement costly security or hardware requirements.</t>
</list></t>

</section>
<section anchor="out-of-scope" title="Out of Scope">

<t>The following topics will not be addressed in this document, as they represent threats outside the scope of Uptane:</t>

<t><list style="symbols">
  <t>Physical attacks, such as manual tampering with ECUs outside the vehicle.</t>
  <t>Compromise of the packaged software, such as malware embedded in a trusted package.</t>
  <t>Compromise of the supply chain (e.g., build system, version control system, packaging process). A number of strategies (e.g., git signing, TPMs, in-toto <xref target="IN-TOTO"/>)  already exist to address this problem. Therefore, there is no need to duplicate those techniques here.</t>
  <t>Problems associated with OBD or UDS programming of ECUs, such as authentication of communications between ECUs.</t>
  <t>Malicious mirrors of package repositories, which may substitute original packages with malicious packages with matching version numbers <xref target="MERCURY"/>.</t>
</list></t>

</section>
<section anchor="design-requirements" title="Design requirements">

<t>The design requirements for this document are governed by the following principal parameters:</t>

<t><list style="symbols">
  <t>to clearly mandate the design and implementation steps that are security critical and must be followed as is, while offering flexibility in the implementation of non-critical steps. In this manner, users can adapt to support different use models and deployment scenarios.</t>
  <t>to ensure that, if Uptane is implemented, the security practices mandated or suggested in this document do not interfere with the functionality of ECUs, vehicles, or the systems that maintain them.</t>
  <t>to delineate best practices to ensure that, should any part of the SOTA mechanism of a vehicle be attacked, an attacker must compromise two or more modules to breach the SOTA mechanism.</t>
</list></t>

</section>
</section>
<section anchor="threat-model-and-attack-strategies" title="Threat model and attack strategies">

<t>The overarching goal of Uptane is to provide a system that is resilient in the face of various types of compromise. In this section, we describe the goals an attacker may have (<xref target="attacker_goals"/>) and the capabilities they may have or could develop (<xref target="capabilities"/>). We then describe and classify types of attacks on the system according to the attacker’s goals (<xref target="threats"/>).</t>

<section anchor="attacker_goals" title="Attacker goals">

<t>We assume that attackers may want to achieve one or more of the following goals, in increasing order of severity:</t>

<t><list style="symbols">
  <t>Read the contents of updates to discover confidential information, reverse-engineer firmware, or compare two firmware images to identify security fixes and hence determine the fixed security vulnerability</t>
  <t>Deny installation of updates to prevent vehicles from fixing software problems</t>
  <t>Cause one or more ECUs in the vehicle to fail, denying use of the vehicle or of certain functions</t>
  <t>Control ECUs within the vehicle, and possibly the vehicle itself</t>
</list></t>

</section>
<section anchor="capabilities" title="Attacker capabilities">

<t>Uptane is designed with resilience to compromise in mind. We assume that attackers may develop one or more of the following capabilities:</t>

<t><list style="symbols">
  <t>Intercept and modify network traffic (i.e., perform man-in-the-middle attacks). This capability may be developed in two domains:
  <list style="symbols">
      <t>Outside the vehicle, intercepting and modifying traffic between the vehicle and software repositories</t>
      <t>Inside the vehicle, intercepting and modifying traffic on one or more vehicle buses (e.g. via an OBD port or using a compromised ECU as a vector)</t>
    </list></t>
  <t>Compromise and control either a Director repository or Image repository server, and any keys stored on that repository, but not both the Director and Image repositories.</t>
  <t>Compromise either a Primary ECU or a Secondary ECU, but not both in the same vehicle</t>
</list></t>

</section>
<section anchor="threats" title="Description of threats">

<t>Uptane’s threat model includes the following types of attacks, organized according to the attacker goals listed in <xref target="attacker_goals"/>.</t>

<section anchor="read_updates" title="Read updates">

<t><list style="symbols">
  <t><spanx style="emph">Eavesdrop attack:</spanx> Read sensitive or confidential information from an update intended to be encrypted for a specific ECU. (Note: Not all implementations will have a need for protecting information in this way.)</t>
</list></t>

</section>
<section anchor="deny_updates" title="Deny installation of updates">

<t>An attacker seeking to deny the installation of updates may attempt one or more of the following strategies, among others:</t>

<t><list style="symbols">
  <t><spanx style="emph">Drop-request attack:</spanx> Block network traffic outside or inside the vehicle.</t>
  <t><spanx style="emph">Slow retrieval attack:</spanx> Slow down network traffic, in the extreme case sending barely enough packets to avoid a timeout. Similar to a drop-request attack, except that both the sender and receiver of the traffic still think network traffic is unimpeded.</t>
  <t><spanx style="emph">Freeze attack:</spanx> Continue to send a properly signed, but old, update bundle to the ECUs, even if newer updates exist.</t>
  <t><spanx style="emph">Partial bundle installation attack:</spanx> Install a valid (signed) update bundle, and then block selected updates within the bundle.</t>
  <t>Conduct a denial of service attack against the Uptane repositories or infrastructure.</t>
</list></t>

</section>
<section anchor="change_functionality" title="Interfere with ECU functionality">

<t>Attackers seeking to interfere with the functionality of vehicle ECUs in order to cause an operational failure or unexpected behavior may do so in one of the following ways:</t>

<t><list style="symbols">
  <t><spanx style="emph">Rollback attack:</spanx> Cause an ECU to install a previously valid software revision that is older than the currently installed version.</t>
  <t><spanx style="emph">Endless data attack:</spanx> Send a large amount of data to an ECU, until it runs out of storage, possibly causing the ECU to fail to operate.</t>
  <t><spanx style="emph">Mix-and-match attack:</spanx> Install a malicious software bundle in which some of the updates do not interoperate properly. This may be accomplished even if all of the individual images being installed are valid, as long as valid versions exist that are mutually incompatible.</t>
</list></t>

</section>
<section anchor="control_ecu" title="Control an ECU or vehicle">

<t>Full control of a vehicle, or one or more ECUs within a vehicle, is the most severe threat.</t>

<t><list style="symbols">
  <t><spanx style="emph">Arbitrary software attack:</spanx> Cause an ECU to install and run arbitrary code of the attacker’s choice.</t>
</list></t>

</section>
</section>
</section>
<section anchor="design" title="Detailed design of Uptane">

<t>Uptane is a secure software update framework for automobiles. We do not specify implementation details. Instead, we describe the components necessary for a compliant implementation and leave it up to individual implementers to make their own technological choices within those requirements.</t>

<t>At a high level, Uptane requires:</t>

<t><list style="symbols">
  <t>Two software repositories:
  <list style="symbols">
      <t>An Image repository containing binary images to install, and signed metadata about those images</t>
      <t>A Director repository connected to an inventory database that can sign metadata on demand for images in the Image repository</t>
    </list></t>
  <t>Repository tools for generating Uptane-specific metadata about images</t>
  <t>A public key infrastructure supporting the required metadata production/signing roles on each repository:
  <list style="symbols">
      <t>Root - Certificate authority for the Uptane ecosystem. Distributes public keys for verifying all the other roles’ metadata</t>
      <t>Timestamp - Indicates whether there are new metadata or images</t>
      <t>Snapshot - Indicates images released by the repository at a point in time, via signing metadata about Targets metadata</t>
      <t>Targets - Indicates metadata about images, such as hashes and file sizes</t>
    </list></t>
  <t>A secure way for ECUs to know the time.</t>
  <t>An ECU capable of downloading images and associated metadata from the Uptane servers.</t>
  <t>An in-vehicle client on a Primary ECU capable of verifying the signatures on all update metadata and downloading updates on behalf of its associated Secondary ECUs. The Primary ECU MAY be the same ECU that communicates with the server.</t>
  <t>A client or library on each Secondary ECU capable of performing either full or partial verification of metadata</t>
</list></t>

<section anchor="roles" title="Roles on repositories">

<t>A repository contains images and metadata. Each role has a particular type of metadata associated with it, as described in <xref target="meta_structures"/>.</t>

<section anchor="root_role" title="The Root role">

<t>A repository’s Root role SHALL be responsible for a Certificate Authority as defined in <xref target="RFC3647"/>.
A repository’s Root role SHALL produce and sign Root metadata as described in <xref target="root_meta"/>.
A repository’s Root role SHALL sign the public keys used to verify the metadata produced by the Timestamp, Snapshot, and Targets roles.
A repository’s Root role SHALL revoke keys for the other roles, in case of compromise.</t>

</section>
<section anchor="targets_role" title="The Targets role">

<t>A repository’s Targets role SHALL produce and sign metadata about images and delegations as described in <xref target="targets_meta"/>.</t>

<section anchor="targets_role_delegations" title="Delegations">

<t>The Targets role on the Image repository MAY delegate the responsibility of signing metadata to other, custom-defined roles referred to as delegated targets. If it does, it MUST do so as specified in <xref target="delegations_meta"/>.</t>

<t>Responsibility for signing images or a subset of images MAY be delegated to more than one role and therefore it is possible for two different roles to be trusted for signing a particular image. For this reason, delegations MUST be prioritized.</t>

<t>A particular delegation for a subset of images MAY be designated as <spanx style="strong">terminating</spanx>. For terminating delegations, the client SHALL NOT search any further if it does not find validly signed metadata about those images. Delegations SHOULD NOT be terminating by default; terminating delegations SHOULD only be used when there is a compelling technical reason to do so.</t>

<t>A delegation for a subset of images MAY be a multi-role delegation <xref target="TAP-3"/>. A multi-role delegation indicates that multiple roles are needed to sign a particular image and each of the delegatee roles MUST sign the same metadata.</t>

<t>Delegations only apply to the Image repository. The Targets role on the Director repository MUST NOT delegate metadata signing responsibility.</t>

</section>
</section>
<section anchor="snapshot_role" title="The Snapshot role">

<t>A repository’s Snapshot role SHALL produce and sign metadata about all Targets metadata the repository releases, including the current version number of the top-level Targets metadata, and the version numbers of all delegated Targets metadata, as described in <xref target="snapshot_meta"/>.</t>

</section>
<section anchor="timestamp_role" title="The Timestamp role">

<t>A repository’s Timestamp role SHALL produce and sign metadata indicating whether there are new metadata or images on the repository. It MUST do so by signing the metadata about the Snapshot metadata file.</t>

</section>
</section>
<section anchor="meta_structures" title="Metadata structures">

<t>Uptane’s security guarantees all rely on properly created metadata that follows a designated structure. The Uptane standard <spanx style="strong">does not</spanx> mandate any particular format or encoding for the metadata as a whole. ASN.1 (with any encoding scheme like BER, DER, XER, etc.), JSON, XML, or any other encoding format that is capable of providing the required structure MAY be used.</t>

<t>However, string comparison is required as part of metadata verification. To ensure an accurate basis for comparing strings, all strings MUST be encoded in the Unicode Format for Network Interchange as defined in <xref target="RFC5198"/>, including normalization into Unicode Normalization Form C (<xref target="NFC"/>).</t>

<t>In the <spanx style="emph">Deployment Best Practices</spanx> (<xref target="DEPLOY"/>), Joint Development Foundation Projects, LLC, Uptane Series provides some examples of compliant metadata structures in ASN.1 and JSON.</t>

<section anchor="common_metadata" title="Common metadata structures">

<t>Every public key MUST be represented using a public key identifier.  A public key identifier is EITHER all of the following:</t>

<t><list style="symbols">
  <t>The value of the public key itself (which MAY be, for example, formatted as a PEM string)</t>
  <t>The public key cryptographic algorithm used by the key (such as RSA or ECDSA)</t>
  <t>The particular scheme used to verify the signature (such as <spanx style="verb">rsassa-pss-sha256</spanx> or <spanx style="verb">ecdsa-sha2-nistp256</spanx>)</t>
</list></t>

<t>OR a secure hash over at least the above components (such as the keyid mechanism in TUF).</t>

<t>All four Uptane roles (Root, Targets, Snapshot, and Timestamp) share a common structure. They SHALL contain the following two attributes:</t>

<t><list style="symbols">
  <t>A payload of metadata to be signed</t>
  <t>An attribute containing the signature(s) of the payload, where each entry specifies:
  <list style="symbols">
      <t>The public key identifier of the key being used to sign the payload</t>
      <t>A signature with this key over the payload</t>
    </list></t>
</list></t>

<t>The payload differs depending on the role. However, the payload for all roles shares a common structure. It SHALL contain the following four attributes:</t>

<t><list style="symbols">
  <t>An indicator of the type of role (Root, Targets, Snapshot, or Timestamp)</t>
  <t>An expiration date and time</t>
  <t>An integer version number, which SHOULD be incremented each time the metadata file is updated</t>
  <t>The role-specific metadata for the role indicated</t>
</list></t>

<t>The following sections describe the role-specific metadata. All roles SHALL follow the common structures described here.</t>

</section>
<section anchor="root_meta" title="Root metadata">

<t>A repository’s Root metadata distributes the public keys of the top-level Root, Targets, Snapshot, and Timestamp roles, as well as revocations of those keys. It SHALL contain two attributes:</t>

<t><list style="symbols">
  <t>A representation of the public keys for all four roles. Each key SHALL have a unique public key identifier.</t>
  <t>An attribute mapping each role to (1) its public key(s), and (2) the threshold of signatures required for that role</t>
</list></t>

<t>Additionally, it MAY contain a mapping of roles to a list of valid URLs from which the role metadata can be downloaded.  If this mapping of URLs is used, the implementer SHOULD implement this functionality following <xref target="TAP-5"/> to avoid adding unforeseen security risks.</t>

</section>
<section anchor="targets_meta" title="Targets metadata">

<t>The Targets metadata on a repository contains all of the information about images to be installed on ECUs. This includes filenames, hashes, file sizes, and MAY also include other useful information about images, such as what types of hardware are compatible with a particular image.</t>

<t>Targets metadata can also contain metadata about delegations, allowing one Targets role to delegate its authority to another. This means that an individual Targets metadata file might contain only metadata about delegations, only metadata about images, or some combination of the two. The details of how ECUs traverse the delegation tree to find valid metadata about images is specified in <xref target="resolve_delegations"/>.</t>

<section anchor="targets_images_meta" title="Metadata about images">

<t>To be available to install on clients, all images on the repository MUST have their metadata listed in a Targets role.  Each Targets role MAY provide a list of some images on the repository.  This list MUST provide, at a minimum, the following information about each image:</t>

<t><list style="symbols">
  <t>The image filename</t>
  <t>The size of the image in bytes</t>
  <t>One or more hashes of the image file, along with the hashing function used</t>
</list></t>

<section anchor="custom-metadata-about-images" title="Custom metadata about images">

<t>In addition to the required metadata, Targets metadata files MAY contain extra metadata for images on the repository. This metadata can be customized for a particular use case. Examples of use cases for different types of custom metadata can be found in the <spanx style="emph">Deployment Best Practices</spanx> document (<xref target="DEPLOY"/>). However, there are a few important pieces of custom metadata that SHOULD be present in most implementations. In addition, there is one element in the custom metadata that MUST be present in the Targets metadata from the Director.</t>

<t>Custom metadata MAY also contain a demarcated field or section that MUST match whenever two pieces of metadata are checked against each other, such as when Targets metadata from the Director repository is checked against Targets metadata from the Image repository.</t>

<t>The information listed below SHOULD be provided for each image on both the Image repository and the Director repository. If a “MUST match section” is to be implemented, that is where this information SHOULD be placed.</t>

<t><list style="symbols">
  <t>A release counter, to be incremented each time a new version of the image is released. This can be used to prevent rollback attacks even in cases where the Director repository is compromised.</t>
  <t>A hardware identifier, or list of hardware identifiers, representing models of ECUs with which the image is compatible. This can be used to ensure that an ECU cannot be ordered to install an incompatible image, even in cases where the Director repository is compromised.</t>
</list></t>

<t>The following information is CONDITIONALLY REQUIRED for each image on the Director repository IF that image is encrypted:</t>

<t><list style="symbols">
  <t>Information about filenames, hashes, and file size of the encrypted image.</t>
  <t>Information about the encryption method, and other relevant information–for example, a symmetric encryption key encrypted by the ECU’s asymmetric key could be included in the Director repository metadata.</t>
</list></t>

<t>The following information MUST be provided for each image in the Targets metadata from the Director repository:</t>

<t><list style="symbols">
  <t>An ECU identifier (such as a serial number), specifying the ECU that should install the image.</t>
</list></t>

<t>The Director repository MAY provide a download URL for the image file. This may be useful, for example, when the image is on a public CDN and the director wishes to provide a signed URL.</t>

</section>
</section>
<section anchor="delegations_meta" title="Metadata about delegations">

<t>A Targets metadata file on the Image repository (but not the Director repository) MUST be able to delegate signing authority to other entities. For example, it could delegate signing authority for a particular ECU’s firmware to that ECU’s supplier. A metadata file MAY contain any number of delegations and MUST keep the delegations in prioritized order.</t>

<t>A list of delegations MUST provide the following information:</t>

<t><list style="symbols">
  <t>A list of public keys of all delegatees. Each key should have a unique public key identifier and a key type.</t>
  <t>A list of delegations, each of which contains:
  <list style="symbols">
      <t>A list of the filenames to which this role applies. This MAY be expressed using wildcards, or by enumerating a list, or a combination of the two.</t>
      <t>An optional list of the hardware identifiers to which this role applies.  If this is omitted, any hardware identifier will match.</t>
      <t>An indicator of whether or not this is a terminating delegation. (See <xref target="targets_role_delegations"/>.)</t>
      <t>A list of the roles to which this delegation applies. Each role needs to specify:
      <list style="symbols">
          <t>A name for the role (e.g. “supplier1-qa”)</t>
          <t>The key identifiers for each key this role uses</t>
          <t>A threshold of keys that must sign for this role</t>
        </list></t>
    </list></t>
</list></t>

<t>Note that <spanx style="strong">any</spanx> Targets metadata file stored on the Image repository may contain delegations, and these delegations can be in chains of arbitrary length.</t>

</section>
</section>
<section anchor="snapshot_meta" title="Snapshot metadata">

<t>The Snapshot metadata lists version numbers and filenames of all Targets metadata files. It protects against mix-and-match attacks if a delegated supplier key is compromised.</t>

<t>For each Targets metadata file on the repository, the Snapshot metadata SHALL contain the following information:</t>

<t><list style="symbols">
  <t>The filename and version number of the each Targets metadata file on the repository</t>
</list></t>

<t>The Snapshot metadata MAY also list the Root metadata filename and version number. This is not required, particularly for implementations of <xref target="TAP-5"/>, but MAY be included in all cases for backward compatibility.</t>

</section>
<section anchor="timestamp_meta" title="Timestamp metadata">

<t>The Timestamp metadata SHALL contain the following information:</t>

<t><list style="symbols">
  <t>The filename and version number of the latest Snapshot metadata on the repository.</t>
  <t>One or more hashes of the Snapshot metadata file, along with the hashing function used.</t>
</list></t>

</section>
<section anchor="repo_mapping_meta" title="Repository mapping metadata">

<t>As described in the introduction to <xref target="design"/>, Uptane requires a Director repository and an Image repository. However, it is possible to have an Uptane-compliant implementation that has more than two repositories.</t>

<t>Repository mapping metadata informs a Primary ECU about which repositories to trust for images or image paths. <xref target="TAP-4"/> describes how to make use of more complex repository mapping metadata in order to have more than the two required repositories.</t>

<t>Repository mapping metadata, or the equivalent informational content, MUST be present on all Primary ECUs, and MUST contain the following information:</t>

<t><list style="symbols">
  <t>A list of repository names and one or more URLs at which the named repository can be accessed. At a minimum, this MUST include the Director and Image repositories.</t>
  <t>A list of mappings of image paths to repositories, each of which contains:
  <list style="symbols">
      <t>A list of image paths. Image paths MAY be expressed using wildcards, or by enumerating a list, or a combination of the two.</t>
      <t>A list of repositories that MUST sign the Targets metadata for the image paths.</t>
    </list></t>
</list></t>

<t>For example, in the most basic Uptane case, the repository mapping metadata would contain:</t>

<t><list style="symbols">
  <t>The name and URL of the Director repository</t>
  <t>The name and URL of the Image repository</t>
  <t>A single mapping indicating that all images (<spanx style="verb">*</spanx>) MUST be signed by both the Director and Image repository</t>
</list></t>

<t>Note that the metadata need not be in the form of a metadata file. For example, in the basic case where there is only one Director and one Image repository, and all images need to have signed metadata from both repositories, it would be sufficient to have a configuration file with URLs for the two repositories, and a client that always checks for metadata matches between them. In this case, no explicit mapping would be defined, because the mapping is defined as part of the Uptane client implementation.</t>

<t>The <spanx style="emph">Uptane Deployment Best Practices</spanx> document (<xref target="DEPLOY"/>) provides more guidance on how to implement repository mapping metadata for more complex use cases. It also discusses strategies for updating repository mapping metadata, if required.</t>

</section>
<section anchor="metadata_filename_rules" title="Rules for filenames in repositories and metadata">

<t>There is a difference between the file name in a metadata file or an ECU, and the file name on a repository. This difference exists in order to avoid race conditions, where metadata and images are read from, and written to, at the same time. For more details, the reader should read the TUF specification <xref target="TUF-spec"/> and PEP 458 <xref target="PEP-458"/>.</t>

<t>Unless stated otherwise, all files SHALL be written to repositories in accordance with the following two rules:</t>

<t><list style="numbers">
  <t>Metadata filenames SHALL be qualified with version numbers. If a metadata file A is specified as FILENAME.EXT in another metadata file B, then it SHALL be written as VERSION.FILENAME.EXT, where VERSION is A’s version number, as defined in <xref target="common_metadata"/>, with one exception: If the version number of the Timestamp metadata file might not be known in advance by a client, it MAY be read from, and written to, a repository using a filename without a version number qualification, i.e. FILENAME.EXT.</t>
  <t>If an image is specified in a Targets metadata file as FILENAME.EXT, it SHALL be written to the repository as HASH.FILENAME.EXT, where HASH is one of the hash digests of the file, as specified in <xref target="targets_images_meta"/>. The file MUST be written to the repository using <spanx style="emph">n</spanx> different filenames, one for each hash digest listed in its corresponding Targets metadata.</t>
</list></t>

<t>For example:</t>

<t><list style="symbols">
  <t>The version number of the Snapshot metadata file is 61, and its filename in the Timestamp metadata is “snapshot.json”. The filename on the repository will be “61.snapshot.json”.</t>
  <t>There is an image with the filename “acme_firmware.bin” specified in the Targets metadata, with a SHA3-256 of “aaaa” and a SHA-512/224 of “bbbb”. It will have two filenames on the repository: “aaaa.acme_firmware.bin” and “bbbb.acme_firmware.bin”.</t>
</list></t>

</section>
</section>
<section anchor="server-repository-implementation-requirements" title="Server / repository implementation requirements">

<t>An Uptane implementation SHALL make the following services available to vehicles:</t>

<t><list style="symbols">
  <t>Image repository</t>
  <t>Director repository</t>
</list></t>

<t>Additionally, an Uptane implementation requires ECUs to have a secure way to know the current time.</t>

<section anchor="image-repository" title="Image repository">

<t>The Image repository exists to allow an OEM and/or its suppliers to upload images and their associated metadata. It makes these images and their metadata available to vehicles. The Image repository is designed to be primarily controlled by human actors, and updated relatively infrequently.</t>

<t>The Image repository SHALL expose an interface permitting the download of metadata and images. This interface SHOULD be public.</t>

<t>The Image repository SHALL require authorization for writing metadata and images.</t>

<t>The Image repository SHALL provide a method for authorized users to upload images and their associated metadata. It SHALL check that a user writing metadata and images is authorized to do so for that specific image by checking the chain of delegations as described in <xref target="delegations_meta"/>.</t>

<t>The Image repository SHALL implement storage which permits authorized users to write an image file using a unique filename, and later read the same file using the same name. It MAY use any filesystem, key-value store, or database that fulfills this requirement.</t>

<t>The Image repository MAY require authentication for read access.</t>

</section>
<section anchor="director_repository" title="Director repository">

<t>The Director repository instructs ECUs as to which images should be installed by producing signed metadata on demand. Unlike the Image repository, it is mostly controlled by automated, online processes. It also consults a private inventory database containing information on vehicles, ECUs, and software revisions.</t>

<t>The Director repository SHALL expose an interface for Primaries to upload vehicle version manifests (<xref target="vehicle_version_manifest"/>) and download metadata. This interface SHOULD be public.
The Director MAY encrypt images for ECUs that require them, either by encrypting on-the-fly or by storing encrypted images in the repository.</t>

<t>The Director repository SHALL implement storage which permits an automated service to write generated metadata files. It MAY use any filesystem, key-value store, or database that fulfills this requirement.</t>

<section anchor="directing-installation-of-images-on-vehicles" title="Directing installation of images on vehicles">

<t>A Director repository MUST conform to the following six-step process for directing the installation of software images on a vehicle.</t>

<t><list style="numbers">
  <t>The Director SHOULD first identify the vehicle. This MAY be done when the Director receives a vehicle version manifest sent by a Primary (as described in <xref target="construct_manifest_primary"/>), decodes the manifest, and determines the unique vehicle identifier. Additionally, the Director MAY utilize other mechanisms to uniquely identify a vehicle (e.g., 2-way TLS with unique client certificates).</t>
  <t>Using the vehicle identifier, the Director queries its inventory database (as described in <xref target="inventory_db"/>) for relevant information about each ECU in the vehicle.</t>
  <t>The Director SHALL check the manifest for accuracy compared to the information in the inventory database. If any of the required checks fail, the Director MAY drop the request. An implementer MAY make additional checks if desired. At a minimum, the Director SHALL check the following:
  <list style="symbols">
      <t>Each ECU recorded in the inventory database is also represented in the manifest.</t>
      <t>The signature of the manifest matches the ECU key of the Primary that sent it.</t>
      <t>The signature of each Secondary’s contribution to the manifest matches the ECU key of that Secondary.</t>
    </list></t>
  <t>The Director SHOULD check that the nonce or counter in each ECU Version Report has not been used before to prevent a replay of the ECU Version Report. If the nonce or counter is reused the Director SHOULD drop the request.</t>
  <t>The Director extracts information about currently installed images from the vehicle version manifest. Using this information, it determines if the vehicle is already up-to-date, and if not, determines a set of images that should be installed. The exact process by which this determination takes place is out of scope of this standard. However, the Director MUST take into account <spanx style="emph">dependencies</spanx> and <spanx style="emph">conflicts</spanx> between images and SHOULD consult well-established techniques for dependency resolution.</t>
  <t>The Director MAY encrypt images for ECUs that require it.</t>
  <t>The Director generates new metadata representing the desired set of images to be installed on the vehicle, based on the dependency resolution in step 4. This includes Targets (<xref target="targets_meta"/>), Snapshot (<xref target="snapshot_meta"/>), and Timestamp (<xref target="timestamp_meta"/>) metadata. It then sends this metadata to the Primary as described in <xref target="download_meta_primary"/>.</t>
</list></t>

</section>
<section anchor="inventory_db" title="Inventory Database">

<t>The Director SHALL use a private inventory database to store information about ECUs and vehicles. An implementer MAY use any durable database for this purpose.</t>

<t>The inventory database MUST record the following pieces of information:</t>

<t><list style="symbols">
  <t>Per vehicle:
  <list style="symbols">
      <t>A unique identifier (such as a VIN)</t>
    </list></t>
  <t>Per ECU:
  <list style="symbols">
      <t>A unique identifier (such as a serial number)</t>
      <t>The vehicle identifier the ECU is associated with</t>
      <t>An ECU key (symmetric or asymmetric; for asymmetric keys, only the public part SHOULD be stored)</t>
      <t>The ECU key identifier (as defined in <xref target="common_metadata"/>)</t>
      <t>Whether the ECU is a Primary or a Secondary</t>
    </list></t>
</list></t>

<t>The inventory database MAY record other information about ECUs and vehicles. It SHOULD record a hardware identifier for each ECU to protect against the possibility of directing the ECU to install incompatible firmware.</t>

</section>
</section>
</section>
<section anchor="in-vehicle-implementation-requirements" title="In-vehicle implementation requirements">

<t>An Uptane-compliant ECU SHALL be able to download and verify Image metadata and image binaries before installing a new image and MUST have a secure way of verifying the current time, or a sufficiently recent attestation of the time.</t>

<t>Each ECU receiving over-the-air updates in a vehicle is either a Primary or a Secondary ECU. A Primary ECU collects and delivers vehicle manifests to the Director (<xref target="vehicle_version_manifest"/>) that contain information about which images have been installed on ECUs in the vehicle. It also verifies the time and downloads and verifies the latest metadata and images for itself and for its Secondaries. A Secondary ECU verifies the time, and downloads and verifies the latest metadata and images for itself from its associated Primary ECU. It also sends signed information about its installed images to its associated Primary.</t>

<t>All ECUs MUST verify image metadata as specified in <xref target="metadata_verification"/> before installing an image or making it available to other ECUs. A Primary ECU MUST perform full verification (<xref target="full_verification"/>). A Secondary ECU SHOULD perform full verification if possible. If a Secondary cannot perform full verification, it SHALL, at the very least, perform partial verification. In addition, it MAY also perform some steps from the full verification process. See the <spanx style="emph">Uptane Deployment Best Practices</spanx> document (<xref target="DEPLOY"/>) for a discussion of how to choose between partial and full verification.</t>

<t>ECUs MUST have a secure source of time. An OEM/Uptane implementer MAY use any external source of time that is demonstrably secure. The <spanx style="emph">Uptane Deployment Best Practices</spanx> document (<xref target="DEPLOY"/>) describes one way to implement an external time server to cryptographically attest time, as well as the security properties required. When “loading time” is referenced in procedures in this Standard, it should be understood to mean loading into memory the current time (if the ECU has its own secure clock), or the most recent attested time.</t>

<section anchor="build-time-prerequisite-requirements-for-ecus" title="Build-time prerequisite requirements for ECUs">

<t>For an ECU to be capable of receiving Uptane-secured updates, it MUST have the following data provisioned at the time it is manufactured or installed in the vehicle:</t>

<t><list style="numbers">
  <t>A sufficiently recent copy of required Uptane metadata at the time of manufacture or install. This is necessary for the ECU to authenticate that the remote repository is legitimate when it first downloads metadata in the field. See the <spanx style="emph">Uptane Deployment Best Practices</spanx> document (<xref target="DEPLOY"/>) for more information.
  <list style="symbols">
      <t>Partial verification Secondary ECUs MUST have the Root and Targets metadata from the Director repository (to reduce the scope of rollback and replay attacks). These ECUs MAY also have metadata from other roles or the Image repository if they will be used by the Secondary.</t>
      <t>Full verification ECUs MUST have a complete set of metadata (Root, Targets, Snapshot, and Timestamp) from both repositories (to prevent rollback and replay attacks), as well as the repository mapping metadata (<xref target="repo_mapping_meta"/>). Delegations are not required.</t>
    </list></t>
  <t>The current time, or a secure attestation of a sufficiently recent time.</t>
  <t>An <spanx style="strong">ECU key</spanx>. This is a private key, unique to the ECU, used to sign ECU version manifests and decrypt images. An ECU key MAY be either a symmetric key or an asymmetric key. If it is an asymmetric key, there MAY be separate keys for encryption and signing. For the purposes of this standard, the set of private keys that an ECU uses is referred to as the ECU key (singular), even if it is actually multiple keys used for different purposes.</t>
</list></t>

</section>
<section anchor="what-the-primary-does" title="What the Primary does">

<t>A Primary downloads, verifies, and distributes the latest time, metadata and images. To do so, it SHALL perform the following seven steps:</t>

<t><list style="numbers">
  <t>Construct and send vehicle version manifest (<xref target="construct_manifest_primary"/>)</t>
  <t>Download and check current time (<xref target="check_time_primary"/>)</t>
  <t>Download and verify metadata (<xref target="download_meta_primary"/>)</t>
  <t>Download and verify images (<xref target="download_images_primary"/>)</t>
  <t>OPTIONAL: Send latest time to Secondaries (<xref target="send_time_primary"/>)</t>
  <t>Send metadata to Secondaries (<xref target="send_metadata_primary"/>)</t>
  <t>Send images to Secondaries (<xref target="send_images_primary"/>)</t>
</list></t>

<t>Note that the subsequent sections concerning requirements for a Primary do not prohibit implementing Primary capabilities on an ECU that does not communicate directly with the Uptane repositories. This allows for implementations to have multiple ECUs within the vehicle performing functions equivalent to a Primary.
If multiple such Primaries are included within a vehicle, each Secondary ECU SHALL have a single Primary responsible for providing its updates.</t>

<section anchor="construct_manifest_primary" title="Construct and send vehicle version manifest">

<t>The Primary SHALL build a <spanx style="emph">vehicle version manifest</spanx> as described in <xref target="vehicle_version_manifest"/>.</t>

<t>Once the complete manifest is built, the Primary MAY send the manifest to the Director repository. However, it is not strictly required that the Primary send the manifest until step three. If permitted by the implementation, a Primary MAY send only a diff of the manifest to save bandwidth. If an implementation permits diffs, the Director SHOULD have a way to request a full manifest.</t>

<t>Secondaries MAY send their version report at any time so that it is already stored on the Primary when it wishes to check for updates. Alternatively, the Primary MAY request a version report from each Secondary at the time of the update check.</t>

<section anchor="vehicle_version_manifest" title="Vehicle version manifest">

<t>The vehicle version manifest is a metadata structure that MUST contain the following information:</t>

<t><list style="symbols">
  <t>An attribute containing the signature(s) of the payload, each specified by:
  <list style="symbols">
      <t>The public key identifier of the key being used to sign the payload</t>
      <t>The signing method (e.g. ed25519, rsassa-pss, etc.)</t>
      <t>A hash of the payload to be signed</t>
      <t>The hashing function used (e.g. SHA3-256, SHA-512/224, etc.)</t>
      <t>The signature of the hash</t>
    </list></t>
  <t>A payload representing the installed versions of each software image on the vehicle. This payload SHALL contain:
  <list style="symbols">
      <t>The vehicle’s unique identifier (e.g. the VIN)</t>
      <t>The Primary ECU’s unique identifier (e.g. the serial number)</t>
      <t>A list of ECU version reports as specified in <xref target="version_report"/></t>
    </list></t>
</list></t>

<t>Note that one of the ECU version reports should be the version report for the Primary itself.</t>

</section>
<section anchor="version_report" title="ECU version report">

<t>An ECU version report is a metadata structure that MUST contain the following information:</t>

<t><list style="symbols">
  <t>An attribute containing the signature(s) of the payload, each specified by:
  <list style="symbols">
      <t>The public key identifier of the key being used to sign the payload</t>
      <t>The signing method (e.g. ed25519, rsassa-pss, etc.)</t>
      <t>A hash of the payload to be signed</t>
      <t>The hashing function used (e.g. SHA3-256, SHA-512/224, etc.)</t>
      <t>The signature of the hash</t>
    </list></t>
  <t>A payload containing:
  <list style="symbols">
      <t>The ECU’s unique identifier (e.g. the serial number)</t>
      <t>The filename, length, and hashes of its currently installed image (i.e. the non-custom Targets metadata for this particular image)</t>
      <t>An indicator of any detected security attack</t>
      <t>The latest time the ECU can verify at the time this version report was generated</t>
      <t>A nonce or counter to prevent a replay of the ECU version report. This value MUST change each update cycle and MAY be the cryptographic nonce used with a Time Server.</t>
    </list></t>
</list></t>

</section>
</section>
<section anchor="check_time_primary" title="Download and check current time">

<t>The Primary SHALL load the current time from a secure source.</t>

</section>
<section anchor="download_meta_primary" title="Download and verify metadata">

<t>The Primary SHALL download metadata for all targets and perform a full verification on it as specified in <xref target="full_verification"/>.</t>

</section>
<section anchor="download_images_primary" title="Download and verify images">

<t>The Primary SHALL download and verify images for itself and for all of its associated Secondaries. Images SHALL be verified by checking that the hash of the image file matches the hash specified in the Director’s Targets metadata for that image.</t>

<t>There may be several different filenames that all refer to the same image binary, as described in <xref target="metadata_filename_rules"/>. If the Primary has received multiple hashes for a given image binary via the Targets role (see <xref target="targets_images_meta"/>) then it SHALL verify every hash for this image despite that the image is identified by a single hash as part of its filename.</t>

</section>
<section anchor="send_time_primary" title="Send latest time to Secondaries">

<t>Unless the Secondary ECU has its own way of verifying the time or does not have the capacity to verify a time message, the Primary is CONDITIONALLY REQUIRED to send the time to each ECU. The Secondary will verify the time message, then overwrite its current time with the received time.</t>

</section>
<section anchor="send_metadata_primary" title="Send metadata to Secondaries">

<t>The Primary SHALL send its latest downloaded metadata to all of its associated Secondaries. The metadata it sends to each Secondary MUST include all of the metadata required for verification on that Secondary. For full verification Secondaries, this includes the metadata for all four roles from both repositories, plus any delegated Targets metadata files the Secondary will recurse through to find the proper delegation. For partial verification Secondaries, this MAY include fewer metadata files; it includes only the Targets metadata file from the Director repository at a minimum.</t>

<t>The Primary SHOULD determine the minimal set of metadata files to send to each Secondary by performing delegation resolution as described in <xref target="full_verification"/>.</t>

<t>Each Secondary SHALL store the latest copy of all metadata required for its own verification.</t>

</section>
<section anchor="send_images_primary" title="Send images to Secondaries">

<t>The Primary SHALL send the latest image to each of its associated Secondaries that have storage to receive it.</t>

<t>For Secondaries without storage, the Primary SHOULD wait for a request from the Secondary to stream the new image file to it. The Secondary will send the request once it has verified the metadata sent in the previous step.</t>

</section>
</section>
<section anchor="installing-images-on-primary-or-secondary-ecus" title="Installing images on Primary or Secondary ECUs">

<t>An ECU SHALL perform the following steps when attempting to install a new image:</t>

<t><list style="numbers">
  <t>Verify latest attested time. This is optional if the ECU does not have the capacity to verify a time message (<xref target="verify_time"/>)</t>
  <t>Verify metadata (<xref target="verify_metadata"/>)</t>
  <t>Download latest image (<xref target="download_image"/>)</t>
  <t>Verify image (<xref target="verify_image"/>)</t>
  <t>Install image (<xref target="install_image"/>)</t>
  <t>Create and send version report (<xref target="create_version_report"/>)</t>
</list></t>

<section anchor="verify_time" title="Load and verify the latest attested time">

<t>IF the ECU has the capability to verify a time message, the ECU is CONDITIONALLY REQUIRED to load and verify the current time, or the most recent securely attested time.</t>

</section>
<section anchor="verify_metadata" title="Verify metadata">

<t>The ECU SHALL verify the latest downloaded metadata (<xref target="metadata_verification"/>) using either full or partial verification. If the metadata verification fails for any reason, the ECU SHALL jump to the final step (<xref target="create_version_report"/>).</t>

</section>
<section anchor="download_image" title="Download latest image">

<t>If the ECU does not have secondary storage, i.e. buffer storage to temporarily store the latest image before installing it, it SHALL download the latest image from the Primary. (If the ECU has secondary storage, it will already have the latest image in its secondary storage as specified in <xref target="send_images_primary"/>, and should skip to the next step.) The ECU MAY first create a backup of its previous working image and store it elsewhere (e.g., the Primary).</t>

<t>The filename used to identify the latest known image (i.e., the file to request from the Primary) SHALL be determined as follows:</t>

<t><list style="numbers">
  <t>Load the Targets metadata file from the Director repository.</t>
  <t>Find the Targets metadata associated with this ECU identifier.</t>
  <t>Construct the Image filename using the rule in <xref target="metadata_filename_rules"/>, or use the download URL specified in the Director metadata.</t>
  <t>If there is no Targets metadata about this image, abort the update cycle and report that there is no such image. Additionally, in the case of failure, the ECU SHALL retain its previous Targets metadata instead of using the new Targets metadata. Otherwise, download the image (up to the number of bytes specified in the Targets metadata) and verify it according to <xref target="verify_image"/>.</t>
</list></t>

<t>When the Primary responds to the download request, the ECU SHALL overwrite its current image with the downloaded image from the Primary.</t>

<t>If any part of this step fails, the ECU SHALL jump to the final step (<xref target="create_version_report"/>).</t>

</section>
<section anchor="verify_image" title="Verify image">

<t>The ECU SHALL verify that the latest image matches the latest metadata as follows:</t>

<t><list style="numbers">
  <t>Load the latest Targets metadata file from the Director.</t>
  <t>Find the Targets metadata associated with this ECU identifier.</t>
  <t>Check that the hardware identifier in the metadata matches the ECUs hardware identifier.</t>
  <t>Check that the image filename is valid for this ECU. This MAY be a comparison against a wildcard path, which restricts the ECUs to which a delegation will apply.</t>
  <t>Check that the release counter of the image in the previous metadata, if it exists, is less than or equal to the release counter in the latest metadata.</t>
  <t>If the image is encrypted, decrypt the image with a decryption key to be chosen as follows:
  <list style="symbols">
      <t>If the ECU key is a symmetric key, the ECU SHALL use the ECU key for image decryption.</t>
      <t>If the ECU key is asymmetric, the ECU SHALL check the Targets metadata for an encrypted symmetric key. If such a key is found, the ECU SHALL decrypt the symmetric key using its ECU key, and use the decrypted symmetric key for image decryption.</t>
      <t>If the ECU key is asymmetric and there is no symmetric key in the target metadata, the ECU SHALL use its ECU key for image decryption.</t>
    </list></t>
  <t>Check that all hashes listed in the metadata match the corresponding hashes of the image.</t>
</list></t>

<t>If the ECU has secondary storage, the checks SHOULD be performed on the image in secondary storage before it is installed.</t>

<t>When checking hashes, the ECU SHOULD additionally check that the length of the image matches the length listed in the metadata.</t>

<t>NOTE: Verifying image size along with hash will become a requirement in a future version of the Uptane standard.</t>

<t>NOTE: See <xref target="DEPLOY"/> for guidance on how to deal with Secondary ECU failures for ECUs that do not have secondary storage.</t>

<t>If any step fails, the ECU SHALL jump to the (<xref target="create_version_report"/>) step.</t>

</section>
<section anchor="install_image" title="Install image">

<t>The ECU SHALL attempt to install the update. This installation SHOULD occur at a time when all pre-conditions are met. These pre-conditions MAY include ensuring the vehicle is in a safe environment for install (e.g., the vehicle is parked when updating a specific ECU). Another pre-condition MAY include ensuring the ECU has a backup of its current image and metadata in case the current installation fails.</t>

</section>
<section anchor="create_version_report" title="Create and send version report">

<t>The ECU SHALL create a version report as described in <xref target="version_report"/>, and send it to the Primary (or simply save it to disk, if the ECU is a Primary). The Primary SHOULD write the version reports it receives to disk and associate them with the Secondaries that sent them.</t>

</section>
</section>
<section anchor="metadata_verification" title="Metadata verification procedures">

<t>A Primary ECU MUST perform full verification of metadata. A Secondary ECU SHOULD perform full verification of metadata. If a Secondary cannot perform full verification, it SHALL, at the very least, perform partial verification.</t>

<t>If a step in the following workflows does not succeed (e.g., the update is aborted because a new metadata file was not signed), an ECU SHOULD still be able to update again in the future. Errors raised during the update process SHOULD NOT leave ECUs in an unrecoverable state.</t>

<section anchor="partial_verification" title="Partial verification">

<t>In order to perform partial verification, an ECU SHALL perform the following steps:</t>

<t><list style="numbers">
  <t>Load and verify the current time or the most recent securely attested time.</t>
  <t>Download and check the Targets metadata file from the Director repository, following the procedure in <xref target="check_targets"/>.</t>
</list></t>

<t>Note that this verification procedure is the smallest set of Uptane checks permissible for an Uptane Secondary ECU. An ECU MAY additionally implement more metadata checks.</t>

<t>For example, an ECU MAY also fetch and verify Root metadata from the Director (following the procedure in <xref target="check_root"/>) before checking Targets metadata. Performing this additional check would provide the ECU with a secure way to receive and validate a rotation of the Director’s Targets key.</t>

<t>See <xref target="DEPLOY"/> for more discussion on this topic.</t>

</section>
<section anchor="full_verification" title="Full verification">

<t>Full verification of metadata means that the ECU checks that the Targets metadata about images from the Director repository matches the Targets metadata about the same images from the Image repository. This provides resilience to a key compromise in the system.</t>

<t>Full verification MUST be performed by Primary ECUS and MAY be performed by Secondary ECUs. In the following instructions, whenever an ECU is directed to download metadata, it applies only to Primary ECUs.</t>

<t>If <xref target="TAP-5"/> is supported and a Primary has an external connection to the Uptane repositories, a Primary ECU SHALL download metadata and images following the rules specified in that TAP.  If <xref target="TAP-5"/> is not supported, or if the Primary does not have an external connection to the Uptane repositories, the download SHOULD follow the <xref target="TUF-spec"/> and the metadata file renaming rules specified in <xref target="metadata_filename_rules"/>.</t>

<t>Before starting full verification, the repository mapping metadata MUST be consulted to determine where to download metadata from. This procedure assumes the basic Uptane case: there are only two repositories (Director and Image), and all image paths are required to be signed by both repositories. If a more complex repository layout is being used, refer to <xref target="DEPLOY"/> for guidance on how to determine where metadata should be downloaded from.</t>

<t>In order to perform full verification, an ECU SHALL perform the following steps:</t>

<t><list style="numbers">
  <t>Load and verify the current time or the most recent securely attested time.</t>
  <t>Download and check the Root metadata file from the Director repository, following the procedure in <xref target="check_root"/>.</t>
  <t>Download and check the Timestamp metadata file from the Director repository, following the procedure in <xref target="check_timestamp"/>.</t>
  <t>Check the previously downloaded Snapshot metadata file from the Directory repository (if available). If the hashes and version number of that file match the hashes and version number listed in the new Timestamp metadata, there are no new updates and the verification process MAY be stopped and considered complete. Otherwise, download and check the Snapshot metadata file from the Director repository, following the procedure in <xref target="check_snapshot"/>.</t>
  <t>Download and check the Targets metadata file from the Director repository, following the procedure in <xref target="check_targets"/>.</t>
  <t>If the Targets metadata from the Directory repository indicates that there are no new targets that are not already currently installed, the verification process MAY be stopped and considered complete. Otherwise, download and check the Root metadata file from the Image repository, following the procedure in <xref target="check_root"/>.</t>
  <t>Download and check the Timestamp metadata file from the Image repository, following the procedure in <xref target="check_timestamp"/>.</t>
  <t>Check the previously downloaded Snapshot metadata file from the Image repository (if available). If the hashes and version number of that file match the hashes and version number listed in the new Timestamp metadata, the ECU MAY skip to the last step. Otherwise, download and check the Snapshot metadata file from the Image repository, following the procedure in <xref target="check_snapshot"/>.</t>
  <t>Download and check the top-level Targets metadata file from the Image repository, following the procedure in <xref target="check_targets"/>.</t>
  <t>Verify that Targets metadata from the Director and Image repositories match. A Primary ECU MUST perform this check on metadata for all images listed in the Targets metadata file from the Director repository downloaded in step 6. A Secondary ECU MAY elect to perform this check only on the metadata for the image it will install. (That is, the target metadata from the Director that contains the ECU identifier of the current ECU.) To check that the metadata for an image matches, complete the following procedure:
  <list style="numbers">
      <t>Locate and download a Targets metadata file from the Image repository that contains an image with exactly the same file name listed in the Director metadata, following the procedure in <xref target="resolve_delegations"/>.</t>
      <t>Check that the Targets metadata from the Image repository matches the Targets metadata from the Director repository:
      <list style="numbers">
          <t>Check that the non-custom metadata (i.e., length and hashes) of the unencrypted or encrypted image are the same in both sets of metadata. Note: the Primary is responsible for validating encrypted images and associated metadata. The target ECU (Primary or Secondary) is responsible for validating the unencrypted image and associated metadata.</t>
          <t>Check that all “MUST match” custom metadata (e.g., hardware identifier and release counter) are the same in both sets of metadata.</t>
          <t>Check that the release counter in the previous Targets metadata file is less than or equal to the release counter in this Targets metadata file.</t>
        </list></t>
    </list></t>
</list></t>

<t>If any step fails, the ECU MUST return an error code indicating the failure. If a check for a specific type of security attack fails (e.g. rollback, freeze, arbitrary software, etc.), the ECU SHOULD return an error code that indicates the type of attack.</t>

</section>
<section anchor="check_root" title="How to check Root metadata">

<t>To properly check Root metadata, an ECU SHOULD:</t>

<t><list style="numbers">
  <t>Load the previous Root metadata file.</t>
  <t>Update to the latest Root metadata file.
  <list style="numbers">
      <t>Let N denote the version number of the latest Root metadata file (which at first could be the same as the previous Root metadata file).</t>
      <t>Try downloading a new version N+1 of the Root metadata file, up to some X number of bytes. The value for X is set by the implementer. For example, X may be tens of kilobytes. The filename used to download the Root metadata file is of the fixed form VERSION_NUMBER.FILENAME.EXT (e.g., 42.root.json). If this file is not available, the current Root metadata file is the latest; continue with step 3.</t>
      <t>Version N+1 of the Root metadata file MUST have been signed by the following: (1) a threshold of keys specified in the latest Root metadata file (version N), and (2) a threshold of keys specified in the new Root metadata file being validated (version N+1). If version N+1 is not signed as required, discard it, abort the update cycle, and report the signature failure. On the next update cycle, begin at version N of the Root metadata file. (Checks for an arbitrary software attack.)</t>
      <t>The version number of the latest Root metadata file (version N) must be less than or equal to the version number of the new Root metadata file (version N+1). Effectively, this means checking that the version number signed in the new Root metadata file is indeed N+1. If the version of the new Root metadata file is less than the latest metadata file, discard it, abort the update cycle, and report the rollback attack. On the next update cycle, begin at step 1 and version N of the Root metadata file. (Checks for a rollback attack.)</t>
      <t>Set the latest Root metadata file to the new Root metadata file.</t>
      <t>Repeat steps 2.1 to 2.6.</t>
    </list></t>
  <t>Check that the current (or latest securely attested) time is lower than the expiration timestamp in the latest Root metadata file. (Checks for a freeze attack.)</t>
  <t>If the Timestamp and/or Snapshot keys have been rotated, delete the previous Timestamp and Snapshot metadata files. (Checks for recovery from fast-forward attacks <xref target="MERCURY"/>.)</t>
</list></t>

</section>
<section anchor="check_timestamp" title="How to check Timestamp metadata">

<t>To properly check Timestamp metadata, an ECU SHOULD:</t>

<t><list style="numbers">
  <t>Download up to Y number of bytes. The value for Y is set by the implementer. For example, Y may be tens of kilobytes. The filename used to download the Timestamp metadata file is of the fixed form FILENAME.EXT (e.g., timestamp.json).</t>
  <t>Check that it has been signed by the threshold of keys specified in the latest Root metadata file. If the new Timestamp metadata file is not properly signed, discard it, abort the update cycle, and report the signature failure. (Checks for an arbitrary software attack.)</t>
  <t>Check that the version number of the previous Timestamp metadata file, if any, is less than or equal to the version number of this Timestamp metadata file. If the new Timestamp metadata file is older than the trusted Timestamp metadata file, discard it, abort the update cycle, and report the potential rollback attack. (Checks for a rollback attack.)</t>
  <t>Check that the current (or latest securely attested) time is lower than the expiration timestamp in this Timestamp metadata file. If the new Timestamp metadata file has expired, discard it, abort the update cycle, and report the potential freeze attack. (Checks for a freeze attack.)</t>
</list></t>

</section>
<section anchor="check_snapshot" title="How to check Snapshot metadata">

<t>To properly check Snapshot metadata, an ECU SHOULD:</t>

<t><list style="numbers">
  <t>Download up to the number of bytes specified in the Timestamp metadata file, constructing the metadata filename as defined in <xref target="metadata_filename_rules"/>.</t>
  <t>The hashes and version number of the new Snapshot metadata file MUST match the hashes and version number listed in Timestamp metadata. If the hashes and version number do not match, discard the new Snapshot metadata, abort the update cycle, and report the failure. (Checks for a mix-and-match attack.)</t>
  <t>Check that it has been signed by the threshold of keys specified in the latest Root metadata file. If the new Snapshot metadata file is not signed as required, discard it, abort the update cycle, and report the signature failure. (Checks for an arbitrary software attack.)</t>
  <t>Check that the version number of the previous Snapshot metadata file, if any, is less than or equal to the version number of this Snapshot metadata file. If this Snapshot metadata file is older than the previous Snapshot metadata file, discard it, abort the update cycle, and report the potential rollback attack. (Checks for a rollback attack.)</t>
  <t>Check that the version number listed by the previous Snapshot metadata file for each Targets metadata file is less than or equal to its version number in this Snapshot metadata file. If this condition is not met, discard the new Snapshot metadata file, abort the update cycle, and report the failure. (Checks for a rollback attack.)</t>
  <t>Check that each Targets metadata filename listed in the previous Snapshot metadata file is also listed in this Snapshot metadata file. If this condition is not met, discard the new Snapshot metadata file, abort the update cycle, and report the failure. (Checks for a rollback attack.)</t>
  <t>Check that the current (or latest securely attested) time is lower than the expiration timestamp in this Snapshot metadata file. If the new Snapshot metadata file is expired, discard it, abort the update cycle, and report the potential freeze attack. (Checks for a freeze attack.)</t>
</list></t>

</section>
<section anchor="check_targets" title="How to check Targets metadata">

<t>To properly check Targets metadata, an ECU SHOULD:</t>

<t><list style="numbers">
  <t>Download up to Z number of bytes, constructing the metadata filename as defined in <xref target="metadata_filename_rules"/>. The value for Z is set by the implementer. For example, Z may be tens of kilobytes.</t>
  <t>The version number of the new Targets metadata file MUST match the version number listed in the latest Snapshot metadata. If the version number does not match, discard it, abort the update cycle, and report the failure. (Checks for a mix-and-match attack.) This step MAY be skipped when checking Targets metadata on a partial verification ECU; partial verification ECUs might not have Snapshot metadata.</t>
  <t>Check that the Targets metadata has been signed by the threshold of keys specified in the relevant metadata file (Checks for an arbitrary software attack):
  <list style="numbers">
      <t>If checking top-level Targets metadata, the threshold of keys is specified in the Root metadata.</t>
      <t>If checking delegated Targets metadata, the threshold of keys is specified in the Targets metadata file that delegated authority to this role.</t>
    </list></t>
  <t>Check that the version number of the previous Targets metadata file, if any, is less than or equal to the version number of this Targets metadata file. (Checks for a rollback attack.)</t>
  <t>Check that the current (or latest securely attested) time is lower than the expiration timestamp in this Targets metadata file. (Checks for a freeze attack.)</t>
  <t>If checking Targets metadata from the Director repository, verify that there are no delegations.</t>
  <t>If checking Targets metadata from the Director repository, check that no ECU identifier is represented more than once.</t>
  <t>If checking Targets metadata from the Director repository, and the ECU performing the verification is the Primary ECU, check that all listed ECU identifiers correspond to ECUs that are actually present in the vehicle.</t>
</list></t>

</section>
<section anchor="resolve_delegations" title="How to resolve delegations">

<t>To properly check Targets metadata for an image, an ECU MUST locate the metadata file(s) for the role (or roles) that have the authority to sign the image. This metadata might be located in the top-level Targets metadata, but it also may be delegated to another role or to multiple roles. Therefore, all delegations MUST be resolved using the following recursive procedure, beginning with the top-level Targets metadata file.</t>

<t><list style="numbers">
  <t>Download the current metadata file, and check it following the procedure in <xref target="check_targets"/>. If the file cannot be loaded, or if any verification step fails, abort the delegation resolution, and indicate that Image metadata cannot be found because of a missing or invalid role.</t>
  <t>If the current metadata file contains signed metadata about the image, end the delegation resolution and return the metadata to be checked.</t>
  <t>If the current metadata file was reached via a terminating delegation and does not contain signed metadata about the image, abort the delegation resolution for this image and return an error indicating that image metadata could not be found.</t>
  <t>Search the list of delegations, in listed order. For each delegation:
  <list style="numbers">
      <t>Check if the delegation applies to the image being processed. For the delegation to apply, it MUST include the hardware identifier of the target, and the target name must match one of the delegation’s image paths. If either of these tests fail, move on to the next delegation in the list.</t>
      <t>If the delegation is a multi-role delegation, follow the procedure described in <xref target="multirole_delegations"/>. If the multi-role delegation is terminating and no valid Image metadata is found, abort the delegation resolution and return an error indicating that image metadata could not be found.</t>
      <t>If the delegation is a normal delegation, perform delegation resolution, starting at step 1. Note that this may recurse an arbitrary number of levels deep. If a delegation that applies to the image is found but no image metadata is found in the delegated roles or any of its sub-delegations, simply continue on with the next delegation in the list. The search is only completed/aborted if image metadata or a terminating delegation that applies to the image is found.</t>
    </list></t>
  <t>If the end of the list of delegations in the top-level metadata is reached without finding valid image metadata, return an error indicating that image metadata could not be found.</t>
</list></t>

</section>
<section anchor="multirole_delegations" title="Multi-role delegations">

<t>It is possible to delegate signing authority to multiple delegated roles as described in <xref target="TAP-3"/>. Each multi-role delegation effectively contains a list of ordinary delegations, plus a threshold of those roles that must be in agreement about the non-custom metadata for the image. All multi-role delegations MUST be resolved using the following procedure. Note that there may be sub-delegations inside multi-role delegations.</t>

<t><list style="numbers">
  <t>For each of the roles in the delegation, find and load the image metadata (or error) following the procedure in <xref target="resolve_delegations"/>.</t>
  <t>Inspect the non-custom part of the metadata loaded in step 1:
  <list style="numbers">
      <t>Locate all sets of roles which have agreeing (i.e. identical) non-custom metadata and “MUST match” custom metadata. Discard any set of roles with a size smaller than the threshold of roles that must be in agreement for this delegation.</t>
      <t>Check for a conflict. A conflict exists if there remains more than one agreeing set of roles, each set having different metadata. If a conflict is found, choose and return the metadata from the set of roles which includes the earliest role in the multi-delegation list.</t>
      <t>If there is no conflict, check if there is any single set of roles with matching non-custom metadata. If there is, choose and return the metadata from this set.</t>
      <t>If no agreeing set can be found that meets the agreement threshold, return an error indicating that image metadata could not be found.</t>
    </list></t>
</list></t>

</section>
</section>
</section>
</section>


  </middle>

  <back>

    <references title='Normative References'>





<reference  anchor="RFC2119" target='https://www.rfc-editor.org/info/rfc2119'>
<front>
<title>Key words for use in RFCs to Indicate Requirement Levels</title>
<author initials='S.' surname='Bradner' fullname='S. Bradner'><organization /></author>
<date year='1997' month='March' />
<abstract><t>In many standards track documents several words are used to signify the requirements in the specification.  These words are often capitalized. This document defines these words as they should be interpreted in IETF documents.  This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t></abstract>
</front>
<seriesInfo name='BCP' value='14'/>
<seriesInfo name='RFC' value='2119'/>
<seriesInfo name='DOI' value='10.17487/RFC2119'/>
</reference>



<reference  anchor="RFC3647" target='https://www.rfc-editor.org/info/rfc3647'>
<front>
<title>Internet X.509 Public Key Infrastructure Certificate Policy and Certification Practices Framework</title>
<author initials='S.' surname='Chokhani' fullname='S. Chokhani'><organization /></author>
<author initials='W.' surname='Ford' fullname='W. Ford'><organization /></author>
<author initials='R.' surname='Sabett' fullname='R. Sabett'><organization /></author>
<author initials='C.' surname='Merrill' fullname='C. Merrill'><organization /></author>
<author initials='S.' surname='Wu' fullname='S. Wu'><organization /></author>
<date year='2003' month='November' />
<abstract><t>This document presents a framework to assist the writers of certificate policies or certification practice statements for participants within public key infrastructures, such as certification authorities, policy authorities, and communities of interest that wish to rely on certificates.  In particular, the framework provides a comprehensive list of topics that potentially (at the writer's discretion) need to be covered in a certificate policy or a certification practice statement.  This document supersedes RFC 2527.</t></abstract>
</front>
<seriesInfo name='RFC' value='3647'/>
<seriesInfo name='DOI' value='10.17487/RFC3647'/>
</reference>



<reference  anchor="RFC5198" target='https://www.rfc-editor.org/info/rfc5198'>
<front>
<title>Unicode Format for Network Interchange</title>
<author initials='J.' surname='Klensin' fullname='J. Klensin'><organization /></author>
<author initials='M.' surname='Padlipsky' fullname='M. Padlipsky'><organization /></author>
<date year='2008' month='March' />
<abstract><t>The Internet today is in need of a standardized form for the transmission of internationalized &quot;text&quot; information, paralleling the specifications for the use of ASCII that date from the early days of the ARPANET.  This document specifies that format, using UTF-8 with normalization and specific line-ending sequences.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='5198'/>
<seriesInfo name='DOI' value='10.17487/RFC5198'/>
</reference>


<reference anchor="NFC" target="http://www.unicode.org/reports/tr15/">
  <front>
    <title>Unicode Standard Annex #15: Unicode Normalization Forms</title>
    <author initials="M." surname="Davis">
      <organization></organization>
    </author>
    <author initials="M." surname="Duerst">
      <organization></organization>
    </author>
    <date year="2018" month="October"/>
  </front>
</reference>
<reference anchor="TAP-3" target="https://github.com/theupdateframework/taps/blob/d0818e580c322815a473520f2e8cc5f5eb8df499/tap3.md">
  <front>
    <title>The Update Framework TAP 3 - Multi-role delegations</title>
    <author initials="T.K." surname="Kuppusamy">
      <organization></organization>
    </author>
    <author initials="S." surname="Awwad">
      <organization></organization>
    </author>
    <author initials="E." surname="Cordell">
      <organization></organization>
    </author>
    <author initials="V." surname="Diaz">
      <organization></organization>
    </author>
    <author initials="J." surname="Moshenko">
      <organization></organization>
    </author>
    <author initials="J." surname="Cappos">
      <organization></organization>
    </author>
    <date year="2018" month="January" day="18"/>
  </front>
</reference>
<reference anchor="TAP-4" target="https://github.com/theupdateframework/taps/blob/2cb67d913ec19424d1e354b38f862886fbfd4105/tap4.md">
  <front>
    <title>The Update Framework TAP 4 - Multiple repository consensus on entrusted targets</title>
    <author initials="T.K." surname="Kuppusamy">
      <organization></organization>
    </author>
    <author initials="S." surname="Awwad">
      <organization></organization>
    </author>
    <author initials="E." surname="Cordell">
      <organization></organization>
    </author>
    <author initials="V." surname="Diaz">
      <organization></organization>
    </author>
    <author initials="J." surname="Moshenko">
      <organization></organization>
    </author>
    <author initials="J." surname="Cappos">
      <organization></organization>
    </author>
    <date year="2017" month="December" day="15"/>
  </front>
</reference>
<reference anchor="TAP-5" target="https://github.com/theupdateframework/taps/blob/01726d203c9b9c029d26f6612069ce3180500d9a/tap5.md#downloading-metadata-and-target-files">
  <front>
    <title>The Update Framework TAP 5 - Setting URLs for roles in the root metadata file</title>
    <author initials="T.K." surname="Kuppusamy">
      <organization></organization>
    </author>
    <author initials="S." surname="Awwad">
      <organization></organization>
    </author>
    <author initials="E." surname="Cordell">
      <organization></organization>
    </author>
    <author initials="V." surname="Diaz">
      <organization></organization>
    </author>
    <author initials="J." surname="Moshenko">
      <organization></organization>
    </author>
    <author initials="J." surname="Cappos">
      <organization></organization>
    </author>
    <date year="2018" month="January" day="22"/>
  </front>
</reference>
<reference anchor="TUF-spec" target="https://github.com/theupdateframework/specification/blob/2b4e18472fe25d5b57f36f6fa50104967c8faeaa/tuf-spec.md">
  <front>
    <title>The Update Framework Specification</title>
    <author initials="J." surname="Samuel">
      <organization></organization>
    </author>
    <author initials="N." surname="Mathewson">
      <organization></organization>
    </author>
    <author initials="G." surname="Condra">
      <organization></organization>
    </author>
    <author initials="V." surname="Diaz">
      <organization></organization>
    </author>
    <author initials="T.K." surname="Kuppusamy">
      <organization></organization>
    </author>
    <author initials="S." surname="Awwad">
      <organization></organization>
    </author>
    <author initials="S." surname="Tobias">
      <organization></organization>
    </author>
    <author initials="J." surname="Wright">
      <organization></organization>
    </author>
    <author initials="H." surname="Mehnert">
      <organization></organization>
    </author>
    <author initials="E." surname="Tryzelaar">
      <organization></organization>
    </author>
    <author initials="J." surname="Cappos">
      <organization></organization>
    </author>
    <author initials="R." surname="Dingledine">
      <organization></organization>
    </author>
    <date year="2018" month="September" day="19"/>
  </front>
</reference>


    </references>

    <references title='Informative References'>

<reference anchor="MERCURY" target="https://www.usenix.org/system/files/conference/atc17/atc17-kuppusamy.pdf">
  <front>
    <title>Mercury: Bandwidth-Effective Prevention of Rollback Attacks Against Community Repositories</title>
    <author initials="T.K." surname="Kuppusamy">
      <organization></organization>
    </author>
    <author initials="V." surname="Diaz">
      <organization></organization>
    </author>
    <author initials="J." surname="Cappos">
      <organization></organization>
    </author>
    <date year="2017" month="July" day="12"/>
  </front>
  <seriesInfo name="ISBN" value="978-1-931971-38-6"/>
</reference>
<reference anchor="UPTANEESCAR" target="https://ssl.engineering.nyu.edu/papers/kuppusamy_escar_16.pdf">
  <front>
    <title>Securing Software Updates for Automobiles</title>
    <author initials="T.K." surname="Kuppusamy">
      <organization></organization>
    </author>
    <author initials="A." surname="Brown">
      <organization></organization>
    </author>
    <author initials="S." surname="Awwad">
      <organization></organization>
    </author>
    <author initials="D." surname="McCoy">
      <organization></organization>
    </author>
    <author initials="R." surname="Bielawski">
      <organization></organization>
    </author>
    <author initials="C." surname="Mott">
      <organization></organization>
    </author>
    <author initials="S." surname="Lauzon">
      <organization></organization>
    </author>
    <author initials="A." surname="Weimerskirch">
      <organization></organization>
    </author>
    <author initials="J." surname="Cappos">
      <organization></organization>
    </author>
    <date year="2016" month="October" day="16"/>
  </front>
</reference>
<reference anchor="PEP-458" target="https://www.python.org/dev/peps/pep-0458/">
  <front>
    <title>PEP 458 -- Surviving a Compromise of PyPI</title>
    <author initials="T.K." surname="Kuppusamy">
      <organization></organization>
    </author>
    <author initials="V." surname="Diaz">
      <organization></organization>
    </author>
    <author initials="D." surname="Stufft">
      <organization></organization>
    </author>
    <author initials="J." surname="Cappos">
      <organization></organization>
    </author>
    <date year="2013" month="September" day="27"/>
  </front>
</reference>
<reference anchor="DEPLOY" target="https://uptane.github.io/deployment-considerations/index.html">
  <front>
    <title>Uptane Deployment Best Practices</title>
    <author initials="." surname="Members of the Uptane Alliance Community">
      <organization></organization>
    </author>
    <date year="n.d."/>
  </front>
</reference>
<reference anchor="USATODAY" target="https://www.usatoday.com/story/tech/columnist/2016/06/28/your-average-car-lot-more-code-driven-than-you-think/86437052/">
  <front>
    <title>Your average car is a lot more code-driven than you think</title>
    <author initials="B." surname="O'Donnell">
      <organization></organization>
    </author>
    <date year="2016" month="June" day="28"/>
  </front>
</reference>
<reference anchor="CR-OTA" target="https://www.consumerreports.org/automotive-technology/automakers-embrace-over-the-air-updates-can-we-trust-digital-car-repair/">
  <front>
    <title>Automakers Embrace Over-the-Air Updates, but Can We Trust Digital Car Repair?</title>
    <author initials="K." surname="Barry">
      <organization></organization>
    </author>
    <date year="2018" month="April" day="20"/>
  </front>
</reference>
<reference anchor="IN-TOTO" target="https://in-toto.github.io/">
  <front>
    <title>in-toto: A framework to secure the integrity of software supply chains</title>
    <author >
      <organization></organization>
    </author>
    <date year="2018" month="October" day="29"/>
  </front>
</reference>


    </references>



  </back>

<!-- ##markdown-source:
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
NZ0oz7fPXiDGfXhxZiYw0tjm4lzxzMqXqPrMnPMgjCFX3q/E4rU5sZZFXVec
HSgn5Pgbea3YwoK3pFlPm7Zo0VUMzwDmFB9K3zTqv3O+sfD3FkN7LuwU+Xwa
ALikRVNAEtygF11TLV+kPhuuKWpBtgJbdp0Q4q7gCpB+VqyCsFa6MugzA728
JlZSmszalxslXl/yyZiab+TB8o6IY4i9kRcgMb0MUXJziOPMz8mxuL9gNrSO
VuXYJTXh7M4uz/L9iNgH5wpRNg8JwqzfeswN5WXRpSMXsIkbE4YIltUQ79EI
3Vkuj83zY41ix7rGFQgcieA364sL86GHBybmjB4DY+CEcijvHCQaHiHuIzoM
dHpo9ORS9sF+KDzTKMAi3qNme4HWizqM0ia0+YVBXy65Y5prClo2Ioua5KPx
2XvRFCBRWKoIGzxo/ilLDt1pOEOIIyk4z4BsAeKPNprGd4MccTXfsIsqXfje
/MAUl1p0mqS2aJBHq5iHfm6yJSEmwD1G25I42HUvQw4hL7IbF9GE8Eg37O3Y
/fJFf/xIryGpVUcNuQA1NK7VxDD6jkon4fGAzpwvqhUO5L8Ow2DauppfZDFk
sFhgPOJ84/YijFGjEwQmaCquM0/D0XX+0MiGYEphwjgbB2LpBvmNL3ejzYWO
IiQXlrGIW7uWzCKMfMyv8iCjSNDPkS8akeRyIGM1CtTICyjRChkdOqOx4hUS
NAxfEd1CMhTUq8p4lxUNh6SgNYdTWjDn0FmAUIJFYp2PtWaCafCjxMpYMV6b
au8ZmzRLxijDvPgsBqRLVEcjPRWfegEKV+sFUDRxisF2XuTlpqMTeNtZcVEL
F7hCShsMGviQhWM3KIGkHFvhoN0TecsCe4EyMMyvDgs5FrOKcNyLxKUq0Wo4
nIIkFRPbw9FHvvtzE4zJ2QohfgVX48vdAPX9HGPmWSpAuCCuKLoLne9FmdGV
GUZPvWtb0dJfCiEfx/WBSiyudDJ4WBZbnaJ2kOwWkxyEMbVjA7sYoxR2mY85
kVov6Z5YiW2WjUrssjjhKtfm8+ZE9H0UxmORdiT5c6iuo2pmy6NbLyvz7SR6
IhREp3jky0cy12n5XVMhInugNa5CqXmcl0NqWUmSIHFyCguSYGg7TtINORLu
imwUe6GULXZbQkdx36R99gwcfcDnqE6jDYcD+0kHZA5wFiysNkAKTiWcfJtL
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

-->

</rfc>


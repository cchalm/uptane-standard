<?xml version="1.0" encoding="UTF-8"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc2629 version 1.2.9 -->

<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
]>

<?rfc toc="yes"?>
<?rfc sortrefs="yes"?>
<?rfc symrefs="yes"?>

<rfc ipr="noDerivativesTrust200902" docName="uptane-standard-design" category="info">

  <front>
    <title abbrev="UPTANE">Uptane Standard for Design and Implementation</title>

    <author initials="." surname="Members of the Uptane Community" fullname="Uptane Community">
      <organization>Joint Development Foundation Projects, LLC, Uptane Series (c/o Prof. Justin Cappos)</organization>
      <address>
        <postal>
          <street>6 MetroTech</street>
          <city>Brooklyn</city>
          <region>NY</region>
          <code>11201</code>
          <country>USA</country>
        </postal>
        <email>uptane-standards@googlegroups.com</email>
      </address>
    </author>

    <date year="2020" month="December" day="04"/>

    <area>TODO</area>
    <workgroup>TODO</workgroup>
    <keyword>Internet-Draft</keyword>

    <abstract>


<t>This document describes a framework for securing ground vehicle software update systems.</t>



    </abstract>


  </front>

  <middle>


<section anchor="introduction" title="Introduction">

<t>Uptane is a secure software update framework for ground vehicles. This document describes procedures to enable programmers for OEMs and suppliers to securely design and implement this framework in a manner that better protects connected units on ground vehicles. Integrating Uptane as outlined in the sections that follow can reduce the ability of attackers to compromise critical systems. It also assures a faster and easier recovery process should a compromise occur.</t>

<t>These instructions specify the components necessary for a compliant implementation. Individual implementers can make their own technological choices within those requirements. This flexibility makes Uptane adaptable to the many customized update solutions used by manufacturers. If implementers wish to have compatible formats, they may use POUFs. POUFs contain a description of implementation choices as well as data binding formats. An implementer who adopts a POUF, as well as the Uptane Standard, will be able to interoperate with other implementations using that POUF.</t>

</section>
<section anchor="terminology" title="Terminology">

<section anchor="conformance-terminology" title="Conformance terminology">

<t>The keywords MUST, MUST NOT, REQUIRED, SHALL, SHALL NOT, SHOULD, SHOULD NOT, RECOMMENDED, MAY, and OPTIONAL in this document are to be interpreted as described in <xref target="RFC2119"/>.</t>

<t>In order to be considered Uptane-compliant, an implementation MUST follow all of these rules as specified in the document.</t>

</section>
<section anchor="terminology-1" title="Terminology">

<t><spanx style="emph">Bundle</spanx>: A set of images released by the repository that is meant to be installed by one or more ECUs on a vehicle during the same update cycle.</t>

<t><spanx style="emph">Bus</spanx>: An internal communications network that interconnects components within a vehicle. A vehicle can have a number of buses that will vary in terms of power, speed, and resources.</t>

<t><spanx style="emph">ECU Identifier</spanx>: An attribute used to identify a specific ECU (e.g., a unique serial number).</t>

<t><spanx style="emph">ECU Version Manifest</spanx>: Metadata which details the software version currently installed on the ECU.</t>

<t><spanx style="emph">Hardware Identifier</spanx>: An attribute used to identify a model of an ECU.</t>

<t><spanx style="emph">Image</spanx>: File containing software for an ECU to install. May contain a binary image to flash, installation instructions, and other necessary information for the ECU to properly apply the update. Each ECU typically holds only one image, although this may vary in some cases.</t>

<t><spanx style="emph">Metadata</spanx>:  Information describing the characteristics of data including, for example, structural
metadata describing data structures (e.g., data format, syntax, and semantics) and
descriptive metadata describing data contents (e.g., information security labels). As used in Uptane, metadata can be described as information associated with a role or an image that contains the characteristics or parameters thereof (e.g., cryptographic material parameters, filenames, and versions.)</t>

<t><spanx style="emph">Primary/Secondary ECUs</spanx>: Terms used to describe the control units within a ground vehicle. A Primary ECU downloads and verifies update images and metadata for itself and for Secondary ECUs, and distributes images and metadata to Secondaries. Thus, it requires extra storage space and a means to download images and metadata.  Secondary ECUs receive their update images and metadata from the Primary, and only need to verify and install their own metadata and images.</t>

<t><spanx style="emph">POUF</spanx>: A document that contains the protocol, operations, usage, and formats (POUF) of a specific Uptane implementation. The POUF contains decisions about SHOULDs and MAYs in an implementation, as well as descriptions of data binding formats. POUFs MAY be used to create compatible Uptane implementations.</t>

<t><spanx style="emph">Repository</spanx>: A server containing metadata about images. May also contain the images themselves. Other data may be stored on the repository to be accessed by ECUs during the update process.</t>

<t><spanx style="emph">Suppliers</spanx>: Independent companies to which vehicle manufacturers may outsource the production of ECUs. Tier-1 suppliers directly serve the manufacturers. Tier-2 suppliers are those that perform outsourced work for Tier-1 suppliers.</t>

<t><spanx style="emph">Vehicle Version Manifest</spanx>: A compilation of all ECU version reports on a vehicle. It serves as a master list of all images currently running on all ECUs in the vehicle.</t>

</section>
<section anchor="uptane-role-terminology" title="Uptane role terminology">

<t>These terms are defined in greater detail in <xref target="roles"/>.</t>

<t><spanx style="emph">Delegation</spanx>: A process by which the responsibility of signing metadata about images is assigned to another party.
<spanx style="emph">Role</spanx>: A party (human or machine) responsible for signing a certain type of metadata. The role controls keys and is responsible for signing metadata entrusted to it with these keys. The roles mechanism of Uptane allows the system to distribute signing responsibilities so that the compromise of one key does not necessarily impact the security of the entire system.</t>

<t><list style="symbols">
  <t><spanx style="emph">Root role</spanx>: Signs metadata that distributes and revokes public keys used to verify the Root, Timestamp, Snapshot, and Targets role metadata.</t>
  <t><spanx style="emph">Snapshot role</spanx>: Signs metadata that indicates which images the repository has released at the same time.</t>
  <t><spanx style="emph">Targets role</spanx>: Signs metadata used to verify the image, such as cryptographic hashes and file size.</t>
  <t><spanx style="emph">Timestamp role</spanx>: Signs metadata that indicates if there are any new metadata or images on the repository.</t>
</list></t>

</section>
<section anchor="acronyms-and-abbreviations" title="Acronyms and abbreviations">

<t><spanx style="emph">CDN</spanx>: Content Delivery Network</t>

<t><spanx style="emph">ECUs</spanx>: Electronic Control Units, the computing units on a vehicle</t>

<t><spanx style="emph">LIN Bus</spanx>: Local Interconnect Bus</t>

<t><spanx style="emph">OBD</spanx>: On-board diagnostics</t>

<t><spanx style="emph">SOTA</spanx>: Software Updates Over-the-Air</t>

<t><spanx style="emph">UDS</spanx>: Unified Diagnostic Services</t>

<t><spanx style="emph">VIN</spanx>: Vehicle Identification Number</t>

</section>
</section>
<section anchor="rationale-for-and-scope-of-the-uptane-standard" title="Rationale for and scope of the Uptane Standard">

<t>This Standard document provides the essential components for the secure design, implementation, and deployment of Uptane by OEMs and suppliers. These guidelines contribute to compromise resilience, or the ability to minimize the extent of the threat posed by any given attack.</t>

<t>However, this specification is intended as an implementation guide, and not as a detailed technical argument about the security properties that Uptane provides.  Readers interested in such documentation should refer to published papers that cover this topic.  <xref target="UPTANEESCAR"/></t>

<section anchor="why-uptane-requires-a-standards-document" title="Why Uptane requires a standards document">

<t>A standards document that can guide the safe design, integration, and deployment of Uptane in vehicles is needed at this time because:</t>

<t><list style="symbols">
  <t>The number of connected units on the average vehicle continues to grow, with mainstream cars now containing up to 100 million lines of code. <xref target="USATODAY"/></t>
  <t>The expanded use of software over-the-air strategies creates new attack surfaces for malicious parties. <xref target="CR-OTA"/></t>
  <t>Legacy update strategies, such as SSL/TLS or GPG/RSA, are not feasible for use on vehicle ECUs because they force manufacturers to chose between enhanced security and customizability.</t>
  <t>Conventional strategies are also complicated by the differing resources of the ECUs, which can vary greatly in memory, storage space, and Internet connectivity.</t>
  <t>The design of Uptane makes it possible to offer improved design flexibility without sacrificing security.</t>
  <t>This added design flexibility, however, could be a liability if the framework is implemented incorrectly.</t>
  <t>Standardization of crucial steps in the design, implementation, and use of Uptane can assure that customizability does not impact security or functionality.</t>
</list></t>

</section>
<section anchor="scope-of-standard-coverage" title="Scope of Standard coverage">

<t>This document sets guidelines for implementing Uptane in most systems capable of updating software on connected units in ground vehicles, including passenger vehicles, light-duty trucks, heavy-duty trucks, and motorcycles. Uptane could potentially also be applied to other ground vehicles, such as automated shuttles, recreational vehicles, and military ground vehicles. Uptane could even be applied to domains such as IoT devices, medical devices, and autonomous aerial vehicles. In this section, we define the scope of that applicability by providing sample use cases and possible exceptions, aspects of software update security that are not applicable to Uptane, and the design requirements governing the preparation of these standards.</t>

<section anchor="assumptions" title="Assumptions">

<t>We assume the following system preconditions for Uptane:</t>

<t><list style="symbols">
  <t>Vehicles have the ability to establish connectivity to required backend services. For example, this could be done through cellular, Wi-Fi, or hard-wired mechanisms.</t>
  <t>ECUs are either directly connected to the communication channel, or are indirectly connected via some sort of network gateway.</t>
  <t>ECUs are programmable and provide sufficient performance to be updated.</t>
  <t>ECUs must be able to perform public key cryptography operations and calculate hashes of images and metadata files.</t>
  <t>There are state-of-the-art secure servers in place, such as the Director and Image repository servers.</t>
</list></t>

<t>It is important that any bugs detected in Uptane implementations be patched promptly. Failure to do so could interfere with the effectiveness of Uptane’s operations.</t>

</section>
<section anchor="use-cases" title="Use cases">

<t>The following use cases provide a number of scenarios illustrating the manner in which software updates could be accomplished using Uptane.</t>

<section anchor="oems-initializing-uptane-at-the-factory-using-sota" title="OEMs initializing Uptane at the factory using SOTA">

<t>An OEM plans to install Uptane on new vehicles. This entails the following components: code to perform full and partial verification, the latest copy of the relevant metadata, the public keys, and an accurate attestation of the latest time. The OEM then either requires its tier-1 suppliers to provide these materials to the suppliers’ assembly lines or can choose to add the materials later at the OEM’s assembly lines. The OEM’s in-vehicle implementation is Uptane-compliant if:</t>

<t><list style="numbers">
  <t>all Primaries perform full verification;</t>
  <t>all Secondaries that are updated via OTA at least perform partial verification; and</t>
  <t>all other ECUs that do not perform any type of verification cannot be updated via OTA.</t>
</list></t>

</section>
<section anchor="updating-one-ecu-with-a-complete-image" title="Updating one ECU with a complete image">

<t>A tier-1 supplier completes work on a revised image for an electronic brake control module. This module will control the brakes on all models of an SUV produced by the OEM mentioned above. Assuming supplier delegation is supported by the OEM for this ECU, each tier-1 supplier digitally signs the image, then delivers the signature, all of its metadata, including delegations, and associated images to the OEM. The OEM adds these metadata and images to its Image repository, along with information about any dependencies and conflicts between this image and those for other ECUs used in the OEM’s vehicles. The OEM also updates the inventory database, so that the Director repository can instruct the ECU on how to install these updated images.</t>

</section>
<section anchor="updating-individual-ecus-on-demand" title="Updating individual ECUs on demand">

<t>An OEM has issued a recall to address a problem with a keyless entry device that has been locking people out of their cars. The OEM prepares an updated flash image in the manner described above. The OEM then ships USB flash drives to vehicle owners and dealerships that allow those parties to update the firmware of their vehicles.</t>

</section>
<section anchor="update-one-ecu-with-multiple-deltas" title="Update one ECU with multiple deltas">

<t>The OEM wants to use delta updates to save over-the-air bytes. The delta images contain only the code and/or data that has changed from the previous image version. To do so, the OEM must first modify the Director repository, using the vehicle version manifest and dependency resolution to determine the differences between the previous and latest images. The OEM then adds the following to the custom Targets metadata used by the Director repository: (1) the algorithm used to apply a delta image, and (2) the Targets metadata about the delta image. The OEM will also check whether the delta images match the Targets metadata from the Director repository.</t>

</section>
</section>
</section>
<section anchor="exceptions" title="Exceptions">

<t>There are a number of factors that could impede the completion of the above scenarios:</t>

<t><list style="symbols">
  <t>ECUs may be lacking the necessary resources to function as designated. These insufficient resources could include limited CPU or RAM inadequate for performance of public key cryptography; a lack of sufficient storage to undo installation of bad software; or a location on a low-speed network (e.g., LIN).</t>
  <t>ECUs may reside on different network segments, and may not be able to directly reach each other, requiring a gateway to facilitate communication.</t>
  <t>A user may replace OEM-installed ECUs with aftermarket ECUs.</t>
  <t>A vehicle may be able to download only a limited amount of data via a cellular channel due to limits on a data plan.</t>
  <t>A system may lack sufficient power to download or install software updates.</t>
  <t>Vehicles may be offline for extended periods of time, thus missing required updates (e.g., key rotations).</t>
  <t>OEMs may be unwilling to implement costly security or hardware requirements.</t>
</list></t>

</section>
<section anchor="out-of-scope" title="Out of scope">

<t>The following topics will not be addressed in this document, as they represent threats outside the scope of Uptane:</t>

<t><list style="symbols">
  <t>Physical attacks, such as manual tampering with ECUs outside the vehicle.</t>
  <t>Compromise of the packaged software, such as malware embedded in a trusted package.</t>
  <t>Compromise of the supply chain (e.g., build system, version control system, packaging process). A number of strategies (e.g., git signing, TPMs, in-toto <xref target="IN-TOTO"/>)  already exist to address this problem. Therefore, there is no need to duplicate those techniques here.</t>
  <t>Problems associated with OBD or UDS programming of ECUs, such as authentication of communications between ECUs.</t>
  <t>Malicious mirrors of package repositories, which may substitute original packages with malicious packages with matching version numbers <xref target="MERCURY"/>.</t>
</list></t>

</section>
<section anchor="design-requirements" title="Design requirements">

<t>The design requirements for this document are governed by the following principal parameters:</t>

<t><list style="symbols">
  <t>to clearly mandate the design and implementation steps that are security critical and must be followed as is, while offering flexibility in the implementation of non-critical steps. In this manner, users can adapt to support different use models and deployment scenarios.</t>
  <t>to ensure that, if Uptane is implemented, the security practices mandated or suggested in this document do not interfere with the functionality of ECUs, vehicles, or the systems that maintain them.</t>
  <t>to delineate guidelines to ensure that, should any part of the SOTA mechanism of a vehicle be attacked, an attacker must compromise two or more modules to breach the SOTA mechanism.</t>
</list></t>

</section>
</section>
<section anchor="threat-model-and-attack-strategies" title="Threat model and attack strategies">

<t>The overarching goal of Uptane is to provide a system that is resilient in the face of various types of compromise. In this section, we describe the goals an attacker may have (<xref target="attacker_goals"/>) and the capabilities they may have or could develop (<xref target="capabilities"/>). We then describe and classify types of attacks on the system according to the attacker’s goals (<xref target="threats"/>).</t>

<section anchor="attacker_goals" title="Attacker goals">

<t>We assume that attackers may want to achieve one or more of the following goals, in increasing order of severity:</t>

<t><list style="symbols">
  <t>Read the contents of updates to discover confidential information, reverse-engineer firmware, or compare two firmware images to identify security fixes and hence determine the fixed security vulnerability.</t>
  <t>Deny installation of updates to prevent vehicles from fixing software problems.</t>
  <t>Cause one or more ECUs in the vehicle to fail, denying use of the vehicle or of certain functions.</t>
  <t>Control ECUs within the vehicle, and possibly the vehicle itself.</t>
</list></t>

</section>
<section anchor="capabilities" title="Attacker capabilities">

<t>Uptane is designed with resilience to compromise in mind. We assume that attackers may develop one or more of the following capabilities:</t>

<t><list style="symbols">
  <t>Intercept and modify network traffic (i.e., perform man-in-the-middle attacks). This capability may be developed in two domains:
  <list style="symbols">
      <t>Outside the vehicle, intercepting and modifying traffic between the vehicle and software repositories.</t>
      <t>Inside the vehicle, intercepting and modifying traffic on one or more vehicle buses (e.g., via an OBD port or using a compromised ECU as a vector).</t>
    </list></t>
  <t>Compromise and control either a Director repository or Image repository server, and any keys stored on that repository, but not both the Director and Image repositories.</t>
  <t>Compromise either a Primary ECU or a Secondary ECU, but not both in the same vehicle.</t>
</list></t>

</section>
<section anchor="threats" title="Description of threats">

<t>Uptane’s threat model includes the following types of attacks, organized according to the attacker goals listed in <xref target="attacker_goals"/>.</t>

<section anchor="read_updates" title="Read updates">

<t><list style="symbols">
  <t><spanx style="emph">Eavesdrop attack:</spanx> Read sensitive or confidential information from an update intended to be encrypted for a specific ECU. (Note: Not all implementations will have a need for protecting information in this way.)</t>
</list></t>

</section>
<section anchor="deny_updates" title="Deny installation of updates">

<t>An attacker seeking to deny the installation of updates may attempt one or more of the following strategies:</t>

<t><list style="symbols">
  <t><spanx style="emph">Drop-request attack:</spanx> Block network traffic outside or inside the vehicle.</t>
  <t><spanx style="emph">Slow retrieval attack:</spanx> Slow down network traffic, in the extreme case sending barely enough packets to avoid a timeout. Similar to a drop-request attack, except that both the sender and receiver of the traffic still think network traffic is unimpeded.</t>
  <t><spanx style="emph">Freeze attack:</spanx> Continue to send a properly signed, but old, update bundle to the ECUs, even if newer updates exist.</t>
  <t><spanx style="emph">Partial bundle installation attack:</spanx> Install a valid (signed) update bundle, and then block selected updates within the bundle.</t>
  <t>Conduct a denial of service attack against the Uptane repositories or infrastructure.</t>
</list></t>

</section>
<section anchor="change_functionality" title="Interfere with ECU functionality">

<t>Attackers seeking to interfere with the functionality of vehicle ECUs in order to cause an operational failure or unexpected behavior may do so in one of the following ways:</t>

<t><list style="symbols">
  <t><spanx style="emph">Rollback attack:</spanx> Cause an ECU to install a previously valid software revision that is older than the currently installed version.</t>
  <t><spanx style="emph">Endless data attack:</spanx> Send a large amount of data to an ECU until it runs out of storage, possibly causing the ECU to fail to operate.</t>
  <t><spanx style="emph">Mix-and-match attack:</spanx> Install a malicious software bundle in which some of the updates do not interoperate properly. This may be accomplished even if all of the individual images being installed are valid, as long as valid versions exist that are mutually incompatible.</t>
</list></t>

</section>
<section anchor="control_ecu" title="Control an ECU or vehicle">

<t>Full control of a vehicle, or one or more ECUs within a vehicle, is the most severe threat.</t>

<t><list style="symbols">
  <t><spanx style="emph">Arbitrary software attack:</spanx> Cause an ECU to install and run arbitrary code of the attacker’s choice.</t>
</list></t>

</section>
</section>
</section>
<section anchor="design" title="Detailed design of Uptane">

<t>Uptane does not specify implementation details. Instead, this Standard describes the components necessary for a compliant implementation and leaves it up to individual implementers to make their own technological choices within those requirements.</t>

<t>At a high level, Uptane requires:</t>

<t><list style="symbols">
  <t>Two software repositories:
  <list style="symbols">
      <t>An Image repository containing binary images to install and signed metadata about those images.</t>
      <t>A Director repository connected to an inventory database that can sign metadata on demand for images in the Image repository.</t>
    </list></t>
  <t>Repository tools for generating Uptane-specific metadata about images.</t>
  <t>A public key infrastructure supporting the required metadata production and signing roles on each repository:
  <list style="symbols">
      <t>Root - The certificate authority for the Uptane ecosystem. Distributes public keys for verifying all the other roles’ metadata.</t>
      <t>Timestamp - Indicates whether there are new metadata or images.</t>
      <t>Snapshot - Indicates images released by the repository at a point in time via signing metadata about Targets metadata.</t>
      <t>Targets - Indicates metadata about images, such as hashes and file sizes.</t>
    </list></t>
  <t>A secure way for ECUs to know the time.</t>
  <t>An ECU capable of downloading images and associated metadata from the Uptane servers.</t>
  <t>An in-vehicle client on a Primary ECU capable of verifying the signatures on all update metadata and downloading updates on behalf of its associated Secondary ECUs. The Primary ECU MAY be the same ECU that communicates with the server.</t>
  <t>A client or library on each Secondary ECU capable of performing either full or partial verification of metadata.</t>
</list></t>

<section anchor="roles" title="Roles on repositories">

<t>A repository contains images and metadata. Each role has a particular type of metadata associated with it, as described in <xref target="meta_structures"/>.</t>

<section anchor="root_role" title="The Root role">

<t>A repository’s Root role SHALL be responsible for a Certificate Authority as defined in <xref target="RFC3647"/>.
A repository’s Root role SHALL produce and sign Root metadata as described in <xref target="root_meta"/>.
A repository’s Root role SHALL sign the public keys used to verify the metadata produced by the Timestamp, Snapshot, and Targets roles.
A repository’s Root role SHALL revoke keys for the other roles if they are compromised.</t>

</section>
<section anchor="targets_role" title="The Targets role">

<t>A repository’s Targets role SHALL produce and sign metadata about images and delegations as described in <xref target="targets_meta"/>.</t>

<section anchor="targets_role_delegations" title="Delegations">

<t>The Targets role on the Image repository MAY delegate the responsibility of signing metadata to other, custom-defined roles referred to as delegated targets. If it does, it MUST do so as specified in <xref target="delegations_meta"/>.</t>

<t>Responsibility for signing images or a subset of images MAY be delegated to more than one role and therefore it is possible for two different roles to be trusted for signing a particular image. For this reason, delegations MUST be prioritized.</t>

<t>A particular delegation for a subset of images MAY be designated as <spanx style="strong">terminating</spanx>. For terminating delegations, the client SHALL NOT search any further if it does not find validly signed metadata about those images. Delegations SHOULD NOT be terminating by default; terminating delegations SHOULD only be used when there is a compelling technical reason to do so.</t>

<t>A delegation for a subset of images MAY be a multi-role delegation <xref target="TAP-3"/>. A multi-role delegation indicates that multiple roles are needed to sign a particular image and each of the delegatee roles MUST sign the same metadata.</t>

<t>Delegations only apply to the Image repository. The Targets role on the Director repository MUST NOT delegate metadata signing responsibility.</t>

</section>
</section>
<section anchor="snapshot_role" title="The Snapshot role">

<t>A repository’s Snapshot role SHALL produce and sign metadata about all Targets metadata the repository releases, including the current version number of the top-level Targets metadata, and the version numbers of all delegated Targets metadata, as described in <xref target="snapshot_meta"/>.</t>

</section>
<section anchor="timestamp_role" title="The Timestamp role">

<t>A repository’s Timestamp role SHALL produce and sign metadata indicating whether there are new metadata or images on the repository. It MUST do so by signing the metadata about the Snapshot metadata file.</t>

</section>
</section>
<section anchor="meta_structures" title="Metadata structures">

<t>Uptane’s security guarantees all rely on properly created metadata that follows a designated structure. The Uptane Standard <spanx style="strong">does not</spanx> mandate any particular format or encoding for the metadata as a whole. ASN.1 (with any encoding scheme like BER, DER, XER, etc.), JSON, XML, or any other encoding format that is capable of providing the required structure MAY be used.</t>

<t>However, string comparison is required as part of metadata verification. To ensure an accurate basis for comparing strings, all strings MUST be encoded in the Unicode Format for Network Interchange as defined in <xref target="RFC5198"/>, including normalization into Unicode Normalization Form C (<xref target="NFC"/>).</t>

<t>In the <spanx style="emph">Deployment Best Practices</spanx> (<xref target="DEPLOY"/>), Joint Development Foundation Projects, LLC, Uptane Series provides some examples of compliant metadata structures in ASN.1 and JSON.</t>

<section anchor="common_metadata" title="Common metadata structures">

<t>Every public key MUST be represented using a public key identifier.  A public key identifier is EITHER all of the following:</t>

<t><list style="symbols">
  <t>The value of the public key itself (which MAY be, for example, formatted as a PEM string)</t>
  <t>The public key cryptographic algorithm used by the key (such as RSA or ECDSA)</t>
  <t>The particular scheme used to verify the signature (such as <spanx style="verb">rsassa-pss-sha256</spanx> or <spanx style="verb">ecdsa-sha2-nistp256</spanx>)</t>
</list></t>

<t>OR a secure hash over at least the above components (such as the keyid mechanism in TUF).</t>

<t>All four Uptane roles (Root, Targets, Snapshot, and Timestamp) share a common structure. They SHALL contain the following two attributes:</t>

<t><list style="symbols">
  <t>A payload of metadata to be signed</t>
  <t>An attribute containing the signature(s) of the payload, where each entry specifies:
  <list style="symbols">
      <t>The public key identifier of the key being used to sign the payload</t>
      <t>A signature with this key over the payload</t>
    </list></t>
</list></t>

<t>The payload differs depending on the role. However, the payload for all roles shares a common structure. It SHALL contain the following four attributes:</t>

<t><list style="symbols">
  <t>An indicator of the type of role (Root, Targets, Snapshot, or Timestamp)</t>
  <t>An expiration date and time</t>
  <t>An integer version number, which SHOULD be incremented each time the metadata file is updated</t>
  <t>The role-specific metadata for the role indicated</t>
</list></t>

<t>The following sections describe the role-specific metadata. All roles SHALL follow the common structures described here.</t>

</section>
<section anchor="root_meta" title="Root metadata">

<t>A repository’s Root metadata distributes the public keys of the top-level Root, Targets, Snapshot, and Timestamp roles, as well as revocations of those keys. It SHALL contain two attributes:</t>

<t><list style="symbols">
  <t>A representation of the public keys for all four roles. Each key SHALL have a unique public key identifier.</t>
  <t>An attribute mapping each role to (1) its public key(s), and (2) the threshold of signatures required for that role.</t>
</list></t>

<t>Additionally, it MAY contain a mapping of roles to a list of valid URLs from which the role metadata can be downloaded.  If this mapping of URLs is used, the implementer SHOULD implement this functionality following <xref target="TAP-5"/> to avoid adding unforeseen security risks.</t>

</section>
<section anchor="targets_meta" title="Targets metadata">

<t>The Targets metadata on a repository contains all of the information about images to be installed on ECUs. This includes filenames, hashes, file sizes, and MAY also include other useful information, such as what types of hardware are compatible with a particular image.</t>

<t>Targets metadata can also contain metadata about delegations, allowing one Targets role to delegate its authority to another. This means that an individual Targets metadata file might contain only metadata about delegations, only metadata about images, or some combination of the two. The details of how ECUs traverse the delegation tree to find valid metadata about images is specified in <xref target="resolve_delegations"/>.</t>

<section anchor="targets_images_meta" title="Metadata about images">

<t>To be available to install on clients, all images on the repository MUST have their metadata listed in a Targets role.  Each Targets role MAY provide a list of some images on the repository.  This list MUST provide, at a minimum, the following information about each image:</t>

<t><list style="symbols">
  <t>The image filename</t>
  <t>The size of the image in bytes</t>
  <t>One or more hashes of the image file, along with the hashing function used</t>
</list></t>

<section anchor="custom-metadata-about-images" title="Custom metadata about images">

<t>In addition to the required metadata, Targets metadata files MAY contain extra metadata for images on the repository. This metadata can be customized for a particular use case. Examples of use cases for different types of custom metadata can be found in the <spanx style="emph">Deployment Best Practices</spanx> document (<xref target="DEPLOY"/>). However, there are a few important pieces of custom metadata that SHOULD be present in most implementations. In addition, there is one element in the custom metadata that MUST be present in the Targets metadata from the Director.</t>

<t>Custom metadata MAY also contain a demarcated field or section that MUST match whenever two pieces of metadata are checked against each other, such as when Targets metadata from the Director repository is checked against Targets metadata from the Image repository.</t>

<t>The information listed below SHOULD be provided for each image on both the Image repository and the Director repository. If a “MUST match section” is to be implemented, that is where this information SHOULD be placed.</t>

<t><list style="symbols">
  <t>A release counter, to be incremented each time a new version of the image is released. This can be used to prevent rollback attacks even in cases where the Director repository is compromised.</t>
  <t>A hardware identifier, or list of hardware identifiers, representing models of ECUs with which the image is compatible. This can be used to ensure that an ECU cannot be ordered to install an incompatible image, even in cases where the Director repository is compromised.</t>
</list></t>

<t>The following information is CONDITIONALLY REQUIRED for each image on the Director repository IF that image is encrypted:</t>

<t><list style="symbols">
  <t>Information about filenames, hashes, and file size of the encrypted image.</t>
  <t>Information about the encryption method, and other relevant information–for example, a symmetric encryption key encrypted by the ECU’s asymmetric key could be included in the Director repository metadata.</t>
</list></t>

<t>The following information MUST be provided from the Director repository for each image in the Targets metadata:</t>

<t><list style="symbols">
  <t>An ECU identifier (such as a serial number), specifying the ECU that should install the image.</t>
</list></t>

<t>The Director repository MAY provide a download URL for the image file. This may be useful, for example, when the image is on a public CDN and the Director wishes to provide a signed URL.</t>

</section>
</section>
<section anchor="delegations_meta" title="Metadata about delegations">

<t>A Targets metadata file on the Image repository (but not the Director repository) MUST be able to delegate signing authority to other entities. For example, it could delegate signing authority for a particular ECU’s firmware to that ECU’s supplier. A metadata file MAY contain any number of delegations and MUST keep the delegations in prioritized order.</t>

<t>Any metadata file with delegations MUST provide the following information:</t>

<t><list style="symbols">
  <t>A list of public keys of all delegatees. Each key should have a unique public key identifier and a key type.</t>
  <t>A list of delegations, each of which contains:
  <list style="symbols">
      <t>A list of the filenames to which this role applies. This MAY be expressed using wildcards, or by enumerating a list, or a combination of the two.</t>
      <t>An optional list of the hardware identifiers to which this role applies.  If this is omitted, any hardware identifier will match.</t>
      <t>An indicator of whether or not this is a terminating delegation. (See <xref target="targets_role_delegations"/>.)</t>
      <t>A list of the roles to which this delegation applies. Each role needs to specify:
      <list style="symbols">
          <t>A name for the role (e.g., “supplier1-qa”)</t>
          <t>The key identifiers for each key this role uses</t>
          <t>A threshold of keys that must sign for this role</t>
        </list></t>
    </list></t>
</list></t>

<t>Note that <spanx style="strong">any</spanx> Targets metadata file stored on the Image repository may contain delegations, and these delegations can be in chains of arbitrary length.</t>

</section>
</section>
<section anchor="snapshot_meta" title="Snapshot metadata">

<t>The Snapshot metadata lists version numbers and filenames of all Targets metadata files. It protects against mix-and-match attacks if a delegated supplier key is compromised.</t>

<t>For each Targets metadata file on the repository, the Snapshot metadata SHALL contain the following information:</t>

<t><list style="symbols">
  <t>The filename and version number of the Targets metadata file.</t>
</list></t>

<t>The Snapshot metadata MAY also list the Root metadata filename and version number. This is not required, particularly for implementations of <xref target="TAP-5"/>, but MAY be included in all cases for backward compatibility.</t>

</section>
<section anchor="timestamp_meta" title="Timestamp metadata">

<t>The Timestamp metadata SHALL contain the following information:</t>

<t><list style="symbols">
  <t>The filename and version number of the latest Snapshot metadata on the repository.</t>
  <t>One or more hashes of the Snapshot metadata file, along with the hashing function used.</t>
</list></t>

</section>
<section anchor="repo_mapping_meta" title="Repository mapping metadata">

<t>As described in the introduction to <xref target="design"/>, Uptane requires a Director repository and an Image repository. However, it is possible to have an Uptane-compliant implementation that has more than two repositories.</t>

<t>Repository mapping metadata informs a Primary ECU about which repositories to trust for images or image paths. <xref target="TAP-4"/> describes how to make use of more complex repository mapping metadata in order to have more than the two required repositories.</t>

<t>Repository mapping metadata, or the equivalent informational content, MUST be present on all Primary ECUs, and MUST contain the following information:</t>

<t><list style="symbols">
  <t>A list of repository names and one or more URLs at which the named repository can be accessed. At a minimum, this MUST include the Director and Image repositories.</t>
  <t>A list of mappings of image paths to repositories, each of which contains:
  <list style="symbols">
      <t>A list of image paths. Image paths MAY be expressed using wildcards, or by enumerating a list, or a combination of the two.</t>
      <t>A list of repositories that MUST provide signed Targets metadata for images stored at those paths.</t>
    </list></t>
</list></t>

<t>For example, in the most basic Uptane case, the repository mapping metadata would contain:</t>

<t><list style="symbols">
  <t>The name and URL of the Director repository.</t>
  <t>The name and URL of the Image repository.</t>
  <t>A single mapping indicating that all images (<spanx style="verb">*</spanx>) MUST be signed by both the Director and Image repository.</t>
</list></t>

<t>Note that the metadata need not be in the form of a metadata file. For example, in the basic case where there is only one Director and one Image repository, and all images need to have signed metadata from both repositories, it would be sufficient to have a configuration file with URLs for the two repositories and a client that always checks for metadata matches between them. In this case, no explicit mapping would be defined, because the mapping is defined as part of the Uptane client implementation.</t>

<t>The <spanx style="emph">Uptane Deployment Best Practices</spanx> document (<xref target="DEPLOY"/>) provides more guidance on how to implement repository mapping metadata for more complex use cases. It also discusses strategies for updating repository mapping metadata, if required.</t>

</section>
<section anchor="metadata_filename_rules" title="Rules for filenames in repositories and metadata">

<t>There is a difference between the filename in a metadata file or an ECU, and the filename on a repository. This difference exists in order to avoid race conditions, where metadata and images are read from, and written to, at the same time. For more details, the reader should read the TUF specification <xref target="TUF-spec"/> and PEP 458 <xref target="PEP-458"/>.</t>

<t>Unless stated otherwise, all files SHALL be written to repositories in accordance with the following two rules:</t>

<t><list style="numbers">
  <t>Metadata filenames SHALL be qualified with version numbers. If a metadata file A is specified as FILENAME.EXT in another metadata file B, then it SHALL be written as VERSION.FILENAME.EXT, where VERSION is A’s version number, as defined in <xref target="common_metadata"/>, with one exception: If the version number of the Timestamp metadata file might not be known in advance by a client, it MAY be read from, and written to, a repository using a filename without a version number qualification, i.e., FILENAME.EXT.</t>
  <t>If an image is specified in a Targets metadata file as FILENAME.EXT, it SHALL be written to the repository as HASH.FILENAME.EXT, where HASH is one of the hash digests of the file, as specified in <xref target="targets_images_meta"/>. The file MUST be written to the repository using <spanx style="emph">n</spanx> different filenames, one for each hash digest listed in its corresponding Targets metadata.</t>
</list></t>

<t>For example:</t>

<t><list style="symbols">
  <t>The version number of the Snapshot metadata file is 61, and its filename in the Timestamp metadata is <spanx style="emph">snapshot.json</spanx>. The filename on the repository will be <spanx style="emph">61.snapshot.json</spanx>.</t>
  <t>There is an image with the <spanx style="emph">filename acme_firmware.bin</spanx> specified in the Targets metadata, with a SHA3-256 of <spanx style="emph">aaaa</spanx> and a SHA-512/224 of <spanx style="emph">bbbb</spanx>. It will have two filenames on the repository: <spanx style="emph">aaaa.acme_firmware.bin</spanx> and <spanx style="emph">bbbb.acme_firmware.bin</spanx>.</t>
</list></t>

</section>
</section>
<section anchor="server-repository-implementation-requirements" title="Server / repository implementation requirements">

<t>An Uptane implementation SHALL make the following services available to vehicles:</t>

<t><list style="symbols">
  <t>Image repository</t>
  <t>Director repository</t>
</list></t>

<t>Additionally, an Uptane implementation requires ECUs to have a secure way to know the current time.</t>

<section anchor="image-repository" title="Image repository">

<t>The Image repository exists to allow an OEM and/or its suppliers to upload images and their associated metadata. It makes these images and their metadata available to vehicles. The Image repository is designed to be primarily controlled by human actors, and updated relatively infrequently.</t>

<t>The Image repository SHALL expose an interface permitting the download of metadata and images. This interface SHOULD be public.</t>

<t>The Image repository SHALL require authorization for writing metadata and images.</t>

<t>The Image repository SHALL provide a method for authorized users to upload images and their associated metadata. It SHALL check that a user writing metadata and images is authorized to do so for that specific image by checking the chain of delegations as described in <xref target="delegations_meta"/>.</t>

<t>The Image repository SHALL implement storage which permits authorized users to write an image file using a unique filename, and later read the same file using the same name. It MAY use any filesystem, key-value store, or database that fulfills this requirement.</t>

<t>The Image repository MAY require authentication for read access.</t>

</section>
<section anchor="director_repository" title="Director repository">

<t>The Director repository instructs ECUs as to which images should be installed by producing signed metadata on demand. Unlike the Image repository, it is mostly controlled by automated, online processes. It also consults a private inventory database containing information on vehicles, ECUs, and software revisions.</t>

<t>The Director repository SHALL expose an interface for Primaries to upload vehicle version manifests (<xref target="vehicle_version_manifest"/>) and download metadata. This interface SHOULD be public.
The Director MAY encrypt images for ECUs that require them, either by encrypting on-the-fly or by storing encrypted images on the repository.</t>

<t>The Director repository SHALL implement storage which permits an automated service to write generated metadata files. It MAY use any filesystem, key-value store, or database that fulfills this requirement.</t>

<section anchor="directing-installation-of-images-on-vehicles" title="Directing installation of images on vehicles">

<t>A Director repository MUST conform to the following six-step process for directing the installation of software images on a vehicle.</t>

<t><list style="numbers">
  <t>The Director SHOULD first identify the vehicle. This MAY be done when the Director receives a vehicle version manifest sent by a Primary (as described in <xref target="construct_manifest_primary"/>), decodes the manifest, and determines the unique vehicle identifier. Additionally, the Director MAY utilize other mechanisms to uniquely identify a vehicle (e.g., 2-way TLS with unique client certificates).</t>
  <t>Using the vehicle identifier, the Director queries its inventory database (as described in <xref target="inventory_db"/>) for relevant information about each ECU in the vehicle.</t>
  <t>The Director SHALL check the manifest for accuracy compared to the information in the inventory database. If any of the required checks fail, the Director MAY drop the request. An implementer MAY make additional checks if desired. At a minimum, the Director SHALL check the following:
  <list style="symbols">
      <t>Each ECU recorded in the inventory database is also represented in the manifest.</t>
      <t>The signature of the manifest matches the ECU key of the Primary that sent it.</t>
      <t>The signature of each Secondary’s contribution to the manifest matches the ECU key of that Secondary.</t>
    </list></t>
  <t>The Director SHOULD check that the nonce or counter in each ECU version report has not been used before to prevent a replay of the ECU version report. If the nonce or counter is reused the Director SHOULD drop the request.</t>
  <t>The Director extracts information about currently installed images from the vehicle version manifest. Using this information, it determines if the vehicle is already up-to-date, and if not, determines a set of images that should be installed. The exact process by which this determination takes place is out of scope of this Standard. However, the Director MUST take into account <spanx style="emph">dependencies</spanx> and <spanx style="emph">conflicts</spanx> between images and SHOULD consult well-established techniques for dependency resolution.</t>
  <t>The Director MAY encrypt images for ECUs that require it.</t>
  <t>The Director generates new metadata representing the desired set of images to be installed on the vehicle, based on the dependency resolution in step 4. This includes Targets (<xref target="targets_meta"/>), Snapshot (<xref target="snapshot_meta"/>), and Timestamp (<xref target="timestamp_meta"/>) metadata. It then sends this metadata to the Primary as described in <xref target="download_meta_primary"/>.</t>
</list></t>

</section>
<section anchor="inventory_db" title="Inventory Database">

<t>The Director SHALL use a private inventory database to store information about ECUs and vehicles. An implementer MAY use any durable database for this purpose.</t>

<t>The inventory database MUST record the following pieces of information:</t>

<t><list style="symbols">
  <t>Per vehicle:
  <list style="symbols">
      <t>A unique identifier (such as a VIN)</t>
    </list></t>
  <t>Per ECU:
  <list style="symbols">
      <t>A unique identifier (such as a serial number)</t>
      <t>The vehicle identifier the ECU is associated with</t>
      <t>An ECU key (symmetric or asymmetric; for asymmetric keys, only the public part SHOULD be stored)</t>
      <t>The ECU key identifier (as defined in <xref target="common_metadata"/>)</t>
      <t>Whether the ECU is a Primary or a Secondary</t>
    </list></t>
</list></t>

<t>The inventory database MAY record other information about ECUs and vehicles. It SHOULD record a hardware identifier for each ECU to protect against the possibility of directing the ECU to install incompatible firmware.</t>

</section>
</section>
</section>
<section anchor="in-vehicle-implementation-requirements" title="In-vehicle implementation requirements">

<t>An Uptane-compliant ECU SHALL be able to download and verify image metadata and image binaries before installing a new image and MUST have a secure way of verifying the current time, or a sufficiently recent attestation of the time.</t>

<t>All ECUs SHOULD monitor the download speed of image metadata and image binaries to detect and respond to a slow retrieval attack. If the download is slower than a pre-defined threshold, the ECU SHOULD send an alert to the Director repository, for example as part of the next vehicle version manifest.</t>

<t>Each ECU receiving over-the-air updates in a vehicle is either a Primary or a Secondary ECU. A Primary ECU collects and delivers vehicle manifests to the Director (<xref target="vehicle_version_manifest"/>) that contain information about which images have been installed on ECUs in the vehicle. It also verifies the time and downloads and verifies the latest metadata and images for itself and for its Secondaries. A Secondary ECU verifies the time, and downloads and verifies the latest metadata and images for itself from its associated Primary ECU. It also sends signed information about its installed images to its associated Primary.</t>

<t>All ECUs MUST verify image metadata as specified in <xref target="metadata_verification"/> before installing an image or making it available to other ECUs. A Primary ECU MUST perform full verification (<xref target="full_verification"/>). A Secondary ECU SHOULD perform full verification if possible. If a Secondary cannot perform full verification, it SHALL, at the very least, perform partial verification. In addition, it MAY also perform some steps from the full verification process. See the <spanx style="emph">Uptane Deployment Best Practices</spanx> document (<xref target="DEPLOY"/>) for a discussion of how to choose between partial and full verification.</t>

<t>ECUs MUST have a secure source of time. An OEM/Uptane implementer MAY use any external source of time that is demonstrably secure. The <spanx style="emph">Uptane Deployment Best Practices</spanx> document (<xref target="DEPLOY"/>) describes one way to implement an external time server to cryptographically attest time, as well as the security properties required.</t>

<section anchor="build-time-prerequisite-requirements-for-ecus" title="Build-time prerequisite requirements for ECUs">

<t>For an ECU to be capable of receiving Uptane-secured updates, it MUST have the following data provisioned at the time it is manufactured or installed in the vehicle:</t>

<t><list style="numbers">
  <t>A sufficiently recent copy of required Uptane metadata at the time of manufacture or install. This is necessary for the ECU to authenticate that the remote repository is legitimate when it first downloads metadata in the field. See <spanx style="emph">Uptane Deployment Best Practices</spanx> (<xref target="DEPLOY"/>) for more information.
  <list style="symbols">
      <t>Partial verification Secondary ECUs MUST have the Root and Targets metadata from the Director repository (to reduce the scope of rollback and replay attacks). These ECUs MAY also have metadata from other roles or the Image repository if they will be used by the Secondary.</t>
      <t>Full verification ECUs MUST have a complete set of metadata (Root, Targets, Snapshot, and Timestamp) from both repositories (to prevent rollback and replay attacks), as well as the repository mapping metadata (<xref target="repo_mapping_meta"/>). Delegations are not required.</t>
    </list></t>
  <t>The current time, or a secure attestation of a sufficiently recent time.</t>
  <t>An <spanx style="strong">ECU key</spanx>. This is a private key, unique to the ECU, used to sign ECU version reports and decrypt images. An ECU key MAY be either a symmetric key or an asymmetric key. If it is an asymmetric key, there MAY be separate keys for encryption and signing. For the purposes of this Standard, the set of private keys that an ECU uses is referred to as the ECU key (singular), even if it is actually multiple keys used for different purposes.</t>
</list></t>

</section>
<section anchor="what-the-primary-does" title="What the Primary does">

<t>A Primary downloads, verifies, and distributes the latest time, metadata, and images. To do so, it SHALL perform the following seven steps:</t>

<t><list style="numbers">
  <t>Construct and send vehicle version manifest (<xref target="construct_manifest_primary"/>)</t>
  <t>Download and check current time (<xref target="check_time_primary"/>)</t>
  <t>Download and verify metadata (<xref target="download_meta_primary"/>)</t>
  <t>Download and verify images (<xref target="download_images_primary"/>)</t>
  <t>OPTIONAL: Send latest time to Secondaries (<xref target="send_time_primary"/>)</t>
  <t>Send metadata to Secondaries (<xref target="send_metadata_primary"/>)</t>
  <t>Send images to Secondaries (<xref target="send_images_primary"/>)</t>
</list></t>

<t>Note that the subsequent sections concerning requirements for a Primary do not prohibit implementing Primary capabilities on an ECU that does not communicate directly with the Uptane repositories. This allows for implementations to have multiple ECUs within the vehicle performing functions equivalent to a Primary.
If multiple such Primaries are included within a vehicle, each Secondary ECU SHALL have a single Primary responsible for providing its updates.</t>

<section anchor="construct_manifest_primary" title="Construct and send vehicle version manifest">

<t>The Primary SHALL build a <spanx style="emph">vehicle version manifest</spanx> as described in <xref target="vehicle_version_manifest"/>.</t>

<t>Once the complete manifest is built, the Primary MAY send the manifest to the Director repository. However, it is not strictly required that the Primary send the manifest until step three. If permitted by the implementation, a Primary MAY send only a diff of the manifest to save bandwidth. If an implementation permits diffs, the Director SHOULD have a way to request a full manifest.</t>

<t>Secondaries MAY send their version report at any time so that it is already stored on the Primary when it wishes to check for updates. Alternatively, the Primary MAY request a version report from each Secondary at the time of the update check.</t>

<section anchor="vehicle_version_manifest" title="Vehicle version manifest">

<t>The vehicle version manifest is a metadata structure that MUST contain the following information:</t>

<t><list style="symbols">
  <t>An attribute containing the signature(s) of the payload, each specified by:
  <list style="symbols">
      <t>The public key identifier of the key being used to sign the payload</t>
      <t>The signing method (i.e., ed25519, rsassa-pss, etc.)</t>
      <t>A hash of the payload to be signed</t>
      <t>The hashing function used (i.e., SHA3-256, SHA-512/224, etc.)</t>
      <t>The signature of the hash</t>
    </list></t>
  <t>A payload representing the installed versions of each software image on the vehicle. This payload SHALL contain:
  <list style="symbols">
      <t>The vehicle’s unique identifier (e.g., the VIN)</t>
      <t>The Primary ECU’s unique identifier (e.g., the serial number)</t>
      <t>A list of ECU version reports as specified in <xref target="version_report"/></t>
    </list></t>
</list></t>

<t>Note that one of the ECU version reports should be the version report for the Primary itself.</t>

</section>
<section anchor="version_report" title="ECU version report">

<t>An ECU version report is a metadata structure that MUST contain the following information:</t>

<t><list style="symbols">
  <t>An attribute containing the signature(s) of the payload, each specified by:
  <list style="symbols">
      <t>The public key identifier of the key being used to sign the payload</t>
      <t>The signing method (i.e., ed25519, rsassa-pss, etc.)</t>
      <t>A hash of the payload to be signed</t>
      <t>The hashing function used (i.e., SHA3-256, SHA-512/224, etc.)</t>
      <t>The signature of the hash</t>
    </list></t>
  <t>A payload containing:
  <list style="symbols">
      <t>The ECU’s unique identifier (e.g., the serial number)</t>
      <t>The filename, length, and hashes of its currently installed image (i.e., the non-custom Targets metadata for this particular image)</t>
      <t>An indicator of any detected security attack</t>
      <t>The latest time the ECU can verify at the time this version report was generated</t>
      <t>A nonce or counter to prevent a replay of the ECU version report. This value MUST change each update cycle. It MAY be a cryptographic nonce used with a time server as described in <spanx style="emph">Uptane Deployment Best Practices</spanx>  (<xref target="DEPLOY"/>).</t>
    </list></t>
</list></t>

</section>
</section>
<section anchor="check_time_primary" title="Download and check current time">

<t>The Primary SHALL load the current time from a secure source.</t>

</section>
<section anchor="download_meta_primary" title="Download and verify metadata">

<t>The Primary SHALL download metadata for all targets and perform a full verification on it as specified in <xref target="full_verification"/>.</t>

</section>
<section anchor="download_images_primary" title="Download and verify images">

<t>The Primary SHALL download and verify images for itself and for all of its associated Secondaries. Images SHALL be verified by checking that the hash of the image file matches the hash specified in the Director’s Targets metadata for that image.</t>

<t>There may be several different filenames that all refer to the same image binary, as described in <xref target="metadata_filename_rules"/>. If the Primary has received multiple hashes for a given image binary via the Targets role (see <xref target="targets_images_meta"/>) then it SHALL verify every hash for this image even though the image is identified by a single hash as part of its filename.</t>

</section>
<section anchor="send_time_primary" title="Send latest time to Secondaries">

<t>Unless the Secondary ECU has its own way of verifying the time or does not have the capacity to verify a time message, the Primary is CONDITIONALLY REQUIRED to send the time to each ECU. The Secondary will verify the time message, then overwrite its current time with the received time.</t>

</section>
<section anchor="send_metadata_primary" title="Send metadata to Secondaries">

<t>The Primary SHALL send its latest downloaded metadata to all of its associated Secondaries. The metadata it sends to each Secondary MUST include all of the metadata required for verification on that Secondary. For full verification Secondaries, this includes the metadata for all four roles from both repositories, plus any delegated Targets metadata files the Secondary will recurse through to find the proper delegation. For partial verification Secondaries, this MAY include fewer metadata files; at a minimum, it includes only the Targets metadata file from the Director repository.</t>

<t>The Primary SHOULD determine the minimal set of metadata files to send to each Secondary by performing delegation resolution as described in <xref target="full_verification"/>.</t>

<t>Each Secondary SHALL store the latest copy of all metadata required for its own verification.</t>

</section>
<section anchor="send_images_primary" title="Send images to Secondaries">

<t>The Primary SHALL send the latest image to each of its associated Secondaries that have storage to receive it.</t>

<t>For Secondaries without storage, the Primary SHOULD wait for a request from the Secondary to stream the new image file to it. The Secondary will send the request once it has verified the metadata sent in the previous step.</t>

</section>
</section>
<section anchor="installing-images-on-primary-or-secondary-ecus" title="Installing images on Primary or Secondary ECUs">

<t>An ECU SHALL perform the following steps when attempting to install a new image:</t>

<t><list style="numbers">
  <t>Verify latest attested time. This is optional if the ECU does not have the capacity to verify a time message (<xref target="verify_time"/>)</t>
  <t>Verify metadata (<xref target="verify_metadata"/>)</t>
  <t>Download latest image (<xref target="download_image"/>)</t>
  <t>Verify image (<xref target="verify_image"/>)</t>
  <t>Install image (<xref target="install_image"/>)</t>
  <t>Create and send version report (<xref target="create_version_report"/>)</t>
</list></t>

<section anchor="verify_time" title="Load and verify the latest attested time">

<t>IF the ECU has the capability to verify a time message, the ECU is CONDITIONALLY REQUIRED to load and verify the current time, or the most recent securely attested time.</t>

</section>
<section anchor="verify_metadata" title="Verify metadata">

<t>The ECU SHALL verify the latest downloaded metadata (<xref target="metadata_verification"/>) using either full or partial verification. If the metadata verification fails for any reason, the ECU SHALL jump to the final step (<xref target="create_version_report"/>).</t>

</section>
<section anchor="download_image" title="Download latest image">

<t>If the ECU does not have secondary storage, i.e., buffer storage to temporarily store the latest image before installing it, it SHALL download the latest image from the Primary. (If the ECU has secondary storage, it will already have the latest image in its secondary storage as specified in <xref target="send_images_primary"/>, and should skip to the next step.) The ECU MAY first create a backup of its previous working image and store it elsewhere (e.g., the Primary).</t>

<t>The filename used to identify the latest known image (i.e., the file to request from the Primary) SHALL be determined as follows:</t>

<t><list style="numbers">
  <t>Load the Targets metadata file from the Director repository.</t>
  <t>Find the Targets metadata associated with this ECU identifier.</t>
  <t>Construct the Image filename using the rule in <xref target="metadata_filename_rules"/>, or use the download URL specified in the Director metadata.</t>
  <t>If there is no Targets metadata about this image, abort the update cycle and report that there is no such image. Additionally, in the case of failure, the ECU SHALL retain its previous Targets metadata instead of using the new Targets metadata. Otherwise, download the image (up to the number of bytes specified in the Targets metadata) and verify it according to <xref target="verify_image"/>.</t>
</list></t>

<t>When the Primary responds to the download request, the ECU SHALL overwrite its current image with the downloaded image from the Primary.</t>

<t>If any part of this step fails, the ECU SHALL jump to the final step (<xref target="create_version_report"/>).</t>

</section>
<section anchor="verify_image" title="Verify image">

<t>The ECU SHALL verify that the latest image matches the latest metadata as follows:</t>

<t><list style="numbers">
  <t>Load the latest Targets metadata file from the Director.</t>
  <t>Find the Targets metadata associated with this ECU identifier.</t>
  <t>Check that the hardware identifier in the metadata matches the ECU’s hardware identifier.</t>
  <t>Check that the image filename is valid for this ECU. This MAY be a comparison against a wildcard path, which restricts the ECUs to which a delegation will apply.</t>
  <t>Check that the release counter of the image in the previous metadata, if it exists, is less than or equal to the release counter in the latest metadata.</t>
  <t>If the image is encrypted, decrypt the image with a decryption key to be chosen as follows:
  <list style="symbols">
      <t>If the ECU key is a symmetric key, the ECU SHALL use the ECU key for image decryption.</t>
      <t>If the ECU key is asymmetric, the ECU SHALL check the Targets metadata for an encrypted symmetric key. If such a key is found, the ECU SHALL decrypt the symmetric key using its ECU key, and use the decrypted symmetric key for image decryption.</t>
      <t>If the ECU key is asymmetric and there is no symmetric key in the Targets metadata, the ECU SHALL use its ECU key for image decryption.</t>
    </list></t>
  <t>Check that all hashes listed in the metadata match the corresponding hashes of the image.</t>
</list></t>

<t>If the ECU has secondary storage, the checks SHOULD be performed on the image in secondary storage before it is installed.</t>

<t>When checking hashes, the ECU SHOULD additionally check that the length of the image matches the length listed in the metadata.</t>

<t>NOTE: Verifying image size along with the hashes will become a requirement in a future version of the Uptane Standard.</t>

<t>NOTE: See <xref target="DEPLOY"/> for guidance on how to deal with Secondary ECU failures for ECUs that do not have secondary storage.</t>

<t>If any step fails, the ECU SHALL jump to the final step (<xref target="create_version_report"/>).</t>

</section>
<section anchor="install_image" title="Install image">

<t>The ECU SHALL attempt to install the update. This installation SHOULD occur at a time when all pre-conditions are met. These pre-conditions MAY include ensuring the vehicle is in a safe environment for install (e.g., the vehicle is parked when updating a specific ECU). Another pre-condition MAY include ensuring the ECU has a backup of its current image and metadata in case the current installation fails.</t>

</section>
<section anchor="create_version_report" title="Create and send version report">

<t>The ECU SHALL create a version report as described in <xref target="version_report"/>, and send it to the Primary (or simply save it to disk, if the ECU is a Primary). The Primary SHOULD write the version reports it receives to disk and associate them with the Secondaries that sent them.</t>

</section>
</section>
<section anchor="metadata_verification" title="Metadata verification procedures">

<t>A Primary ECU MUST perform full verification of metadata. A Secondary ECU SHOULD perform full verification of metadata. If a Secondary cannot perform full verification, it SHALL, at the very least, perform partial verification.</t>

<t>If a step in the following workflows does not succeed (e.g., the update is aborted because a new metadata file was not signed), an ECU SHOULD still be able to update again in the future. Errors raised during the update process SHOULD NOT leave ECUs in an unrecoverable state.</t>

<section anchor="partial_verification" title="Partial verification">

<t>In order to perform partial verification, an ECU SHALL perform the following steps:</t>

<t><list style="numbers">
  <t>Load and verify the current time or the most recent securely attested time.</t>
  <t>Download and check the Targets metadata file from the Director repository, following the procedure in <xref target="check_targets"/>.</t>
</list></t>

<t>Note that this verification procedure is the smallest set of Uptane checks permissible for an Uptane Secondary ECU. An ECU MAY additionally implement more metadata checks.</t>

<t>For example, an ECU MAY also fetch and verify Root metadata from the Director (following the procedure in <xref target="check_root"/>) before checking Targets metadata. Performing this additional check would provide the ECU with a secure way to receive and validate a rotation of the Director’s Targets key.</t>

<t>See <xref target="DEPLOY"/> for more discussion on this topic.</t>

</section>
<section anchor="full_verification" title="Full verification">

<t>Full verification of metadata means that the ECU checks that the Targets metadata about images from the Director repository matches the Targets metadata about the same images from the Image repository. This provides resilience to a key compromise in the system.</t>

<t>Full verification MUST be performed by Primary ECUs and SHOULD be performed by Secondary ECUs. In the following instructions, whenever an ECU is directed to download metadata, it applies only to Primary ECUs.</t>

<t>If <xref target="TAP-5"/> is supported and a Primary has an external connection to the Uptane repositories, a Primary ECU SHALL download metadata and images following the rules specified in that TAP.  If <xref target="TAP-5"/> is not supported, or if the Primary does not have an external connection to the Uptane repositories, the download SHOULD follow the <xref target="TUF-spec"/> and the metadata file renaming rules specified in <xref target="metadata_filename_rules"/>.</t>

<t>Before starting full verification, the repository mapping metadata MUST be consulted to determine where to download metadata from. This procedure assumes the basic Uptane case: there are only two repositories (Director and Image), and all image paths are required to be signed by both repositories. If a more complex repository layout is being used, refer to <xref target="DEPLOY"/> for guidance on how to determine where metadata should be downloaded from.</t>

<t>In order to perform full verification, an ECU SHALL perform the following steps:</t>

<t><list style="numbers">
  <t>Load and verify the current time or the most recent securely attested time.</t>
  <t>Download and check the Root metadata file from the Director repository, following the procedure in <xref target="check_root"/>.</t>
  <t>Download and check the Timestamp metadata file from the Director repository, following the procedure in <xref target="check_timestamp"/>.</t>
  <t>Check the previously downloaded Snapshot metadata file from the Directory repository (if available). If the hashes and version number of that file match the hashes and version number listed in the new Timestamp metadata, there are no new updates and the verification process MAY be stopped and considered complete. Otherwise, download and check the Snapshot metadata file from the Director repository, following the procedure in <xref target="check_snapshot"/>.</t>
  <t>Download and check the Targets metadata file from the Director repository, following the procedure in <xref target="check_targets"/>.</t>
  <t>If the Targets metadata from the Directory repository indicates that there are no new targets that are not already currently installed, the verification process MAY be stopped and considered complete. Otherwise, download and check the Root metadata file from the Image repository, following the procedure in <xref target="check_root"/>.</t>
  <t>Download and check the Timestamp metadata file from the Image repository, following the procedure in <xref target="check_timestamp"/>.</t>
  <t>Check the previously downloaded Snapshot metadata file from the Image repository (if available). If the hashes and version number of that file match the hashes and version number listed in the new Timestamp metadata, the ECU MAY skip to the last step. Otherwise, download and check the Snapshot metadata file from the Image repository, following the procedure in <xref target="check_snapshot"/>.</t>
  <t>Download and check the top-level Targets metadata file from the Image repository, following the procedure in <xref target="check_targets"/>.</t>
  <t>Verify that Targets metadata from the Director and Image repositories match. A Primary ECU MUST perform this check on metadata for all images listed in the Targets metadata file from the Director repository downloaded in step 6. A Secondary ECU MAY elect to perform this check only on the metadata for the image it will install. (That is, the image metadata from the Director that contains the ECU identifier of the current ECU.) To check that the metadata for an image matches, complete the following procedure:
  <list style="numbers">
      <t>Locate and download a Targets metadata file from the Image repository that contains an image with exactly the same filename listed in the Director metadata, following the procedure in <xref target="resolve_delegations"/>.</t>
      <t>Check that the Targets metadata from the Image repository matches the Targets metadata from the Director repository:
      <list style="numbers">
          <t>Check that the non-custom metadata (i.e., length and hashes) of the unencrypted or encrypted image are the same in both sets of metadata. Note: the Primary is responsible for validating encrypted images and associated metadata. The target ECU (Primary or Secondary) is responsible for validating the unencrypted image and associated metadata.</t>
          <t>Check that all MUST match custom metadata (e.g., hardware identifier and release counter) are the same in both sets of metadata.</t>
          <t>Check that the release counter in the previous Targets metadata file is less than or equal to the release counter in this Targets metadata file.</t>
        </list></t>
    </list></t>
</list></t>

<t>If any step fails, the ECU MUST return an error code indicating the failure. If a check for a specific type of security attack fails (i.e., rollback, freeze, arbitrary software, etc.), the ECU SHOULD return an error code that indicates the type of attack.</t>

</section>
<section anchor="check_root" title="How to check Root metadata">

<t>To properly check Root metadata, an ECU SHOULD:</t>

<t><list style="numbers">
  <t>Load the previous Root metadata file.</t>
  <t>Update to the latest Root metadata file.
  <list style="numbers">
      <t>Let N denote the version number of the latest Root metadata file (which at first could be the same as the previous Root metadata file).</t>
      <t>Try downloading a new version N+1 of the Root metadata file, up to some X number of bytes. The value for X is set by the implementer. For example, X may be tens of kilobytes. The filename used to download the Root metadata file is of the fixed form VERSION_NUMBER.FILENAME.EXT (e.g., 42.root.json). If this file is not available, the current Root metadata file is the latest; continue with step 3.</t>
      <t>Version N+1 of the Root metadata file MUST have been signed by the following: (1) a threshold of keys specified in the latest Root metadata file (version N), and (2) a threshold of keys specified in the new Root metadata file being validated (version N+1). If version N+1 is not signed as required, discard it, abort the update cycle, and report the signature failure. On the next update cycle, begin at version N of the Root metadata file. (Checks for an arbitrary software attack.)</t>
      <t>The version number of the latest Root metadata file (version N) must be less than or equal to the version number of the new Root metadata file (version N+1). Effectively, this means checking that the version number signed in the new Root metadata file is indeed N+1. If the version of the new Root metadata file is less than the latest metadata file, discard it, abort the update cycle, and report the rollback attack. On the next update cycle, begin at step 1 and version N of the Root metadata file. (Checks for a rollback attack.)</t>
      <t>Set the latest Root metadata file to the new Root metadata file.</t>
      <t>Repeat steps 2.1 to 2.6.</t>
    </list></t>
  <t>Check that the current (or latest securely attested) time is lower than the expiration timestamp in the latest Root metadata file. (Checks for a freeze attack.)</t>
  <t>If the Timestamp and/or Snapshot keys have been rotated, delete the previous Timestamp and Snapshot metadata files. (Checks for recovery from fast-forward attacks <xref target="MERCURY"/>.)</t>
</list></t>

</section>
<section anchor="check_timestamp" title="How to check Timestamp metadata">

<t>To properly check Timestamp metadata, an ECU SHOULD:</t>

<t><list style="numbers">
  <t>Download up to Y number of bytes. The value for Y is set by the implementer. For example, Y may be tens of kilobytes. The filename used to download the Timestamp metadata file is of the fixed form FILENAME.EXT (e.g., timestamp.json).</t>
  <t>Check that it has been signed by the threshold of keys specified in the latest Root metadata file. If the new Timestamp metadata file is not properly signed, discard it, abort the update cycle, and report the signature failure. (Checks for an arbitrary software attack.)</t>
  <t>Check that the version number of the previous Timestamp metadata file, if any, is less than or equal to the version number of this Timestamp metadata file. If the new Timestamp metadata file is older than the trusted Timestamp metadata file, discard it, abort the update cycle, and report the potential rollback attack. (Checks for a rollback attack.)</t>
  <t>Check that the current (or latest securely attested) time is lower than the expiration timestamp in this Timestamp metadata file. If the new Timestamp metadata file has expired, discard it, abort the update cycle, and report the potential freeze attack. (Checks for a freeze attack.)</t>
</list></t>

</section>
<section anchor="check_snapshot" title="How to check Snapshot metadata">

<t>To properly check Snapshot metadata, an ECU SHOULD:</t>

<t><list style="numbers">
  <t>Download up to the number of bytes specified in the Timestamp metadata file, constructing the metadata filename as defined in <xref target="metadata_filename_rules"/>.</t>
  <t>The hashes and version number of the new Snapshot metadata file MUST match the hashes and version number listed in the Timestamp metadata. If the hashes and version number do not match, discard the new Snapshot metadata, abort the update cycle, and report the failure. (Checks for a mix-and-match attack.)</t>
  <t>Check that it has been signed by the threshold of keys specified in the latest Root metadata file. If the new Snapshot metadata file is not signed as required, discard it, abort the update cycle, and report the signature failure. (Checks for an arbitrary software attack.)</t>
  <t>Check that the version number of the previous Snapshot metadata file, if any, is less than or equal to the version number of this Snapshot metadata file. If this Snapshot metadata file is older than the previous Snapshot metadata file, discard it, abort the update cycle, and report the potential rollback attack. (Checks for a rollback attack.)</t>
  <t>Check that the version number listed by the previous Snapshot metadata file for each Targets metadata file is less than or equal to its version number in this Snapshot metadata file. If this condition is not met, discard the new Snapshot metadata file, abort the update cycle, and report the failure. (Checks for a rollback attack.)</t>
  <t>Check that each Targets metadata filename listed in the previous Snapshot metadata file is also listed in this Snapshot metadata file. If this condition is not met, discard the new Snapshot metadata file, abort the update cycle, and report the failure. (Checks for a rollback attack.)</t>
  <t>Check that the current (or latest securely attested) time is lower than the expiration timestamp in this Snapshot metadata file. If the new Snapshot metadata file is expired, discard it, abort the update cycle, and report the potential freeze attack. (Checks for a freeze attack.)</t>
</list></t>

</section>
<section anchor="check_targets" title="How to check Targets metadata">

<t>To properly check Targets metadata, an ECU SHOULD:</t>

<t><list style="numbers">
  <t>Download up to Z number of bytes, constructing the metadata filename as defined in <xref target="metadata_filename_rules"/>. The value for Z is set by the implementer. For example, Z may be tens of kilobytes.</t>
  <t>The version number of the new Targets metadata file MUST match the version number listed in the latest Snapshot metadata. If the version number does not match, discard it, abort the update cycle, and report the failure. (Checks for a mix-and-match attack.) This step MAY be skipped when checking Targets metadata on a partial verification ECU; partial verification ECUs might not have Snapshot metadata.</t>
  <t>Check that the Targets metadata has been signed by the threshold of keys specified in the relevant metadata file. (Checks for an arbitrary software attack.):
  <list style="numbers">
      <t>If checking top-level Targets metadata, the threshold of keys is specified in the Root metadata.</t>
      <t>If checking delegated Targets metadata, the threshold of keys is specified in the Targets metadata file that delegated authority to this role.</t>
    </list></t>
  <t>Check that the version number of the previous Targets metadata file, if any, is less than or equal to the version number of this Targets metadata file. (Checks for a rollback attack.)</t>
  <t>Check that the current (or latest securely attested) time is lower than the expiration timestamp in this Targets metadata file. (Checks for a freeze attack.)</t>
  <t>If checking Targets metadata from the Director repository, verify that there are no delegations.</t>
  <t>If checking Targets metadata from the Director repository, check that no ECU identifier is represented more than once.</t>
  <t>If checking Targets metadata from the Director repository, and the ECU performing the verification is the Primary ECU, check that all listed ECU identifiers correspond to ECUs that are actually present in the vehicle.</t>
</list></t>

</section>
<section anchor="resolve_delegations" title="How to resolve delegations">

<t>To properly check Targets metadata for an image, an ECU MUST locate the metadata file(s) for the role (or roles) that have the authority to sign the image. This metadata might be located in the top-level Targets metadata, but it also may be delegated to another role or to multiple roles. Therefore, all delegations MUST be resolved using the following recursive procedure, beginning with the top-level Targets metadata file.</t>

<t><list style="numbers">
  <t>Download and check the current metadata file, following the procedure in <xref target="check_targets"/>. If the file cannot be loaded, or if any verification step fails, abort the delegation resolution, and indicate that image metadata cannot be found because of a missing or invalid role.</t>
  <t>If the current metadata file contains signed metadata about the image, end the delegation resolution and return the metadata to be checked.</t>
  <t>If the current metadata file was reached via a terminating delegation and does not contain signed metadata about the image, abort the delegation resolution for this image and return an error indicating that image metadata could not be found.</t>
  <t>Search the list of delegations, in listed order. For each delegation:
  <list style="numbers">
      <t>Check if the delegation applies to the image being processed. For the delegation to apply, it MUST include the hardware identifier of the target, and the target name MUST match one of the delegation’s image paths. If either of these tests fail, move on to the next delegation in the list.</t>
      <t>If the delegation is a multi-role delegation, follow the procedure described in <xref target="multirole_delegations"/>. If the multi-role delegation is terminating and no valid image metadata is found, abort the delegation resolution and return an error indicating that image metadata could not be found.</t>
      <t>If the delegation is a normal delegation, perform delegation resolution, starting at step 1. Note that this may recurse an arbitrary number of levels deep. If a delegation that applies to the image is found but no image metadata is found in the delegated roles or any of its sub-delegations, simply continue on with the next delegation in the list. The search is only completed or aborted if image metadata or a terminating delegation that applies to the image is found.</t>
    </list></t>
  <t>If the end of the list of delegations in the top-level metadata is reached without finding valid image metadata, return an error indicating that image metadata could not be found.</t>
</list></t>

</section>
<section anchor="multirole_delegations" title="Multi-role delegations">

<t>It is possible to delegate signing authority to multiple delegated roles as described in <xref target="TAP-3"/>. Each multi-role delegation effectively contains a list of ordinary delegations, plus a threshold of those roles that must be in agreement about the non-custom metadata for the image. All multi-role delegations MUST be resolved using the following procedure. Note that there may be sub-delegations inside multi-role delegations.</t>

<t><list style="numbers">
  <t>For each of the roles in the delegation, find and load the image metadata following the procedure in <xref target="resolve_delegations"/>.</t>
  <t>Inspect the non-custom part of the metadata loaded in step 1:
  <list style="numbers">
      <t>Locate all sets of roles that have agreeing (i.e., identical) non-custom metadata and “MUST match” custom metadata. Discard any set of roles with a size smaller than the threshold of roles that must be in agreement for this delegation.</t>
      <t>Check for a conflict. A conflict exists if there is more than one agreeing set of roles, yet each set has different metadata. If a conflict is found, choose and return the metadata from the set of roles which includes the earliest role in the multi-delegation list.</t>
      <t>If there is no conflict, check if there is any single set of roles with matching non-custom metadata. If there is, choose and return the metadata from this set.</t>
      <t>If no agreeing set can be found that meets the agreement threshold, return an error indicating that image metadata could not be found.</t>
    </list></t>
</list></t>

</section>
</section>
</section>
</section>


  </middle>

  <back>

    <references title='Normative References'>





<reference  anchor="RFC2119" target='https://www.rfc-editor.org/info/rfc2119'>
<front>
<title>Key words for use in RFCs to Indicate Requirement Levels</title>
<author initials='S.' surname='Bradner' fullname='S. Bradner'><organization /></author>
<date year='1997' month='March' />
<abstract><t>In many standards track documents several words are used to signify the requirements in the specification.  These words are often capitalized. This document defines these words as they should be interpreted in IETF documents.  This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t></abstract>
</front>
<seriesInfo name='BCP' value='14'/>
<seriesInfo name='RFC' value='2119'/>
<seriesInfo name='DOI' value='10.17487/RFC2119'/>
</reference>



<reference  anchor="RFC3647" target='https://www.rfc-editor.org/info/rfc3647'>
<front>
<title>Internet X.509 Public Key Infrastructure Certificate Policy and Certification Practices Framework</title>
<author initials='S.' surname='Chokhani' fullname='S. Chokhani'><organization /></author>
<author initials='W.' surname='Ford' fullname='W. Ford'><organization /></author>
<author initials='R.' surname='Sabett' fullname='R. Sabett'><organization /></author>
<author initials='C.' surname='Merrill' fullname='C. Merrill'><organization /></author>
<author initials='S.' surname='Wu' fullname='S. Wu'><organization /></author>
<date year='2003' month='November' />
<abstract><t>This document presents a framework to assist the writers of certificate policies or certification practice statements for participants within public key infrastructures, such as certification authorities, policy authorities, and communities of interest that wish to rely on certificates.  In particular, the framework provides a comprehensive list of topics that potentially (at the writer's discretion) need to be covered in a certificate policy or a certification practice statement.  This document supersedes RFC 2527.</t></abstract>
</front>
<seriesInfo name='RFC' value='3647'/>
<seriesInfo name='DOI' value='10.17487/RFC3647'/>
</reference>



<reference  anchor="RFC5198" target='https://www.rfc-editor.org/info/rfc5198'>
<front>
<title>Unicode Format for Network Interchange</title>
<author initials='J.' surname='Klensin' fullname='J. Klensin'><organization /></author>
<author initials='M.' surname='Padlipsky' fullname='M. Padlipsky'><organization /></author>
<date year='2008' month='March' />
<abstract><t>The Internet today is in need of a standardized form for the transmission of internationalized &quot;text&quot; information, paralleling the specifications for the use of ASCII that date from the early days of the ARPANET.  This document specifies that format, using UTF-8 with normalization and specific line-ending sequences.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='5198'/>
<seriesInfo name='DOI' value='10.17487/RFC5198'/>
</reference>


<reference anchor="NFC" target="http://www.unicode.org/reports/tr15/">
  <front>
    <title>Unicode Standard Annex #15: Unicode Normalization Forms</title>
    <author initials="M." surname="Davis">
      <organization></organization>
    </author>
    <author initials="M." surname="Duerst">
      <organization></organization>
    </author>
    <date year="2018" month="October"/>
  </front>
</reference>
<reference anchor="TAP-3" target="https://github.com/theupdateframework/taps/blob/d0818e580c322815a473520f2e8cc5f5eb8df499/tap3.md">
  <front>
    <title>The Update Framework TAP 3 - Multi-role delegations</title>
    <author initials="T.K." surname="Kuppusamy">
      <organization></organization>
    </author>
    <author initials="S." surname="Awwad">
      <organization></organization>
    </author>
    <author initials="E." surname="Cordell">
      <organization></organization>
    </author>
    <author initials="V." surname="Diaz">
      <organization></organization>
    </author>
    <author initials="J." surname="Moshenko">
      <organization></organization>
    </author>
    <author initials="J." surname="Cappos">
      <organization></organization>
    </author>
    <date year="2018" month="January" day="18"/>
  </front>
</reference>
<reference anchor="TAP-4" target="https://github.com/theupdateframework/taps/blob/2cb67d913ec19424d1e354b38f862886fbfd4105/tap4.md">
  <front>
    <title>The Update Framework TAP 4 - Multiple repository consensus on entrusted targets</title>
    <author initials="T.K." surname="Kuppusamy">
      <organization></organization>
    </author>
    <author initials="S." surname="Awwad">
      <organization></organization>
    </author>
    <author initials="E." surname="Cordell">
      <organization></organization>
    </author>
    <author initials="V." surname="Diaz">
      <organization></organization>
    </author>
    <author initials="J." surname="Moshenko">
      <organization></organization>
    </author>
    <author initials="J." surname="Cappos">
      <organization></organization>
    </author>
    <date year="2017" month="December" day="15"/>
  </front>
</reference>
<reference anchor="TAP-5" target="https://github.com/theupdateframework/taps/blob/01726d203c9b9c029d26f6612069ce3180500d9a/tap5.md#downloading-metadata-and-target-files">
  <front>
    <title>The Update Framework TAP 5 - Setting URLs for roles in the root metadata file</title>
    <author initials="T.K." surname="Kuppusamy">
      <organization></organization>
    </author>
    <author initials="S." surname="Awwad">
      <organization></organization>
    </author>
    <author initials="E." surname="Cordell">
      <organization></organization>
    </author>
    <author initials="V." surname="Diaz">
      <organization></organization>
    </author>
    <author initials="J." surname="Moshenko">
      <organization></organization>
    </author>
    <author initials="J." surname="Cappos">
      <organization></organization>
    </author>
    <date year="2018" month="January" day="22"/>
  </front>
</reference>
<reference anchor="TUF-spec" target="https://github.com/theupdateframework/specification/blob/2b4e18472fe25d5b57f36f6fa50104967c8faeaa/tuf-spec.md">
  <front>
    <title>The Update Framework Specification</title>
    <author initials="J." surname="Samuel">
      <organization></organization>
    </author>
    <author initials="N." surname="Mathewson">
      <organization></organization>
    </author>
    <author initials="G." surname="Condra">
      <organization></organization>
    </author>
    <author initials="V." surname="Diaz">
      <organization></organization>
    </author>
    <author initials="T.K." surname="Kuppusamy">
      <organization></organization>
    </author>
    <author initials="S." surname="Awwad">
      <organization></organization>
    </author>
    <author initials="S." surname="Tobias">
      <organization></organization>
    </author>
    <author initials="J." surname="Wright">
      <organization></organization>
    </author>
    <author initials="H." surname="Mehnert">
      <organization></organization>
    </author>
    <author initials="E." surname="Tryzelaar">
      <organization></organization>
    </author>
    <author initials="J." surname="Cappos">
      <organization></organization>
    </author>
    <author initials="R." surname="Dingledine">
      <organization></organization>
    </author>
    <date year="2018" month="September" day="19"/>
  </front>
</reference>


    </references>

    <references title='Informative References'>

<reference anchor="MERCURY" target="https://www.usenix.org/system/files/conference/atc17/atc17-kuppusamy.pdf">
  <front>
    <title>Mercury: Bandwidth-Effective Prevention of Rollback Attacks Against Community Repositories</title>
    <author initials="T.K." surname="Kuppusamy">
      <organization></organization>
    </author>
    <author initials="V." surname="Diaz">
      <organization></organization>
    </author>
    <author initials="J." surname="Cappos">
      <organization></organization>
    </author>
    <date year="2017" month="July" day="12"/>
  </front>
  <seriesInfo name="ISBN" value="978-1-931971-38-6"/>
</reference>
<reference anchor="UPTANEESCAR" target="https://ssl.engineering.nyu.edu/papers/kuppusamy_escar_16.pdf">
  <front>
    <title>Securing Software Updates for Automobiles</title>
    <author initials="T.K." surname="Kuppusamy">
      <organization></organization>
    </author>
    <author initials="A." surname="Brown">
      <organization></organization>
    </author>
    <author initials="S." surname="Awwad">
      <organization></organization>
    </author>
    <author initials="D." surname="McCoy">
      <organization></organization>
    </author>
    <author initials="R." surname="Bielawski">
      <organization></organization>
    </author>
    <author initials="C." surname="Mott">
      <organization></organization>
    </author>
    <author initials="S." surname="Lauzon">
      <organization></organization>
    </author>
    <author initials="A." surname="Weimerskirch">
      <organization></organization>
    </author>
    <author initials="J." surname="Cappos">
      <organization></organization>
    </author>
    <date year="2016" month="October" day="16"/>
  </front>
</reference>
<reference anchor="PEP-458" target="https://www.python.org/dev/peps/pep-0458/">
  <front>
    <title>PEP 458 -- Surviving a Compromise of PyPI</title>
    <author initials="T.K." surname="Kuppusamy">
      <organization></organization>
    </author>
    <author initials="V." surname="Diaz">
      <organization></organization>
    </author>
    <author initials="D." surname="Stufft">
      <organization></organization>
    </author>
    <author initials="J." surname="Cappos">
      <organization></organization>
    </author>
    <date year="2013" month="September" day="27"/>
  </front>
</reference>
<reference anchor="DEPLOY" target="https://uptane.github.io/deployment-considerations/index.html">
  <front>
    <title>Uptane Deployment Best Practices</title>
    <author initials="." surname="Members of the Uptane Community">
      <organization></organization>
    </author>
    <date year="n.d."/>
  </front>
</reference>
<reference anchor="USATODAY" target="https://www.usatoday.com/story/tech/columnist/2016/06/28/your-average-car-lot-more-code-driven-than-you-think/86437052/">
  <front>
    <title>Your average car is a lot more code-driven than you think</title>
    <author initials="B." surname="O'Donnell">
      <organization></organization>
    </author>
    <date year="2016" month="June" day="28"/>
  </front>
</reference>
<reference anchor="CR-OTA" target="https://www.consumerreports.org/automotive-technology/automakers-embrace-over-the-air-updates-can-we-trust-digital-car-repair/">
  <front>
    <title>Automakers Embrace Over-the-Air Updates, but Can We Trust Digital Car Repair?</title>
    <author initials="K." surname="Barry">
      <organization></organization>
    </author>
    <date year="2018" month="April" day="20"/>
  </front>
</reference>
<reference anchor="IN-TOTO" target="https://in-toto.github.io/">
  <front>
    <title>in-toto: A framework to secure the integrity of software supply chains</title>
    <author >
      <organization></organization>
    </author>
    <date year="2018" month="October" day="29"/>
  </front>
</reference>


    </references>



  </back>

<!-- ##markdown-source:
H4sIAPHjyV8AA+1923LbSJbgu74CUX4oSUPSlmy5bNfDrmzLU+r2bS25qms2
NtwgAUoYkwAbACWzHP73PdfMkwmAku3qnp2I7YdqiwDycvLkuV/G4/FOW7SL
/EnyftWmZZ6cwX+ztM6SeVUnz/OmuCgT+CU5Xa4W+TIv27QtqnInnU7r/Aq+
ent+/PpkJ6tmZbqEUdY0yriRUcYZjbAzS9v8oqo3T5KinFc7O8WqfpKU1fO8
Lq5gwKu8Oa/XTXt4797je4c7aZ2nT5LzN8/f7FxX9ceLulqv5O+P+QZ+yp4k
p2Wb12Xejp/X6bzd2aEZP6SLqoRVbPJmZ1U8Sf53W81GSVPVbZ3PG/jXZon/
+D87O+m6vazqJztJMoYlNU+SV/lymtdNUs2T9jJXaDyrlst1WbQbeDFJeIu9
j6r6Ii2LPwg4T5K/VEXZAvSu8kW1QqAlL6o1AASfJm/r6j/zWQvLefny2cjB
HUCRN8nu7G6Fb8wnyV8AIEWZPEtXq6rZo1nyZVosOkBu/udFVV0scoJTM5lV
S3q5gU3n7ZPkIeytravzfHZJv89gKS0exfuzY/qhzi9o1a9/5+ewpyfJ07qq
Pi42pXySwcYPDg7vHezslFW9pDND6N1J/sonkmT5PNl99f7sfJSc/XL88uUo
eXX8+yjJ29kEF//uxbPDg4PH/M3fJkf3Hidv/3qaNKt8xk/vP3zwEz99nbd4
7Mn7ssCJCRNhU6u0LsoL3Bb8X8MfHR08fsQf6cuvcXULOQkAe71MnsELr188
e0JbadP6AqFy2barJ3fvXl9fT9b86QTO8G6drwBbmrttfXB0lz/g6/GDTuAu
yHFZ5p+SOwdHT7ZM3vxAg3h0w/8pyk2S5+lV0XR/XQMmtvQz4AxMDnB/ND64
Rxs9P36b3E/SFo7tKsnuPTp4lB/BA/h5fL+7xQb2eFG0l+sp4sVdQO31Csec
14DLCOW7bbpq7k4X1fSuDPbo3uz+4eGjg6P0wU/3jw7vzQ/zR7PZ0fwonz7K
5g8eP8ZP7k+WmQXPOd0ZHDl5oUPLUsfJq/WiLcZ1tcgBSwBPCTzNMGDOJ3+d
JH9dr1brJl1uwmdnk+T4+jrNwl9PJnAfaxh8Ef7+KwCzSP8If/zLJHlVNZd5
+bHqPODbFoP+3sH44JGD/gOF/uFs+vCn7LFA/8H3QV8GO7ifzw4ePzh8kB3k
948eTO8/mj96ePjo0cP5dJ49OLh3hJ88uC30Hyj0gXgniNtN0QIZhutUNnnZ
rIHelQnQJyS+eSZr/+9zMj+NDw7HB0fuZI70ZODR4cPsUE7m6PtORga7d3/2
ePp4du/wcXb4cP7wIVDDh49n+f2DR/eO7t3LHqf4yRGczJ2sui4XVZoBnRov
8zaFgdMxUI0xr2A8LxZ5c6vzOwIAnOVti4Tv/buXDdFCvEgNwIUYFZDpNtFJ
Ehz5v83p0b06POTTe//C3arpg/zg0QM8u/cvxsggvuX48LtiXsyI1sgN44F/
Opznh0fZ0fTop/l9OMh5enTv4N6Dxw9/mj2ap3kK57ie07y3uWVndp5h0AMI
ztLlOo/g+BpAlsLqrxv52D35d4R8mdXpLQD/9ecKv55X0yJtOqv8rS4uLtvw
519glfllmddtBzvO680f+SJN620n7n5+h6svQVSBq5F3kOHx+OAxiIYgIBoB
49XJu2fv3/3ejwLEvYGQFZ+IeTcboGLLu3S97gKJm+d1Xs7yu2k7O/iJ/zv+
qGCarLJ5wOBf5fVsjXLRU7iq10XWXo5P5nOQ1GAlIJKBMFcSWwcJ8V21WEzT
2cfkuG3h/5rk+CKFDbZeKEzeKbEFqW6LDLDt6IYumYFsQ1IjgkzHPT17+vpJ
8vgnkBfGj+8fPP7pYHz/0fhhTDfvIemEH1l+Pzl7dvyuH8RNs5jk5QWcV45y
16TcrCd5tr67SlcgpNx14PyQN7O0/nDwsAPXsxzAigTsrJq31yDbyyViYna8
bqsloOLim8F0PEFh9bq8Dd4/B0yePas2HbR8WgAWXzcfi/DJMyRpbdsZ+mW6
/iO+sbCO3/JiCVD5WNQia99EAh+CVDc+wNN5ewISxNGjYTxfbQAuJeF5ll/d
XeXAnuA/43vwVSipwlAJ/JiMgXes66viCoGfIm6u6mpZNDmi8NvN29M/Ey8B
smdAN+ftrfZ9H2/74U/w4/OTty/fDFxv1nMmQuiLCja+WlQbVKjGKMEUWV6z
LHm3KLP80+SyXS5CoZ2Vq+fuu+RpDtf0bZ3CtZ5tRbmbFULQn0AnPd5Km9K2
ytINMakGJa+7LahhQJsW62VZNO1dxIG79x7ePXx0d1Ot63F6BVu6yMdwl8aL
qh0vqxr+AN1inIGqnJfj9jItx/Aq/KMoP9599PDB/Z/uHR0GGPA7jJTISAmM
lBQNnP8CBQUYLjHDJThcAsMlNNwwNJ5Okjc/Pq9A5RFRwKDwvYfjQ5SOn70b
vzk/HoYGHtka7ofoWITKKV1/JLFjhExZLaqLDf+afgTwj+EU4LDycQXbgT3n
47Sox8zsG4BSOb6GL1F8HWcFIEq6INDBFPBeAJRjN2ZywmMmb3TM46JWojRK
pmug4wCV3/KEjBKA7DQw/FgjWYeB/8cwoODaPE3retPhbg/Gh6jAnb4en785
f9MPpQLOt2org/EBNstj2EviBJ2krYALAIXNCU2Lss0vamRAgLeNEtwGLvIC
pP5L5FI/dBXL8SEw3p0xEIx0Cvo1XI6dnfNLwJqsmq3p2mRA3utimiMi+bmR
gDdK3tH8UGbJVX5ZzEDbcJPzYSXMnJsJz7MssgxE1Z2dO2jJqatsPSMBakfu
GWGs7CseKZw/nLYBkWRg4UD8ZsC5avgnwCwv0ymsEn68gOGQatNob05eNWTv
IpAV+LMDMEAw8waxQg1ieHUasygQzNNkmcJVqfF6tckUBHj4N0zVot0Hla8S
/gH6FlISUsE6mzilc0xZ8GeQpPDmul0AJ85U+G9yglrD88xBKqmu4cKXIEcD
QBkjUuCtgg8pSSuyp5lnBwAgoIaA4XpGyWmbpIumgjkbAhgcetrgJnDnedoA
YGCOGV7KDQO2aZLmslovMnjXDF3NAHITxKa8QewE7FrLmllC39Ai8YuqBGA2
CYAGBkthXDwPHmxRpADnIjBBIowy4G3ZGhbuHuHmEAB403FkuNggGiSOttA2
Z5cVEv/kukCqB69VDWrH/1gXNQ2iSDRf5J8KAR8O2LijyFL4B+IPABLXD8cN
1wuIBez6DzxYwXmg87xZkFKzZIrDlOs53C+Aao1wnodLvy6aSxzzEqg327za
AqdhkRiIE0yGg2xwwOTtm/cvYBD6P8SqNiXcY5RfqbAags1tHtDpGog5/j+p
jlNgoYhtMhWIT6VdW3J9CeiQVasWsQGnHNkhDItUA9kIdgMPp4iCDCkkTnW1
QqadE/CTCr6roxUisHAhhNM40QSpxHleLwtmD/DnHVSOaKUlorl9hlqaWImb
hO2R+N/k9Rv417uT//X+9N3Jc2ejpP/jZ2e/vHn/8rn+v77/7M2rVyevn+Mn
ZM/EC/Dm7fnpm9fHL/kaWmqDVAo2OmVCXK/qHK85gljIEF3dz5/FGvrlC+zt
FE4JVOxaPlTBBl5lgI7dDcDZ4+OkvcnNTwHcLK4gPq8XfMqiCXuqoaudECAD
wO4/BTK0yPeRxTR5y+gDUkQD12MB956RmOwO3phEBwVQWOZ4S3X7DbDMBb8P
Nxu2yMLHybP3RPFSxygyZh9Ez4CG6t2ZbeDhhJbU4HpKBmmJ95eFsJmgSyn2
Yl4HviQUtrF0RS67mxcQ3C0BKQZduTQp1yj24cancMWEshIiXyFNQhACwEgs
XFXXeT1C+OYZIwaQShC94HbhumGnyWmGSiMAv+YtAAUGLFjD9ogg4J3gNzbI
7sSUgDBKdkHuncCoyCP+sc5J04Ot8/L2dPxfgWgQFqRlMQfJdh/lVrEFXcPe
LgHxgCos+II6RnolnwFtBg25XWzMeVWMJDA6TvILXGT65Kt2sgQJk1AR4CoD
nSIawacvikWutIrM+bomovb0OpMKWg+aRzaGtAGRolPAwfC1+SJtLkf6Nt8I
y2T4WJjKeMbiTAzwNk4r+8UBV0SfACApSUz4hPFxkpykAE56bbNCNgKPL6tF
hti8YBynZcGUC+Ao64tLpg1IrBV1mmqJyNYwguhJAVSAl/klCa3QSwFSG0pk
cP4NcGnCPDrfopwt1kiyR7SJ/FOKlGGU8O7XdbrYcXZBMyT9re+gx4kRjc2H
tAb0kwHAPzHwmhyILE68h3/uOOYCt2VweDwwunQyuAU4y4vAURfpNF80e3AP
hT0CgJjijfzIeDOnuSGfaROMBgJKNStSpLLEUFKyjiaMS4ImeIMFhZp+iIJw
lqL8RjwYkSUHIMvaZ/Vm1aKQuIL7BKfZ8kX0H4zI6oq+QUE3uV3NZA8O+W0N
qwC97wykJWSLG6KAcOTnREb08ugGRRpCkXgh4qEjXKGQiPRLBiesVKNzo2vA
y9ooNRUqjo+8sRj2DRPkizn9jn+Gq+TtZEUjV73pHQZWr58VLH+v4cuiVYmq
AdQEnSJB/RfPo1mh7oVDpMQySBrV1ffNMEmidaHomSMCsoC3bYsghhJIBVJC
D/DCljlDniC1YZGeyYiRG91ALPHjBHhzUSohHukYfxfJUNyvQNEfJSzxMDla
N0wiGN4oaCW7ONoeUUvPAlQNikReFG7wdT9VBh8QtoGUBeqBSC8MBhBYyE/Q
kRoC0c2Ii564dKRBFjJhRLyOirWzOidW7QXV3nUTzJxBdCPSRQ2Qt5zAw5o2
ItAmBkC6iHIBUnP5rOGfS8DfK3zvDRF5GgBJLqwSEc4zNCuwkIiSzpAfsIRC
WGUEEUEp0Wxw+WeqD+5j7EGWr/IS+R3vvSxYqWSWq1JFIOvTomBfLCAohoja
i2DHJcABwxTjA6N9ZnCDZsihCWCqbFgdgj45NJ+QEEo6DWElYB+eop8cSKUq
z/F0uNNfZfk9ssUxbbcQRosYCyiExEcFCjHtBAIeaZO0ehJH8XhIlVwAXdEx
5Dy9PFKvS0IKHIjncB4vHZakV8E3IvqxGtDkIqshQLJ8rprzBWFtLaIRC+Tk
UyNxfP+5c1HTjlW7BSzh42VkalYop3vdGu0Cg1hM5owGX+F7k5YskgATaTcT
uBuVyNz0Q7J7uYYzJpEZZA5Y9p6fkJVBNx1wyLzma7FZkWHXU83zSwGM8JMG
9SKmDEUzOKLbgHELV0jOib+yboHj+PFR8geWWhbNEhegOjKqJCJ3klmByLzj
JW6+AJR4j5qK8VbtAt5mjTIWTA1UF14DEDqRrkAJFu7hrFWzyFptYPg3yqW1
LgOPOAGIw+c1g/0MVtIYfoaTW6bHkv1VhQaA1Xq6APJMgFQqKBwEZ8JhR3Cr
QBZoQRwDZbJMV81l1TLJP2f/Op+KOyhcj763bU1IkmfkOGFE9ETQErfL1Chr
AkbSq1pYFc1lV9GdqmdXItc2a5gURg8lIpjvUoCEchCc6x8yjULhdnsq5ix5
0W1Fc0qZX/uXUVTh7XbI+WSHKMHxrK7KzZJXwuFphQSa7Ow/e/4aFvCMxdIE
bnhBliuJNGJlCin7yQKILYwD+3omQth7FMJGDhvXZJJzhjtH5WCMl6evE1ZW
X1ZoZjo1qig+gFfePH0Oj9+U42mFIURZkV6UFQmhyGLenB8jmGI3mTVTw2vv
n5/tU8gR6fTP3RAYQnaFph2k4ae4X6Xkqruxwpy8Jh0SjSrv6Id0odoXSPuz
islIj0FHbMIuAMoJP3BFr0D7Y1REngqzsZquyrdqWWLRZTPqqCuVoLjpfTWe
mADx7VpmiQIBZbhYw+RoF2UjmNCX0MQJVAboC3qDR4msRQ2j8CKwjQINd7yB
T61Mjn+1l8gtQNcXSQEx84JcJ2xNBez7pbrOr9ASQPpeEHiAhBYtEiArkOrS
td/Q4nnnSNGIQTJjwmuIZksyWcKVFQsTsZWAyrHOSrST7pTATE8FxOd3eZqh
ZEDGkZxoOmqjeJ/1EEU5YxNunc/ZHkXkDu53lrC/V+XcK7JtFyj0gC4MM3z+
bDzJX77QjfztcuP4s6oCqAZI1KKbemfnuOdXmSoVEAkdmxvkURP5VsyBfapV
HQ8DpX6li7h8oFEgC85SoHpPkDEgT/MmoB5LPWGOuNac+QiwrijXLAOClnY9
Yma5pKAAwJ8leuGQZV1bgXe9wvcP7t0D/FssEPyMxDRxBnITAFVcjABRXlv+
CaRN3MGaWaIzn1j/GKr3GHCLGMEiekPUlDEWzr0G8VH87xivOCuqdUOyBylw
nz+zJ48mfQmy0GzjDNpuYM8Ozs5e3j1/eYbX6t/f/vvdd2fHI6LhiM5z9BWo
hEFLdsfBMp3Anu3a8NIsFpvxGpMsOwVanecYrXaJRt/M4z+evdre5VIjAwIC
LiEb6NnwECH+wgoF2lVnZDwQq2ZWzOcU5+BNeUoIWCFmzotYSTYdEiXJfAas
almhghmouYyYGqus+FRcyRLxRMWl5DGWPQ0F0RwGHsCgwnUh7YBLnWf6kXVQ
IMYhaWjSGar+MzKuCYh4LhRCs6z361FyqURsRhQA9SNAR6WRzJytk6sxzgGk
JrOqZkUF51IWoZGwiNH1elbQQeQrJ8pv4wOC4AIUhDg7o4QuhOftRUIRA70I
WCfzdTljNCBQIGk6UzbnmBnRNDi32PHZoKRkOAwZTXS5xjuHGABsWF1osOAV
uT1gDro7ga0TTa8RaSk6TsCRt/DB3USuegEo4J8uMFBrnK2RhQFwP8JPl3l6
tQl/InNIBThJ9nS43QpQOuZV1TKzXoiSjedO7JVkQNZSOuvSm89uetxDc7lu
W3oGSIB3gm+d/4SWgUfFtybydgZrwkCraB1ZRaTUTXxanQPukLCDtsKMWKT7
gQRAWFpZLZGupWyws75V4dTsPYVLreohMxkvAgGi0SpmimbTjbBVOk4yuBKi
kk2XJnaXNv80y1dqhEahoG0Cgq0UVRGVZxO6qbPy5VerKI7vr03gsUwuEH9L
tV+sMACidpePtTbHY+kOgMQM92m5EhH5t5zu15JhwA4l2iTrbquaLHAFW4nw
EvCiiGn+qgyWfCiRbIU6AAkRAfXDJ7J+IDbolSZTMwuwEwyd9wZtOixHlrKK
zqkmC/ssXyzWixTI1m/F+EVBst0l5p1c08BOL22QKhHDQQjnBduK1LTi76K4
cwMHE5qLMe6FBsfPUWfpfAnKBpv3MdsEYa5eqQs45et0EyxAow7ogAlrWFYD
BJ8j6Sahms027OCki8kYk7mRlhicYtyraujxOqpV1TbGDsksM13MAHaAg6LC
eWdfaEPF2DzhVqKewZG2+bias8BRty5Sg4x6RMxWC2J/emMRqs8JaqJokD/I
6q3yLTpEW2EvAMlUBUGUu6frCzRXtgxx5y7o+I8BJqu0nZHYCvL/CrlS8gJE
6jW7Z7MqIfaPGEUiMQaKOvtGkmvUZ4l2H8eDfmwMBOUKvde7z35nf208UdCj
ta7FZpaXaV1UsEvAX5JN9OZK4AhsjkWNiF6Yi5DOWIAh8Zxd5rxQXtsd1phA
1ET6XvxhI0lYgUAhCyHP36L2CZJ4iZ/h6bFdXk3i8iXcBhQko2AbhLz6GD0I
vPr3hORZi6LzNdqeEfFR6CTqXDuliZVtxMwGRaaVs+OgWeMKMUJxk980Nhkh
/iUCZ01hBiDzIgUylFBHJnsIiWC4Y3hQKmFw2goy5ja2yLKX8Ep0kiZ3PqFG
yYd790ekqflyCpRCRPuaJBmQaMk8ixEVmRy7jrEg26QcEazsxyYaxK35Rzzd
sYrTkV5ZNJ3wAZDigFwfTMiiyg4RlIeDM7Hn8LO+a9w7nk0JNSLCB6iDK0aj
k7c39x3tz+RDlGFZuiBSxja3iniffo83Xo2adgyEIL437axBEf+9ClzIKtA8
La5BgkSuriJUO6PDdW80bCInAw8aksg9SRRL3NS5NxRNa4w1Up/dssrWi1wu
Bv/B4QP6Ah4rfdKocZu85Y24y8/e/yqOAa+VIH4uWZVB3XUKrH7C3Js4tC7e
51bh6ePPQEDDUdgOA08BKqMkR492DAIJo0SPA9nrjAGQ7kjGxjOx7MIrKWpq
Iw0+wSvjr6eXYE3il1xS77lVQ2al6/TXEu5Ho9es64tjy3TTYSa4mgompXMP
3MVkPUHMUg/OrBB+h/kCQEbaxmmaBCg+dZa88M4iBA3iquPaX1ZLG2UPKFgr
+eYgTVRMkfTifqbAJkaB1dsxSpuxlfrIBhewADsCvc3SaQaV3gvnsaRr4e9F
4SPnNB4nQzd/5hgAWpELwDDEN5TpaWwiVzUyxRRxFMSOpV4tIL4LfIBOg42I
4rwhHGmK4FxUs4+ky+QVis14EEyQi5rMIx5gLL3SubitUKSHnIbAW1iliQ3g
mxGQ9OayAH3z/dlTGYHinhs2cDPhrK5L8pqRBSldwL/pEyZ0FFfFJy/2EfxU
ZHfid0W9ZJ1O9+IQwFKjPKRFS83Jg2vRpiI94JqvUxTmcYpGHnrMAakF5evA
0jPdtIpq/LZ60sRZSq5uFmkzQuO7lThJ3eGgeHuBEFZf+QopHmpODG3x7WHG
EEtOI0+UUAIFCDQYWZ6pu6AHfUcups9bzdRnuBT/otrw+FpuyALD4ZMcIMHu
vdzYadCca6+rWTqOJXxeHckBWihdMfKKyv5kWXCumtAvMh3c4ZNk92CPdZ/F
RQUa3eXSuVI4lii1J8Q0cPeQP+lM5q285hu/BWIobMO6zGcfQVTMiSS1MRos
UQzun8Idd89m2Ehy4jRYwk91zRg5liVIZxUmeXq5yjMNYyFmaiQvuqBe+iXl
kVUZ9tiDzvBR0cSHa3lTHEZ8iTFHIheI/4BOJK4AIINeg/LfqaiPzAhmKZYF
kpRnb9+jQPbu+BU8SjMQ+ii6HKOBjO6FgX79CtXPaCJDgypK9H5aNQDiJS4z
R5qdCDpNMyfV/0w6JZJGeVzSX9djCip0OqSEIr08fb03sSBDr0ZGUrleiNZ9
0+QXZBkQ2wu8LUKTqotOia1JDqD/EGcbiQDM/mXRXwn26YxMOG2kIeOajhHb
a1kVKX+IqWMfV0iLZm4xx6uc1h/zlqMe6HMfNbEJVqmBQUTJUnd46RLLGLh4
FZQAU2cOUJU9ydY0CH0k/jp6HfUbnlbsGzjrgo3jXgPH+M5wDbVjtLFeNrF2
ENlDNZ+jxC7heeIFAtwqqozNyqCBIDEFerUEZstmZ7GJKNWXo0fcqytRcAkJ
SLuTidYlUgQhYj4xYVY1HDnibaGXGs8ZhLvTdX/DDJnMX7E6S26ehumOohGL
Air+GJvpSBR+wgR4h505aBWkDIbGeXPU0GZMSW8vNw07vDiz0lsQ0C0Av6ND
mS30hEssvphBXXTIfpTwRuwBhkyR1+np2eEXBBfM+iIjOYXcaQSEfNg/qs2u
0fOargugOIxcIx9vKzqA/s7DklDEUSYYDWntBN5rIeOCbK6RE6Pk/O0rshJT
VlDy+bPkFn35spcAdwCAZxvAOwyzMaIbHZVIbxO26QB+snRfU+JNWbnguGwt
HhINKCKH5D/Q1YVvIzze8lBNJxTzzdPniHHvn585exfpZHNxpRgr8iUqNzPv
Kwjju5XBK6145VxWy6KuK87RkxPyTIx8VGxDwVvSrKdNW7ToGYZnAHOK4aRv
GvXWeU9Y+HuLQTgX7hT5fBoAuCQnU9wQ3KDnXbssX6Q+g61TxYLkATbjeknD
X8EVIP2sWAWhp3Rl0EMGmjcGLaMIr4JpX6qSOHnJBeMUeUceXBoQMQwxLvIC
JPCWIUpeDXGTWQ+Ui80LZkNTaFWOfY4Rzu6N8CzEj4h7cOoOJdeQtMsarOFt
KBSLthw5fJ1MMWGIYHEL8RWN0Hvl08qM22oU+9ElK1ThSAS/WV9cOJd5eGBi
sOgxIQYuJ4/y3h+i8RDiLaLDQB+HRjguZR/sdsIzNT6oeH+aeAVqLSopSpfQ
oheGZvmki2mu2WCUuuBSw/jcTeAECBMud4PNGTT/lIWG7jScrMNBE5wGQMq+
eJ4dPeN7QT63mm/XRZUurN8+MLSlLoZMck00nqNVrEOPNlmKEAvgDqPlSFzp
upchz4+JvMZFNCE80g27NXY/f9YfP9BrSGbVI0PePg1gazVHi76j4kV4PBmX
g8KB7OswDCaOq3FFFkMWiQXGDM43fi/CFDUOQWCChuA6MyqMrvPHRjYEUwoD
xtk4XEo3yG98vhNtLvQIIalwyYO4tWtJ9cH4xPwqD1J8BP086aIRkVGhCF5j
SADyAcp5QiaHfmesOYXEDCNVRHmQFAJ1oDLeZUXD0SdoruGME0z/8yYeFF6R
UOdjrVrgVPRR4gpJMV473d1YkzSJxVGFefFJLESXqG9Giig+NaEIV+sFUDMT
hPA8LzcdDcDsZ8V1JXyMCqllMGrgLxZ2TcTtWcpxFFFKVRgcy9J6sRjBcsuN
OiTkYJzhg2NcJH5USVYjsRMkqDihPRx+ZF2dm2BQTiiIcCy4Hp/vBOhvU36Z
Z6kA4WO2omAu9LUXZUbXZhhF9b5tRU27FEJADtoDvVc852TVcBlmdYraQbJb
THIQxtRSDexijFLYZT7mvGa9qHtiB3azbFRil8UJV7l2Lm7OC99HYTwWaUeS
24Y6OWpmbnl082Vl1hiiR0JBc4pKVj6ayGSn5TfNRfqqh61jLZQ3J/Iq6WUl
yYLEyykMSAKX3YGScsihb1dkitiLBG2xzxJKio8m7bWSwl8DjkX1DG04dtfm
BlDdIW+pwvx/0nEqYebb/JZF3kRrdeuzyTmk5QdJLNE8mtCNgbpBgPvzMJlX
9ajPd5Sg6/35sZGHwnbF2tGxckW8ZKSlC1HEG2IkwiQwYl8zWGNeKA5Rot9K
3z7fQR3kg/z5hQKvT4AnNlkN95JHeCI0H8uRFZRVVg0Td6aOzirsQyvZQQ6k
As0zeSap4zahcpLsvq6w5MHrqpWUg9BpTLqtJoHmMobk7LPN3C9DJUH06+/x
xrcS+s93kAwbQBwbCaPJ848Cc3xLPAT9AyH1QI/mEujTVrrmJS2iavvPAeJj
1D/I0KqQf4o2+Q51U3WarR09ivX+GVrF67wF9L9yujqMR7+jtSQec6QIjqlg
uSRB4pkTtk1TKq6QlxTTgdpXzkbw9Koq0AGBhhJY1SQ5K5YF2nfwWZJ19zSS
sBu+1e4G40RSvEBSx2oX3yubBuWQ3CdF2QUInDSoo2TYpOiL/Rd1nv+R+30/
kwBQrhVBmW0ukZQ5Gl/3agH/ENydUqa13jTWDyj0qcDYEbQ86aGTCk/zvhWX
qnwbYIlbzKlYqICYgvqRJbu8gr1wYhdNVCZTwoKGXJrG8mTYPn8iggHmLJEx
uyxYYpewHRXyU6mF1foIcksuGa3mdepyUIV0nIZqFJLNUI0CwYFcFR+Cn/E2
Ob5v7tJttLIgFLUwefgclIo5OBrxAVudSwQJ8rAy/7RicE1zIBpFxZoCR5YU
whjjSwnkQq6jKyDmUUhnDBOgCZPYp7HYyIEaXn5FuX9OKwL84qIjpbgyuund
6s0hWoyn2kj9B3+JGYEX6DCIzayUu0RLhF8xd6rFTK1GnXli+h550RABqRZ9
2RmCkYILuRAEreRV8YkKJLK/ogeVvXHG7d5dAhcps3QwVxy2GroWntCbqT56
sTfbaBq9h76ggnWZirYwzZktKGQpsR4PiOyf5H+G/+cj05RgNcep7WW5btfk
a8cAWk2ilPugMrgAvHKeRbwI/OwD6B2A/y/WJr7Aqvmk8XRUhbgSwoiUbXSo
UgArqk+a98DJUsf1tABaiLKUAv9mvEVau4ZZ3LfkgVRHkNdQuR4JmQ2ea95D
JyYaGSj+5LUFF/CrZWQis5PUPZgQDoGAIWGEPnnF1QVSV9VX1p9hF2OO4gxe
Aw7mLwZK0mCOyfdVpEEqB6u5LIBDLlB5GMW5FZy/cF31y/qqWIDk0ZGQTU6C
LbDQxOcpylnHS4mL1VADmaU/hsHGWVI8QxwHkbikD0IAn/6lAQoSf81JlUzl
4u1MyIxgkn0x85EqReVlHpRUGjsBsT/3mBxExvkXsi21Typ5c64bN5hJ8FXw
kY+Hciax8C6a0IwLWYBHuYljcvaics6BT7mUGyOThFgPBQFArZDURoC6T1u0
qYpzoh61KHASKCJxLLScH006Iq/Cp++NqdKSZh46T7P4g/vT9HQUl9doB7m5
pAySR2Aihdj3MEuHAmz7k2xj37bbgvxu5+49ae+M6MtmFESQGFf0hSI4OW6t
Sj6WFCHi8yuPmRaaBABTD9hG2BqHSdcrL2fromL3uQKOC/ebsfWTXJpW0zTT
+gMPQrVc3JnIg0FclV2qMtGqJCFnMdf4LrPwsDCDFCgwy5GCAU63JS7B0QLq
41E/CwvquF2Gt+4QM8WnxEH0ygST2h2LQQYXL2o4BTVyfY9OMGKQLU3K9ju9
mYHACmosZYdjwGCXavYWxZBqMZTne0mGDVrAjJzTcaZ2x3NWsAs1qhmFr3/w
hVucyo0gd+nMtNiq/YD/jhYMvNa/xnWvpiaTXZNAk2eG5hw7mkPrcSn0VMEK
K/bjKm6YRKIZHQnkF8zm443SBvD5LQanAdswCLgvhTmiyZ7o3CpXu7lxHZwf
7oltRF4lgWpDFNMYvswRBrnhn+9IKfaBgwxeHgBzfyUC9pu5WMwe8OvMegIc
xfbcfBOu7oMZ7gv7dYLlVf1smkiDfJoL/b+xqILmJI0kTGusOMlQprzVWuSL
xo3uCttzwb2WhEcqUUPV01hpiyulff5s9uWB8S5cpK2coAnqZHpaT8P6aUII
zZIqFslJW6u0hoUo5eyTxxWis15Tigix0FbsHKK8bbZ+aaxCWB7C0B0JInuh
jmf0xKDDxKIDAQTzJ+oC7z2aBVH0tMOYMOP5DXvV8CwE7v4++01IANvfl3X4
n8IIYRLKmQG4En3AHdBZSEbc+bqm21W48+R80wLzylDlcpaXreJqgNa+8B+B
0yxtit6EebpetD8PLVm/pjAlLZFzfcmm+FoKmuLNzyVQx6V28zG4vBQC961h
nHIoadxcA7CXGoIAygIn7X/Fl15g77NrE0E4xaJdLsZVDiXoIJOUA8XAsbkG
HxJ66yiETo5GkwRgOK4FPod3cdG1ql+u75JJIS19uobWfPQkxuFBb+WRjSHF
QTEOoHaN/D1AjMPXb0eNUf7qhGRGQrDIx0EiqDHrRPEozqBZrcakIHbG9wmE
cSSLVOHxxKnn0w6fcFCxjILPKKj8gexCfxhiZ+EHN4FQMJdMarfUR3rKhmBZ
IkP/pxuHGIHA4ENx3TkHqXEsObqqi6ay3uc7schmfDXOZXyxTuu0hCvT0BmQ
JRwW6+zHnMBv6635Wr9cLMJRWW9RlV4VYUev/X2lk/v7LlRIg0bkWrOPA+GW
l7NKS4BFEMFpry8rqkF39npykOxyXGe58V81s0u08y8KkIqenrwbJc/xP3/D
/1BLqFHyl7M3r+GXVy85sRI+ZoHJTrxMW2fctHK+y8ENFG+vmps6ZbZAB/eO
0mZSDSfKuM/TxoXPuL1afYEi4CXwxqaYTdOmaPq7VHFajPzhmCvt0OeNaPeo
F7xfHEhbYLE3mqzefRI4tr/68sXShzLoQAX6c7W1MxZGhrx+8YyjQk55OfuD
1fL38XUu2A9fjL6jzZmrGENGW8n0deE6bG5b9lwp2DhjHBIFRCBnK10uq7L3
EzSW4sMP+hBu4QnXrfaWHT0ZF7DqUirTwADkiqBOksg05J4gSp2cnv9y8s6a
j50TwFUZASll7QNTzUhckXGXjdqMyFGFT74YIleB+n/ySlBsT8buD1iHX6Lc
BNGB8L1dtYC8OztOyLzx/OzYjecJhNzrHhXLGRj8WH+vG9Bt0/GqacbNZXp4
9PDvOPbf81kGv+IvY+yCsMIHezs7b975ou9oiKH4MJ9Y2LoMAmOu3bUZxrCR
wmR9I7qcv3+BuH0MRzHHtgimYBx8LPW6mNt1NEDlSnsJLJVSHxiVIkK7EYZl
CxQahzsI7K5YLhtpUZzecED5PNBtprkIrWzu8TV2jYU2APVus+djm2lIjNBE
Vsgx/ZSNpWoN2YA7CGIwV0bCX9m5oafstWyeZIdtvP7ExYBTUIm5RMoD+dd3
zv0for00kuojRf6IjhNHMdWU/DckBCN3pGOj02h6j+O03XoYhALxaThRuPJC
lJhoSBwZxhKqoKhIwkPln1aFFF4Q/pqRZVAnanOu4mEFMI1TFhWCymfPaq2t
IlmaUpkhkD3IM80JcnJTccE9Zm3l4bQfFfyzOMrftRMIYiL7hwTW786DIS5F
yMWdEpyLlR05bpyDRQJDkFiuSJrst1z5esPGzB0bfzpi8O3uOG8lKIyKNh2N
QadRK1f6sItmfbfccZMg/Ty2y6dKmtjSxJbDj46qSEiKlAHvZ0YxuViCIkVG
UGeEhEuM+WlovfVDAPUI89DQ6ddgUWs1vojB2IlIjEcpqzpIVjMuCYI+TDao
AL/y5bp1HXKTOKbDFf5k1yi3tUOztymvaesjuhrQYprGbC+040j4uJuBBirY
+sfUw7YvkLsVd+0IIgL8TWD1+ejLFxOFkrFRHMOA4FBzU8kaRMmPWhGio9R5
Y5lgttVirYMr7TUuBy7oOJHZu+mCkvtV6azxVH9OAsFMmWp2c4yMj2OkFYM5
r1Bz5VgkB5DO11GYrfLda8pa1qgyl1+khk6pCyxpwh1rFIAjBgXlANiCv5Eq
FmaS64mhBS2wDXDwPKv+5LRwpmxfgFVDALgKNZcZsT7cbtIkwmuJhZfCDNtt
S+x7Qd1OaKqjmvDVckpGJU8mgKJoXi9X10DoAn1lv1OdUpCzNbpQIEidc+yv
s4MNF6SNrJ2UbnsVWnOd9fdV7yAetfkHh+FcR+oKlu1bf7AbGZOgyKwnqtGQ
ds4SudYTKmq/DR+EmAYHDkSBKGeABIjPPodACQ+BfNguwEhBL9MqZIAReyWp
VuR6OYoki+7lJOJLsziZX0pIyD2UH/H6uSuu+e2U141ZfiZ4w5fpaYOxgmoH
+AhfJGlHc2WRJPJJgqrE+c29aEE6YCo0Xe1wHb/2qP9eNAHx55rvYa35QYjL
LQzpvWmnwzZQQzy0vA5wS6M7+qI7+IG3kvtckGjvMtOcypEVN6u/LvPH6sGh
yOqypOf5talhtCryWf8aiOx4yU8TJrWeXFxJPTEnZHL2kPzlwtkKjf7qmcjb
9900bR8/6mSHAyWIMccxC9t6aJnWXFERKMuCE6hYqjTzc5QXGsdz0hRAdvLw
8YiJHATT21HPlZhCm6TsGRDw4q9KbydrUjTy8ADd+BJi4fbCC02a5igA27Mk
wsH468kBOdQ1NLXjFlMbbV9aPoo9afKDAaIA9wfJl5paoYekILadsU7IBU3M
us1SMWM7m6jcSoZn7hRPeF0NKyWpVIRihSakYz7GwyVClLZ/gGa/1GE4ZCMB
eKXcZl398GFajyruwIkhXkgecSQBc4Ce51S7UK4F+RxdVR6fue4lVLdBE7bX
u0WTqKdRcr5+EcWbSoF1F2cVxAJqtYjvAUik5QWB7E3y7M3r56fcz+rl765B
Vg/KDk13+kLQTEHiwvAloSZmjD1yaBBv48u2azi/yIp9g5kXC7YAXlaZbfvj
ioaZfY/HgT0NswuXSwxnn9mxUMnyaxBbGRwgVeRyH5CRTWuyidjsmEkfvIwD
bPhgPJ1WErKNnkWHNUDU1dqBOGisPs6ClkZNpkYaWxkE8OJRS8KpKTrkxfkh
f1wgibmKCqC0OeOEl2jC0FzWPiIbqLpWPdqRCiXK7bPnr7uEFJvr5XFaKfuI
YRkDom4WxD10QgLQUNGvJQyFPexq3s/AYe65s3clMFSNcV59q8qo06QtuHpz
UDqz0LIsW8boCFeM4i45spXKVPyz1gkjv3Kw4UD1x/r9zi0ZxJuglokb/Jjn
q0h94cKRPvKA6SOaGcpNNBmR407ggqnL13+vxDCjbCCyG1kfaGCJEXy/hSlG
+hrhjyh1ToLpArVQ3eZSUVr0/SdiWtVPaCdKL32LGY7foIAROg7V9cXvlX9a
SW0OdmJcF4tshpVfiQlOkaxhI152obJexE64IUV0R0KHq5XkQtj19THTrUt1
1hu8tcuibTkJfdM3EudlkbDjVhGYa9UDDH/xreJx04FAjUmyewY6sg9z6oQw
fZns9RyCs1+ZXRnF2+3Nx/1h9ARX7WIq6iKwEzzM0CQr2ZI/6O06GP8j/WFP
w1jFJm/B6yg+YZoDMaZeumkCax7huAR6NFxDxJegwG93djA/jl/Z34fT2N8f
oGxhX6UOgVuajn2dqn8tlWmyF1fkpaKU9sR0EV3SAGD+RXsptrWuA97EZhjr
Wvc9PMmmE/agUgdfLiEA/botmXxdB19VGpY9aSsU65eaWApXWZHOMJbNXuhB
buUiNj+1PxRhm9cjJoDnhqgkpmNdFEnSu6LJEIidNrgoxFcX2uy3TKiGSo7h
UnvDyPCkxSYsvO6t8s5Syxl2QgCtHIaH6q0CqGZcc8F3lrGD4B/nDbDmWxe8
Yg243Tf/CScgFey6wO5pgrPNVtQfuXI7u5FL7DUXnG3u1nMDTz/I704wiiKG
2ITte30nVLNI8nq+dNJZBjK8pb5vNzjMGWGioMlWuimnZU9B3DCjx5VE9IGZ
aJsIk713tkGCz7mJYvJZkmTGEUSWo2hFLeateUxj6wA7L6kbByL4gy9fTMqS
FP2klCIp7EBL5op7n0Jq3FmiT3MkwJjNMrf3Fr/b79xVtMFPr9JFHipc6UIL
eow6JijJRjAAU2cEvni7++R5tdk6k3Vu+OhvBrmJ0tbo8vheZj8UlqQNAkHU
jQy/hcib6iUJRPnhKgF+lQI+X3OdT5ur4tsCVsNSYiiiBChzakb8J0qE4QpC
xHa2PlfZnhWtLk/xmC9yRaoxurwbYZFOo5Har2gbxcCrme8Q0nARs63Yf02C
vMDRd/xRMozqqGyytyzm8Ot9WWgYIVFeLLw/1gQuanlZ3fzu3/f/7lU/gRac
y62qUCD/8tJbECZApQzE3OSuUS3VoELOnvQBmmFM6frO6qQmZ2l7HKwMf+gp
x4xU229Wy8sR/YnDtMnSQdsOrwK2IFQ7i6nS6Og7V424WEv0hVcT2cMs9Ckm
6KKwSay5nAomarOFWJok6dpI0Atrzi59WSlGwbLC24bpyq07eLdwieAb2cZH
Hj18hJ+JRWx9KKesMuoKyxLJvrzzte4LH4tH5BHLjHHdU19b2vnMt92suRJY
ZULOG0OyM4mGWL1p3TR0111lQ2oNpZWpt8xAddyUNalUQvXIcAQvxxdl94CN
qKL//KBffKjXnN117gP1fX3hoKKOE9k4uiGU1LV9uQ+zdq9H3n2Rd80klBYe
liDgqIMay5r5zisa3dVXC50zflM2FfIirmtUrlHSGnVbQdJ1pxMTD7NST+wV
5zvBST2u8/cvotZ2IJi8f0GBQSCb4GxvT94mD44ewQP41xj+Rf7j9yXVGKCW
IWKTvS4aKRjPfkOXjObXGx5hUUptGsJMX88hCLKjY+QGB69ipcPM8Y91umC3
N40T6YTiYgmP9jh0l8PdfHH68uT18auTycnfzml10tA1/O6plMwv2u4WYZBf
T96dnb55PbGD6QHLM5z4+MdYcx11YoHjENcv0oGO3IJaxvkJ213i8H+n7nVV
GhPuICwEs13JEZFmV3QY2BJR6JILAJpuR0R7yTXI1l0VbWOWxquUc9MWIVyB
y4JusnPIp1d6m3AQ45D2a7TxeY56z8s5w70m0iS/HJ/90nt8+EDdss5KhtXn
C6wl2VjL3qgn86wvrOLLxGmNTkwYXhzDdb/cN25w43eptCoxipdmZSa6AmNm
qKkbJslQ6FM3zdqKZj6wuRe7+lVQhNHDA8YRnNAS2AGchC/21egz+c+mKvcn
oTrdjSUhEyKAa//hwST61LU1KhqPOI7A7HsdfQaMQk3iExCI98Mz67OXjDTq
CZDp/vjw6CHCYj+F/+2L1AEPxkcHh3cPDx/Qsyn8b5/Ypa9GxYUKnZEq3twT
HnHSs0Ccg4bseSht8LgJ+93AexjqxGEx2+OBnktyX7TGRRBTyj29wnAgLXfI
HsJIXMSyiV3hOw42TIeW4gwImqEv4qHJ37dp+5pNxen7XIkoXhAJWB1DpzBt
5NUU+Zpy6wxpsoDoHDQNWq/I42XycDmyqacMAKEA94Fkg2nnIy8A9IGVb0Rn
wbbCIrv0V9wFiDuZYfmYBWsd3ICcq/tLO0bpw1HnWG/qKl9wOQysvlVS18d+
GDFegDxccZUYrsqEQs0KzfOtq57ha6zP+6QbF8uon5vQBfLDbF+A4IR6vf7w
qZVIQsOSEn7OrUN6HyL7nNmPJuOTnv2N5y52RGrswPoIl9bfslKiXn5q1+LM
heu68G0mcNMNj+8yCql0eeyp62T89SZEbwGRVxy0JwKbMfjom15o4S5zT4qJ
SaiQII43pYYj1+Wj9nIqybfmK/cbfsE5fyChcM2iDcufUoz9Y74Zc1IOGSLI
/BHWpZmvF/DBQmqoG8o4BAacyqKeKXM+r2TRbGUSytNn8fx8J5NfP/hfvwx7
2rVLkBDA1Hit1NBy6eMVNGaYO1tma+4bG6nkrvzOJAFxvhAi31Xz2fS65LYD
IUVxvUIpILbg/tRkXzP6IXzSrBct9xcqrrjEY6dGkEmGsSETle/0PDJWxE61
tGZLlMIwucLz8j3T/LUe6mZDRZfl4Qd5+EEfauloR/Q8AbiRzAVLRwSTEBU9
XF+bhgubMvahoWKkRVGmLq6FI6epcu18sRFTIKI/ZQ+E8Td9kZs3QfJGClDa
JrJSR9BRASnYlHeaUf7zrvEdfwtNdTdn/fSAUFTDAJDB/HO0SKGxTeRzIxUV
n8ZYCF8vgQSs6rTsKgmndnjs15D6opyo9QZHIYjDzZlcVWvW/vibIGKAuqq6
mBqzIaqW2ZjK8Z22TWTEJzVQTfi7XdaBN5uokrsDH1j22FAmaZZjiqpUoZMX
tKm7lNvmh8ICXLVpk5AZiodtfE3WbbGg4DJR1LUzLPfpwVEXGw8ov19xzR+O
UXDEPuck1Ms6xCBnynRhcxY4i/eddlc2EjFYHIzDRg4yAHWoXQ8w3VsfsimS
EuYl3TA3G4hOQV9BXehJD85YycOfBIs2lO4822gFddcst1MYt49oi2ZuWnmK
i0mtrFSsvHNoVChY34eVTCj8w6T14EukdaTu9HXIYk7Sbt3nwNmyaZOpyy6O
EwUftkCuTXBfz2GhHIaMzOYR+251BMyJierwCZQCFgdxNTS3EnZHaZX8jt4y
FuzIHjw8aFgv60duDEdZYibC/+ZZMURdB+nDG6I1RmQlt1pFZuRaw4gREA4V
lYogxazZ6coWpryU1GSugGOChMlutEgdHLrDTNTA1Z0a6TyH5PYsvINlnR1S
NsOsbXpuV1+RVWXFGrM5RDs9nQgDs0mSMpSvCAv3E5Zxe5/1atxWY1TNxIiC
3Vbakf0YNV9bOcZGcFoRkLecf4J9OrYEZD2Id3IxVYg8pJ9yq6/Cl4D13dNN
uc0ordffceSSOBCXKkAjL5ab3bfdOcWQ4fpz7juTvFGpFAVZgKQUzrHrPI7H
7hsXEavtazPYPfZbi1dFD86o9NKEJUmCIHPSfJlIxafUzekzKDBCv5z/tb9r
YsGtfpIHcSKgGqp242Jfez49Fh9GFV724pRZ/D4MjgFmFOiyZP7GitgibNlk
d0vLenRNEY1pXC8rqIh26mjvc6W9n+8EfDESTZnMk8C4TbfAcL2WSm91Ljpr
U2VmrCw9zEhF0gyYJVpl3Mgu2G61rlG9cGkknTXQpWBmE4mNPksmDoB4m7vy
wD44QISU/ljvX09f78mHsLNbfhQGiBum05VyHI0uOq3BfClaZTK7Pp4eRQ33
188segTR9ppSieNLDC65Sr2qxIEEdnk6j93VjT4UHeA3011TN+Qwtwo6Owyf
KVkC6EhZAL0Vfp26Xcm3aW+IrLPkSw1miVMMKrFzPJSrrBfqGlHt5iABxZmN
yWJ8OthwfMBQbKKtcBbnV+n0d5QoOC7ljJpi187F1YkL8r9zfTxeMFuHSkq4
06pkPn80sPx2yqJa8+9Ia/dpcAE1x5yR8NFtIy8GYyyDQEcnJwU4hBpgaNTk
dp4uTmfb1qTX7ayVdgXkfuHE+aav7YITetxk6PdacO9KjOqiCvKuUKILCh65
k5eFc+MCDMYCbUYJdG8vX5OIEQcqlCApDYs7OztWmAbNkuwPtp+x1py19ckp
pyjuqhLeO+7wcRxWwkXbE0XrcslL7lru24yqnSbe6Q12G6ley1Fp3VscGNoI
/0im7STnx8qYs4FxxSkRwjnDzliKGn9P9B0JEu0zC8/ZD4H1hFztbNixgo0C
1o+jcrqd+Ud/zgJIGI6qB5vj8gBgcUFMkD01D0gKjyTtthoY2l5QIgkDJKbj
gnVhIrYC2JcvfZRHbdUYTpGSTR2k98Av4xvGx0jKMXLSR4qKFQcVigEX8cdo
EXvdU5M7PDwSKAYaEisxDn4ASUgc/Nh7xF0YCRXQorJMvg1WX43lKF9ZAgTo
nPUzysbnnpROYequXzSSSYLZG+33xDtxvpOEIgk9l0in2WWFhl/VL3RDdHfi
FSExc1gVMhpuO00kkQJtjskxeDd2V0YSI3YIrtF+EX6eaA5vli/JiJZOtaev
1Pn7Zkj4gGKy/rFj1Jts09KviVbC1bkJULaqGDWwYAapBMMX0SH/i++wiUUN
qQtcFMj1FPvljmkW4Fb0sEETcKdlKsKc4w58z4lpbosDes6iVf4JVq6xjS/8
q+UljIRN1IBce4gaGo0qhFjcG2m5xsbnNGZVW2IUkHQORTruFSdASd7wWsUM
JkfoCZKZluKF3ZxmSpM3ETStMCKd8TqZ6FAAaNXGruFFfgG3FE3xbAguWrEe
e9Jvg8g5fiVfZHwlb4GEnVu4jBQttWK97SvWHlaajw6QUk1s1e7b1QHYpUAz
qjJKeKq2C5+PTiIYWZ1sSz90yfMqlJhxJH0wqS3/LYfS9chLWXCNULFV+YzB
jcHyokMUOwSIYy8xzTMP61jeutJdf/QtQaqbrd+FTufubwsZ3cWqM3HiCHI3
WxiYarqatCAK8zofkNyZ/kbCer9Ez+L7faLO+/uiIO7v+zvl7QTwYKR6se/X
NQrL43XNkSp5WvvRxGq9Gpuvsm2YVM4kLtR9tYA5RyuFz7QaiIza5NgnujU1
6U1qu2lHogXBczVMNB3rnfZJ5pxZDxRfM4k6QjUciBAVYbe25F20dmI+157v
dSa7mUkjJFeG2lfyD4u56CqFcfymNE2lKqxxi045/7dQr5GTWkWijYrIiRjL
6ORjuIIYFAmsMCGCKsVE/j3aHQk1zAaeqf+LQZ+Xw55jahC8zV2G4z23ajMb
3u19oDHw1w/417ZvRR62d3LA9Db4rWYwmC8lcDH89s1bLjPxhFuMGXgjqhil
hGyP8Erf4ulTa0bs+84J7z3feo2h78vuwqPECirETkFPvlziDN0NtdQUj+SV
1CAi0TEQLi6LaWGi+PE7fSnolEsX1VddcFXuTe8UMeQsNj5osafnnhC1lGtG
92VSumQwvX4DnX9tixXXMdgmfZGhwilfQK3ciGRF9CEUZMPSNM1uS7KeRi9B
PUTJrFG4xW1MfIVo1AtF8lPj8ddcRuq1NnQX2dynaxDbFkqysMD9oSH3e6zd
wwYHWPObUuQTx93d6uBQcb52FJBA5AC0q8C5N2zR6SRPUl815CvML0VGbWNS
252DuwKS1wENTaxqSqSfl2xC5BuZO+JWzu0AiOx3fKPIccmwAqd3XWTtpQ/7
DiySGmSCgzQdry/py4JMovq4XqKs7RmzlSUVFrpFHfF8qhGHTVxJX5LKGcLi
xGUXps/rzlXk9kVKmKq77BiSHRakjnH8ZffM/fqjRZFQF92oSMOg4ApuCEUT
T7Re3K/DN2MQa/leDN4pEq4cDfdV233W4C2zPr+1RDKBwht8pps/tzKyeuFF
2MXgUOkYnmeHR0cHj0eJL4wt9fCl5ASXvQ6WGxaG1vF7c7V1Gg04H9kIcztR
b/ABDhlUp+64KjttRBsXYxCGJ0XuSuE/Om6QKe9BLy//2PT5oDgKB8ckx5V+
Y2xpN33X8V3Z7NVe6b1jFFRE5ze+fLHCgUn16BvMO9zFfBbcT5HAdTdsMnVX
sCdgAi9fsBZyufS8+P/v2n+Pu+ZB6uHzbUh9fmlDpLmACqsxvigEJfcMBa7o
zlqOpBlLIcne1G32aEdVffd6C/WQV5w8WxTsICZBNhy4hQdKgVwlTMcXVcMy
LZo6wvZruLMualSOuRMM9JUxRUS6OKKU7wu34yC8Vo65UReOa8sU9l3gNXBP
KM4JsgbVWB68hS0trECqcas3KIXYQLujE/bJsHwVIhsLSxGRkbt36lin/Hyn
X6Xsm7oTEu1qpEuoCs2gWnfa4ymoSI7qEu8eR8q21Rda43hIqd26+u5APb44
qe090FKT9LZT/ti5zcWEkUUpHHIvLEUz+RM2rI9e6aSuqVxsWgtG11wLPE40
T1qK81G7aKBAPWmGiatxQCYhVUAoG8M4vTdDzS77srS/OHe3Av6SKvVTmHLm
lU0hdayBXxRXGi2mDY6xmyyOElSL3m2CymBB9uUexzI5u48cbk6OMAKqI4c8
EVmAMJf1IqoY6gg550WoJktjGG+6TYdUPL3JbvL5Ttds4jKwA5syUToEHU6D
Kb29wRGsHNTe8uAM7minmEkFQqXN/PoSHREXeaidDNcZbSuvRuqWNJaF7bx+
zWQlNx1nOvOVFEzAyQOGxfGLzkDisMWn/N3ZblcSuHbMSn0kgHaDk8s5+bYF
wfC3uPs4tve4tBpHV8WaXFCKxvQLMCGHpn1DTCuj4F6yBneJqlmYFMBx0YTB
VN2GFoP1PFaLdSNCwVDbOakP0HaxoEYmRAkdNd8wqXlPshx5GYOaf7ip3hbA
3X0hB1dgzvPrOKm/+TkqA4/KvYLCxaX1J5pv80VNYlziyGQN42Uo45zoII6c
OwIlvUkdBMHcLm+2M1ULTbBolwT388uTcGjB+baSesSC9OrfRFToR0OlO5FL
3d/Ffjut3MRbsGJHVWRJTH8VOFuvXiKFwK5yl7ZE1iEiGxTrSw5o+4WWLZD3
Q+onh3mdFpJK4Sw1DiM8RCkCtc5T/t0HtREGUZxLL1l029WhSeIsOLTeSQ3B
XbUF4FEgLqp1Q7Y7TYP2MS4+58jEX4UeWaeAbvWLUJgH2brQSbfkDDRb/trv
mB0nvzK5l0Nkz56Sbueqc2VJCy/GfwPP4tAvfEAsFK3/h24F1kMiL9lQ0fvG
NxJgXMctgm8/cMO6l2RM98rRRA/AvyNQ8i89nCTPqD+ktWQHGhE6gugNZ6VT
48We3LaXkbxq7kwAbrY5OODs7FDh79xJEgpiCTLdLhhIHO2wUBBL0bE24grO
USUw8emyauKiUSIWHx+k2487R6YjHom7EOnj5ruD0WJ7koR8i2b0Tq51wwZ8
ak4tYIh4lGiS587NbbDa/1wvVy7VsKBIIjTEb8GAjv4TYG6s+uCRD92vxtEC
RwHZiDBdo15g6Shee/iDqg50GIcI6Z0gu6I1PlenZXU+dPRUPVDJrlkyYmnf
QqXchhroHcEIhpaSKJ3vezTNXk+iZCOzGbD5WLijopBZIrt7LlYdhRAOvpnJ
9abCpeuVMi5Hr7FNqKPQPEUrrcPzRZNzORpjMBLA7Gn1eS1woka2IFVUACBF
f2LbkHKkDjPTObza6uQYqp4kzWuZwL/Ug/wWmQnI8wsV+zrfR1kHLN6Fxe8p
AMS7A3GY06BHj6kigAroDcopESWt6hbUuB/UuE01nQdKA7gcTVn1bEl6HqiW
OcJf6jbw3qAtSkNz+BlbB9yo5IhlZT5KmtXOMSnXFEWis67zmM7UOcc+WzTs
rBTvbs7lPDwIkbd3qgglb1pXEyy42YJwa39TXEUhao90cwWevcAO00oRMRE5
YpYLN+I3TYAO3cqZCxJ36xOcj0HTr34WYVUhw0MGqBYRWu3M7MJxiJrPfaW2
P4PyB1KIY4hK7ge4oVibAvJobUydgPChKy8v3vLm/1nXPUxT7Uuo0ZTduOxj
64zyPV/RBY4GL0JiwobkIvO2IrFy+ET81Han1gSe1NVrpaKoI1dLmJ30bmGm
1Edq9Txmb6sV1uk56iwyavfT6UUW6AdBNUZkMlQEacQBpGRlSktqH4712nxh
snAGGTTCkwmKs6dRAyFXhGLkIun8c7Gly4NCerZIRDDWkC0D3OMwSiMQSEX2
KPIuvl1K0PULV7LWTDwZHtyNHY/rc857ba4Yfu0qcHSjADkpT2ehFmbxBBZg
YWwhk+SCa8TwnqnIk+so2DvvN+9cqx55FhQMO1g/rXsOZskDq/kpwO+UyqiR
LdiXtuvebWZ7QbW7nm57k0AAHpAmaSSuQGCKt7A27MM+3OXqypMq/JLv1mdn
C3dyRn9tneRhRJOlhqHHGfnsCwzvd0C3+Xk/oLDE8JvzkyfCMrzMSS2beirJ
k1WEwppnFfUJM7FxnN81X5NLNOodpp3iNXVc5+W2Her0otPvKVab5UB2aB2h
rVtkmTiBW4Ly+nUYz4f/ZNarOcxWvcf0Zavdx9xX7CXWWOKlPpfhbWrGCEJU
WLeDbZZsBifjC3yNWYG+sizF48FZa3h79NRaRamlWae8ieTsNekc37gq6qqk
k577fAWrh5jvgNthJz5amCsEnPqaZQADzHiSEqvBwobXpTc0VpxCmSyoDSzt
1QJTQwBRQgAXRLjd7vL5Tv/5x8fq9Ls4jqwnRjBEpJGfu3DRfa4ED0C9wXi4
DcfK8RtZ0XwcWSOZTWXmzIaO0ZKkWT6xMKKlaH15IBmby1qqHIZfLT1N6BhY
G664nS/F3viq1/JBiV8ZXV1TvDmws9hw71sk1RnT+Tck0gVf/wsT6ZgWMXXp
ROugFWBOwb3OLAPywQyTjs2dEw0RDx21RqqywlXI07BGBddOl5osHAxDxR+C
dOFWclY0yVFGJ5nVrZAo/CQ5qeuqbpI6xa43WBtBr6l8pPVGZGwg+AiTq9yl
ysLc6xKT4NHbPKUmREj25C72Jgx9viNwjJHl1FTZ3gZys+MbLNpGrdlisvwa
i+Vhb4j/t5lJRrZQ9mXub5TUPeCYEB6W1GAb8V40A9eROo6iYLlE+YTqgJGq
qqXqWQSiGNzGx2X7qq1x7nbpDF+BCOPTESlbzO2ax4+7Q6RmFEzLmufUmMmf
SdSTqAO13VuAqoYx0LYrgpqTyLqWjbfe60aQjItUSV8A27YOly9qTViwVt1P
qXb2ZrZRV2FVgp5IDtQYMIS5Iz5x8XeTCCt9DNpqRQVV6W51s84+3+m6BuEc
tlHKxLRY110KhrjfBoxdGj6zLY/PCrGDNjMbedJsae8rsaraFQEYT4FV3rgw
YSr9PrWFlxI6rj446QOD63fjdIDpJuh2YwsYxe+FPjZpNRHGabLtstDuANxT
WS4CdRmoOeTOFtswWnyrvevEe10Fa2O245psUW2J9WrF3IOLWNtAHJsyDAsv
c9fpyUj2YRhA2CppKAgsqClgbyhZXmNLIGAULJgbDQZrZ8Yo6ydrbRFGE4Ve
jW/YTmAl1CKMtGJ61GmaEOiiRMprtBVRLlF3a9sCo3Z2njJBAtZYtxyv2pE/
2BoznJKpyCqFtARtXBSCtIDpwSS6UP7uCNUEWXC9lIvZ6dbzREwCqHkw7sW9
WXa7TW/2omYy0uaIC7xqoooJ4nU9dMJ8KO7yMNAza5FuiPI0JgB55IPYbqOE
hgDzLncXBW6MwAS5frGk5wT/62SS/rRD/Lrb6e/7BRLmsttmHWpY8f2ykA4s
8z9zU6oZdLGxBzjQ26Czjk2Qe45tIrVIyJ4zfIrlZKgnYNqakM4bPgjtOOR7
6UBsZO5gWdFLWoJHqVNfGQ6XZAyiwko4AZKMgvuZa6Jav28nPMXbAu9rD1GL
192AQ/90afrAHe3NtQkCBJHg+dyLSOE5aTw02zklS1592D3B/aN/xWluowSx
pPWvIgPfNO+fTQM6pR/+H7r/TmeyYQmLtJGwhD/hEn/TEdzuBgPOjhcg8w50
7v1eNAgu8q/GA3qLSiP9nSClmfW2QlDcTY62iHmTcXCtCMLh+X49JQsc0VIr
9GHXIkZFULGSmhVMghVSH8BIkhW5QvwcEmHj6tbsnnNRo5H1RAwD0tZc8xUl
ujljKtmgRWEPqzVEDpDYvxa4QEY+vzoUpxxisAeRpKqZ2n79hfha/It2FXYf
ojK8EkzsWlqQDzk89U4YyQ1YTRG/V3HDc9rXYccxPIzinb1s1cC3ISHDVOAa
zW+Sz3ywHccfiavKZ7W5xMN16b2mvuiJi7VIJd6skS5TpBs0Offk8pYbNIE9
CTRDqmwSFhkQM0xvr4TAEh42eMiFdRMS7/YF1O7dMFu8T+/M6JvSQfiw4xol
qsO8pANothv3hUdwcFHg0t+7JWDdWrqBGANBAsMhRtpA7CvjDoqBobZ7+6Qo
b7uuyRido0E7waYFSdDUNVdHo6iYPonfOLTaDZeZipIgJchTMFyrLMGFrvP8
DzRu1tOirck/KcnWkmbacQL3rpNzuIxQmbuFSCVRsfj9osXwcOmhQKcZhCSV
7eycV5Js4XzNweuRyyAK/nEH25UZyf79nl0DThyhWJG+d5Uow416Dap3WUUO
q96e6j2C6q5Ezmjds5nN2Ca0lijnLSvfc7T03DBYX6BW1/T63w50Qd1BRgnH
vFFlxL/FYW9MQjghFRHrb2SUy9tOdQ1sihFYx/+mSXttzpn7H4tFZcbsBIMG
4Xg9ECtMJ8NPnNix1NaVH16/f/X05F3QHlGJyoPDCWIQ9eBT0bdo3JikyKho
PAo4e/8i/Ln+TAy1KNfCR+kq3+dDuU8C3M3gNxXVqHarNyQFcsGTZPdgD73q
WlGXIIpVqzpxiVtwziGEGLZ2D285JmJTz4BssVIHQWYm+LcDBrVFwcK6+JLU
l2UckV8AA84w8ro/yHQURpnaLHdHBN/oYj+10bfT/AL9eq1fz/CJgMD4zHdj
xspnHVKoNIyLdj+YbGlFeavTSJbrhjqeDnOX/tEHziU6h5P5HI3JWseFSuOj
h6Sb0xvN4uribpuMgjEy9P7CbJO47ev2hQYM1YArolDfgB6+bqAUrr4FctD9
PQi029vjSWdGRo4jrATW3oAKLji/D0hMT0BXepevclllA0T/AD87nDzsizNV
CoaRGTJtx9C6J3VG4Qh8/W78OP+0KqSvuTNM3EhcYmiwHOFh8cBbptyY0rzS
6fNEezwpJG8jx2I6RckLaHaUAZNAEy5KPPobVhHmadOO4edrRCypKAk6y6uT
d8/ev/sd9JS9Pgmlx/5jCx2wEadPVumzhvQILM7uwEz595v48e+35se/fxc/
HrJ79TLlPi7soCN8eCfUDyR3sIcFfg/H8z16eu1RgQzgzoun/7N40lfwku41
7if6PXcgopcFqRY3xEn3DV4MDnpbUMJBWVrS1muyIAwu9RugvAKZu6QAmg6R
v4kid4Pm/0mU8jsBiXeBBv9GRPQgCunwDUS6j+J1SasSPGcy7aN3nc9uQ+4I
LDfm3QyhkqudqNpx8LwUnSpow7LFwS2Ff28wkfMxDlikjcHja4zn3Q3ewmAv
scU0m0eZwQXeGpP6CVmyLD6N4c0x726AhP0LiPpwp/d/rqrxFWS9S3NuIOv9
e/o+qt4/pteGh+EYEfQbV/mvJejdBKP+qyV4d8PqfXOjr7T/YbB3NLGygZsg
78PLBWnhvVtcYIH2993iLjwfBvAcBkWPd+Am2Gq7SvvVfzv4/PQvFCC2QuYm
8vdfIT30qEsx7jhlSVydvapSJzXrZsnhP2K54U8WByK16z9urXb9x7DapU0c
h+WKfioUiRVbZQnByA6edOw0ToyQkMRIkPgK7PkqiYFj+MjwonEhHwuKC7kO
EtA6kKio11hfKD5gys+DT2CE4uKy9VGXXcjsdH2Dndm/XaxxrZO/2eboHMNw
gt6CNxiYMBpYWdGzuEDYmvTNM1w+62vm6cdrzpFzE2A3maqW6i7cPb2SRtJf
qSb3zfadSnKvT+9G7tFd+j9R/bzNEmMSHp32VznXR3HOvo8gMwEAk++cwwRZ
wMBRZAY5sn0z7CXXe8FjLWf5986sIYo458rmWkRxbuIiMvE2warREy40Olx9
Y3KCEf183ijdfu1ZItuLW/qF3FciLyzggfX2xWPchgEHESw+7wXZ0KKSZk8R
e8XizBqWw+UuKynRJ00NXd2b4Jq7qstSMeQ86OPLpBvdJDSrIyfbiN+Uuvix
5Cmc2JMYzLEofeskik+ufF1PWi/x6JqC3Ud0eBamGsEukM1M+REfGcPlAzGd
xsXHiNOBCkm7nMUbgssmO1sC05SORDTuq4LOVCQgYizZhQRsDNrS/AUMWQjQ
3cYveAmht+6f9LeRqIDE13n1y/bTUpEBlzNInZUouQubeKJ2xbUtmCUcurX3
wsHHPQm77knXEdzWwnYDdQtJ0qFwhwDjtQgEwBOT5+/fsJxrMkiAboW17YsU
XbDa6jwsmcgxX64RC5dOv3EPN5xCXDvWbMrFcARhJj2nRMEK9qCoHslZntYi
lGqpe3NZqOKPUD7KPRBJGXVM/5qTbphRSsaMhYkkEAmD1hpeLnauabC7vLaZ
Mh/iZceqJL4ln+Zys2WtG3qkvXfphngGIAFVpEEYWdzU5Pez/tjYzBHCC6nP
xq9iBjg1hsUbNAKOdcXtDEy1LrMFFeoL7BMioR+nHQhxFX4kYmOiav6REoSI
GsTlkPFT/DIK3HNF4/qGJrZnsBiBBQyab2mEPr6EyE2o+ifhpgRkDICqxN4D
iwBMGnk6QMZc0pNzGnMQn4o+1Lhx4+rGBvK8lySJ1qMGimHPFMBlsZUYfx+u
K/SItZXVEHAVWTy3c90BkYZLhYJmPR0Hd1Ty+F1gCxX0EQa1DR258wATgELS
+zTElWIjNQu86PSlJkl0gALeDAYqMiQnS8185kMEqCsuWKApQdbiqljh10W3
REse/RlIyQLbq77LRNUHem/hzs4p5Yppe11OAOMTdq0pApHKSTMxInSLPmDu
4n286FR3t/+a5z6WxIQTO3BTxTPKbbRIxdWXQ+WwxZJJshQCmcbAYCzGBegl
3BbWMbe++Nwg8Bs7Fi36V31LQc1RxPA22wL04XXBGHPMpe6flAU2x+MEMXnH
4eVk0ozFxpDgRTXpzG6/Ptb6kAq7rvJZB4i2kbqbIgrQP+gEoVPxXw6zNUfH
+at4aLg6iSllRjpLF3u9Z4c7/cGzzx/imGAQdcX2RFGynO/Pc2rKOtYC4ooA
1uNskewm9HKikKnfHcans54MmD5fFLMWExb031KNTEQUrlFgNU4DEbv6UbLJ
xbKOP6MlybczCMxzflrDMaVr9JAk6lTYEGDcJ94WUQdKjTS1ZcVHyy8RHpvb
7iUNxz5dWS1dnGq3Fg50ZNxqoHtydN4Ilh60CGa57W7ZFjvRYDwYAZYXAB+7
ujidgtEhz6WUnccGhzp/Cn3/vyseRyHvNgEA

-->

</rfc>


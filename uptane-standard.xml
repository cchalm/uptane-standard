<?xml version="1.0" encoding="UTF-8"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc2629 version 1.2.9 -->

<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
]>

<?rfc toc="yes"?>
<?rfc sortrefs="yes"?>
<?rfc symrefs="yes"?>

<rfc ipr="noDerivativesTrust200902" docName="uptane-standard-design" category="info">

  <front>
    <title abbrev="UPTANE">Uptane Standard for Design and Implementation</title>

    <author initials="." surname="Members of the Uptane Alliance Community" fullname="Uptane Alliance Community">
      <organization>Uptane Alliance (c/o Prof. Justin Cappos)</organization>
      <address>
        <postal>
          <street>6 MetroTech</street>
          <city>Brooklyn</city>
          <region>NY</region>
          <code>11201</code>
          <country>USA</country>
        </postal>
        <email>uptane-standards@googlegroups.com</email>
      </address>
    </author>

    <date year="2019" month="September" day="23"/>

    <area>TODO</area>
    <workgroup>TODO</workgroup>
    <keyword>Internet-Draft</keyword>

    <abstract>


<t>This document describes a framework for securing ground vehicle software update systems.</t>



    </abstract>


  </front>

  <middle>


<section anchor="introduction" title="Introduction">

<t>Uptane is a secure software update framework for ground vehicles. This document describes procedures to enable programmers for OEMs and suppliers to securely design and implement this framework in a manner that better protects connected units on ground vehicles. Integrating Uptane as outlined in the sections that follow can reduce the ability of attackers to compromise critical systems. It also assures a faster and easier recovery process should a compromise occur.</t>

<t>These instructions specify the components necessary for a compliant implementation. Individual implementors can make their own technological choices within those requirements. This flexibility makes Uptane adaptable to the many customized update solutions used by manufacturers. If implementors wish to have compatible formats, they may use POUFs. POUFs contain a description of implementation choices as well as data binding formats. An implementor who adopts a POUF, as well as the Uptane Standard, will be able to interoperate with other implementations using that POUF.</t>

</section>
<section anchor="terminology" title="Terminology">

<section anchor="conformance-terminology" title="Conformance terminology">

<t>The keywords MUST, MUST NOT, REQUIRED, SHALL, SHALL NOT, SHOULD, SHOULD NOT, RECOMMENDED, MAY, and OPTIONAL in this document are to be interpreted as described in <xref target="RFC2119"/>.</t>

<t>In order to be considered “Uptane-compliant,” an implementation MUST follow all of these rules as specified in the document.</t>

</section>
<section anchor="terminology-1" title="Terminology">

<t><spanx style="emph">Bundle</spanx>: A set of images released by the repository that is meant to be installed by one or more target ECUs on a vehicle during the same update cycle.</t>

<t><spanx style="emph">Bus</spanx>: An internal communications network that interconnects components within a vehicle. A vehicle can have a number of buses that will vary in terms of power, speed and resources.</t>

<t><spanx style="emph">ECU Identifier</spanx>: An attribute used to identify a specific ECU (e.g., such as a unique serial number).</t>

<t><spanx style="emph">ECU Version Manifest</spanx>: Metadata which details the software version currently installed on the ECU.</t>

<t><spanx style="emph">Hardware Identifier</spanx>: An attribute used to identify a model of an ECU.</t>

<t><spanx style="emph">Image</spanx>: File containing software for an ECU to install. May contain a binary image to flash, installation instructions, and other necessary information for the ECU to properly apply the update. Each ECU typically holds only one image, although this may vary in some cases.</t>

<t><spanx style="emph">Metadata</spanx>:  Information describing the characteristics of data including, for example, structural
metadata describing data structures (e.g., data format, syntax, and semantics) and
descriptive metadata describing data contents (e.g., information security labels). As used in Uptane, metadata can be described as information associated with a role or an image that contains the characteristics or parameters thereof (e.g. cryptographic material parameters, file names and versions.)</t>

<t><spanx style="emph">Primary/Secondary ECUs</spanx>: Terms used to describe the control units within a ground vehicle. A primary ECU downloads and verifies update images and metadata for itself and for secondary ECUs, and distributes images and metadata to secondaries. Thus, it requires extra storage space and a means to download images and metadata.  Secondary ECUs receive their update images and metadata from the primary, and only need to verify and install their own metadata and images.</t>

<t><spanx style="emph">POUF</spanx>: A document that contains the protocol, operations, usage, and formats (POUF) of a specific Uptane implementation. The POUF contains decisions about SHOULDs and MAYs in an implementation, as well as descriptions of data binding formats. POUFs MAY be used to create compatible Uptane implementations.</t>

<t><spanx style="emph">Repository</spanx>: A server containing metadata about images. May also contain the images themselves. Other data may be stored on the repository to be accessed by ECUs during the update process.</t>

<t><spanx style="emph">Suppliers</spanx>: Independent companies to which auto manufacturers may outsource the production of ECUs. Tier-1 suppliers directly serve the manufacturers. Tier-2 suppliers are those that perform outsourced work for Tier-1 suppliers.</t>

<t><spanx style="emph">Vehicle Version Manifest</spanx>: A compilation of all ECU version manifests on a vehicle. It serves as a master list of all images currently running on all ECUs in the vehicle.</t>

</section>
<section anchor="uptane-role-terminology" title="Uptane Role terminology">

<t>These terms are defined in greater detail in <xref target="roles"/>.</t>

<t><spanx style="emph">Delegations</spanx>: A process by which the responsibility of signing metadata about images is assigned to another party.<vspace />
<spanx style="emph">Role</spanx>: A party (human or machine) responsible for signing a certain type of metadata. The role controls keys and is responsible for signing metadata entrusted to it with these keys. The roles mechanism of Uptane allows the system to distribute signing responsibilities so that the compromise of one key does not necessarily impact the security of the entire system.</t>

<t><list style="symbols">
  <t><spanx style="emph">Root Role</spanx>: Signs metadata that distributes and revokes public keys used to verify the root, timestamp, snapshot, and targets role metadata.</t>
  <t><spanx style="emph">Snapshot Role</spanx>: Signs metadata that indicates which images the repository has released at the same time.</t>
  <t><spanx style="emph">Targets Role</spanx>: Signs metadata used to verify the image, such as cryptographic hashes and file size.</t>
  <t><spanx style="emph">Timestamp Role</spanx>: Signs metadata that indicates if there are any new metadata or images on the repository.</t>
</list></t>

</section>
<section anchor="acronyms-and-abbreviations" title="Acronyms and abbreviations">

<t><spanx style="emph">CAN Bus</spanx>: Controller Area Network bus standard</t>

<t><spanx style="emph">CDN</spanx>: Content Delivery Network</t>

<t><spanx style="emph">ECUs</spanx>: Electronic Control Units, the computing units on a vehicle</t>

<t><spanx style="emph">LIN Bus</spanx>: Local Interconnect Bus</t>

<t><spanx style="emph">OBD</spanx>: On-board diagnostics</t>

<t><spanx style="emph">SOTA</spanx>: Software Updates Over-the-Air</t>

<t><spanx style="emph">UDS</spanx>: Unified Diagnostic Services</t>

<t><spanx style="emph">VIN</spanx>: Vehicle Identification Number</t>

</section>
</section>
<section anchor="rationale-for-and-scope-of-uptane-standards" title="Rationale for and scope of Uptane Standards">

<t>This Standards document clarifies the essential components and best practices for the secure design, implementation and deployment of Uptane by OEMs and suppliers. These practices contribute to compromise resilience, or the ability to minimize the extent of the threat posed by any given attack.</t>

<t>However, this specification is intended as an implementation guide, and not as a detailed technical argument about the security properties that Uptane provides.  Readers interested in such documentation should refer to published papers that cover this topic.  <xref target="UPTANEESCAR"/></t>

<section anchor="why-uptane-requires-a-standards-document" title="Why Uptane requires a standards document">

<t>A standards document that can guide the safe design, integration and deployment of Uptane in vehicles is needed at this time because:</t>

<t><list style="symbols">
  <t>The number of connected units on the average vehicle continues to grow, with mainstream cars now containing up to 100 million lines of code. <xref target="USATODAY"/></t>
  <t>The expanded use of software over-the-air strategies creates new attack surfaces for malicious parties. <xref target="CR-OTA"/></t>
  <t>Legacy update strategies, such as SSL/TLS or GPG/RSA, are not feasible for use on vehicle ECUs because they force manufacturers to chose between enhanced security and customizability.</t>
  <t>Conventional strategies are also complicated by the differing resources of the ECUs, which can vary greatly in memory, storage space, and Internet connectivity.</t>
  <t>The design of Uptane makes it possible to offer improved design flexibility, without sacrificing security.</t>
  <t>This added design flexibility, however, could be a liability if the framework is implemented incorrectly.</t>
  <t>Standardization of crucial steps in the design, implementation and use of Uptane can assure that customizability does not impact security or functionality.</t>
</list></t>

</section>
<section anchor="scope-of-standards-coverage" title="Scope of Standards coverage">

<t>This document sets guidelines for implementing Uptane in most systems capable of updating software on connected units in ground vehicles, including passenger vehicles, light-duty trucks, heavy-duty trucks, and motorcycles. Uptane could potentially also be applied to other ground vehicles, such as automated shuttles, recreational vehicles, and military ground vehicles. Uptane could even be applied to domains such as IoT devices, medical devices, and unmanned aerial vehicles. In this section, we define the scope of that applicability by providing sample use cases and possible exceptions, aspects of software update security that are not applicable to Uptane, and the design requirements governing the preparation of these standards.</t>

<section anchor="assumptions" title="Assumptions">

<t>We assume the following system preconditions for Uptane:</t>

<t><list style="symbols">
  <t>Vehicles have the ability to establish connectivity to required backend services. For example, this could be done through cellular, Wi-Fi, or hard-wired mechanisms.</t>
  <t>ECUs are either directly connected to the communication channel, or are indirectly connected via some sort of network gateway.</t>
  <t>ECUs are programmable and provide sufficient performance to be updated.</t>
  <t>ECUs must be able to perform a public key cryptography operation as well as some supporting operations.</t>
  <t>There are state-of-the-art secure servers in place, such as the Director and Image repository servers.</t>
</list></t>

<t>It is important that any bugs detected in Uptane implementations be patched promptly. Failure to do so could interfere with the effectiveness of Uptane’s operations.</t>

</section>
<section anchor="use-cases" title="Use cases">

<t>The following use cases provide a number of scenarios illustrating the manner in which software updates could be accomplished using Uptane.</t>

<section anchor="oems-initializing-uptane-at-the-factory-using-sota" title="OEMs initializing Uptane at the factory using SOTA">

<t>An OEM plans to install Uptane on new vehicles. This entails the following components: code to perform full and partial verification, the latest copy of the relevant metadata, the public keys, and an accurate attestation of the latest time. The OEM then either requires its tier-1 suppliers to provide these materials to the suppliers’ assembly lines or can choose to add the materials later at the OEM’s assembly lines. The OEM’s implementation is Uptane-compliant if:</t>

<t><list style="numbers">
  <t>all primaries perform full verification;</t>
  <t>all secondaries that are updated via OTA perform full or partial verification; and</t>
  <t>all other ECUs that do not perform verification cannot be updated via OTA.</t>
</list></t>

</section>
<section anchor="updating-one-ecu-with-a-complete-image" title="Updating one ECU with a complete image">

<t>A tier-1 supplier completes work on a revised image for an electronic brake control module. This module will control the brakes on all models of an SUV produced by the OEM mentioned above. Assuming supplier delegation is supported by the OEM for this ECU, each tier-1 supplier digitally signs the image, then delivers the signature and all of its metadata, including delegations, and associated images to the OEM. The OEM adds these metadata and images to its image repository, along with information about any dependencies and conflicts between this image and those for other ECUs used in the OEM’s vehicles. The OEM also updates the inventory database, so that the director repository can instruct the ECU on how to install these updated images.</t>

</section>
<section anchor="updating-individual-ecus-on-demand" title="Updating individual ECUs on demand">

<t>An OEM has issued a recall to address a problem with a keyless entry device that has been locking people out of their cars. The OEM prepares an updated flash image in the manner described above. The OEM then ships USB flash drives to vehicle owners and dealerships that allow those parties to update the firmware of their vehicles.</t>

</section>
<section anchor="update-one-ecu-with-multiple-deltas" title="Update one ECU with multiple deltas">

<t>The OEM wants to use delta updates to save over-the-air bytes. The delta images contain only the code and/or data that has changed from the previous image version. To do so, the OEM must first modify the Director repository, using the vehicle version manifest and dependency resolution to determine the differences between the previous and latest images. The OEM then adds the following to the custom Targets metadata used by the Director repository: (1) the algorithm used to apply a delta image, and (2) the Targets metadata about the delta image. The OEM will also check whether the delta images match the Targets metadata from the Director repository.</t>

</section>
</section>
</section>
<section anchor="exceptions" title="Exceptions">

<t>There are a number of factors that could impede the completion of the above scenarios:</t>

<t><list style="symbols">
  <t>ECUs may be lacking the necessary resources to function as designated. These resources could include weaknesses, in terms of CPU or RAM, that render performance of public key cryptography infeasible; a lack of sufficient storage to undo installation of bad software; or an ECU simply may reside on a low-speed network (e.g., LIN).</t>
  <t>ECUs may reside on different network segments, and may not be able to directly reach each other, requiring a gateway to facilitate communication.</t>
  <t>A user may replace OEM-installed ECUs with aftermarket ECUs.</t>
  <t>A vehicle may be able to download only a limited amount of data via a cellular channel, due to limits on a data plan.</t>
  <t>A system may lack sufficient power to download or install software updates.</t>
  <t>Vehicles may be offline for extended periods of time, thus missing required updates (e.g., key rotations).</t>
  <t>OEMs may be unwilling to implement costly security or hardware requirements.</t>
</list></t>

</section>
<section anchor="out-of-scope" title="Out of Scope">

<t>The following topics will not be addressed in this document, as they represent threats outside the scope of Uptane:</t>

<t><list style="symbols">
  <t>Physical attacks, such as manual tampering with ECUs outside the vehicle.</t>
  <t>Compromise of the supply chain (e.g., build system, version control system, packaging process). A number of strategies (e.g., git signing, TPMs, in-toto <xref target="IN-TOTO"/>)  already exist to address this problem. Therefore, there is no need to duplicate those techniques here.</t>
  <t>Problems associated with OBD or UDS programming of ECUs, such as authentication of communications between ECUs.</t>
  <t>Malicious mirrors of package repositories, which may substitute original packages with malicious packages with matching version numbers <xref target="MERCURY"/>.</t>
</list></t>

</section>
<section anchor="design-requirements" title="Design requirements">

<t>The design requirements for this document are governed by the following principal parameters:</t>

<t><list style="symbols">
  <t>to clearly mandate the design and implementation steps that are security critical and must be followed as is, while offering flexibility in the implementation of non-critical steps. In this manner, users can adapt to support different use models and deployment scenarios.</t>
  <t>to ensure that, if Uptane is implemented, the security practices mandated or suggested in this document do not interfere with the functionality of ECUs, vehicles, or the systems that maintain them.</t>
  <t>to delineate best practices to ensure that, should any part of the SOTA mechanism of a vehicle be attacked, an attacker must compromise two or more modules to breach the SOTA mechanism.</t>
</list></t>

</section>
</section>
<section anchor="threat-model-and-attack-strategies" title="Threat model and attack strategies">

<t>The overarching goal of Uptane is to provide a system that is resilient in the face of various types of compromise. In this section, we describe the goals an attacker may have (<xref target="attacker_goals"/>) and the capabilities they may have or could develop (<xref target="capabilities"/>). We then describe and classify types of attacks on the system according to the attacker’s goals (<xref target="threats"/>).</t>

<section anchor="attacker_goals" title="Attacker goals">

<t>We assume that attackers may want to achieve one or more of the following goals, in increasing order of severity:</t>

<t><list style="symbols">
  <t>Read the contents of updates to discover confidential information, reverse-engineer firmware, or compare two firmware images to identify security fixes and hence determine the fixed security vulnerability</t>
  <t>Deny installation of updates to prevent vehicles from fixing software problems</t>
  <t>Cause one or more ECUs in the vehicle to fail, denying use of the vehicle or of certain functions</t>
  <t>Control ECUs within the vehicle, and possibly the vehicle itself</t>
</list></t>

</section>
<section anchor="capabilities" title="Attacker capabilities">

<t>Uptane is designed with resilience to compromise in mind. We assume that attackers may develop one or more of the following capabilities:</t>

<t><list style="symbols">
  <t>Intercept and modify network traffic (i.e., perform man-in-the-middle attacks). This capability may be developed in two domains:
  <list style="symbols">
      <t>Outside the vehicle, intercepting and modifying traffic between the vehicle and software repositories</t>
      <t>Inside the vehicle, intercepting and modifying traffic on one or more vehicle buses (e.g. via an OBD port or using a compromised ECU as a vector)</t>
    </list></t>
  <t>Compromise and control either a Director repository or Image repository server, and any keys stored on that repository, but not both the Director and Image repositories.</t>
  <t>Compromise either a Primary ECU or a Secondary ECU, but not both in the same vehicle</t>
</list></t>

</section>
<section anchor="threats" title="Description of threats">

<t>Uptane’s threat model includes the following types of attacks, organized according to the attacker goals listed in <xref target="attacker_goals"/>.</t>

<section anchor="read_updates" title="Read updates">

<t><list style="symbols">
  <t><spanx style="emph">Eavesdrop attack:</spanx> Read sensitive or confidential information from an update intended to be encrypted for a specific ECU. (Note: Not all implementations will have a need for protecting information in this way.)</t>
</list></t>

</section>
<section anchor="deny_updates" title="Deny installation of updates">

<t>An attacker seeking to deny the installation of updates may attempt one or more of the following strategies, among others:</t>

<t><list style="symbols">
  <t><spanx style="emph">Drop-request attack:</spanx> Block network traffic outside or inside the vehicle.</t>
  <t><spanx style="emph">Slow retrieval attack:</spanx> Slow down network traffic, in the extreme case sending barely enough packets to avoid a timeout. Similar to a drop-request attack, except that both the sender and receiver of the traffic still think network traffic is unimpeded.</t>
  <t><spanx style="emph">Freeze attack:</spanx> Continue to send a properly signed, but old, update bundle to the ECUs, even if newer updates exist.</t>
  <t><spanx style="emph">Partial bundle installation attack:</spanx> Install a valid (signed) update bundle, and then block selected updates within the bundle.</t>
  <t>Conduct a denial of service attack against the Uptane repositories or infrastructure.</t>
</list></t>

</section>
<section anchor="change_functionality" title="Interfere with ECU functionality">

<t>Attackers seeking to interfere with the functionality of vehicle ECUs in order to cause an operational failure or unexpected behavior may do so in one of the following ways:</t>

<t><list style="symbols">
  <t><spanx style="emph">Rollback attack:</spanx> Cause an ECU to install a previously valid software revision that is older than the currently installed version.</t>
  <t><spanx style="emph">Endless data attack:</spanx> Send a large amount of data to an ECU, until it runs out of storage, possibly causing the ECU to fail to operate.</t>
  <t><spanx style="emph">Mix-and-match attack:</spanx> Install a malicious software bundle in which some of the updates do not interoperate properly. This may be accomplished even if all of the individual images being installed are valid, as long as valid versions exist that are mutually incompatible.</t>
</list></t>

</section>
<section anchor="control_ecu" title="Control an ECU or vehicle">

<t>Full control of a vehicle, or one or more ECUs within a vehicle, is the most severe threat.</t>

<t><list style="symbols">
  <t><spanx style="emph">Arbitrary software attack:</spanx> Cause an ECU to install and run arbitrary code of the attacker’s choice.</t>
</list></t>

</section>
</section>
</section>
<section anchor="design" title="Detailed design of Uptane">

<t>Uptane is a secure software update framework for automobiles. We do not specify implementation details. Instead, we describe the components necessary for a compliant implementation and leave it up to individual implementors to make their own technological choices within those requirements.</t>

<t>At a high level, Uptane requires:</t>

<t><list style="symbols">
  <t>Two software repositories:
  <list style="symbols">
      <t>An Image repository containing binary images to install, and signed metadata about those images</t>
      <t>A Director repository connected to an inventory database that can sign metadata on demand for images in the Image repository</t>
    </list></t>
  <t>Repository tools for generating Uptane-specific metadata about images</t>
  <t>A public key infrastructure supporting the required metadata production/signing roles on each repository:
  <list style="symbols">
      <t>Root - Certificate authority for the Uptane ecosystem. Distributes public keys for verifying all the other roles’ metadata</t>
      <t>Timestamp - Indicates whether there are new metadata or images</t>
      <t>Snapshot - Indicates images released by the repository at a point in time, via signing metadata about targets metadata</t>
      <t>Targets - Indicates metadata about images, such as hashes and file sizes</t>
    </list></t>
  <t>A secure way for ECUs to know the time.</t>
  <t>An ECU capable of downloading images and associated metadata from the Uptane servers.</t>
  <t>An in-vehicle client on a Primary ECU capable of verifying the signatures on all update metadata and downloading updates on behalf of its associated Secondary ECUs. The primary ECU MAY be the same ECU that communicates with the server.</t>
  <t>A client or library on each Secondary ECU capable of performing either full or partial verification of metadata</t>
</list></t>

<section anchor="roles" title="Roles on repositories">

<t>A repository contains images and metadata. Each role has a particular type of metadata associated with it, as described in <xref target="meta_structures"/>.</t>

<section anchor="root_role" title="The Root role">

<t>A repository’s Root role SHALL be responsible for a Certificate Authority as defined in <xref target="RFC3647"/>.
A repository’s Root role SHALL produce and sign Root metadata as described in <xref target="root_meta"/>.
A repository’s Root role SHALL sign the public keys used to verify the metadata produced by the Timestamp, Snapshot, and Targets roles.
A repository’s Root role SHALL revoke keys for the other roles, in case of compromise.</t>

</section>
<section anchor="targets_role" title="The Targets role">

<t>A repository’s Targets role SHALL produce and sign metadata about images and delegations as described in <xref target="targets_meta"/>.</t>

<section anchor="targets_role_delegations" title="Delegations">

<t>The Targets role on the Image repository MAY delegate the responsibility of signing metadata to other, custom-defined roles referred to as delegated targets. If it does, it MUST do so as specified in <xref target="delegations_meta"/>.</t>

<t>Responsibility for signing images or a subset of images MAY be delegated to more than one role and therefore it is possible for two different roles to be trusted for signing a particular image. For this reason, delegations MUST be prioritized.</t>

<t>A particular delegation for a subset of images MAY be designated as <spanx style="strong">terminating</spanx>. For terminating delegations, the client SHALL NOT search any further if it does not find validly signed metadata about those images. Delegations SHOULD NOT be terminating by default; terminating delegations SHOULD only be used when there is a compelling technical reason to do so.</t>

<t>A delegation for a subset of images MAY be a multi-role delegation <xref target="TAP-3"/>. A multi-role delegation indicates that multiple roles are needed to sign a particular image and each of the delegatee roles MUST sign the same metadata.</t>

<t>Delegations only apply to the Image repository. The Targets role on the Director repository MUST NOT delegate metadata signing responsibility.</t>

</section>
</section>
<section anchor="snapshot_role" title="The Snapshot role">

<t>A repository’s Snapshot role SHALL produce and sign metadata about all Targets metadata the repository releases, including the current version number of the top-level Targets metadata, and the version numbers of all delegated Targets metadata, as described in <xref target="snapshot_meta"/>.</t>

</section>
<section anchor="timestamp_role" title="The Timestamp role">

<t>A repository’s Timestamp role SHALL produce and sign metadata indicating whether there are new metadata or images on the repository. It MUST do so by signing the metadata about the Snapshot metadata file.</t>

</section>
</section>
<section anchor="meta_structures" title="Metadata structures">

<t>Uptane’s security guarantees all rely on properly created metadata that follows a designated structure. The Uptane standard <spanx style="strong">does not</spanx> mandate any particular format or encoding for the metadata as a whole. ASN.1 (with any encoding scheme like BER, DER, XER, etc.), JSON, XML, or any other encoding format that is capable of providing the required structure MAY be used.</t>

<t>However, string comparison is required as part of metadata verification. To ensure an accurate basis for comparing strings, all strings MUST be encoded in the Unicode Format for Network Interchange as defined in <xref target="RFC5198"/>, including normalization into Unicode Normalization Form C (<xref target="NFC"/>).</t>

<t>In the Deployment Considerations document (<xref target="DEPLOY"/>), the Uptane Alliance provides some examples of compliant metadata structures in ASN.1 and JSON.</t>

<section anchor="common_metadata" title="Common metadata structures">

<t>Every public key MUST be represented using a public key identifier.  A public key identifier is EITHER all of the following:</t>

<t><list style="symbols">
  <t>The value of the public key itself (which MAY be, for example, formatted as a PEM string)</t>
  <t>The public key cryptographic algorithm used by the key (such as RSA or ECDSA)</t>
  <t>The particular scheme used to verify the signature (such as <spanx style="verb">rsassa-pss-sha256</spanx> or <spanx style="verb">ecdsa-sha2-nistp256</spanx>)</t>
</list></t>

<t>OR a secure hash over at least the above components (such as the keyid mechanism in TUF).</t>

<t>All four Uptane roles (Root, Targets, Snapshot, and Timestamp) share a common structure. They SHALL contain the following two attributes:</t>

<t><list style="symbols">
  <t>A payload of metadata to be signed</t>
  <t>An attribute containing the signature(s) of the payload, where each entry specifies:
  <list style="symbols">
      <t>The public key identifier of the key being used to sign the payload</t>
      <t>A signature with this key over the payload</t>
    </list></t>
</list></t>

<t>The payload differs depending on the role. However, the payload for all roles shares a common structure. It SHALL contain the following four attributes:</t>

<t><list style="symbols">
  <t>An indicator of the type of role (Root, Targets, Snapshot, or Timestamp)</t>
  <t>An expiration date and time</t>
  <t>An integer version number, which SHOULD be incremented each time the metadata file is updated</t>
  <t>The role-specific metadata for the role indicated</t>
</list></t>

<t>The following sections describe the role-specific metadata. All roles SHALL follow the common structures described here.</t>

</section>
<section anchor="root_meta" title="Root metadata">

<t>A repository’s Root metadata distributes the public keys of the top-level Root, Targets, Snapshot, and Timestamp roles, as well as revocations of those keys. It SHALL contain two attributes:</t>

<t><list style="symbols">
  <t>A representation of the public keys for all four roles. Each key SHALL have a unique public key identifier.</t>
  <t>An attribute mapping each role to (1) its public key(s), and (2) the threshold of signatures required for that role</t>
</list></t>

<t>Additionally, it MAY contain a mapping of roles to a list of valid URLs from which the role metadata can be downloaded.  If this mapping of URLs is used, the implementer SHOULD implement this functionality following <xref target="TAP-5"/> to avoid adding unforeseen security risks.</t>

</section>
<section anchor="targets_meta" title="Targets metadata">

<t>The Targets metadata on a repository contains all of the information about images to be installed on ECUs. This includes filenames, hashes, file sizes, and MAY also include other useful information about images, such as what types of hardware are compatible with a particular image.</t>

<t>Targets metadata can also contain metadata about delegations, allowing one Targets role to delegate its authority to another. This means that an individual Targets metadata file might contain only metadata about delegations, only metadata about images, or some combination of the two. The details of how ECUs traverse the delegation tree to find valid metadata about images is specified in <xref target="resolve_delegations"/>.</t>

<section anchor="targets_images_meta" title="Metadata about images">

<t>To be available to install on clients, all images on the repository MUST have their metadata listed in a Targets role.  Each Targets role MAY provide a list of some images on the repository.  This list MUST provide, at a minimum, the following information about each image:</t>

<t><list style="symbols">
  <t>The image filename</t>
  <t>The size of the image in bytes</t>
  <t>One or more hashes of the image file, along with the hashing function used</t>
</list></t>

<section anchor="custom-metadata-about-images" title="Custom metadata about images">

<t>In addition to the required metadata, Targets metadata files MAY contain extra metadata for images on the repository. This metadata can be customized for a particular use case. Examples of use cases for different types of custom metadata can be found in the Deployment Considerations document (<xref target="DEPLOY"/>). However, there are a few important pieces of custom metadata that SHOULD be present in most implementations. In addition, there is one element in the custom metadata that MUST be present in the Targets metadata from the Director.</t>

<t>Custom metadata MAY also contain a demarcated field or section that MUST match whenever two pieces of metadata are checked against each other, such as when Targets metadata from the Director repository is checked against Targets metadata from the Image repository.</t>

<t>The information listed below SHOULD be provided for each image on both the Image repository and the Director repository. If a “MUST match section” is to be implemented, that is where this information SHOULD be placed.</t>

<t><list style="symbols">
  <t>A release counter, to be incremented each time a new version of the image is released. This can be used to prevent rollback attacks even in cases where the Director repository is compromised.</t>
  <t>A hardware identifier, or list of hardware identifiers, representing models of ECUs with which the image is compatible. This can be used to ensure that an ECU cannot be ordered to install an incompatible image, even in cases where the Director repository is compromised.</t>
</list></t>

<t>The following information is CONDITIONALLY REQUIRED for each image on the Director repository IF that image is encrypted:</t>

<t><list style="symbols">
  <t>Information about filenames, hashes, and file size of the encrypted image.</t>
  <t>Information about the encryption method, and other relevant information–for example, a symmetric encryption key encrypted by the ECU’s asymmetric key could be included in the Director repository metadata.</t>
</list></t>

<t>The following information MUST be provided for each image in the Targets metadata from the Director repository:</t>

<t><list style="symbols">
  <t>An ECU identifier (such as a serial number), specifying the ECU that should install the image.</t>
</list></t>

<t>The Director repository MAY provide a download URL for the image file. This may be useful, for example, when the image is on a public CDN and the director wishes to provide a signed URL.</t>

</section>
</section>
<section anchor="delegations_meta" title="Metadata about delegations">

<t>A Targets metadata file on the Image repository (but not the Director repository) MUST be able to delegate signing authority to other entities. For example, it could delegate signing authority for a particular ECU’s firmware to that ECU’s supplier. A metadata file MAY contain any number of delegations and MUST keep the delegations in prioritized order.</t>

<t>A list of delegations MUST provide the following information:</t>

<t><list style="symbols">
  <t>A list of public keys of all delegatees. Each key should have a unique public key identifier and a key type.</t>
  <t>A list of delegations, each of which contains:
  <list style="symbols">
      <t>A list of the filenames to which this role applies. This MAY be expressed using wildcards, or by enumerating a list, or a combination of the two.</t>
      <t>An optional list of the hardware identifiers to which this role applies.  If this is omitted, any hardware identifier will match.</t>
      <t>An indicator of whether or not this is a terminating delegation. (See <xref target="targets_role_delegations"/>.)</t>
      <t>A list of the roles to which this delegation applies. Each role needs to specify:
      <list style="symbols">
          <t>A name for the role (e.g. “supplier1-qa”)</t>
          <t>The key identifiers for each key this role uses</t>
          <t>A threshold of keys that must sign for this role</t>
        </list></t>
    </list></t>
</list></t>

<t>Note that <spanx style="strong">any</spanx> Targets metadata file stored on the Image repository may contain delegations, and these delegations can be in chains of arbitrary length.</t>

</section>
</section>
<section anchor="snapshot_meta" title="Snapshot metadata">

<t>The Snapshot metadata lists version numbers and filenames of all Targets metadata files. It protects against mix-and-match attacks if a delegated supplier key is compromised.</t>

<t>For each Targets metadata file on the repository, the Snapshot metadata SHALL contain the following information:</t>

<t><list style="symbols">
  <t>The filename and version number of the each Targets metadata file on the repository</t>
</list></t>

<t>The Snapshot metadata MAY also list the Root metadata filename and version number. This is not required, particularly for implementations of <xref target="TAP-5"/>, but MAY be included in all cases for backward compatibility.</t>

</section>
<section anchor="timestamp_meta" title="Timestamp metadata">

<t>The Timestamp metadata SHALL contain the following information:</t>

<t><list style="symbols">
  <t>The filename and version number of the latest Snapshot metadata on the repository.</t>
  <t>One or more hashes of the Snapshot metadata file, along with the hashing function used.</t>
</list></t>

</section>
<section anchor="repo_mapping_meta" title="Repository mapping metadata">

<t>As described in the introduction to <xref target="design"/>, Uptane requires a Director repository and an Image repository. However, it is possible to have an Uptane-compliant implementation that has more than two repositories.</t>

<t>Repository mapping metadata informs a Primary ECU about which repositories to trust for images or image paths. <xref target="TAP-4"/> describes how to make use of more complex repository mapping metadata in order to have more than the two required repositories.</t>

<t>Repository mapping metadata, or the equivalent informational content, MUST be present on all Primary ECUs, and MUST contain the following information:</t>

<t><list style="symbols">
  <t>A list of repository names and one or more URLs at which the named repository can be accessed. At a minimum, this MUST include the Director and Image repositories.</t>
  <t>A list of mappings of image paths to repositories, each of which contains:
  <list style="symbols">
      <t>A list of image paths. Image paths MAY be expressed using wildcards, or by enumerating a list, or a combination of the two.</t>
      <t>A list of repositories that MUST sign the Targets metadata for the image paths.</t>
    </list></t>
</list></t>

<t>For example, in the most basic Uptane case, the repository mapping metadata would contain:</t>

<t><list style="symbols">
  <t>The name and URL of the Director repository</t>
  <t>The name and URL of the Image repository</t>
  <t>A single mapping indicating that all images (<spanx style="verb">*</spanx>) MUST be signed by both the Director and Image repository</t>
</list></t>

<t>Note that the metadata need not be in the form of a metadata file. For example, in the basic case where there is only one Director and one Image repository, and all images need to have signed metadata from both repositories, it would be sufficient to have a configuration file with URLs for the two repositories, and a client that always checks for metadata matches between them. In this case, no explicit mapping would be defined, because the mapping is defined as part of the Uptane client implementation.</t>

<t>The <spanx style="emph">Uptane Deployment Considerations</spanx> document (<xref target="DEPLOY"/>) gives more guidance on how to implement repository mapping metadata for more complex use cases. It also discusses strategies for updating repository mapping metadata, if required.</t>

</section>
<section anchor="metadata_filename_rules" title="Rules for filenames in repositories and metadata">

<t>There is a difference between the file name in a metadata file or an ECU, and the file name on a repository. This difference exists in order to avoid race conditions, where metadata and images are read from, and written to, at the same time. For more details, the reader should read the TUF specification <xref target="TUF-spec"/> and PEP 458 <xref target="PEP-458"/>.</t>

<t>Unless stated otherwise, all files SHALL be written to repositories in accordance with the following two rules:</t>

<t><list style="numbers">
  <t>Metadata filenames SHALL be qualified with version numbers. If a metadata file A is specified as FILENAME.EXT in another metadata file B, then it SHALL be written as VERSION.FILENAME.EXT, where VERSION is A’s version number, as defined in <xref target="common_metadata"/>, with one exception: If the version number of the Timestamp metadata file might not be known in advance by a client, it MAY be read from, and written to, a repository using a filename without a version number qualification, i.e. FILENAME.EXT.</t>
  <t>If an image is specified in a Targets metadata file as FILENAME.EXT, it SHALL be written to the repository as HASH.FILENAME.EXT, where HASH is one of the hash digests of the file, as specified in <xref target="targets_images_meta"/>. The file MUST be written to the repository using <spanx style="emph">n</spanx> different filenames, one for each hash digest listed in its corresponding Targets metadata.</t>
</list></t>

<t>For example:</t>

<t><list style="symbols">
  <t>The version number of the Snapshot metadata file is 61, and its filename in the Timestamp metadata is “snapshot.json”. The filename on the repository will be “61.snapshot.json”.</t>
  <t>There is an image with the filename “acme_firmware.bin” specified in the Targets metadata, with a SHA256 of “aaaa” and a SHA512-256 of “bbbb”. It will have two filenames on the repository: “aaaa.acme_firmware.bin” and “bbbb.acme_firmware.bin”.</t>
</list></t>

</section>
</section>
<section anchor="server-repository-implementation-requirements" title="Server / repository implementation requirements">

<t>An Uptane implementation SHALL make the following services available to vehicles:</t>

<t><list style="symbols">
  <t>Image repository</t>
  <t>Director repository</t>
</list></t>

<t>Additionally, an Uptane implementation requires ECUs to have a secure way to know the current time.</t>

<section anchor="image-repository" title="Image repository">

<t>The Image repository exists to allow an OEM and/or its suppliers to upload images and their associated metadata. It makes these images and their metadata available to vehicles. The Image repository is designed to be primarily controlled by human actors, and updated relatively infrequently.</t>

<t>The Image repository SHALL expose an interface permitting the download of metadata and images. This interface SHOULD be public.</t>

<t>The Image repository SHALL require authorization for writing metadata and images.</t>

<t>The Image repository SHALL provide a method for authorized users to upload images and their associated metadata. It SHALL check that a user writing metadata and images is authorized to do so for that specific image by checking the chain of delegations as described in <xref target="delegations_meta"/>.</t>

<t>The Image repository SHALL implement storage which permits authorized users to write an image file using a unique filename, and later read the same file using the same name. It MAY use any filesystem, key-value store, or database that fulfills this requirement.</t>

<t>The Image repository MAY require authentication for read access.</t>

</section>
<section anchor="director_repository" title="Director repository">

<t>The Director repository instructs ECUs as to which images should be installed by producing signed metadata on demand. Unlike the Image repository, it is mostly controlled by automated, online processes. It also consults a private inventory database containing information on vehicles, ECUs, and software revisions.</t>

<t>The Director repository SHALL expose an interface for primaries to upload vehicle version manifests (<xref target="vehicle_version_manifest"/>) and download metadata. This interface SHOULD be public.
The Director MAY encrypt images for ECUs that require them, either by encrypting on-the-fly or by storing encrypted images in the repository.</t>

<t>The Director repository SHALL implement storage which permits an automated service to write generated metadata files. It MAY use any filesystem, key-value store, or database that fulfills this requirement.</t>

<section anchor="directing-installation-of-images-on-vehicles" title="Directing installation of images on vehicles">

<t>A Director repository MUST conform to the following six-step process for directing the installation of software images on a vehicle.</t>

<t><list style="numbers">
  <t>The Director SHOULD first identify the vehicle. This MAY be done when the Director receives a vehicle version manifest sent by a Primary (as described in <xref target="construct_manifest_primary"/>), decodes the manifest, and determines the unique vehicle identifier. Additionally, the Director MAY utilize other mechanisms to uniquely identify a vehicle (e.g., 2-way TLS with unique client certificates).</t>
  <t>Using the vehicle identifier, the Director queries its inventory database (as described in <xref target="inventory_db"/>) for relevant information about each ECU in the vehicle.</t>
  <t>The Director SHALL check the manifest for accuracy compared to the information in the inventory database. If any of the required checks fail, the Director MAY drop the request. An implementer MAY make additional checks if desired. At a minimum, the Director SHALL check the following:
  <list style="symbols">
      <t>Each ECU recorded in the inventory database is also represented in the manifest.</t>
      <t>The signature of the manifest matches the ECU key of the Primary that sent it.</t>
      <t>The signature of each Secondary’s contribution to the manifest matches the ECU key of that Secondary.</t>
    </list></t>
  <t>The Director extracts information about currently installed images from the vehicle version manifest. Using this information, it determines if the vehicle is already up-to-date, and if not, determines a set of images that should be installed. The exact process by which this determination takes place is out of scope of this standard. However, the Director MUST take into account <spanx style="emph">dependencies</spanx> and <spanx style="emph">conflicts</spanx> between images and SHOULD consult well-established techniques for dependency resolution.</t>
  <t>The Director MAY encrypt images for ECUs that require it.</t>
  <t>The Director generates new metadata representing the desired set of images to be installed on the vehicle, based on the dependency resolution in step 4. This includes Targets (<xref target="targets_meta"/>), Snapshot (<xref target="snapshot_meta"/>), and Timestamp (<xref target="timestamp_meta"/>) metadata. It then sends this metadata to the Primary as described in <xref target="download_meta_primary"/>.</t>
</list></t>

</section>
<section anchor="inventory_db" title="Inventory Database">

<t>The Director SHALL use a private inventory database to store information about ECUs and vehicles. An implementor MAY use any durable database for this purpose.</t>

<t>The inventory database MUST record the following pieces of information:</t>

<t><list style="symbols">
  <t>Per vehicle:
  <list style="symbols">
      <t>A unique identifier (such as a VIN)</t>
    </list></t>
  <t>Per ECU:
  <list style="symbols">
      <t>A unique identifier (such as a serial number)</t>
      <t>The vehicle identifier the ECU is associated with</t>
      <t>An ECU key (symmetric or asymmetric; for asymmetric keys, only the public part SHOULD be stored)</t>
      <t>The ECU key identifier (as defined in <xref target="common_metadata"/>)</t>
      <t>Whether the ECU is a Primary or a Secondary</t>
    </list></t>
</list></t>

<t>The inventory database MAY record other information about ECUs and vehicles. It SHOULD record a hardware identifier for each ECU to protect against the possibility of directing the ECU to install incompatible firmware.</t>

</section>
</section>
</section>
<section anchor="in-vehicle-implementation-requirements" title="In-vehicle implementation requirements">

<t>An Uptane-compliant ECU SHALL be able to download and verify Image metadata and image binaries before installing a new image and MUST have a secure way of verifying the current time, or a sufficiently recent attestation of the time.</t>

<t>Each ECU in a vehicle receiving over-the-air updates is either a Primary or a Secondary ECU. A Primary ECU collects and delivers vehicle manifests to the Director (<xref target="vehicle_version_manifest"/>) that contain information about which images have been installed on ECUs in the vehicle. It also verifies the time and downloads and verifies the latest metadata and images for itself and for its secondaries. A Secondary ECU verifies the time, and downloads and verifies the latest metadata and images for itself from its associated Primary ECU. It also sends signed information about its installed images to its associated Primary.</t>

<t>All ECUs MUST verify image metadata as specified in <xref target="metadata_verification"/> before installing an image or making it available to other ECUs. A Primary ECU MUST perform full verification (<xref target="full_verification"/>). A Secondary ECU SHOULD perform full verification if possible. If a Secondary cannot perform full verification, it SHALL perform partial verification. See the Uptane Deployment Considerations (<xref target="DEPLOY"/>) for a discussion of how to choose between partial and full verification.</t>

<t>ECUs MUST have a secure source of time. An OEM/Uptane implementor MAY use any external source of time that is demonstrably secure. The Uptane Deployment Considerations (<xref target="DEPLOY"/>) describe one way to implement an external time server to cryptographically attest time, as well as the security properties required. When “loading time” is referenced in procedures in this standard, it should be understood to mean loading into memory the current time (if the ECU has its own secure clock), or the most recent attested time.</t>

<section anchor="build-time-prerequisite-requirements-for-ecus" title="Build-time prerequisite requirements for ECUs">

<t>For an ECU to be capable of receiving Uptane-secured updates, it MUST have the following data provisioned at the time it is manufactured or installed in the vehicle:</t>

<t><list style="numbers">
  <t>A sufficiently recent copy of required Uptane metadata at the time of manufacture or install. See the Uptane Deployment Considerations (<xref target="DEPLOY"/>) for more information.
  <list style="symbols">
      <t>Partial verification ECUs MUST have the Root and Targets metadata from the Director repository.</t>
      <t>Full verification ECUs MUST have a complete set of metadata (Root, Targets, Snapshot, and Timestamp) from both repositories, as well as the repository mapping metadata (<xref target="repo_mapping_meta"/>).</t>
    </list></t>
  <t>The current time, or a secure attestation of a sufficiently recent time.</t>
  <t>An <spanx style="strong">ECU key</spanx>. This is a private key, unique to the ECU, used to sign ECU version manifests and decrypt images. An ECU key MAY be either a symmetric key or an asymmetric key. If it is an asymmetric key, there MAY be separate keys for encryption and signing. For the purposes of this standard, the set of private keys that an ECU uses is referred to as the ECU key (singular), even if it is actually multiple keys used for different purposes.</t>
</list></t>

</section>
<section anchor="what-the-primary-does" title="What the Primary does">

<t>A Primary downloads, verifies, and distributes the latest time, metadata and images. To do so, it SHALL perform the following seven steps:</t>

<t><list style="numbers">
  <t>Construct and send vehicle version manifest (<xref target="construct_manifest_primary"/>)</t>
  <t>Download and check current time (<xref target="check_time_primary"/>)</t>
  <t>Download and verify metadata (<xref target="download_meta_primary"/>)</t>
  <t>Download and verify images (<xref target="download_images_primary"/>)</t>
  <t>OPTIONAL: Send latest time to secondaries (<xref target="send_time_primary"/>)</t>
  <t>Send metadata to Secondaries (<xref target="send_metadata_primary"/>)</t>
  <t>Send images to Secondaries (<xref target="send_images_primary"/>)</t>
</list></t>

<t>Note that the subsequent sections concerning requirements for a Primary do not prohibit implementing Primary capabilities on an ECU that does not communicate directly with the Uptane repositories. This allows for implementations to have multiple ECUs within the vehicle performing functions equivalent to a Primary.
If multiple such Primaries are included within a vehicle, each Secondary ECU SHALL have a single Primary responsible for providing its updates.</t>

<section anchor="construct_manifest_primary" title="Construct and send vehicle version manifest">

<t>The Primary SHALL build a <spanx style="emph">vehicle version manifest</spanx> as described in <xref target="vehicle_version_manifest"/>.</t>

<t>Once the complete manifest is built, the Primary MAY send the manifest to the Director repository. However, it is not strictly required that the Primary send the manifest until step three. If permitted by the implementation, a Primary MAY send only a diff of the manifest to save bandwidth. If an implementation permits diffs, the Director SHOULD have a way to request a full manifest.</t>

<t>Secondaries MAY send their version report at any time so that it is already stored on the Primary when it wishes to check for updates. Alternatively, the Primary MAY request a version report from each Secondary at the time of the update check.</t>

<section anchor="vehicle_version_manifest" title="Vehicle version manifest">

<t>The vehicle version manifest is a metadata structure that MUST contain the following information:</t>

<t><list style="symbols">
  <t>An attribute containing the signature(s) of the payload, each specified by:
  <list style="symbols">
      <t>The public key identifier of the key being used to sign the payload</t>
      <t>The signing method (e.g. ed25519, rsassa-pss, etc.)</t>
      <t>A hash of the payload to be signed</t>
      <t>The hashing function used (e.g. sha256, sha512-224, etc.)</t>
      <t>The signature of the hash</t>
    </list></t>
  <t>A payload representing the installed versions of each software image on the vehicle. This payload SHALL contain:
  <list style="symbols">
      <t>The vehicle’s unique identifier (e.g. the VIN)</t>
      <t>The Primary ECU’s unique identifier (e.g. the serial number)</t>
      <t>A list of ECU version reports as specified in <xref target="version_report"/></t>
    </list></t>
</list></t>

<t>Note that one of the ECU version reports should be the version report for the Primary itself.</t>

</section>
<section anchor="version_report" title="ECU version report">

<t>An ECU version report is a metadata structure that MUST contain the following information:</t>

<t><list style="symbols">
  <t>An attribute containing the signature(s) of the payload, each specified by:
  <list style="symbols">
      <t>The public key identifier of the key being used to sign the payload</t>
      <t>The signing method (e.g. ed25519, rsassa-pss, etc.)</t>
      <t>A hash of the payload to be signed</t>
      <t>The hashing function used (e.g. sha256, sha512-224, etc.)</t>
      <t>The signature of the hash</t>
    </list></t>
  <t>A payload containing:
  <list style="symbols">
      <t>The ECU’s unique identifier (e.g. the serial number)</t>
      <t>The filename, length, and hashes of its currently installed image (i.e. the non-custom targets metadata for this particular image)</t>
      <t>An indicator of any detected security attack</t>
      <t>The latest time the ECU can verify at the time this version report was generated</t>
      <t>A cryptographic nonce</t>
    </list></t>
</list></t>

</section>
</section>
<section anchor="check_time_primary" title="Download and check current time">

<t>The Primary SHALL load the current time from a secure source.</t>

</section>
<section anchor="download_meta_primary" title="Download and verify metadata">

<t>The Primary SHALL download metadata for all targets and perform a full verification on it as specified in <xref target="full_verification"/>.</t>

</section>
<section anchor="download_images_primary" title="Download and verify images">

<t>The Primary SHALL download and verify images for itself and for all of its associated Secondaries. Images SHALL be verified by checking that the hash of the image file matches the hash specified in the Director’s Targets metadata for that image.</t>

<t>There may be several different filenames that all refer to the same image binary, as described in <xref target="metadata_filename_rules"/>. If the primary has received multiple hashes for a given image binary via targets role (see <xref target="targets_images_meta"/>) then it SHALL verify every hash for this image despite the fact that just one hash is enough to obtain the image itself.</t>

</section>
<section anchor="send_time_primary" title="Send latest time to Secondaries">

<t>Unless the Secondary ECU has its own way of verifying the time or does not have the capacity to verify a time message, the Primary is CONDITIONALLY REQUIRED to send the time to each ECU. The Secondary will verify the time message, then overwrite its current time with the received time.</t>

</section>
<section anchor="send_metadata_primary" title="Send metadata to Secondaries">

<t>The Primary SHALL send its latest downloaded metadata to all of its associated Secondaries. The metadata it sends to each Secondary MUST include all of the metadata required for verification on that Secondary. For full verification Secondaries, this includes the metadata for all four roles from both repositories, plus any delegated Targets metadata files the Secondary will recurse through to find the proper delegation. For partial verification Secondaries, this includes only the Targets metadata file from the Director repository.</t>

<t>The Primary SHOULD determine the minimal set of metadata files to send to each Secondary by performing delegation resolution as described in <xref target="full_verification"/>.</t>

<t>Each Secondary SHALL store the latest copy of all metadata required for its own verification.</t>

</section>
<section anchor="send_images_primary" title="Send images to Secondaries">

<t>The Primary SHALL send the latest image to each of its associated Secondaries that have storage to receive it.</t>

<t>For Secondaries without storage, the Primary SHOULD wait for a request from the Secondary to stream the new image file to it. The Secondary will send the request once it has verified the metadata sent in the previous step.</t>

</section>
</section>
<section anchor="installing-images-on-primary-or-secondary-ecus" title="Installing images on Primary or Secondary ECUs">

<t>An ECU SHALL perform the following steps when attempting to install a new image:</t>

<t><list style="numbers">
  <t>Verify latest attested time (<xref target="verify_time"/>)</t>
  <t>Verify metadata (<xref target="verify_metadata"/>)</t>
  <t>Download latest image (<xref target="download_image"/>)</t>
  <t>Verify image (<xref target="verify_image"/>)</t>
  <t>Install image (<xref target="install_image"/>)</t>
  <t>Create and send version report (<xref target="create_version_report"/>)</t>
</list></t>

<section anchor="verify_time" title="Load and verify the latest attested time">

<t>The ECU SHALL load and verify the current time, or the most recent securely attested time.</t>

</section>
<section anchor="verify_metadata" title="Verify metadata">

<t>The ECU SHALL verify the latest downloaded metadata (<xref target="metadata_verification"/>) using either full or partial verification. If the metadata verification fails for any reason, the ECU SHALL jump to the fifth step (<xref target="create_version_report"/>).</t>

</section>
<section anchor="download_image" title="Download latest image">

<t>If the ECU does not have secondary storage, i.e. buffer storage to temporarily store the latest image before installing it, it SHALL download the latest image from the Primary. (If the ECU has secondary storage, it will already have the latest image in its secondary storage as specified in <xref target="send_images_primary"/>, and should skip to the next step.) The ECU MAY first create a backup of its previous working image and store it elsewhere (e.g., the primary).</t>

<t>The filename used to identify the latest known image (i.e., the file to request from the Primary) SHALL be determined as follows:</t>

<t><list style="numbers">
  <t>Load the Targets metadata file from the Director repository.</t>
  <t>Find the Targets metadata associated with this ECU identifier.</t>
  <t>Construct the Image filename using the rule in <xref target="metadata_filename_rules"/>, or use the download URL specified in the Director metadata.</t>
  <t>If there is no Targets metadata about this image, abort the update cycle and report that there is no such image. Additionally, in the case of failure, the ECU SHALL retain its previous Targets metadata instead of using the new Targets metadata. Otherwise, download the image (up to the number of bytes specified in the Targets metadata), and verify that its hashes match the Targets metadata.</t>
</list></t>

<t>When the Primary responds to the download request, the ECU SHALL overwrite its current image with the downloaded image from the Primary.</t>

<t>If any part of this step fails, the ECU SHALL jump to the fifth step (<xref target="create_version_report"/>).</t>

</section>
<section anchor="verify_image" title="Verify image">

<t>The ECU SHALL verify that the latest image matches the latest metadata as follows:</t>

<t><list style="numbers">
  <t>Load the latest Targets metadata file from the Director.</t>
  <t>Find the Targets metadata associated with this ECU identifier.</t>
  <t>Check that the hardware identifier in the metadata matches the ECUs hardware identifier.</t>
  <t>Check that the image filename is valid for this ECU. This MAY be a comparison against a wildcard path, which restricts the ECUs to which a delegation will apply.</t>
  <t>Check that the release counter of the image in the previous metadata, if it exists, is less than or equal to the release counter in the latest metadata.</t>
  <t>If the image is encrypted, decrypt the image with a decryption key to be chosen as follows:
  <list style="symbols">
      <t>If the ECU key is a symmetric key, the ECU SHALL use the ECU key for image decryption.</t>
      <t>If the ECU key is asymmetric, the ECU SHALL check the Targets metadata for an encrypted symmetric key. If such a key is found, the ECU SHALL decrypt the symmetric key using its ECU key, and use the decrypted symmetric key for image decryption.</t>
      <t>If the ECU key is asymmetric and there is no symmetric key in the target metadata, the ECU SHALL use its ECU key for image decryption.</t>
    </list></t>
  <t>Check that the hash of the image matches the hash in the metadata.</t>
</list></t>

<t>If the ECU has secondary storage, the checks SHOULD be performed on the image in secondary storage before it is installed.</t>

<t>NOTE: See <xref target="DEPLOY"/> for guidance on how to deal with Secondary ECU failures for ECUs that do not have secondary storage.</t>

<t>If any step fails, the ECU SHALL jump to the (<xref target="create_version_report"/>) step.</t>

</section>
<section anchor="install_image" title="Install image">

<t>The ECU SHALL attempt to install the update. This installation SHOULD occur at a time when all pre-conditions are met. These pre-conditions MAY include ensuring the vehicle is in a safe environment for install (e.g., the vehicle is parked when updating a specific ECU). Another pre-condition MAY include ensuring the ECU has a backup of its current image and metadata in case the current installation fails.</t>

</section>
<section anchor="create_version_report" title="Create and send version report">

<t>The ECU SHALL create a version report as described in <xref target="version_report"/>, and send it to the Primary (or simply save it to disk, if the ECU is a Primary). The Primary SHOULD write the version reports it receives to disk and associate them with the Secondaries that sent them.</t>

</section>
</section>
<section anchor="metadata_verification" title="Metadata verification procedures">

<t>A Primary ECU MUST perform full verification of metadata. A Secondary ECU SHOULD perform full verification of metadata. If a Secondary cannot perform full verification, it SHALL perform partial verification instead.</t>

<t>If a step in the following workflows does not succeed (e.g., the update is aborted because a new metadata file was not signed), an ECU SHOULD still be able to update again in the future. Errors raised during the update process SHOULD NOT leave ECUs in an unrecoverable state.</t>

<section anchor="partial_verification" title="Partial verification">

<t>In order to perform partial verification, an ECU SHALL perform the following steps:</t>

<t><list style="numbers">
  <t>Load and verify the current time or the most recent securely attested time.</t>
  <t>Download and check the Targets metadata file from the Director repository, following the procedure in <xref target="check_targets"/>.</t>
</list></t>

</section>
<section anchor="full_verification" title="Full verification">

<t>Full verification of metadata means that the ECU checks that the Targets metadata about images from the Director repository matches the Targets metadata about the same images from the Image repository. This provides resilience to a key compromise in the system.</t>

<t>Full verification MAY be performed by either Primary or Secondary ECUs. In the following instructions, whenever an ECU is directed to download metadata, it applies only to Primary ECUs.</t>

<t>If <xref target="TAP-5"/> is supported and a Primary has an external connection to the Uptane repositories, a Primary ECU SHALL download metadata and images following the rules specified in that TAP.  If <xref target="TAP-5"/> is not supported, or if the Primary does not have an external connection to the Uptane repositories, the download SHOULD follow the <xref target="TUF-spec"/> and the metadata file renaming rules specified in <xref target="metadata_filename_rules"/>.</t>

<t>Before starting full verification, the repository mapping metadata MUST be consulted to determine where to download metadata from. This procedure assumes the basic Uptane case: there are only two repositories (Director and Image), and all image paths are required to be signed by both repositories. If a more complex repository layout is being used, refer to <xref target="DEPLOY"/> for guidance on how to determine where metadata should be downloaded from.</t>

<t>In order to perform full verification, an ECU SHALL perform the following steps:</t>

<t><list style="numbers">
  <t>Load and verify the current time or the most recent securely attested time.</t>
  <t>Download and check the Root metadata file from the Director repository, following the procedure in <xref target="check_root"/>.</t>
  <t>Download and check the Timestamp metadata file from the Director repository, following the procedure in <xref target="check_timestamp"/>.</t>
  <t>Download and check the Snapshot metadata file from the Director repository, following the procedure in <xref target="check_snapshot"/>.</t>
  <t>Download and check the Targets metadata file from the Director repository, following the procedure in <xref target="check_targets"/>.</t>
  <t>Download and check the Root metadata file from the Image repository, following the procedure in <xref target="check_root"/>.</t>
  <t>Download and check the Timestamp metadata file from the Image repository, following the procedure in <xref target="check_timestamp"/>.</t>
  <t>Download and check the Snapshot metadata file from the Image repository, following the procedure in <xref target="check_snapshot"/>.</t>
  <t>Download and check the top-level Targets metadata file from the Image repository, following the procedure in <xref target="check_targets"/>.</t>
  <t>Verify that Targets metadata from the Director and Image repositories match. A Primary ECU MUST perform this check on metadata for all images listed in the Targets metadata file from the Director repository downloaded in step 6. A Secondary ECU MAY elect to perform this check only on the metadata for the image it will install. (That is, the target metadata from the Director that contains the ECU identifier of the current ECU.) To check that the metadata for an image matches, complete the following procedure:
  <list style="numbers">
      <t>Locate and download a Targets metadata file from the Image repository that contains an image with exactly the same file name listed in the Director metadata, following the procedure in <xref target="resolve_delegations"/>.</t>
      <t>Check that the Targets metadata from the Image repository matches the Targets metadata from the Director repository:
      <list style="numbers">
          <t>Check that the non-custom metadata (i.e., length and hashes) of the unencrypted or encrypted image are the same in both sets of metadata. Note: the Primary is responsible for validating encrypted images and associated metadata. The target ECU (Primary or Secondary) is responsible for validating the unencrypted image and associated metadata.</t>
          <t>Check that all “MUST match” custom metadata (e.g., hardware identifier and release counter) are the same in both sets of metadata.</t>
          <t>Check that the release counter in the previous Targets metadata file is less than or equal to the release counter in this Targets metadata file.</t>
        </list></t>
    </list></t>
</list></t>

<t>If any step fails, the ECU MUST return an error code indicating the failure. If a check for a specific type of security attack fails (e.g. rollback, freeze, arbitrary software, etc.), the ECU SHOULD return an error code that indicates the type of attack.</t>

<t>If the ECU performing the verification is the Primary ECU, it SHOULD also ensure that the Targets metadata from the Director repository doesn’t contain any ECU identifiers for ECUs not actually present in the vehicle.</t>

</section>
<section anchor="check_root" title="How to check Root metadata">

<t>To properly check Root metadata, an ECU SHOULD:</t>

<t><list style="numbers">
  <t>Load the previous Root metadata file.</t>
  <t>Update to the latest Root metadata file.
  <list style="numbers">
      <t>Let N denote the version number of the latest Root metadata file (which at first could be the same as the previous root metadata file).</t>
      <t>Try downloading a new version N+1 of the Root metadata file, up to some X number of bytes. The value for X is set by the implementor. For example, X may be tens of kilobytes. The filename used to download the Root metadata file is of the fixed form VERSION_NUMBER.FILENAME.EXT (e.g., 42.root.json). If this file is not available, the current Root metadata file is the latest; continue with step 3.</t>
      <t>Version N+1 of the Root metadata file MUST have been signed by the following: (1) a threshold of keys specified in the latest Root metadata file (version N), and (2) a threshold of keys specified in the new Root metadata file being validated (version N+1). If version N+1 is not signed as required, discard it, abort the update cycle, and report the signature failure. On the next update cycle, begin at version N of the Root metadata file. (Checks for an arbitrary software attack.)</t>
      <t>The version number of the latest Root metadata file (version N) must be less than or equal to the version number of the new Root metadata file (version N+1). Effectively, this means checking that the version number signed in the new Root metadata file is indeed N+1. If the version of the new Root metadata file is less than the latest metadata file, discard it, abort the update cycle, and report the rollback attack. On the next update cycle, begin at step 1 and version N of the Root metadata file. (Checks for a rollback attack.)</t>
      <t>Set the latest Root metadata file to the new Root metadata file.</t>
      <t>Repeat steps 2.1 to 2.6.</t>
    </list></t>
  <t>Check that the current (or latest securely attested) time is lower than the expiration timestamp in the latest Root metadata file. (Checks for a freeze attack.)</t>
  <t>If the Timestamp and/or Snapshot keys have been rotated, delete the previous Timestamp and Snapshot metadata files. (Checks for recovery from fast-forward attacks <xref target="MERCURY"/>.)</t>
</list></t>

</section>
<section anchor="check_timestamp" title="How to check Timestamp metadata">

<t>To properly check Timestamp metadata, an ECU SHOULD:</t>

<t><list style="numbers">
  <t>Download up to Y number of bytes. The value for Y is set by the implementor. For example, Y may be tens of kilobytes. The filename used to download the Timestamp metadata file is of the fixed form FILENAME.EXT (e.g., timestamp.json).</t>
  <t>Check that it has been signed by the threshold of keys specified in the latest Root metadata file. If the new Timestamp metadata file is not properly signed, discard it, abort the update cycle, and report the signature failure. (Checks for an arbitrary software attack.)</t>
  <t>Check that the version number of the previous Timestamp metadata file, if any, is less than or equal to the version number of this Timestamp metadata file. If the new Timestamp metadata file is older than the trusted Timestamp metadata file, discard it, abort the update cycle, and report the potential rollback attack. (Checks for a rollback attack.)</t>
  <t>Check that the current (or latest securely attested) time is lower than the expiration timestamp in this Timestamp metadata file. If the new Timestamp metadata file has expired, discard it, abort the update cycle, and report the potential freeze attack. (Checks for a freeze attack.)</t>
</list></t>

</section>
<section anchor="check_snapshot" title="How to check Snapshot metadata">

<t>To properly check Snapshot metadata, an ECU SHOULD:</t>

<t><list style="numbers">
  <t>Download up to the number of bytes specified in the Timestamp metadata file, constructing the metadata filename as defined in <xref target="metadata_filename_rules"/>.</t>
  <t>The hashes and version number of the new Snapshot metadata file MUST match the hashes and version number listed in Timestamp metadata. If the hashes and version number do not match, discard the new Snapshot metadata, abort the update cycle, and report the failure. (Checks for a mix-and-match attack.)</t>
  <t>Check that it has been signed by the threshold of keys specified in the latest Root metadata file. If the new Snapshot metadata file is not signed as required, discard it, abort the update cycle, and report the signature failure. (Checks for an arbitrary software attack.)</t>
  <t>Check that the version number of the previous Snapshot metadata file, if any, is less than or equal to the version number of this Snapshot metadata file. If this Snapshot metadata file is older than the previous Snapshot metadata file, discard it, abort the update cycle, and report the potential rollback attack. (Checks for a rollback attack.)</t>
  <t>Check that the version number listed by the previous Snapshot metadata file for each Targets metadata file is less than or equal to its version number in this Snapshot metadata file. If this condition is not met, discard the new Snapshot metadata file, abort the update cycle, and report the failure. (Checks for a rollback attack.)</t>
  <t>Check that each Targets metadata filename listed in the previous Snapshot metadata file is also listed in this Snapshot metadata file. If this condition is not met, discard the new Snapshot metadata file, abort the update cycle, and report the failure. (Checks for a rollback attack.)</t>
  <t>Check that the current (or latest securely attested) time is lower than the expiration timestamp in this Snapshot metadata file. If the new Snapshot metadata file is expired, discard it, abort the update cycle, and report the potential freeze attack. (Checks for a freeze attack.)</t>
</list></t>

</section>
<section anchor="check_targets" title="How to check Targets metadata">

<t>To properly check Targets metadata, an ECU SHOULD:</t>

<t><list style="numbers">
  <t>Download up to Z number of bytes, constructing the metadata filename as defined in <xref target="metadata_filename_rules"/>. The value for Z is set by the implementor. For example, Z may be tens of kilobytes.</t>
  <t>The version number of the new Targets metadata file MUST match the version number listed in the latest Snapshot metadata. If the version number does not match, discard it, abort the update cycle, and report the failure. (Checks for a mix-and-match attack.) Skip this step if checking Targets metadata on a partial verification ECU; partial verification ECUs will not have Snapshot metadata.</t>
  <t>Check that the Targets metadata has been signed by the threshold of keys specified in the relevant metadata file (Checks for an arbitrary software attack):
  <list style="numbers">
      <t>If checking top-level Targets metadata, the threshold of keys is specified in the Root metadata.</t>
      <t>If checking delegated Targets metadata, the threshold of keys is specified in the Targets metadata file that delegated authority to this role.</t>
    </list></t>
  <t>Check that the version number of the previous Targets metadata file, if any, is less than or equal to the version number of this Targets metadata file. (Checks for a rollback attack.)</t>
  <t>Check that the current (or latest securely attested) time is lower than the expiration timestamp in this Targets metadata file. (Checks for a freeze attack.)</t>
  <t>If checking Targets metadata from the Director repository, verify that there are no delegations.</t>
  <t>If checking Targets metadata from the Director repository, check that no ECU identifier is represented more than once.</t>
</list></t>

</section>
<section anchor="resolve_delegations" title="How to resolve delegations">

<t>To properly check Targets metadata for an image, an ECU MUST locate the metadata file(s) for the role (or roles) that have the authority to sign the image. This metadata might be located in the top-level Targets metadata, but it also may be delegated to another role or to multiple roles. Therefore, all delegations MUST be resolved using the following recursive procedure, beginning with the top-level Targets metadata file.</t>

<t><list style="numbers">
  <t>Download the current metadata file, and check it following the procedure in <xref target="check_targets"/>. If the file cannot be loaded, or if any verification step fails, abort the delegation resolution, and indicate that Image metadata cannot be found because of a missing or invalid role.</t>
  <t>If the current metadata file contains signed metadata about the image, end the delegation resolution and return the metadata to be checked.</t>
  <t>If the current metadata file was reached via a terminating delegation and does not contain signed metadata about the image, abort the delegation resolution for this image and return an error indicating that image metadata could not be found.</t>
  <t>Search the list of delegations, in listed order. For each delegation:
  <list style="numbers">
      <t>Check if the delegation applies to the image being processed. For the delegation to apply, it MUST include the hardware identifier of the target, and the target name must match one of the delegation’s image paths. If either of these tests fail, move on to the next delegation in the list.</t>
      <t>If the delegation is a multi-role delegation, follow the procedure described in <xref target="multirole_delegations"/>. If the multi-role delegation is terminating and no valid Image metadata is found, abort the delegation resolution and return an error indicating that image metadata could not be found.</t>
      <t>If the delegation is a normal delegation, perform delegation resolution, starting at step 1. Note that this may recurse an arbitrary number of levels deep. If a delegation that applies to the image is found but no image metadata is found in the delegated roles or any of its sub-delegations, simply continue on with the next delegation in the list. The search is only completed/aborted if image metadata or a terminating delegation that applies to the image is found.</t>
    </list></t>
  <t>If the end of the list of delegations in the top-level metadata is reached without finding valid image metadata, return an error indicating that image metadata could not be found.</t>
</list></t>

</section>
<section anchor="multirole_delegations" title="Multi-role delegations">

<t>It is possible to delegate signing authority to multiple delegated roles as described in <xref target="TAP-3"/>. Each multi-role delegation effectively contains a list of ordinary delegations, plus a threshold of those roles that must be in agreement about the non-custom metadata for the image. All multi-role delegations MUST be resolved using the following procedure. Note that there may be sub-delegations inside multi-role delegations.</t>

<t><list style="numbers">
  <t>For each of the roles in the delegation, find and load the image metadata (or error) following the procedure in <xref target="resolve_delegations"/>.</t>
  <t>Inspect the non-custom part of the metadata loaded in step 1:
  <list style="numbers">
      <t>Locate all sets of roles which have agreeing (i.e. identical) non-custom metadata and “MUST match” custom metadata. Discard any set of roles with a size smaller than the threshold of roles that must be in agreement for this delegation.</t>
      <t>Check for a conflict. A conflict exists if there remains more than one agreeing set of roles, each set having different metadata. If a conflict is found, choose and return the metadata from the set of roles which includes the earliest role in the multi-delegation list.</t>
      <t>If there is no conflict, check if there is any single set of roles with matching non-custom metadata. If there is, choose and return the metadata from this set.</t>
      <t>If no agreeing set can be found that meets the agreement threshold, return an error indicating that image metadata could not be found.</t>
    </list></t>
</list></t>

</section>
</section>
</section>
</section>


  </middle>

  <back>

    <references title='Normative References'>





<reference  anchor="RFC2119" target='https://www.rfc-editor.org/info/rfc2119'>
<front>
<title>Key words for use in RFCs to Indicate Requirement Levels</title>
<author initials='S.' surname='Bradner' fullname='S. Bradner'><organization /></author>
<date year='1997' month='March' />
<abstract><t>In many standards track documents several words are used to signify the requirements in the specification.  These words are often capitalized. This document defines these words as they should be interpreted in IETF documents.  This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t></abstract>
</front>
<seriesInfo name='BCP' value='14'/>
<seriesInfo name='RFC' value='2119'/>
<seriesInfo name='DOI' value='10.17487/RFC2119'/>
</reference>



<reference  anchor="RFC3647" target='https://www.rfc-editor.org/info/rfc3647'>
<front>
<title>Internet X.509 Public Key Infrastructure Certificate Policy and Certification Practices Framework</title>
<author initials='S.' surname='Chokhani' fullname='S. Chokhani'><organization /></author>
<author initials='W.' surname='Ford' fullname='W. Ford'><organization /></author>
<author initials='R.' surname='Sabett' fullname='R. Sabett'><organization /></author>
<author initials='C.' surname='Merrill' fullname='C. Merrill'><organization /></author>
<author initials='S.' surname='Wu' fullname='S. Wu'><organization /></author>
<date year='2003' month='November' />
<abstract><t>This document presents a framework to assist the writers of certificate policies or certification practice statements for participants within public key infrastructures, such as certification authorities, policy authorities, and communities of interest that wish to rely on certificates.  In particular, the framework provides a comprehensive list of topics that potentially (at the writer's discretion) need to be covered in a certificate policy or a certification practice statement.  This document supersedes RFC 2527.</t></abstract>
</front>
<seriesInfo name='RFC' value='3647'/>
<seriesInfo name='DOI' value='10.17487/RFC3647'/>
</reference>



<reference  anchor="RFC5198" target='https://www.rfc-editor.org/info/rfc5198'>
<front>
<title>Unicode Format for Network Interchange</title>
<author initials='J.' surname='Klensin' fullname='J. Klensin'><organization /></author>
<author initials='M.' surname='Padlipsky' fullname='M. Padlipsky'><organization /></author>
<date year='2008' month='March' />
<abstract><t>The Internet today is in need of a standardized form for the transmission of internationalized &quot;text&quot; information, paralleling the specifications for the use of ASCII that date from the early days of the ARPANET.  This document specifies that format, using UTF-8 with normalization and specific line-ending sequences.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='5198'/>
<seriesInfo name='DOI' value='10.17487/RFC5198'/>
</reference>


<reference anchor="NFC" target="http://www.unicode.org/reports/tr15/">
  <front>
    <title>Unicode Standard Annex #15: Unicode Normalization Forms</title>
    <author initials="M." surname="Davis">
      <organization></organization>
    </author>
    <author initials="M." surname="Duerst">
      <organization></organization>
    </author>
    <date year="2018" month="October"/>
  </front>
</reference>
<reference anchor="TAP-3" target="https://github.com/theupdateframework/taps/blob/d0818e580c322815a473520f2e8cc5f5eb8df499/tap3.md">
  <front>
    <title>The Update Framework TAP 3 - Multi-role delegations</title>
    <author initials="T.K." surname="Kuppusamy">
      <organization></organization>
    </author>
    <author initials="S." surname="Awwad">
      <organization></organization>
    </author>
    <author initials="E." surname="Cordell">
      <organization></organization>
    </author>
    <author initials="V." surname="Diaz">
      <organization></organization>
    </author>
    <author initials="J." surname="Moshenko">
      <organization></organization>
    </author>
    <author initials="J." surname="Cappos">
      <organization></organization>
    </author>
    <date year="2018" month="January" day="18"/>
  </front>
</reference>
<reference anchor="TAP-4" target="https://github.com/theupdateframework/taps/blob/2cb67d913ec19424d1e354b38f862886fbfd4105/tap4.md">
  <front>
    <title>The Update Framework TAP 4 - Multiple repository consensus on entrusted targets</title>
    <author initials="T.K." surname="Kuppusamy">
      <organization></organization>
    </author>
    <author initials="S." surname="Awwad">
      <organization></organization>
    </author>
    <author initials="E." surname="Cordell">
      <organization></organization>
    </author>
    <author initials="V." surname="Diaz">
      <organization></organization>
    </author>
    <author initials="J." surname="Moshenko">
      <organization></organization>
    </author>
    <author initials="J." surname="Cappos">
      <organization></organization>
    </author>
    <date year="2017" month="December" day="15"/>
  </front>
</reference>
<reference anchor="TAP-5" target="https://github.com/theupdateframework/taps/blob/01726d203c9b9c029d26f6612069ce3180500d9a/tap5.md#downloading-metadata-and-target-files">
  <front>
    <title>The Update Framework TAP 5 - Setting URLs for roles in the root metadata file</title>
    <author initials="T.K." surname="Kuppusamy">
      <organization></organization>
    </author>
    <author initials="S." surname="Awwad">
      <organization></organization>
    </author>
    <author initials="E." surname="Cordell">
      <organization></organization>
    </author>
    <author initials="V." surname="Diaz">
      <organization></organization>
    </author>
    <author initials="J." surname="Moshenko">
      <organization></organization>
    </author>
    <author initials="J." surname="Cappos">
      <organization></organization>
    </author>
    <date year="2018" month="January" day="22"/>
  </front>
</reference>
<reference anchor="TUF-spec" target="https://github.com/theupdateframework/specification/blob/2b4e18472fe25d5b57f36f6fa50104967c8faeaa/tuf-spec.md">
  <front>
    <title>The Update Framework Specification</title>
    <author initials="J." surname="Samuel">
      <organization></organization>
    </author>
    <author initials="N." surname="Mathewson">
      <organization></organization>
    </author>
    <author initials="G." surname="Condra">
      <organization></organization>
    </author>
    <author initials="V." surname="Diaz">
      <organization></organization>
    </author>
    <author initials="T.K." surname="Kuppusamy">
      <organization></organization>
    </author>
    <author initials="S." surname="Awwad">
      <organization></organization>
    </author>
    <author initials="S." surname="Tobias">
      <organization></organization>
    </author>
    <author initials="J." surname="Wright">
      <organization></organization>
    </author>
    <author initials="H." surname="Mehnert">
      <organization></organization>
    </author>
    <author initials="E." surname="Tryzelaar">
      <organization></organization>
    </author>
    <author initials="J." surname="Cappos">
      <organization></organization>
    </author>
    <author initials="R." surname="Dingledine">
      <organization></organization>
    </author>
    <date year="2018" month="September" day="19"/>
  </front>
</reference>


    </references>

    <references title='Informative References'>

<reference anchor="MERCURY" target="https://www.usenix.org/system/files/conference/atc17/atc17-kuppusamy.pdf">
  <front>
    <title>Mercury: Bandwidth-Effective Prevention of Rollback Attacks Against Community Repositories</title>
    <author initials="T.K." surname="Kuppusamy">
      <organization></organization>
    </author>
    <author initials="V." surname="Diaz">
      <organization></organization>
    </author>
    <author initials="J." surname="Cappos">
      <organization></organization>
    </author>
    <date year="2017" month="July" day="12"/>
  </front>
  <seriesInfo name="ISBN" value="978-1-931971-38-6"/>
</reference>
<reference anchor="UPTANEESCAR" target="https://ssl.engineering.nyu.edu/papers/kuppusamy_escar_16.pdf">
  <front>
    <title>Securing Software Updates for Automobiles</title>
    <author initials="T.K." surname="Kuppusamy">
      <organization></organization>
    </author>
    <author initials="A." surname="Brown">
      <organization></organization>
    </author>
    <author initials="S." surname="Awwad">
      <organization></organization>
    </author>
    <author initials="D." surname="McCoy">
      <organization></organization>
    </author>
    <author initials="R." surname="Bielawski">
      <organization></organization>
    </author>
    <author initials="C." surname="Mott">
      <organization></organization>
    </author>
    <author initials="S." surname="Lauzon">
      <organization></organization>
    </author>
    <author initials="A." surname="Weimerskirch">
      <organization></organization>
    </author>
    <author initials="J." surname="Cappos">
      <organization></organization>
    </author>
    <date year="2016" month="October" day="16"/>
  </front>
</reference>
<reference anchor="PEP-458" target="https://www.python.org/dev/peps/pep-0458/">
  <front>
    <title>PEP 458 -- Surviving a Compromise of PyPI</title>
    <author initials="T.K." surname="Kuppusamy">
      <organization></organization>
    </author>
    <author initials="V." surname="Diaz">
      <organization></organization>
    </author>
    <author initials="D." surname="Stufft">
      <organization></organization>
    </author>
    <author initials="J." surname="Cappos">
      <organization></organization>
    </author>
    <date year="2013" month="September" day="27"/>
  </front>
</reference>
<reference anchor="DEPLOY" target="https://docs.google.com/document/d/17wOs-T7mugwte5_Dt-KLGMsp-3_yAARejpFmrAMefSE/">
  <front>
    <title>Uptane Deployment Considerations</title>
    <author initials="." surname="Members of the Uptane Alliance Community">
      <organization></organization>
    </author>
    <date year="n.d."/>
  </front>
</reference>
<reference anchor="USATODAY" target="https://www.usatoday.com/story/tech/columnist/2016/06/28/your-average-car-lot-more-code-driven-than-you-think/86437052/">
  <front>
    <title>Your average car is a lot more code-driven than you think</title>
    <author initials="B." surname="O'Donnell">
      <organization></organization>
    </author>
    <date year="2016" month="June" day="28"/>
  </front>
</reference>
<reference anchor="CR-OTA" target="https://www.consumerreports.org/automotive-technology/automakers-embrace-over-the-air-updates-can-we-trust-digital-car-repair/">
  <front>
    <title>Automakers Embrace Over-the-Air Updates, but Can We Trust Digital Car Repair?</title>
    <author initials="K." surname="Barry">
      <organization></organization>
    </author>
    <date year="2018" month="April" day="20"/>
  </front>
</reference>
<reference anchor="IN-TOTO" target="https://in-toto.github.io/">
  <front>
    <title>in-toto: A framework to secure the integrity of software supply chains</title>
    <author >
      <organization></organization>
    </author>
    <date year="2018" month="October" day="29"/>
  </front>
</reference>


    </references>



  </back>

<!-- ##markdown-source:
H4sIAEX2iF0AA+1923LUWLbgu79CAQ9lezLT2GAKqIcZg02XTwNmsKnqOhMT
tDJTaavJlLIlpU0WQcT5kJmfO18y674vktIGqs7MiZh+qMZKaV/WXnvdL8Ph
cKvJm3n2LHm/bNIiS87hv9O0miazskqOszq/LBJ4kpwulvNskRVN2uRlsZWO
x1V2DV+9vTh6c7I1LSdFuoBRVjTKsJZRhlMaYWuSNtllWa2fJXkxK7e28mX1
LCnK46zKr2HA66y+qFZ1c/DgwdMHB1tplaXPkouz47Otm7L6eFmVq6X8/TFb
w6Pps+S0aLKqyJrhcZXOmq0tmvFDOi8LWMU6q7eW+bPkfzTlZJDUZdVU2ayG
f60X+I//ubWVrpqrsnq2lSRDWFL9LHmdLcZZVSflLGmuMoXG0Xyep8UkS16U
i8WqyJs1fJEkvNfN75TVZVrkvxO42u9uT/bK5G1VzkbJv8DG8yJ5kS6XZb1D
32aLNJ+3gFn/t8uyvJxnBI96NCkX9HINm8uaZ8lj2ENTlRfZ5IqeT8pV0SDI
358f0YMqu6S1vPmNf4eVPkueV2X5cb4u5JMp7Gt//+DB/tZWUVYLOhuE0v3k
rwz5ZJrNku3X788vBsn5z0evXg2S10e/DZKsmYxw8e9evjjY33/K3/xtdPjg
afL2r6dJvcwm/OvDx49+5F/fZA0eb/K+yHFiwjjY1DKt8uIStwX/V/NHh/tP
n/BH+vIbXN1c4Ju8hL+SF/DCm5cvntFWmrS6RKhcNc3y2d7ezc3NaMWfjuBk
9qpsCVhR7zXV/uEef8DX4J5OYBfhqCiyT8n9/cNnGyav79EgDq3wf4pao+Q4
vc7r9tMVYFxDj6dwQZ4lAPcnw/0HtNGLo7fJwyRt4Niuk+mDJ/tPskP4AR4P
H7a3WMMeL/PmajVGvNgDFF4tccxZBaiKUN5r0mW9N56X4z0Z7MmDycODgyf7
h+mjHx8eHjyYHWRPJpPD2WE2fjKdPXr6FD95OFpMffBc0N3AkZOXOrQsdZi8
Xs2bfFiV8wywBPCUwFP3A+Zi9NdR8tfVcrmq08U6/O18lBzd3KTT8OnJCG5Z
BYPPw+e/ADDz9Pfw4b+MktdlfZUVH8vWD3zbYtA/2B/uPzHoP1LoH0zGj3+c
PhXoP/o+6Mtg+w+zyf7TRwePpvvZw8NH44dPZk8eHzx58ng2nk0f7T84xE8e
3RX6jxT6QKQTxO06b4DcwnUq6qyoV0DXigSINxLZbCpr/89zMj8O9w+G+4d2
Mod6MvDTwePpgZzM4fedjAz24OHk6fjp5MHB0+nB49njx0ANHz+dZA/3nzw4
fPBg+jTFTw7hZO5Py5tiXqZToFPDRdakMHA6BKox5BUMZ/k8q+90focAgPOs
aZDwvX/3qiZaiBepBrgQQwIy3SQ6SYIj/6c5PbpXBwd8eu9f2q0aP8r2nzzC
s3v/cogM4luOD7/LZ/mEaI3cMB74x4NZdnA4PRwf/jh7CAc5Sw8f7D949PTx
j5MnszRL4RxXM5r3Lrfs3J+nH/QAgvN0scoiOL4BkKWw+ptaPrZf/oKQL6ZV
egfAf/25wtOLcpyndWuVv1b55VUTPv4ZVpldFVnVtLDjolr/ns3TtNp04vb4
Ha6+AFEFrkbWQoanw/2nIAKCIOgJGK9P3r14/+63bhQg7g2ELP9EzLteAxVb
7NH12gMSN8uqDISqvbSZ7P/I/x1+VDCNltNZwOBfZ9VkhXLRc7iqN/m0uRqe
zGbZBFcCIll2DXQS2TpIgu/K+XycTj4mR00D/1cnR5cpbLBxol7yToltnm2S
ATYdXd8l8yBbZzg+gkzHPT1//uZZ8vRHkBeGTx/uP/1xf/jwyfBxTDcfIOmE
hyynn5y/OHrXDeK6no+y4hLOK0O5a1SsV6NsutpbpksQUvYMnB+yepJWH/Yf
t+B6ngFYkYCdl7PmBmR4uURMzI5WTbkAVJx/M5iORiis3hR3wftjwOTJi3Ld
QsvnOWDxTf0xD395gSStaVpDv0pXv8c3Ftbxa5YvACof80pk7dtI4GOQ6ob7
eDpvT0CCOHzSj+fLNcClIDyfZtd7ywzYE/xn+AC+CiVVGCqBh8kQeMequs6v
Efgp4uayKhd5nSEKv12/Pf0j8RIgew50c9bcad8P8bYf/AgPj0/evjrrud6g
PdYj1m2IzMPfK1Q196Z7+z/enNXDix8Xq8ubJjv8cNwM//rqL6/r5fDhh/XR
0bvsH8uXi+rodTY7P4nkeNa4jrPlvFzjaEhn63yaVSyWbhLY764Lgm4FeunR
RrqVNuU0XdPOapTK9hpQ0YBuzVeLIq+bPcSPvQeP9w6e7K3LVTVMr2GNl9kQ
7tlwXjbDRVnBH6B3DKegLmfFsLlKiyG8Cv/Ii497Tx4/evjjg8ODYP+/wUiJ
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
EmgyuSrR8qYirM5KyByvEqmLHXNIy7iTL5EiinLgzuR7sb8oEkqwmWqFCmT4
eaIpk9NsQVaMdKztT8MKanfcvhVVIZMLe6OcnSwt3Dpodq50TMDxSzhRqwCm
u3prXcUSMnq7toZYIo5ab1nsDHLtIrmnBZxxgHucnCnRKFNOvAE9Z6oFtwKV
hVDEqUkr7KoCgkXJBUuzFHu2Sx3rgp4sqKx6xFKSbdHdEKWpbzw6xm8KPccJ
9iPZsQhSivYLWE429f12z7Hp6pAGBi2CNlujHbHVdxPxhj3XrlvBOPNLxzkO
pVXfaUXWE8WVhdV6BJ4gSiSG/EOI3hgt0jjqLjbytFhhC2was6x8ChfwCY5l
OerkuqBLrnmtYksRPHRUzpuWQkttTm/K77nFi0gXUDPE264i2tFlxRkpD8Av
onynrEWd5WWL6LXogfQRz1R9tPHvXPGrLxIxum2b4uK2sZBGHAWPpfQOmHx0
CVmM/5Fc1S188QV4SFRud1dkeayce2FZUKrSwQ8DVWFcu6FBWN9LhILIm8FC
la/sj3wVRYOJVWwLs2H5ooWKihZZ5qiL8DctYyCj1hm2vG28stleTq7W/QTI
atHiTLXIumVq0ZavnPnnwOJKveCOqIVd3ioU7ZvFttE0hQkoO65Zk+xmIo1c
rFSuKzYe1qDQVQr5+lUDd1VgwDqc6F9wf4tMNjCBTIS1qA6WSGiMUN3edHER
d7D6OH4DN0dNe5kWvVBLPkM+K/p9YNTmdJPhH8c79lUcNsOGLALGwKcf8K9N
34qk51+7HjNJ77cahu19KfFX4bdnbzk9/hm3SPLAzX2/TNwmOxG80rV4+tQ3
+Zx3fGdiace3Thbu+rK98Dg+nIpFU/yGq/gG40xA+OBA3Ihrph4iUiwgsLgr
0Jq9WGT8Tl8Kmn7SRXXp4laJ2+vuIFr3fO2CrzqahglZS7mubVfql2Wv6PXr
6WHqN4Gw1qd+lgpVKTO9AqiVjUgmn7fmDSaDg+aVtVsqdbSiCEq6SX6Awi3u
tOCq2KJ0JPKHWvq+5jZSr6i+y8i2GV2DGCKoiX2a7PYNudthmuzXpWHNZ9TM
9SpzjNlWB4eK8zWDgAQiB6BdBX6KWIXfkO1F/Z2QrzDHFEmpiUltew7uakYm
YkyiZS1KgpZc8YcQ+QbeHbGVc8lyIvstNw9SC7IZwOnd5NPmyoWvBuYj9Zfj
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

-->

</rfc>


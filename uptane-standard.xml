<?xml version="1.0" encoding="UTF-8"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc2629 version 1.2.9 -->

<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
]>

<?rfc toc="yes"?>
<?rfc sortrefs="yes"?>
<?rfc symrefs="yes"?>

<rfc ipr="noDerivativesTrust200902" docName="uptane-standard-design" category="info">

  <front>
    <title abbrev="UPTANE">Uptane Standard for Design and Implementation</title>

    <author initials="." surname="Members of the Uptane Community" fullname="Uptane Community">
      <organization>Joint Development Foundation Projects, LLC, Uptane Series (c/o Prof. Justin Cappos)</organization>
      <address>
        <postal>
          <street>6 MetroTech</street>
          <city>Brooklyn</city>
          <region>NY</region>
          <code>11201</code>
          <country>USA</country>
        </postal>
        <email>uptane-standards@googlegroups.com</email>
      </address>
    </author>

    <date year="2022" month="August" day="02"/>

    <area>TODO</area>
    <workgroup>TODO</workgroup>
    <keyword>Internet-Draft</keyword>

    <abstract>


<t>This document describes a framework for securing ground vehicle software update systems.</t>



    </abstract>


  </front>

  <middle>


<section anchor="introduction" title="Introduction">

<t>Uptane is a secure software update framework for ground vehicles. This document describes procedures to enable programmers for OEMs and suppliers to securely design and implement this framework in a manner that better protects connected units on ground vehicles. Integrating Uptane as outlined in the sections that follow can reduce the ability of attackers to compromise critical systems. It also assures a faster and easier recovery process when a compromise occurs.</t>

<t>These instructions specify the components necessary for a conformant implementation. Individual implementers can make their own technological choices within those requirements. This flexibility makes Uptane adaptable to the many customized update solutions used by manufacturers. If implementers wish to have compatible formats, they can use POUFs. POUFs contain a description of implementation choices as well as data binding formats. An implementer who adopts a POUF, as well as the Uptane Standard, will be able to interoperate with other implementations using that POUF.</t>

</section>
<section anchor="terminology" title="Terminology">

<t>With the exception of the Conformance terminology and Uptane role terminology presented below, please refer to the <eref target="https://uptane.github.io/deployment-considerations/glossary.html">glossary</eref> in the Deployment Best Practices volume for definitions of all terms used in this Standard.</t>

<section anchor="conformance-terminology" title="Conformance terminology">

<t>The keywords REQUIRED, SHALL, SHALL NOT, SHOULD, SHOULD NOT, RECOMMENDED, MAY, and OPTIONAL in this document are to be interpreted as described in <xref target="RFC2119"/>. Given the importance of interpreting these terms correctly, we present these definitions here. Note that when referring to actions in the Standard that mandate conformance, the word SHALL will be used, rather than the word MUST.</t>

<t><spanx style="emph">SHALL</spanx> This word or the term “REQUIRED” mean that the definition is an absolute requirement of the specification.
<spanx style="emph">SHALL NOT</spanx> This phrase means that the definition is an absolute prohibition of the specification.
<spanx style="emph">SHOULD</spanx> This word or the adjective “RECOMMENDED” mean that, in particular circumstances, there could exist valid reasons to ignore a particular item, but the full implications will be understood and carefully weighed before choosing a different course.
<spanx style="emph">SHOULD NOT</spanx> This phrase or the phrase “NOT RECOMMENDED” mean that there could exist valid reasons in particular circumstances when the particular behavior is acceptable or even useful, but the full implications will be understood and the case carefully weighed before implementing any behavior described with this label.
<spanx style="emph">MAY</spanx> This word or the adjective “OPTIONAL,” mean that an item is truly optional.</t>

<t>In order to be considered conformant to the Uptane Standard, an implementation SHALL follow all of these rules as specified in the document.</t>

<t>Note that, following the recommendations of <xref target="RFC2119"/>, imperatives of the type defined here will be used only when essential for security.</t>

</section>
<section anchor="uptane-role-terminology" title="Uptane role terminology">

<t>These terms are defined in greater detail in <xref target="roles"/>.</t>

<t><spanx style="emph">Delegation</spanx>: A process by which the responsibility of signing metadata about images is assigned to another party.</t>

<t><spanx style="emph">Role</spanx>: A party (human or machine) responsible for signing a certain type of metadata. The role controls keys and is responsible for signing the metadata entrusted to it with these keys. The roles mechanism of Uptane allows the system to distribute signing responsibilities so that the compromise of one key does not necessarily impact the security of the entire system.</t>

<t><list style="symbols">
  <t><spanx style="emph">Root role</spanx>: Signs metadata that distributes and revokes public keys used to verify the Root, Timestamp, Snapshot, and Targets role metadata.</t>
  <t><spanx style="emph">Snapshot role</spanx>: Signs metadata that indicates which images the repository has released at the same time.</t>
  <t><spanx style="emph">Targets role</spanx>: Signs metadata used to verify the image, such as cryptographic hashes and file size.</t>
  <t><spanx style="emph">Timestamp role</spanx>: Signs metadata that indicates if there are any new metadata or images on the repository.</t>
</list></t>

</section>
<section anchor="acronyms-and-abbreviations" title="Acronyms and abbreviations">

<t><spanx style="emph">CDN</spanx>: Content Delivery Network</t>

<t><spanx style="emph">ECUs</spanx>: Electronic Control Units, the computing units on a vehicle</t>

<t><spanx style="emph">LIN Bus</spanx>: Local Interconnect Bus</t>

<t><spanx style="emph">OBD</spanx>: On-board diagnostics</t>

<t><spanx style="emph">SOTA</spanx>: Software Updates Over-the-Air</t>

<t><spanx style="emph">UDS</spanx>: Unified Diagnostic Services</t>

<t><spanx style="emph">VIN</spanx>: Vehicle Identification Number</t>

</section>
</section>
<section anchor="rationale-for-and-scope-of-the-uptane-standard" title="Rationale for and scope of the Uptane Standard">

<t>This Standard document provides the essential components for the secure design, implementation, and deployment of Uptane by OEMs and suppliers. These guidelines contribute to compromise resilience, or the ability to minimize the extent of the threat posed by any given attack.</t>

<t>However, this specification is intended as an implementation guide, and not as a detailed technical argument about the security properties that Uptane provides.  Readers interested in such documentation can refer to published papers that cover this topic.  <xref target="UPTANEESCAR"/></t>

<section anchor="why-uptane-requires-a-standards-document" title="Why Uptane requires a standards document">

<t>A standards document that can guide the safe design, integration, and deployment of Uptane in vehicles is needed at this time because:</t>

<t><list style="symbols">
  <t>The number of connected units on the average vehicle continues to grow, with mainstream cars now containing up to 100 million lines of code. <xref target="USATODAY"/></t>
  <t>The expanded use of software over-the-air strategies creates new attack surfaces for malicious parties. <xref target="CR-OTA"/></t>
  <t>Legacy update strategies, such as SSL/TLS or GPG/RSA, are not feasible for use on vehicle ECUs because they force manufacturers to chose between enhanced security and customizability.</t>
  <t>Conventional strategies are also complicated by the differing resources of the ECUs, which can vary greatly in memory, storage space, and Internet connectivity.</t>
  <t>The design of Uptane makes it possible to offer improved design flexibility without sacrificing security.</t>
  <t>This added design flexibility, however, could be a liability if the framework is implemented incorrectly.</t>
  <t>Standardization of crucial steps in the design, implementation, and use of Uptane can assure that customizability does not impact security or functionality.</t>
</list></t>

</section>
<section anchor="scope-of-standard-coverage" title="Scope of Standard coverage">

<t>This document sets guidelines for implementing Uptane in most systems capable of updating software on connected units in ground vehicles, including passenger vehicles, light-duty trucks, heavy-duty trucks, and motorcycles. Uptane could potentially also be applied to other ground vehicles, such as automated shuttles, recreational vehicles, and military ground vehicles. Uptane could even be applied to domains such as IoT devices, medical devices, and autonomous aerial vehicles. In this section, we define the scope of that applicability by providing sample use cases and possible exceptions, aspects of software update security that are not applicable to Uptane, and the design requirements governing the preparation of these standards.</t>

<section anchor="assumptions" title="Assumptions">

<t>We assume the following system preconditions for Uptane:</t>

<t><list style="symbols">
  <t>Vehicles have the ability to establish connectivity to required backend services. For example, this could be done through cellular, Wi-Fi, or hard-wired mechanisms.</t>
  <t>ECUs are either directly connected to the communication channel, or are indirectly connected via some sort of network gateway.</t>
  <t>ECUs are programmable and provide sufficient performance to be updated.</t>
  <t>ECUs SHALL be able to perform public key cryptography operations and calculate hashes of images and metadata files.</t>
  <t>There are state-of-the-art secure servers in place, such as the Director and Image repository servers.</t>
</list></t>

<t>It is important that any bugs detected in Uptane implementations be patched promptly. Failure to do so could interfere with the effectiveness of Uptane’s operations.</t>

</section>
<section anchor="use-cases" title="Use cases">

<t>The following use cases provide a number of scenarios illustrating the manner in which software updates could be accomplished using Uptane.</t>

<section anchor="oems-initializing-uptane-at-the-factory-using-sota" title="OEMs initializing Uptane at the factory using SOTA">

<t>An OEM plans to install Uptane on new vehicles. This entails the following components: code to perform full and partial verification, the latest copy of the relevant metadata, the public keys, and an accurate attestation of the latest time. The OEM then either requires its tier-1 suppliers to provide these materials to the suppliers’ assembly lines or can choose to add the materials later at the OEM’s assembly lines. The OEM’s in-vehicle implementation is Uptane-conformant if:</t>

<t><list style="numbers">
  <t>all Primaries perform full verification;</t>
  <t>all Secondaries that are updated via OTA at least perform partial verification; and</t>
  <t>any ECUs that do not perform any type of verification cannot be updated via OTA.</t>
</list></t>

</section>
<section anchor="updating-one-ecu-with-a-complete-image" title="Updating one ECU with a complete image">

<t>A tier-1 supplier completes work on a revised image for an electronic brake control module. This module will control the brakes on all models of an SUV produced by the OEM mentioned above. Assuming supplier delegation is supported by the OEM for this ECU, each tier-1 supplier digitally signs the image, then delivers the signature, all of its metadata, including delegations, and associated images to the OEM. The OEM adds these metadata and images to its Image repository, along with information about any dependencies and conflicts between this image and those for other ECUs used in the OEM’s vehicles. The OEM also updates the inventory database, so that the Director repository can instruct the ECU on how to install these updated images.</t>

</section>
<section anchor="updating-individual-ecus-on-demand" title="Updating individual ECUs on demand">

<t>An OEM has issued a recall to address a problem with a keyless entry device that has been locking people out of their cars. The OEM prepares an updated flash image in the manner described above. The OEM then ships USB flash drives to vehicle owners and dealerships that allow those parties to update the firmware of their vehicles.</t>

</section>
<section anchor="update-one-ecu-with-multiple-deltas" title="Update one ECU with multiple deltas">

<t>The OEM wants to use delta updates to save over-the-air bytes. The delta images contain only the code and/or data that has changed from the previous image version. To do so, the OEM will first modify the Director repository, using the vehicle version manifest and dependency resolution to determine the differences between the previous and latest images. The OEM will then add the following to the custom Targets metadata used by the Director repository: (1) the algorithm used to apply a delta image, and (2) the Targets metadata about the delta image. The OEM will also check whether the delta images match the Targets metadata from the Director repository.</t>

</section>
</section>
</section>
<section anchor="exceptions" title="Exceptions">

<t>There are a number of factors that could impede the completion of the above scenarios:</t>

<t><list style="symbols">
  <t>ECUs can be lacking the necessary resources to function as designated. These insufficient resources could include limited CPU or RAM inadequate for performance of public key cryptography; a lack of sufficient storage to undo installation of bad software; or a location on a low-speed network (e.g., LIN).</t>
  <t>ECUs can reside on different network segments, and cannot directly reach each other, requiring a gateway to facilitate communication.</t>
  <t>A user can replace OEM-installed ECUs with aftermarket ECUs.</t>
  <t>A vehicle can download only a limited amount of data via a cellular channel (e.g. due to limits on a data plan).</t>
  <t>A system can lack sufficient power to download or install software updates.</t>
  <t>Vehicles can be offline for extended periods of time, thus missing required updates (e.g., key rotations).</t>
  <t>OEMs can be unwilling to implement costly security or hardware requirements.</t>
</list></t>

</section>
<section anchor="out-of-scope" title="Out of scope">

<t>The following topics will not be addressed in this document, as they represent threats outside the scope of Uptane:</t>

<t><list style="symbols">
  <t>Physical attacks, such as manual tampering with ECUs outside the vehicle.</t>
  <t>Compromise of the packaged software, such as malware embedded in a trusted package.</t>
  <t>Compromise of the supply chain (e.g., build system, version control system, packaging process). A number of strategies (e.g., git signing, TPMs, in-toto <xref target="IN-TOTO"/>)  already exist to address this problem. Therefore, there is no need to duplicate those techniques here.</t>
  <t>Problems associated with OBD or UDS programming of ECUs, such as authentication of communications between ECUs.</t>
  <t>Malicious mirrors of package repositories, which could substitute original packages with malicious packages with matching version numbers <xref target="MERCURY"/>.</t>
</list></t>

</section>
<section anchor="design-requirements" title="Design requirements">

<t>The design requirements for this document are governed by the following principal parameters:</t>

<t><list style="symbols">
  <t>to clearly mandate the design and implementation steps that are security critical and will be followed as is, while offering flexibility in the implementation of non-critical steps. In this manner, users can adapt to support different use models and deployment scenarios.</t>
  <t>to ensure that, if Uptane is implemented, the security practices mandated or suggested in this document do not interfere with the functionality of ECUs, vehicles, or the systems that maintain them.</t>
  <t>to delineate guidelines to ensure that, when any part of the SOTA mechanism of a vehicle is attacked, an attacker has to compromise two or more modules to breach the SOTA mechanism.</t>
</list></t>

</section>
</section>
<section anchor="threat-model-and-attack-strategies" title="Threat model and attack strategies">

<t>The overarching goal of Uptane is to provide a system that is resilient in the face of various types of compromise. In this section, we describe the goals an attacker could have (<xref target="attacker_goals"/>) and the capabilities they could have or could develop (<xref target="capabilities"/>). We then describe and classify types of attacks on the system according to the attacker’s goals (<xref target="threats"/>).</t>

<section anchor="attacker_goals" title="Attacker goals">

<t>We assume that attackers could want to achieve one or more of the following goals, in increasing order of severity:</t>

<t><list style="symbols">
  <t>Read the contents of updates to discover confidential information, reverse-engineer firmware, or compare two firmware images to identify security fixes and hence determine the fixed security vulnerability.</t>
  <t>Deny installation of updates to prevent vehicles from fixing software problems.</t>
  <t>Cause one or more ECUs in the vehicle to fail, denying use of the vehicle or of certain functions.</t>
  <t>Control ECUs within the vehicle, and possibly the vehicle itself.</t>
</list></t>

</section>
<section anchor="capabilities" title="Attacker capabilities">

<t>Uptane is designed with resilience to compromise in mind. We assume that attackers could develop one or more of the following capabilities:</t>

<t><list style="symbols">
  <t>Intercept and modify network traffic (i.e., perform man-in-the-middle attacks). This capability could be developed in two domains:
  <list style="symbols">
      <t>Outside the vehicle, intercepting and modifying traffic between the vehicle and software repositories.</t>
      <t>Inside the vehicle, intercepting and modifying traffic on one or more vehicle buses (e.g., via an OBD port or by using a compromised ECU as a vector).</t>
    </list></t>
  <t>Compromise and control either a Director repository or Image repository server, and any keys stored on that repository, but not both the Director and Image repositories.</t>
  <t>Compromise either a Primary ECU or a Secondary ECU, but not both in the same vehicle.</t>
</list></t>

</section>
<section anchor="threats" title="Description of threats">

<t>Uptane’s threat model includes the following types of attacks, organized according to the attacker goals listed in <xref target="attacker_goals"/>.</t>

<section anchor="read_updates" title="Read updates">

<t><list style="symbols">
  <t><spanx style="emph">Eavesdrop attack:</spanx> Read sensitive or confidential information from an update intended to be encrypted for a specific ECU. (Note: Not all implementations will have a need to protect information in this way.)</t>
</list></t>

</section>
<section anchor="deny_updates" title="Deny installation of updates">

<t>An attacker seeking to deny the installation of updates could attempt one or more of the following strategies:</t>

<t><list style="symbols">
  <t><spanx style="emph">Drop-request attack:</spanx> Block network traffic outside or inside the vehicle.</t>
  <t><spanx style="emph">Slow retrieval attack:</spanx> Slow down network traffic, in the extreme case sending barely enough packets to avoid a timeout. Similar to a drop-request attack, except that both the sender and receiver of the traffic still think network traffic is unimpeded.</t>
  <t><spanx style="emph">Freeze attack:</spanx> Continue to send a properly signed, but old, update bundle to the ECUs, even if newer updates exist.</t>
  <t><spanx style="emph">Partial bundle installation attack:</spanx> Install a valid (signed) update bundle, and then block selected updates within the bundle.</t>
  <t><spanx style="emph">Denial of service attack</spanx> against the Uptane repositories or infrastructure.</t>
</list></t>

</section>
<section anchor="change_functionality" title="Interfere with ECU functionality">

<t>Attackers seeking to interfere with the functionality of vehicle ECUs in order to cause an operational failure or unexpected behavior could do so in one of the following ways:</t>

<t><list style="symbols">
  <t><spanx style="emph">Rollback attack:</spanx> Cause an ECU to install a previously valid software revision that is older than the currently installed version.</t>
  <t><spanx style="emph">Endless data attack:</spanx> Send a large amount of data to an ECU until it runs out of storage, possibly causing the ECU to fail to operate.</t>
  <t><spanx style="emph">Mix-and-match attack:</spanx> Install a malicious software bundle in which some of the updates do not interoperate properly. This could be accomplished even if all of the individual images being installed are valid, as long as valid versions exist that are mutually incompatible.</t>
</list></t>

</section>
<section anchor="control_ecu" title="Control an ECU or vehicle">

<t>Full control of a vehicle, or one or more ECUs within a vehicle, is the most severe threat.</t>

<t><list style="symbols">
  <t><spanx style="emph">Arbitrary software attack:</spanx> Cause an ECU to install and run arbitrary code of the attacker’s choice.</t>
</list></t>

</section>
</section>
</section>
<section anchor="design" title="Detailed design of Uptane">

<t>Uptane does not specify implementation details. Instead, this Standard describes the components necessary for a conformant implementation and leaves it up to individual implementers to make their own technology choices within those requirements.</t>

<t>At a high level, Uptane requires:</t>

<t><list style="symbols">
  <t>Two software repositories:
  <list style="symbols">
      <t>An Image repository containing binary images to install and signed metadata about those images.</t>
      <t>A Director repository connected to an inventory database that can sign metadata on demand for images in the Image repository.</t>
    </list></t>
  <t>Repository tools for generating Uptane-specific metadata about images.</t>
  <t>A public key infrastructure supporting the required metadata production and signing roles on each repository:
  <list style="symbols">
      <t>Root - The certificate authority for the Uptane ecosystem. Distributes public keys for verifying all the other roles’ metadata.</t>
      <t>Timestamp - Indicates whether there are new metadata or images.</t>
      <t>Snapshot - Indicates images released by the repository at a point in time via signing metadata about Targets metadata.</t>
      <t>Targets - Indicates metadata about images, such as hashes and file sizes.</t>
    </list></t>
  <t>A secure way for ECUs to know the time.</t>
  <t>An ECU capable of downloading images and associated metadata from the Uptane servers.</t>
  <t>An in-vehicle client on a Primary ECU capable of verifying the signatures on all update metadata and downloading updates on behalf of its associated Secondary ECUs. The Primary ECU can be the same ECU that communicates with the server.</t>
  <t>A client or library on each Secondary ECU capable of performing either full or partial verification of metadata.</t>
</list></t>

<section anchor="roles" title="Roles on repositories">

<t>A repository contains images and metadata. Each role has a particular type of metadata associated with it, as described in <xref target="meta_structures"/>.</t>

<section anchor="root_role" title="The Root role">

<t>A repository’s Root role SHALL be responsible for a Certificate Authority as defined in <xref target="RFC3647"/>.
A repository’s Root role SHALL produce and sign Root metadata as described in <xref target="root_meta"/>.
A repository’s Root role SHALL sign the public keys used to verify the metadata produced by the Timestamp, Snapshot, and Targets roles.
A repository’s Root role SHALL revoke keys for the other roles if they are compromised.</t>

</section>
<section anchor="targets_role" title="The Targets role">

<t>A repository’s Targets role SHALL produce and sign metadata about images and delegations as described in <xref target="targets_meta"/>.</t>

<section anchor="targets_role_delegations" title="Delegations">

<t>The Targets role on the Image repository can delegate the responsibility of signing metadata to other, custom-defined roles referred to as delegated targets. If it does, it SHALL do so as specified in <xref target="delegations_meta"/>.</t>

<t>As responsibility for signing images or a subset of images could be delegated to more than one role, it is possible that two different roles will be trusted to sign a particular image. For this reason, delegations SHALL be prioritized.</t>

<t>A particular delegation for a subset of images could be designated as <spanx style="strong">terminating</spanx>. For terminating delegations, the client SHALL NOT search any further if it does not find validly signed metadata about those images. Delegations SHOULD NOT be terminating by default; terminating delegations SHOULD only be used when there is a compelling technical reason to do so.</t>

<t>A delegation for a subset of images could be a multi-role delegation <xref target="TAP-3"/>. A multi-role delegation indicates that multiple roles are needed to sign a particular image and each of the delegatee roles SHALL sign the same metadata.</t>

<t>Delegations only apply to the Image repository. The Targets role on the Director repository SHALL NOT delegate metadata signing responsibility.</t>

</section>
</section>
<section anchor="snapshot_role" title="The Snapshot role">

<t>A repository’s Snapshot role SHALL produce and sign metadata about all Targets metadata the repository releases, including the current version number of the top-level Targets metadata, and the version numbers of all delegated Targets metadata, as described in <xref target="snapshot_meta"/>.</t>

</section>
<section anchor="timestamp_role" title="The Timestamp role">

<t>A repository’s Timestamp role SHALL produce and sign metadata indicating whether there are new metadata or images on the repository. It SHALL do so by signing the metadata about the Snapshot metadata file.</t>

</section>
</section>
<section anchor="meta_structures" title="Metadata structures">

<t>Uptane’s security guarantees all rely on properly created metadata that follows a designated structure. The Uptane Standard <spanx style="strong">does not</spanx> mandate any particular format or encoding for the metadata as a whole. ASN.1 (with any encoding scheme like BER, DER, XER, etc.), JSON, XML, or any other encoding format that is capable of providing the required structure can be used.</t>

<t>However, string comparison is required as part of metadata verification. To ensure an accurate basis for comparing strings, all strings SHALL be encoded in the Unicode Format for Network Interchange as defined in <xref target="RFC5198"/>, including normalization into Unicode Normalization Form C (<xref target="NFC"/>).</t>

<t>The <spanx style="emph">Deployment Best Practices</spanx> (<xref target="DEPLOY"/>), Joint Development Foundation Projects, LLC, Uptane Series provides some examples of metadata structures in ASN.1 and JSON that conform to the Standard.</t>

<section anchor="common_metadata" title="Common metadata structures">

<t>Every public key SHALL be represented using a public key identifier.  A public key identifier is EITHER all of the following:</t>

<t><list style="symbols">
  <t>The value of the public key itself (which could be, for example, formatted as a PEM string)</t>
  <t>The public key cryptographic algorithm used by the key (such as RSA or ECDSA)</t>
  <t>The particular scheme used to verify the signature (such as <spanx style="verb">rsassa-pss-sha256</spanx> or <spanx style="verb">ecdsa-sha2-nistp256</spanx>)</t>
</list></t>

<t>OR a secure hash over at least the above components (such as the keyid mechanism in TUF).</t>

<t>All four Uptane roles (Root, Targets, Snapshot, and Timestamp) share a common structure. They SHALL contain the following two attributes:</t>

<t><list style="symbols">
  <t>A payload of metadata to be signed</t>
  <t>An attribute containing the signature(s) of the payload, where each entry specifies:
  <list style="symbols">
      <t>The public key identifier of the key being used to sign the payload</t>
      <t>A signature with this key over the payload</t>
    </list></t>
</list></t>

<t>The payload differs depending on the role. However, the payload for all roles shares a common structure. It SHALL contain the following four attributes:</t>

<t><list style="symbols">
  <t>An indicator of the type of role (Root, Targets, Snapshot, or Timestamp)</t>
  <t>An expiration date and time</t>
  <t>An integer version number, which SHOULD be incremented each time the metadata file is updated</t>
  <t>The role-specific metadata for the role indicated</t>
</list></t>

<t>The following sections describe the role-specific metadata. All roles SHALL follow the common structures described here.</t>

</section>
<section anchor="root_meta" title="Root metadata">

<t>A repository’s Root metadata distributes the public keys of the top-level Root, Targets, Snapshot, and Timestamp roles, as well as revocations of those keys. It SHALL contain two attributes:</t>

<t><list style="symbols">
  <t>A representation of the public keys for all four roles. Each key SHALL have a unique public key identifier.</t>
  <t>An attribute mapping each role to (1) its public key(s), and (2) the threshold of signatures required for that role.</t>
</list></t>

</section>
<section anchor="targets_meta" title="Targets metadata">

<t>The Targets metadata on a repository contains all of the information about images to be installed on ECUs. This includes filenames, hashes, and file sizes. It can also include other useful information, such as what types of hardware are compatible with a particular image.</t>

<t>Targets metadata can also contain metadata about delegations, allowing one Targets role to delegate its authority to another. This means that an individual Targets metadata file might contain only metadata about delegations, only metadata about images, or some combination of the two. The details of how ECUs traverse the delegation tree to find valid metadata about images is specified in <xref target="resolve_delegations"/>.</t>

<section anchor="targets_images_meta" title="Metadata about images">

<t>To be available to install on clients, all images on the repository SHALL have their metadata listed in a Targets role.  Each Targets role can provide a list of some images on the repository.  This list SHALL provide, at a minimum, the following information about each image:</t>

<t><list style="symbols">
  <t>The image filename</t>
  <t>The size of the image in bytes</t>
  <t>One or more hashes of the image file, along with the hashing function used</t>
</list></t>

<t>If there are no images included in the Targets metadata from the Director repository, then the metadata SHALL include a vehicle identifier in order to avoid a replay attack.</t>

<section anchor="custom-metadata-about-images" title="Custom metadata about images">

<t>In addition to what is required, Targets metadata files can contain extra metadata for images on the repository. This metadata can be customized for a particular use case. Examples of use cases for different types of custom metadata can be found in the <spanx style="emph">Deployment Best Practices</spanx> document (<xref target="DEPLOY"/>). However, there are a few important pieces of custom metadata that SHOULD be present in most implementations. In addition, there is one element in the custom metadata that SHALL be present in the Targets metadata from the Director.</t>

<t>Custom metadata can also contain a demarcated field or section that SHALL match whenever two pieces of metadata are checked against each other, such as when Targets metadata from the Director repository is checked against Targets metadata from the Image repository.</t>

<t>The information listed below SHOULD be provided for each image on both the Image repository and the Director repository. If a “SHALL match section” is to be implemented, that is where this information SHOULD be placed.</t>

<t><list style="symbols">
  <t>A release counter, to be incremented each time a new version of the image is released. This can be used to prevent rollback attacks even in cases where the Director repository is compromised.</t>
  <t>A hardware identifier, or list of hardware identifiers, representing models of ECUs with which the image is compatible. This can be used to ensure that an ECU cannot be ordered to install an incompatible image, even in cases where the Director repository is compromised.</t>
</list></t>

<t>The following information is CONDITIONALLY REQUIRED for each image on the Director repository IF that image is encrypted:</t>

<t><list style="symbols">
  <t>Information about filenames, hashes, and file size of the encrypted image.</t>
  <t>Information about the encryption method, and other relevant information–for example, a symmetric encryption key encrypted by the ECU’s asymmetric key could be included in the Director repository metadata.</t>
</list></t>

<t>The following information SHALL be provided from the Director repository for each image in the Targets metadata:</t>

<t><list style="symbols">
  <t>An ECU identifier (such as a serial number), specifying the ECU that SHOULD install the image.</t>
</list></t>

<t>The Director repository could provide a download URL for the image file. This may be useful, for example, when the image is on a public CDN and the Director wishes to provide a signed URL.</t>

</section>
</section>
<section anchor="delegations_meta" title="Metadata about delegations">

<t>A Targets metadata file on the Image repository (but not the Director repository) SHALL be able to delegate signing authority to other entities. For example, it could delegate signing authority for a particular ECU’s firmware to that ECU’s supplier. A metadata file can contain any number of delegations and SHALL keep the delegations in prioritized order.</t>

<t>Any metadata file with delegations SHALL provide the following information:</t>

<t><list style="symbols">
  <t>A list of public keys of all delegatees. Each key SHOULD have a unique public key identifier and a key type.</t>
  <t>A list of delegations, each of which contains:
  <list style="symbols">
      <t>A list of the filenames to which this role applies. This could be expressed using wildcards, or by enumerating a list, or a combination of the two.</t>
      <t>An optional list of the hardware identifiers to which this role applies.  If this is omitted, any hardware identifier will match.</t>
      <t>An indicator of whether or not this is a terminating delegation. (See <xref target="targets_role_delegations"/>.)</t>
      <t>A list of the roles to which this delegation applies. Each role needs to specify:
      <list style="symbols">
          <t>A name for the role (e.g., “supplier1-qa”)</t>
          <t>The key identifiers for each key this role uses</t>
          <t>A threshold of keys that SHALL sign for this role</t>
        </list></t>
    </list></t>
</list></t>

<t>Note that <spanx style="strong">any</spanx> Targets metadata file stored on the Image repository can contain delegations, and these delegations can be in chains of arbitrary length.</t>

</section>
</section>
<section anchor="snapshot_meta" title="Snapshot metadata">

<t>The Snapshot metadata lists version numbers and filenames of all Targets metadata files. It protects against mix-and-match attacks if a delegated supplier key is compromised.</t>

<t>For each Targets metadata file on the repository, the Snapshot metadata SHALL contain the following information:</t>

<t><list style="symbols">
  <t>The filename and version number of the Targets metadata file.</t>
</list></t>

<t>The Snapshot metadata could also list the Root metadata filename and version number for the purpose of backwards compatibility. Historically, this was a requirement in TUF, but it is no longer required and does not provide a significant security benefit.</t>

</section>
<section anchor="timestamp_meta" title="Timestamp metadata">

<t>The Timestamp metadata SHALL contain the following information:</t>

<t><list style="symbols">
  <t>The filename and version number of the latest Snapshot metadata on the repository.</t>
  <t>One or more hashes of the Snapshot metadata file, along with the hashing function used.</t>
</list></t>

</section>
<section anchor="repo_mapping_meta" title="Repository mapping metadata">

<t>As described in the introduction to <xref target="design"/>, Uptane requires a Director repository and an Image repository. However, it is possible to have an Uptane-conformant implementation that has more than two repositories.</t>

<t>Repository mapping metadata informs a Primary ECU about which repositories to trust for images or image paths. <xref target="TAP-4"/> describes how to make use of more complex repository mapping metadata in order to have more than the two required repositories.</t>

<t>Repository mapping metadata, or the equivalent informational content, SHALL be present on all Primary ECUs, and SHALL contain the following information:</t>

<t><list style="symbols">
  <t>A list of repository names and one or more URLs at which the named repository can be accessed. At a minimum, this SHALL include the Director and Image repositories.</t>
  <t>A list of mappings of image paths to repositories, each of which contains:
  <list style="symbols">
      <t>A list of image paths. Image paths could be expressed using wildcards, or by enumerating a list, or a combination of the two.</t>
      <t>A list of repositories that SHALL provide signed Targets metadata for images stored at those paths.</t>
    </list></t>
</list></t>

<t>For example, in the most basic Uptane case, the repository mapping metadata would contain:</t>

<t><list style="symbols">
  <t>The name and URL of the Director repository.</t>
  <t>The name and URL of the Image repository.</t>
  <t>A single mapping indicating that all images (<spanx style="verb">*</spanx>) SHALL be signed by both the Director and Image repository.</t>
</list></t>

<t>Note that the metadata need not be in the form of a metadata file. For example, in the basic case where there is only one Director and one Image repository, and all images need to have signed metadata from both repositories, it would be sufficient to have a configuration file with URLs for the two repositories and a client that always checks for metadata matches between them. In this case, no explicit mapping would be defined, because the mapping is defined as part of the Uptane client implementation.</t>

<t>The <spanx style="emph">Uptane Deployment Best Practices</spanx> document (<xref target="DEPLOY"/>) provides more guidance on how to implement repository mapping metadata for more complex use cases. It also discusses strategies for updating repository mapping metadata, if required.</t>

</section>
<section anchor="metadata_filename_rules" title="Rules for filenames in repositories and metadata">

<t>There is a difference between the filename in a metadata file or an ECU, and the filename on a repository. This difference exists in order to avoid race conditions, where metadata and images are read from, and written to, at the same time. For more details, the reader can read the TUF specification <xref target="TUF-spec"/> and PEP 458 <xref target="PEP-458"/>.</t>

<t>Unless stated otherwise, all files SHALL be written to repositories in accordance with the following two rules:</t>

<t><list style="numbers">
  <t>Metadata filenames SHALL be qualified with version numbers. If a metadata file A is specified as FILENAME.EXT in another metadata file B, then it SHALL be written as VERSION.FILENAME.EXT, where VERSION is A’s version number, as defined in <xref target="common_metadata"/>, with one exception: If the version number of the Timestamp metadata file is not be known in advance by a client, it could be read from, and written to, a repository using a filename without a version number qualification, i.e., FILENAME.EXT.</t>
  <t>If an image is specified in a Targets metadata file as FILENAME.EXT, it SHALL be written to the repository as HASH.FILENAME.EXT, where HASH is one of the hash digests of the file, as specified in <xref target="targets_images_meta"/>. The file SHALL be written to the repository using <spanx style="emph">n</spanx> different filenames, one for each hash digest listed in its corresponding Targets metadata.</t>
  <t>Filenames of images SHOULD be encoded to prevent a path traversal on the client system, either by using URL encoding or by limiting the allowed character set in the filename.</t>
</list></t>

<t>For example:</t>

<t><list style="symbols">
  <t>The version number of the Snapshot metadata file is 61, and its filename in the Timestamp metadata is <spanx style="emph">snapshot.json</spanx>. The filename on the repository will be <spanx style="emph">61.snapshot.json</spanx>.</t>
  <t>There is an image with the <spanx style="emph">filename acme_firmware.bin</spanx> specified in the Targets metadata, with a SHA3-256 of <spanx style="emph">aaaa</spanx> and a SHA-512/224 of <spanx style="emph">bbbb</spanx>. It will have two filenames on the repository: <spanx style="emph">aaaa.acme_firmware.bin</spanx> and <spanx style="emph">bbbb.acme_firmware.bin</spanx>.</t>
</list></t>

</section>
</section>
<section anchor="server-repository-implementation-requirements" title="Server / repository implementation requirements">

<t>An Uptane implementation SHALL make the following services available to vehicles:</t>

<t><list style="symbols">
  <t>Image repository</t>
  <t>Director repository</t>
</list></t>

<t>Additionally, an Uptane implementation requires ECUs to have a secure way to know the current time.</t>

<section anchor="image-repository" title="Image repository">

<t>The Image repository exists to allow an OEM and/or its suppliers to upload images and their associated metadata. It makes these images and their metadata available to vehicles. The Image repository is designed to be primarily controlled by human actors, and updated relatively infrequently.</t>

<t>The Image repository SHALL expose an interface permitting the download of metadata and images. This interface SHOULD be public.</t>

<t>The Image repository SHALL require authorization for writing metadata and images.</t>

<t>The Image repository SHALL provide a method for authorized users to upload images and their associated metadata. It SHALL check that a user writing metadata and images is authorized to do so for that specific image by checking the chain of delegations as described in <xref target="delegations_meta"/>.</t>

<t>The Image repository SHALL implement storage that permits authorized users to write an image file using a unique filename, and later read the same file using the same name. It could use any filesystem, key-value store, or database that fulfills this requirement.</t>

<t>The Image repository could require authentication for read access.</t>

</section>
<section anchor="director_repository" title="Director repository">

<t>The Director repository instructs ECUs as to which images will be installed by producing signed metadata on demand. Unlike the Image repository, it is mostly controlled by automated, online processes. It also consults a private inventory database containing information on vehicles, ECUs, and software revisions.</t>

<t>The Director repository SHALL expose an interface for Primaries to upload vehicle version manifests (<xref target="vehicle_version_manifest"/>) and download metadata. This interface SHOULD be public.</t>

<t>The Director could encrypt images for ECUs that require them, either by encrypting on-the-fly or by storing encrypted images on the repository.</t>

<t>The Director repository SHALL implement storage that permits an automated service to write generated metadata files. It could use any filesystem, key-value store, or database that fulfills this requirement.</t>

<section anchor="directing-installation-of-images-on-vehicles" title="Directing installation of images on vehicles">

<t>A Director repository SHALL conform to the following six-step process for directing the installation of software images on a vehicle.</t>

<t><list style="numbers">
  <t>The Director SHOULD first identify the vehicle. This could be done when the Director receives a vehicle version manifest sent by a Primary (as described in <xref target="construct_manifest_primary"/>), decodes the manifest, and determines the unique vehicle identifier. Additionally, the Director could utilize other mechanisms to uniquely identify a vehicle (e.g., 2-way TLS with unique client certificates).</t>
  <t>Using the vehicle identifier, the Director queries its inventory database (as described in <xref target="inventory_db"/>) for relevant information about each ECU in the vehicle.</t>
  <t>The Director SHALL check the manifest for accuracy compared to the information in the inventory database. If any of the required checks fail, the Director SHOULD drop the request. An implementer can make additional checks if desired. At a minimum, the Director SHOULD check the following:
  <list style="symbols">
      <t>Each ECU recorded in the inventory database is also represented in the manifest.</t>
      <t>The signature of the manifest matches the ECU key of the Primary that sent it.</t>
      <t>The signature of each Secondary’s contribution to the manifest matches the ECU key of that Secondary.</t>
    </list></t>
  <t>The Director SHOULD check that the nonce or counter in each ECU version report has not been used before to prevent a replay of the ECU version report. If the nonce or counter is reused the Director SHOULD drop the request.</t>
  <t>The Director extracts information about currently installed images from the vehicle version manifest. Using this information, it determines if the vehicle is already up-to-date, and if not, determines a set of images that could be installed. The exact process by which this determination takes place is out of scope for this Standard. However, the Director SHALL take into account <spanx style="emph">dependencies</spanx> and <spanx style="emph">conflicts</spanx> between images and SHOULD consult well-established techniques for dependency resolution.</t>
  <t>The Director could encrypt images for ECUs that require it.</t>
  <t>The Director generates new metadata representing the desired set of images to be installed on the vehicle, based on the dependency resolution in step 4. This includes Targets (<xref target="targets_meta"/>), Snapshot (<xref target="snapshot_meta"/>), and Timestamp (<xref target="timestamp_meta"/>) metadata. It then sends this metadata to the Primary as described in <xref target="download_meta_primary"/>.</t>
</list></t>

</section>
<section anchor="inventory_db" title="Inventory Database">

<t>The Director SHALL use a private inventory database to store information about ECUs and vehicles. An implementer could use any durable database for this purpose.</t>

<t>The inventory database SHALL record the following pieces of information:</t>

<t><list style="symbols">
  <t>Per vehicle:
  <list style="symbols">
      <t>A unique identifier (such as a VIN)</t>
    </list></t>
  <t>Per ECU:
  <list style="symbols">
      <t>A unique identifier (such as a serial number)</t>
      <t>The vehicle identifier the ECU is associated with</t>
      <t>An ECU key (symmetric or asymmetric; for asymmetric keys, only the public part SHOULD be stored)</t>
      <t>The ECU key identifier (as defined in <xref target="common_metadata"/>)</t>
      <t>Whether the ECU is a Primary or a Secondary</t>
    </list></t>
</list></t>

<t>The inventory database can record other information about ECUs and vehicles. It SHOULD record a hardware identifier for each ECU to protect against the possibility of directing the ECU to install incompatible firmware.</t>

</section>
</section>
</section>
<section anchor="in-vehicle-implementation-requirements" title="In-vehicle implementation requirements">

<t>An Uptane-conformant ECU SHALL be able to download and verify image metadata and image binaries before installing a new image and SHALL have a secure way of verifying the current time, or a sufficiently recent attestation of the time.</t>

<t>All ECUs SHALL monitor the download speed of image metadata and image binaries to detect and respond to a slow retrieval attack. If the download is slower than a pre-defined threshold, the ECU SHOULD send an alert to the Director repository, for example as part of the next vehicle version manifest.</t>

<t>Each ECU receiving over-the-air updates in a vehicle is either a Primary or a Secondary ECU. A Primary ECU collects and delivers to the Director vehicle manifests (<xref target="vehicle_version_manifest"/>) that contain information about which images have been installed on ECUs in the vehicle. It also verifies the time, and downloads and verifies the latest metadata and images for itself and for its Secondaries. A Secondary ECU verifies the time, and downloads and verifies the latest metadata and images for itself from its associated Primary ECU. It also sends signed information about its installed images to its associated Primary.</t>

<t>All ECUs SHALL verify image metadata as specified in <xref target="metadata_verification"/> before installing an image or making it available to other ECUs. A Primary ECU SHALL perform full verification (<xref target="full_verification"/>). A Secondary ECU SHOULD perform full verification if possible. If a Secondary cannot perform full verification, it SHALL, at the very least, perform partial verification. In addition, it can also perform some steps from the full verification process. See the <spanx style="emph">Uptane Deployment Best Practices</spanx> document (<xref target="DEPLOY"/>) for a discussion of how to choose between partial and full verification.</t>

<t>ECUs SHALL have a secure source of time. An OEM/Uptane implementer can use any external source of time that is demonstrably secure.</t>

<section anchor="build-time-prerequisite-requirements-for-ecus" title="Build-time prerequisite requirements for ECUs">

<t>For an ECU to be capable of receiving Uptane-secured updates, it SHALL have the following data provisioned at the time it is manufactured or installed in the vehicle:</t>

<t><list style="numbers">
  <t>A sufficiently recent copy of required Uptane metadata at the time of manufacture or install. This is necessary for the ECU to authenticate that the remote repository is legitimate when it first downloads metadata in the field. See <spanx style="emph">Uptane Deployment Best Practices</spanx> (<xref target="DEPLOY"/>) for more information.
  <list style="symbols">
      <t>Partial verification Secondary ECUs SHALL have the Root and Targets metadata from the Director repository (to reduce the scope of rollback and replay attacks). These ECUs can also have metadata from other roles or the Image repository if they will be used by the Secondary.</t>
      <t>Full verification ECUs SHALL have a complete set of metadata (Root, Targets, Snapshot, and Timestamp) from both repositories (to prevent rollback and replay attacks), as well as the repository mapping metadata (<xref target="repo_mapping_meta"/>). Delegations are not required.</t>
    </list></t>
  <t>The current time, or a secure attestation of a sufficiently recent time.</t>
  <t>An <spanx style="strong">ECU signing key</spanx>. This is a private key, unique to the ECU, used to sign ECU version reports and decrypt images. An ECU key can be either a symmetric key or an asymmetric key. If it is an asymmetric key, there SHOULD be separate keys for encryption and signing. For the purposes of this Standard, the set of private keys that an ECU uses is referred to as the ECU key (singular), even if it is actually multiple keys used for different purposes. Note that while signing keys are required to be unique to the ECU to avoid replay attacks, the secret keys used to decrypt images need not be unique.</t>
</list></t>

</section>
<section anchor="what-the-primary-does" title="What the Primary does">

<t>A Primary downloads, verifies, and distributes the latest time, metadata, and images. To do so, it SHALL perform the following seven steps:</t>

<t><list style="numbers">
  <t>Construct and send vehicle version manifest (<xref target="construct_manifest_primary"/>)</t>
  <t>Download and check current time (<xref target="check_time_primary"/>)</t>
  <t>Download and verify metadata (<xref target="download_meta_primary"/>)</t>
  <t>Download and verify images (<xref target="download_images_primary"/>)</t>
  <t>Send latest time to Secondaries (<xref target="send_time_primary"/>)</t>
  <t>Send metadata to Secondaries (<xref target="send_metadata_primary"/>)</t>
  <t>Send images to Secondaries (<xref target="send_images_primary"/>)</t>
</list></t>

<t>Note that the subsequent sections concerning requirements for a Primary do not prohibit implementing Primary capabilities on an ECU that does not communicate directly with the Uptane repositories. This allows for implementations to have multiple ECUs within the vehicle performing functions equivalent to a Primary.
If multiple such Primaries are included within a vehicle, each Primary SHOULD have a designated set of Secondaries and each Secondary SHALL have at least one Primary responsible for providing its updates</t>

<section anchor="construct_manifest_primary" title="Construct and send vehicle version manifest">

<t>The Primary SHALL build a <spanx style="emph">vehicle version manifest</spanx> as described in <xref target="vehicle_version_manifest"/>.</t>

<t>Once the complete manifest is built, the Primary can send the manifest to the Director repository. However, it is not strictly required that the Primary send the manifest until step three. If permitted by the implementation, a Primary could send only a diff of the manifest to save bandwidth. If an implementation permits diffs, the Director SHOULD have a way to request a full manifest.</t>

<t>Secondaries can send their version reports at any time so that they are already stored on the Primary when it wishes to check for updates. Alternatively, the Primary can request a version report from each Secondary at the time of the update check.</t>

<section anchor="vehicle_version_manifest" title="Vehicle version manifest">

<t>The vehicle version manifest is a metadata structure that SHALL contain the following information:</t>

<t><list style="symbols">
  <t>An attribute containing the signature(s) of the payload, each specified by:
  <list style="symbols">
      <t>The public key identifier of the key being used to sign the payload</t>
      <t>The signing method (i.e., ed25519, rsassa-pss, etc.)</t>
      <t>A hash of the payload to be signed</t>
      <t>The hashing function used (i.e., SHA3-256, SHA-512/224, etc.)</t>
      <t>The signature of the hash</t>
    </list></t>
  <t>A payload representing the installed versions of each software image on the vehicle. This payload SHALL contain:
  <list style="symbols">
      <t>The vehicle’s unique identifier (e.g., the VIN)</t>
      <t>The Primary ECU’s unique identifier (e.g., the serial number)</t>
      <t>A list of ECU version reports as specified in <xref target="version_report"/></t>
    </list></t>
</list></t>

<t>Note that one of the ECU version reports SHOULD be the version report for the Primary itself.</t>

</section>
<section anchor="version_report" title="ECU version report">

<t>An ECU version report is a metadata structure that SHALL contain the following information:</t>

<t><list style="symbols">
  <t>An attribute containing the signature(s) of the payload, each specified by:
  <list style="symbols">
      <t>The public key identifier of the key being used to sign the payload</t>
      <t>The signing method (i.e., ed25519, rsassa-pss, etc.)</t>
      <t>A hash of the payload to be signed</t>
      <t>The hashing function used (i.e., SHA3-256, SHA-512/224, etc.)</t>
      <t>The signature of the hash</t>
    </list></t>
  <t>A payload containing:
  <list style="symbols">
      <t>The ECU’s unique identifier (e.g., the serial number)</t>
      <t>The filename, length, and hashes of its currently installed image (i.e., the non-custom Targets metadata for this particular image)</t>
      <t>An indicator of any detected security attack</t>
      <t>The latest time the ECU can verify at the time this version report was generated</t>
      <t>A nonce or counter to prevent a replay of the ECU version report. This value SHALL change each update cycle.</t>
    </list></t>
</list></t>

</section>
</section>
<section anchor="check_time_primary" title="Download and check current time">

<t>The Primary SHALL load the current time from a secure source.</t>

</section>
<section anchor="download_meta_primary" title="Download and verify metadata">

<t>The Primary SHALL download metadata for all targets and perform a full verification on it as specified in <xref target="full_verification"/>.</t>

</section>
<section anchor="download_images_primary" title="Download and verify images">

<t>The Primary SHALL download and verify images for itself and for all of its associated Secondaries. Images SHALL be verified by checking that the hash of the image file matches the hash specified in the Director’s Targets metadata for that image.</t>

<t>There could be several different filenames that all refer to the same image binary, as described in <xref target="metadata_filename_rules"/>. If the Primary has received multiple hashes for a given image binary via the Targets role (see <xref target="targets_images_meta"/>) then it SHALL verify every hash for this image even though the image is identified by a single hash as part of its filename.</t>

</section>
<section anchor="send_time_primary" title="Send latest time to Secondaries">

<t>The Primary SHOULD send the time to each ECU.</t>

</section>
<section anchor="send_metadata_primary" title="Send metadata to Secondaries">

<t>The Primary SHALL send its latest downloaded metadata to all of its associated Secondaries. The metadata it sends to each Secondary SHALL include all of the metadata required for verification on that Secondary. For full verification Secondaries, this includes the metadata for all four roles from both repositories, plus any delegated Targets metadata files the Secondary will recurse through to find the proper delegation. For partial verification Secondaries, this could include fewer metadata files; at a minimum, it includes only the Targets metadata file from the Director repository.</t>

<t>The Primary SHOULD determine the minimal set of metadata files to send to each Secondary by performing delegation resolution as described in <xref target="full_verification"/>.</t>

<t>Each Secondary SHALL store the latest copy of all metadata required for its own verification.</t>

</section>
<section anchor="send_images_primary" title="Send images to Secondaries">

<t>The Primary SHALL send the latest image to each of its associated Secondaries that have sufficient storage to receive it.</t>

<t>For Secondaries without sufficient storage to store a copy of the image, the Primary SHOULD wait for a request from the Secondary to stream the new image file to it. The Secondary will send the request once it has verified the metadata sent in the previous step.</t>

</section>
</section>
<section anchor="installing-images-on-primary-or-secondary-ecus" title="Installing images on Primary or Secondary ECUs">

<t>An ECU SHALL perform the following steps when attempting to install a new image:</t>

<t><list style="numbers">
  <t>Verify latest attested time. This is optional if the ECU does not have the capacity to verify a time message (<xref target="verify_time"/>)</t>
  <t>Verify metadata (<xref target="verify_metadata"/>)</t>
  <t>Download latest image (<xref target="download_image"/>)</t>
  <t>Verify image (<xref target="verify_image"/>)</t>
  <t>Install image (<xref target="install_image"/>)</t>
  <t>Create and send version report (<xref target="create_version_report"/>)</t>
</list></t>

<section anchor="verify_time" title="Load and verify the latest attested time">

<t>IF the ECU has the capability to verify a time message, the ECU SHOULD load and verify the current time, or the most recent securely attested time.</t>

</section>
<section anchor="verify_metadata" title="Verify metadata">

<t>The ECU SHALL verify the latest downloaded metadata (<xref target="metadata_verification"/>) using either full or partial verification. If the metadata verification fails for any reason, the ECU SHALL jump to the final step (<xref target="create_version_report"/>).</t>

</section>
<section anchor="download_image" title="Download latest image">

<t>If the ECU has limited secondary storage, i.e., insufficient buffer storage to temporarily store the latest image before installing it, it SHALL download the latest image from the Primary. (If the ECU has sufficient secondary storage, it will already have the latest image in its secondary storage as specified in <xref target="send_images_primary"/>, and SHALL skip to the next step.) The ECU SHOULD first create a backup of its previous working image and store it elsewhere (e.g., the Primary).</t>

<t>The filename used to identify the latest known image (i.e., the file to request from the Primary) SHALL be determined as follows:</t>

<t><list style="numbers">
  <t>Load the Targets metadata file from the Director repository.</t>
  <t>Find the Targets metadata associated with this ECU identifier.</t>
  <t>Construct the Image filename using the rule in <xref target="metadata_filename_rules"/>, or use the download URL specified in the Director metadata.</t>
  <t>If there is no Targets metadata about this image, abort the update cycle and report that there is no such image. Additionally, in the case of failure, the ECU SHALL retain its previous Targets metadata instead of using the new Targets metadata. Otherwise, download the image (up to the number of bytes specified in the Targets metadata) and verify it according to <xref target="verify_image"/>.</t>
</list></t>

<t>When the Primary responds to the download request, the ECU SHALL overwrite its current image with the downloaded image from the Primary.</t>

<t>If any part of this step fails, the ECU SHALL jump to the final step (<xref target="create_version_report"/>).</t>

</section>
<section anchor="verify_image" title="Verify image">

<t>The ECU SHALL verify that the latest image matches the latest metadata as follows:</t>

<t><list style="numbers">
  <t>Load the latest Targets metadata file from the Director.</t>
  <t>Find the Targets metadata associated with this ECU identifier.</t>
  <t>Check that the hardware identifier in the metadata matches the ECU’s hardware identifier.</t>
  <t>Check that the image filename is valid for this ECU. This could be a comparison against a wildcard path, which restricts the ECUs to which a delegation will apply.</t>
  <t>Check that the release counter of the image in the previous metadata, if it exists, is less than or equal to the release counter in the latest metadata.</t>
  <t>If the image is encrypted, decrypt the image with a decryption key to be chosen as follows:
  <list style="symbols">
      <t>If the ECU key is a symmetric key, the ECU SHALL use the ECU key for image decryption.</t>
      <t>If the ECU key is asymmetric, the ECU SHALL check the Targets metadata for an encrypted symmetric key. If such a key is found, the ECU SHALL decrypt the symmetric key using its ECU key, and use the decrypted symmetric key for image decryption.</t>
      <t>If the ECU key is asymmetric and there is no symmetric key in the Targets metadata, the ECU SHALL use its ECU key for image decryption.</t>
    </list></t>
  <t>Check that all hashes listed in the metadata match the corresponding hashes of the image.</t>
</list></t>

<t>If the ECU has enough secondary storage capacity to store the image, the checks SHOULD be performed on the image in secondary storage before it is installed.</t>

<t>When checking hashes, the ECU SHALL additionally check that the length of the image matches the length listed in the metadata.</t>

<t>NOTE: See <xref target="DEPLOY"/> for guidance on how to deal with Secondary ECU failures for ECUs that have limited secondary storage.</t>

<t>If any step fails, the ECU SHALL jump to the final step (<xref target="create_version_report"/>).</t>

</section>
<section anchor="install_image" title="Install image">

<t>The ECU SHALL attempt to install the update. This installation SHOULD occur at a time when all pre-conditions are met. These pre-conditions could include ensuring the vehicle is in a safe environment for an installation (e.g., the vehicle is parked when updating a specific ECU). Other pre-conditions could include ensuring the ECU has a backup of its current image and metadata in case the current installation fails.</t>

</section>
<section anchor="create_version_report" title="Create and send version report">

<t>The ECU SHALL create a version report as described in <xref target="version_report"/>, and send it to the Primary (or simply save it to disk, if the ECU is a Primary). The Primary SHOULD write the version reports it receives to disk and associate them with the Secondaries that sent them.</t>

</section>
</section>
<section anchor="metadata_verification" title="Metadata verification procedures">

<t>A Primary ECU SHALL perform full verification of metadata. A Secondary ECU SHOULD perform full verification of metadata. If a Secondary cannot perform full verification, it SHALL, at the very least, perform partial verification.</t>

<t>If a step in the following workflows does not succeed (e.g., the update is aborted because a new metadata file was not signed), an ECU SHOULD still be able to update again in the future. Errors raised during the update process SHOULD NOT leave ECUs in an unrecoverable state.</t>

<section anchor="partial_verification" title="Partial verification">

<t>In order to perform partial verification, an ECU SHALL perform the following steps:</t>

<t><list style="numbers">
  <t>Load and verify the current time or the most recent securely attested time.</t>
  <t>Download and check the Targets metadata file from the Director repository, following the procedure in <xref target="check_targets"/>.</t>
</list></t>

<t>Note that this verification procedure is the smallest set of Uptane checks permissible for an Uptane Secondary ECU. An ECU can additionally implement more metadata checks.</t>

<t>For example, an ECU could also fetch and verify Root metadata from the Director (following the procedure in <xref target="check_root"/>) before checking Targets metadata. Performing this additional check would provide the ECU with a secure way to receive and validate a rotation of the Director’s Targets key.</t>

<t>See <xref target="DEPLOY"/> for more discussion on this topic.</t>

</section>
<section anchor="full_verification" title="Full verification">

<t>Full verification of metadata means that the ECU checks that the Targets metadata about images from the Director repository matches the Targets metadata about the same images from the Image repository. This provides resilience to a key compromise in the system.</t>

<t>Full verification SHALL be performed by Primary ECUs and SHOULD be performed by Secondary ECUs. In the following instructions, whenever an ECU is directed to download metadata, it applies only to Primary ECUs.</t>

<t>Before starting full verification, the repository mapping metadata SHALL be consulted to determine where to download metadata from. This procedure assumes the basic Uptane case: there are only two repositories (Director and Image), and all image paths are required to be signed by both repositories. If a more complex repository layout is being used, refer to <xref target="DEPLOY"/> for guidance on how to determine where metadata could be downloaded from.</t>

<t>In order to perform full verification, an ECU SHALL perform the following steps:</t>

<t><list style="numbers">
  <t>Load and verify the current time or the most recent securely attested time.</t>
  <t>Download and check the Root metadata file from the Director repository, following the procedure in <xref target="check_root"/>.</t>
  <t>Download and check the Timestamp metadata file from the Director repository, following the procedure in <xref target="check_timestamp"/>.</t>
  <t>Check the previously downloaded Snapshot metadata file from the Directory repository (if available). If the hashes and version number of that file match the hashes and version number listed in the new Timestamp metadata, there are no new updates and the verification process SHALL be stopped and considered complete. Otherwise, download and check the Snapshot metadata file from the Director repository, following the procedure in <xref target="check_snapshot"/>.</t>
  <t>Download and check the Targets metadata file from the Director repository, following the procedure in <xref target="check_targets"/>.</t>
  <t>If the Targets metadata from the Directory repository indicates that there are no new targets that are not already currently installed, the verification process SHALL be stopped and considered complete. Otherwise, download and check the Root metadata file from the Image repository, following the procedure in <xref target="check_root"/>.</t>
  <t>Download and check the Timestamp metadata file from the Image repository, following the procedure in <xref target="check_timestamp"/>.</t>
  <t>Check the previously downloaded Snapshot metadata file from the Image repository (if available). If the hashes and version number of that file match the hashes and version number listed in the new Timestamp metadata, the ECU SHALL skip to the last step. Otherwise, download and check the Snapshot metadata file from the Image repository, following the procedure in <xref target="check_snapshot"/>.</t>
  <t>Download and check the top-level Targets metadata file from the Image repository, following the procedure in <xref target="check_targets"/>.</t>
  <t>Verify that Targets metadata from the Director and Image repositories match. A Primary ECU SHALL perform this check on metadata for all images listed in the Targets metadata file from the Director repository downloaded in step 6. A Secondary ECU can elect to perform this check only on the metadata for the image it will install. (That is, the image metadata from the Director that contains the ECU identifier of the current ECU.) To check that the metadata for an image matches, complete the following procedure:
  <list style="numbers">
      <t>Locate and download a Targets metadata file from the Image repository that contains an image with exactly the same filename listed in the Director metadata, following the procedure in <xref target="resolve_delegations"/>.</t>
      <t>Check that the Targets metadata from the Image repository matches the Targets metadata from the Director repository:
      <list style="numbers">
          <t>Check that the non-custom metadata (i.e., length and hashes) of the unencrypted or encrypted image are the same in both sets of metadata. Note: the Primary is responsible for validating encrypted images and associated metadata. The target ECU (Primary or Secondary) is responsible for validating the unencrypted image and associated metadata.</t>
          <t>Check that all SHALL match custom metadata (e.g., hardware identifier and release counter) are the same in both sets of metadata.</t>
          <t>Check that the release counter, if one is used, in the previous Targets metadata file is less than or equal to the release counter in this Targets metadata file.</t>
        </list></t>
    </list></t>
</list></t>

<t>If any step fails, the ECU SHALL return an error code indicating the failure. If a check for a specific type of security attack fails (i.e., rollback, freeze, arbitrary software, etc.), the ECU SHOULD return an error code that indicates the type of attack.</t>

</section>
<section anchor="check_root" title="How to check Root metadata">

<t>To properly check Root metadata, an ECU SHOULD:</t>

<t><list style="numbers">
  <t>Load the previous Root metadata file.</t>
  <t>Update to the latest Root metadata file.
  <list style="numbers">
      <t>Let N denote the version number of the latest Root metadata file (which at first could be the same as the previous Root metadata file).</t>
      <t>Try downloading a new version N+1 of the Root metadata file, up to some X number of bytes. The value for X is set by the implementer. For example, X could be tens of kilobytes. The filename used to download the Root metadata file is of the fixed form VERSION_NUMBER.FILENAME.EXT (e.g., 42.root.json). If this file is not available, the current Root metadata file is the latest; continue with step 3.</t>
      <t>Version N+1 of the Root metadata file SHALL have been signed by the following: (1) a threshold of unique keys specified in the latest Root metadata file (version N), and (2) a threshold of unique keys specified in the new Root metadata file being validated (version N+1). If version N+1 is not signed as required, discard it, abort the update cycle, and report the signature failure. On the next update cycle, begin at version N of the Root metadata file. (Checks for an arbitrary software attack.)</t>
      <t>The version number of the latest Root metadata file (version N) SHALL be less than or equal to the version number of the new Root metadata file (version N+1). Effectively, this means checking that the version number signed in the new Root metadata file is indeed N+1. If the version of the new Root metadata file is less than the latest metadata file, discard it, abort the update cycle, and report the rollback attack. On the next update cycle, begin at step 1 and version N of the Root metadata file. (Checks for a rollback attack.)</t>
      <t>Set the latest Root metadata file to the new Root metadata file.</t>
      <t>Repeat steps 2.1 to 2.6.</t>
    </list></t>
  <t>Check that the current (or latest securely attested) time is lower than the expiration timestamp in the latest Root metadata file. (Checks for a freeze attack.)</t>
  <t>If the Timestamp and/or Snapshot keys have been rotated, delete the previous Timestamp and Snapshot metadata files. (Checks for recovery from fast-forward attacks <xref target="MERCURY"/>.)</t>
</list></t>

</section>
<section anchor="check_timestamp" title="How to check Timestamp metadata">

<t>To properly check Timestamp metadata, an ECU SHOULD:</t>

<t><list style="numbers">
  <t>Download up to Y number of bytes. The value for Y is set by the implementer. For example, Y could be tens of kilobytes. The filename used to download the Timestamp metadata file is of the fixed form FILENAME.EXT (e.g., timestamp.json).</t>
  <t>Check that it has been signed by the threshold of unique keys specified in the latest Root metadata file. If the new Timestamp metadata file is not properly signed, discard it, abort the update cycle, and report the signature failure. (Checks for an arbitrary software attack.)</t>
  <t>Check that the version number of the previous Timestamp metadata file, if any, is less than or equal to the version number of this Timestamp metadata file. If the new Timestamp metadata file is older than the trusted Timestamp metadata file, discard it, abort the update cycle, and report the potential rollback attack. (Checks for a rollback attack.)</t>
  <t>Check that the current (or latest securely attested) time is lower than the expiration timestamp in this Timestamp metadata file. If the new Timestamp metadata file has expired, discard it, abort the update cycle, and report the potential freeze attack. (Checks for a freeze attack.)</t>
</list></t>

</section>
<section anchor="check_snapshot" title="How to check Snapshot metadata">

<t>To properly check Snapshot metadata, an ECU SHOULD:</t>

<t><list style="numbers">
  <t>Download up to the number of bytes specified in the Timestamp metadata file, constructing the metadata filename as defined in <xref target="metadata_filename_rules"/>.</t>
  <t>The hashes and version number of the new Snapshot metadata file SHALL match the hashes and version number listed in the Timestamp metadata. If the hashes and version number do not match, discard the new Snapshot metadata, abort the update cycle, and report the failure. (Checks for a mix-and-match attack.)</t>
  <t>Check that it has been signed by the threshold of unique keys specified in the latest Root metadata file. If the new Snapshot metadata file is not signed as required, discard it, abort the update cycle, and report the signature failure. (Checks for an arbitrary software attack.)</t>
  <t>Check that the version number of the previous Snapshot metadata file, if any, is less than or equal to the version number of this Snapshot metadata file. If this Snapshot metadata file is older than the previous Snapshot metadata file, discard it, abort the update cycle, and report the potential rollback attack. (Checks for a rollback attack.)</t>
  <t>Check that the version number listed by the previous Snapshot metadata file for each Targets metadata file is less than or equal to its version number in this Snapshot metadata file. If this condition is not met, discard the new Snapshot metadata file, abort the update cycle, and report the failure. (Checks for a rollback attack.)</t>
  <t>Check that each Targets metadata filename listed in the previous Snapshot metadata file is also listed in this Snapshot metadata file. If this condition is not met, discard the new Snapshot metadata file, abort the update cycle, and report the failure. (Checks for a rollback attack.)</t>
  <t>Check that the current (or latest securely attested) time is lower than the expiration timestamp in this Snapshot metadata file. If the new Snapshot metadata file is expired, discard it, abort the update cycle, and report the potential freeze attack. (Checks for a freeze attack.)</t>
</list></t>

</section>
<section anchor="check_targets" title="How to check Targets metadata">

<t>To properly check Targets metadata, an ECU SHOULD:</t>

<t><list style="numbers">
  <t>Download up to Z number of bytes, constructing the metadata filename as defined in <xref target="metadata_filename_rules"/>. The value for Z is set by the implementer. For example, Z could be tens of kilobytes.</t>
  <t>The version number of the new Targets metadata file SHALL match the version number listed in the latest Snapshot metadata. If the version number does not match, discard it, abort the update cycle, and report the failure. (Checks for a mix-and-match attack.) This step can be skipped when checking Targets metadata on a partial verification ECU, as these ECUs might not have Snapshot metadata.</t>
  <t>Check that the Targets metadata has been signed by the threshold of unique keys specified in the relevant metadata file. (Checks for an arbitrary software attack.):
  <list style="numbers">
      <t>If checking top-level Targets metadata, the threshold of keys is specified in the Root metadata.</t>
      <t>If checking delegated Targets metadata, the threshold of keys is specified in the Targets metadata file that delegated authority to this role.</t>
    </list></t>
  <t>Check that the version number of the previous Targets metadata file, if any, is less than or equal to the version number of this Targets metadata file. (Checks for a rollback attack.)</t>
  <t>Check that the current (or latest securely attested) time is lower than the expiration timestamp in this Targets metadata file. (Checks for a freeze attack.)</t>
  <t>If checking Targets metadata from the Director repository, verify that there are no delegations.</t>
  <t>If checking Targets metadata from the Director repository, check that no ECU identifier is represented more than once.</t>
  <t>If checking Targets metadata from the Director repository, and the ECU performing the verification is the Primary ECU, check that all listed ECU identifiers correspond to ECUs that are actually present in the vehicle.</t>
</list></t>

</section>
<section anchor="resolve_delegations" title="How to resolve delegations">

<t>To properly check Targets metadata for an image, an ECU SHALL locate the metadata file(s) for the role (or roles) that have the authority to sign the image. This metadata might be located in the top-level Targets metadata, but it could also be delegated to another role or to multiple roles. Therefore, all delegations SHALL be resolved using the following recursive procedure, beginning with the top-level Targets metadata file.</t>

<t><list style="numbers">
  <t>Download and check the current metadata file, following the procedure in <xref target="check_targets"/>. If the file cannot be loaded, or if any verification step fails, abort the delegation resolution, and indicate that image metadata cannot be found because of a missing or invalid role.</t>
  <t>If the current metadata file contains signed metadata about the image, end the delegation resolution and return the metadata to be checked.</t>
  <t>If the current metadata file was reached via a terminating delegation and does not contain signed metadata about the image, abort the delegation resolution for this image and return an error indicating that image metadata could not be found.</t>
  <t>Search the list of delegations, in listed order. For each delegation:
  <list style="numbers">
      <t>Check if the delegation applies to the image being processed. For the delegation to apply, it SHALL include the hardware identifier of the target, and the target name SHALL match one of the delegation’s image paths. If either of these tests fail, move on to the next delegation in the list.</t>
      <t>If the delegation is a multi-role delegation, follow the procedure described in <xref target="multirole_delegations"/>. If the multi-role delegation is terminating and no valid image metadata is found, abort the delegation resolution and return an error indicating that image metadata could not be found.</t>
      <t>If the delegation is a normal delegation, perform delegation resolution, starting at step 1. Note that this could recurse an arbitrary number of levels deep. If a delegation that applies to the image is found but no image metadata is found in the delegated roles or any of its sub-delegations, simply continue on with the next delegation in the list. The search is only completed or aborted if image metadata or a terminating delegation that applies to the image is found.</t>
    </list></t>
  <t>If the end of the list of delegations in the top-level metadata is reached without finding valid image metadata, return an error indicating that image metadata could not be found.</t>
</list></t>

</section>
<section anchor="multirole_delegations" title="Multi-role delegations">

<t>It is possible to delegate signing authority to multiple delegated roles as described in <xref target="TAP-3"/>. Each multi-role delegation effectively contains a list of ordinary delegations, plus a threshold of those roles that SHALL be in agreement about the non-custom metadata for the image. All multi-role delegations SHALL be resolved using the following procedure. Note that there could be sub-delegations inside multi-role delegations.</t>

<t><list style="numbers">
  <t>For each of the roles in the delegation, find and load the image metadata following the procedure in <xref target="resolve_delegations"/>.</t>
  <t>Inspect the non-custom part of the metadata loaded in step 1:
  <list style="numbers">
      <t>Locate all sets of roles that have agreeing (i.e., identical) non-custom metadata and “SHALL match” custom metadata. Discard any set of roles with a size smaller than the threshold of roles that SHALL be in agreement for this delegation.</t>
      <t>Check for a conflict. A conflict exists if there is more than one agreeing set of roles, yet each set has different metadata. If a conflict is found, choose and return the metadata from the set of roles that include the earliest role in the multi-delegation list.</t>
      <t>If there is no conflict, check if there is any single set of roles with matching non-custom metadata. If there is, choose and return the metadata from this set.</t>
      <t>If no agreeing set can be found that meets the agreement threshold, return an error indicating that image metadata could not be found.</t>
    </list></t>
</list></t>

</section>
</section>
</section>
</section>


  </middle>

  <back>

    <references title='Normative References'>





<reference  anchor="RFC2119" target='https://www.rfc-editor.org/info/rfc2119'>
<front>
<title>Key words for use in RFCs to Indicate Requirement Levels</title>
<author initials='S.' surname='Bradner' fullname='S. Bradner'><organization /></author>
<date year='1997' month='March' />
<abstract><t>In many standards track documents several words are used to signify the requirements in the specification.  These words are often capitalized. This document defines these words as they should be interpreted in IETF documents.  This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t></abstract>
</front>
<seriesInfo name='BCP' value='14'/>
<seriesInfo name='RFC' value='2119'/>
<seriesInfo name='DOI' value='10.17487/RFC2119'/>
</reference>



<reference  anchor="RFC3647" target='https://www.rfc-editor.org/info/rfc3647'>
<front>
<title>Internet X.509 Public Key Infrastructure Certificate Policy and Certification Practices Framework</title>
<author initials='S.' surname='Chokhani' fullname='S. Chokhani'><organization /></author>
<author initials='W.' surname='Ford' fullname='W. Ford'><organization /></author>
<author initials='R.' surname='Sabett' fullname='R. Sabett'><organization /></author>
<author initials='C.' surname='Merrill' fullname='C. Merrill'><organization /></author>
<author initials='S.' surname='Wu' fullname='S. Wu'><organization /></author>
<date year='2003' month='November' />
<abstract><t>This document presents a framework to assist the writers of certificate policies or certification practice statements for participants within public key infrastructures, such as certification authorities, policy authorities, and communities of interest that wish to rely on certificates.  In particular, the framework provides a comprehensive list of topics that potentially (at the writer's discretion) need to be covered in a certificate policy or a certification practice statement.  This document supersedes RFC 2527.</t></abstract>
</front>
<seriesInfo name='RFC' value='3647'/>
<seriesInfo name='DOI' value='10.17487/RFC3647'/>
</reference>



<reference  anchor="RFC5198" target='https://www.rfc-editor.org/info/rfc5198'>
<front>
<title>Unicode Format for Network Interchange</title>
<author initials='J.' surname='Klensin' fullname='J. Klensin'><organization /></author>
<author initials='M.' surname='Padlipsky' fullname='M. Padlipsky'><organization /></author>
<date year='2008' month='March' />
<abstract><t>The Internet today is in need of a standardized form for the transmission of internationalized &quot;text&quot; information, paralleling the specifications for the use of ASCII that date from the early days of the ARPANET.  This document specifies that format, using UTF-8 with normalization and specific line-ending sequences.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='5198'/>
<seriesInfo name='DOI' value='10.17487/RFC5198'/>
</reference>


<reference anchor="NFC" target="https://www.unicode.org/reports/tr15/">
  <front>
    <title>Unicode Standard Annex #15: Unicode Normalization Forms</title>
    <author initials="M." surname="Davis">
      <organization></organization>
    </author>
    <author initials="M." surname="Duerst">
      <organization></organization>
    </author>
    <date year="2018" month="October"/>
  </front>
</reference>
<reference anchor="TAP-3" target="https://github.com/theupdateframework/taps/blob/d0818e580c322815a473520f2e8cc5f5eb8df499/tap3.md">
  <front>
    <title>The Update Framework TAP 3 - Multi-role delegations</title>
    <author initials="T.K." surname="Kuppusamy">
      <organization></organization>
    </author>
    <author initials="S." surname="Awwad">
      <organization></organization>
    </author>
    <author initials="E." surname="Cordell">
      <organization></organization>
    </author>
    <author initials="V." surname="Diaz">
      <organization></organization>
    </author>
    <author initials="J." surname="Moshenko">
      <organization></organization>
    </author>
    <author initials="J." surname="Cappos">
      <organization></organization>
    </author>
    <date year="2018" month="January" day="18"/>
  </front>
</reference>
<reference anchor="TAP-4" target="https://github.com/theupdateframework/taps/blob/2cb67d913ec19424d1e354b38f862886fbfd4105/tap4.md">
  <front>
    <title>The Update Framework TAP 4 - Multiple repository consensus on entrusted targets</title>
    <author initials="T.K." surname="Kuppusamy">
      <organization></organization>
    </author>
    <author initials="S." surname="Awwad">
      <organization></organization>
    </author>
    <author initials="E." surname="Cordell">
      <organization></organization>
    </author>
    <author initials="V." surname="Diaz">
      <organization></organization>
    </author>
    <author initials="J." surname="Moshenko">
      <organization></organization>
    </author>
    <author initials="J." surname="Cappos">
      <organization></organization>
    </author>
    <date year="2017" month="December" day="15"/>
  </front>
</reference>
<reference anchor="TUF-spec" target="https://github.com/theupdateframework/specification/blob/2b4e18472fe25d5b57f36f6fa50104967c8faeaa/tuf-spec.md">
  <front>
    <title>The Update Framework Specification</title>
    <author initials="J." surname="Samuel">
      <organization></organization>
    </author>
    <author initials="N." surname="Mathewson">
      <organization></organization>
    </author>
    <author initials="G." surname="Condra">
      <organization></organization>
    </author>
    <author initials="V." surname="Diaz">
      <organization></organization>
    </author>
    <author initials="T.K." surname="Kuppusamy">
      <organization></organization>
    </author>
    <author initials="S." surname="Awwad">
      <organization></organization>
    </author>
    <author initials="S." surname="Tobias">
      <organization></organization>
    </author>
    <author initials="J." surname="Wright">
      <organization></organization>
    </author>
    <author initials="H." surname="Mehnert">
      <organization></organization>
    </author>
    <author initials="E." surname="Tryzelaar">
      <organization></organization>
    </author>
    <author initials="J." surname="Cappos">
      <organization></organization>
    </author>
    <author initials="R." surname="Dingledine">
      <organization></organization>
    </author>
    <date year="2018" month="September" day="19"/>
  </front>
</reference>


    </references>

    <references title='Informative References'>

<reference anchor="MERCURY" target="https://www.usenix.org/system/files/conference/atc17/atc17-kuppusamy.pdf">
  <front>
    <title>Mercury: Bandwidth-Effective Prevention of Rollback Attacks Against Community Repositories</title>
    <author initials="T.K." surname="Kuppusamy">
      <organization></organization>
    </author>
    <author initials="V." surname="Diaz">
      <organization></organization>
    </author>
    <author initials="J." surname="Cappos">
      <organization></organization>
    </author>
    <date year="2017" month="July" day="12"/>
  </front>
  <seriesInfo name="ISBN" value="978-1-931971-38-6"/>
</reference>
<reference anchor="UPTANEESCAR" target="https://ssl.engineering.nyu.edu/papers/kuppusamy_escar_16.pdf">
  <front>
    <title>Securing Software Updates for Automobiles</title>
    <author initials="T.K." surname="Kuppusamy">
      <organization></organization>
    </author>
    <author initials="A." surname="Brown">
      <organization></organization>
    </author>
    <author initials="S." surname="Awwad">
      <organization></organization>
    </author>
    <author initials="D." surname="McCoy">
      <organization></organization>
    </author>
    <author initials="R." surname="Bielawski">
      <organization></organization>
    </author>
    <author initials="C." surname="Mott">
      <organization></organization>
    </author>
    <author initials="S." surname="Lauzon">
      <organization></organization>
    </author>
    <author initials="A." surname="Weimerskirch">
      <organization></organization>
    </author>
    <author initials="J." surname="Cappos">
      <organization></organization>
    </author>
    <date year="2016" month="October" day="16"/>
  </front>
</reference>
<reference anchor="PEP-458" target="https://www.python.org/dev/peps/pep-0458/">
  <front>
    <title>Secure PyPI downloads with signed repository metadata</title>
    <author initials="T.K." surname="Kuppusamy">
      <organization></organization>
    </author>
    <author initials="V." surname="Diaz">
      <organization></organization>
    </author>
    <author initials="M." surname="Moore">
      <organization></organization>
    </author>
    <author initials="L." surname="Pühringer">
      <organization></organization>
    </author>
    <author initials="J." surname="Locke">
      <organization></organization>
    </author>
    <author initials="L.A." surname="DeLong">
      <organization></organization>
    </author>
    <author initials="J." surname="Cappos">
      <organization></organization>
    </author>
    <date year="2019" month="November" day="13"/>
  </front>
</reference>
<reference anchor="DEPLOY" target="https://uptane.github.io/deployment-considerations/index.html">
  <front>
    <title>Uptane Deployment Best Practices</title>
    <author initials="." surname="Members of the Uptane Community">
      <organization></organization>
    </author>
    <date year="n.d."/>
  </front>
</reference>
<reference anchor="USATODAY" target="https://www.usatoday.com/story/tech/columnist/2016/06/28/your-average-car-lot-more-code-driven-than-you-think/86437052/">
  <front>
    <title>Your average car is a lot more code-driven than you think</title>
    <author initials="B." surname="O'Donnell">
      <organization></organization>
    </author>
    <date year="2016" month="June" day="28"/>
  </front>
</reference>
<reference anchor="CR-OTA" target="https://www.consumerreports.org/automotive-technology/automakers-embrace-over-the-air-updates-can-we-trust-digital-car-repair/">
  <front>
    <title>Automakers Embrace Over-the-Air Updates, but Can We Trust Digital Car Repair?</title>
    <author initials="K." surname="Barry">
      <organization></organization>
    </author>
    <date year="2018" month="April" day="20"/>
  </front>
</reference>
<reference anchor="IN-TOTO" target="https://in-toto.io/">
  <front>
    <title>in-toto: A framework to secure the integrity of software supply chains</title>
    <author >
      <organization></organization>
    </author>
    <date year="2018" month="October" day="29"/>
  </front>
</reference>


    </references>



  </back>

<!-- ##markdown-source:
H4sIAJWM6WIAA+1923bbRrbgu74CK36IpENSlnyJ4zzMyLbcUbdvY8lJ55x1
lhskQAltEmADoGTGy382b/Njs69VuwoAJdvpPnPWmjzENgjUZdeufb+Mx+Od
tmgX+ePk3apNyzw5g/9naZ0l86pOnuVNcVEm8CQ5Xa4W+TIv27QtqnInnU7r
/Aq+enN+/OpkJ6tmZbqEUdY0yriRUcYZjbAzS9v8oqo3j5OinFc7O8WqfpyU
1bO8Lq5gwKu8Oa/XTXt09+6Pd4920jpPHyfnr5+93rmu6g8XdbVeyb8/5Bt4
lD1OTss2r8u8HT+r03m7s0Mzvk8XVQmr2OTNzqp4nPxHW81GSVPVbZ3PG/jb
Zol/+c+dnXTdXlb1450kGcOSmsfJy3w5zesmqeZJe5krNJ5Wy+W6LNoNvJgk
vMXen6r6Ii2L3wk4j5M/V0XZAvSu8kW1QqAlz6s1AAR/Td7U1d/zWQvLefHi
6cjBHUCRN8nu7KDCN+aT5M8AkKJMnqarVdXs0Sz5Mi0WHSA3//Oiqi4WOcGp
mcyqJb3cwKbz9nHyEPbW1tV5Pruk5zNYSotH8e7smB7U+QWt+tVv/Dvs6XHy
pK6qD4tNKZ9ksPHDw6O7hzs7ZVUv6cwQeneSv/CJJFk+T3bPfj5+8WKUvDz+
bZSc/fz63YtnoyRvZxNc/tvnT48OD3/kr/46eXD3x+TNX06TZpXP+Nd7D+//
wL++yls8+ORdWeDUhIuwrVVaF+UFbgz+aPijB4c/PuKP9OVXuL6FnAUAvl4m
T+GFV8+fPqbNtGl9gXC5bNtV8/jg4Pr6erLmbydwjAd1vgKEaQ7a+vDBAX/B
N+Q7ncHdkeOyzD8mdw4fPN4ye/MdDeIxDv9TrJskz9Krouk+XQMytvQY0AYm
B9A/Gh/epZ2eH79J7iVpCyd3lWR3Hx0+yh/AD/B4fK9/jxdFe7meImocAHav
VzjmvAZ0RjAftOmqOZguqumBDPbo7uze0dGjwwfp/R/uPTi6Oz/KH81mD+YP
8umjbH7/xx/xk3uTZWbBc07XBkdOnuvQstRx8nK9aItxXS1yQBRAVQJPMwyY
88lfJslf1qvVukmXm/C3s0lyfH2dZuHTkwlcyRoGX4TPfwFgFunv4cM/T5KX
VXOZlx+qzg984WLQ3z0cHz5y0L+v0D+aTR/+kP0o0L//bdCXwQ7v5bPDH+8f
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
vxHHR4K+LgEA

-->

</rfc>


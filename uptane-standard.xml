<?xml version="1.0" encoding="UTF-8"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc2629 version 1.2.9 -->

<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
]>

<?rfc toc="yes"?>
<?rfc sortrefs="yes"?>
<?rfc symrefs="yes"?>

<rfc ipr="noDerivativesTrust200902" docName="uptane-standard-design" category="info">

  <front>
    <title abbrev="UPTANE">Uptane Standard for Design and Implementation</title>

    <author initials="." surname="Members of the Uptane Alliance Community" fullname="Uptane Alliance Community">
      <organization>Uptane Alliance (c/o Prof. Justin Cappos)</organization>
      <address>
        <postal>
          <street>6 MetroTech</street>
          <city>Brooklyn</city>
          <region>NY</region>
          <code>11201</code>
          <country>USA</country>
        </postal>
        <email>uptane-standards@googlegroups.com</email>
      </address>
    </author>

    <date year="2020" month="July" day="08"/>

    <area>TODO</area>
    <workgroup>TODO</workgroup>
    <keyword>Internet-Draft</keyword>

    <abstract>


<t>This document describes a framework for securing ground vehicle software update systems.</t>



    </abstract>


  </front>

  <middle>


<section anchor="introduction" title="Introduction">

<t>Uptane is a secure software update framework for ground vehicles. This document describes procedures to enable programmers for OEMs and suppliers to securely design and implement this framework in a manner that better protects connected units on ground vehicles. Integrating Uptane as outlined in the sections that follow can reduce the ability of attackers to compromise critical systems. It also assures a faster and easier recovery process should a compromise occur.</t>

<t>These instructions specify the components necessary for a compliant implementation. Individual implementors can make their own technological choices within those requirements. This flexibility makes Uptane adaptable to the many customized update solutions used by manufacturers. If implementors wish to have compatible formats, they may use POUFs. POUFs contain a description of implementation choices as well as data binding formats. An implementor who adopts a POUF, as well as the Uptane Standard, will be able to interoperate with other implementations using that POUF.</t>

</section>
<section anchor="terminology" title="Terminology">

<section anchor="conformance-terminology" title="Conformance terminology">

<t>The keywords MUST, MUST NOT, REQUIRED, SHALL, SHALL NOT, SHOULD, SHOULD NOT, RECOMMENDED, MAY, and OPTIONAL in this document are to be interpreted as described in <xref target="RFC2119"/>.</t>

<t>In order to be considered “Uptane-compliant,” an implementation MUST follow all of these rules as specified in the document.</t>

</section>
<section anchor="terminology-1" title="Terminology">

<t><spanx style="emph">Bundle</spanx>: A set of images released by the repository that is meant to be installed by one or more target ECUs on a vehicle during the same update cycle.</t>

<t><spanx style="emph">Bus</spanx>: An internal communications network that interconnects components within a vehicle. A vehicle can have a number of buses that will vary in terms of power, speed and resources.</t>

<t><spanx style="emph">ECU Identifier</spanx>: An attribute used to identify a specific ECU (e.g., such as a unique serial number).</t>

<t><spanx style="emph">ECU Version Manifest</spanx>: Metadata which details the software version currently installed on the ECU.</t>

<t><spanx style="emph">Hardware Identifier</spanx>: An attribute used to identify a model of an ECU.</t>

<t><spanx style="emph">Image</spanx>: File containing software for an ECU to install. May contain a binary image to flash, installation instructions, and other necessary information for the ECU to properly apply the update. Each ECU typically holds only one image, although this may vary in some cases.</t>

<t><spanx style="emph">Metadata</spanx>:  Information describing the characteristics of data including, for example, structural
metadata describing data structures (e.g., data format, syntax, and semantics) and
descriptive metadata describing data contents (e.g., information security labels). As used in Uptane, metadata can be described as information associated with a role or an image that contains the characteristics or parameters thereof (e.g. cryptographic material parameters, file names and versions.)</t>

<t><spanx style="emph">Primary/Secondary ECUs</spanx>: Terms used to describe the control units within a ground vehicle. A primary ECU downloads and verifies update images and metadata for itself and for secondary ECUs, and distributes images and metadata to secondaries. Thus, it requires extra storage space and a means to download images and metadata.  Secondary ECUs receive their update images and metadata from the primary, and only need to verify and install their own metadata and images.</t>

<t><spanx style="emph">POUF</spanx>: A document that contains the protocol, operations, usage, and formats (POUF) of a specific Uptane implementation. The POUF contains decisions about SHOULDs and MAYs in an implementation, as well as descriptions of data binding formats. POUFs MAY be used to create compatible Uptane implementations.</t>

<t><spanx style="emph">Repository</spanx>: A server containing metadata about images. May also contain the images themselves. Other data may be stored on the repository to be accessed by ECUs during the update process.</t>

<t><spanx style="emph">Suppliers</spanx>: Independent companies to which auto manufacturers may outsource the production of ECUs. Tier-1 suppliers directly serve the manufacturers. Tier-2 suppliers are those that perform outsourced work for Tier-1 suppliers.</t>

<t><spanx style="emph">Vehicle Version Manifest</spanx>: A compilation of all ECU version manifests on a vehicle. It serves as a master list of all images currently running on all ECUs in the vehicle.</t>

</section>
<section anchor="uptane-role-terminology" title="Uptane Role terminology">

<t>These terms are defined in greater detail in <xref target="roles"/>.</t>

<t><spanx style="emph">Delegations</spanx>: A process by which the responsibility of signing metadata about images is assigned to another party.<vspace />
<spanx style="emph">Role</spanx>: A party (human or machine) responsible for signing a certain type of metadata. The role controls keys and is responsible for signing metadata entrusted to it with these keys. The roles mechanism of Uptane allows the system to distribute signing responsibilities so that the compromise of one key does not necessarily impact the security of the entire system.</t>

<t><list style="symbols">
  <t><spanx style="emph">Root Role</spanx>: Signs metadata that distributes and revokes public keys used to verify the Root, Timestamp, Snapshot, and Targets role metadata.</t>
  <t><spanx style="emph">Snapshot Role</spanx>: Signs metadata that indicates which images the repository has released at the same time.</t>
  <t><spanx style="emph">Targets Role</spanx>: Signs metadata used to verify the image, such as cryptographic hashes and file size.</t>
  <t><spanx style="emph">Timestamp Role</spanx>: Signs metadata that indicates if there are any new metadata or images on the repository.</t>
</list></t>

</section>
<section anchor="acronyms-and-abbreviations" title="Acronyms and abbreviations">

<t><spanx style="emph">CAN Bus</spanx>: Controller Area Network bus standard</t>

<t><spanx style="emph">CDN</spanx>: Content Delivery Network</t>

<t><spanx style="emph">ECUs</spanx>: Electronic Control Units, the computing units on a vehicle</t>

<t><spanx style="emph">LIN Bus</spanx>: Local Interconnect Bus</t>

<t><spanx style="emph">OBD</spanx>: On-board diagnostics</t>

<t><spanx style="emph">SOTA</spanx>: Software Updates Over-the-Air</t>

<t><spanx style="emph">UDS</spanx>: Unified Diagnostic Services</t>

<t><spanx style="emph">VIN</spanx>: Vehicle Identification Number</t>

</section>
</section>
<section anchor="rationale-for-and-scope-of-uptane-standards" title="Rationale for and scope of Uptane Standards">

<t>This Standards document clarifies the essential components and best practices for the secure design, implementation and deployment of Uptane by OEMs and suppliers. These practices contribute to compromise resilience, or the ability to minimize the extent of the threat posed by any given attack.</t>

<t>However, this specification is intended as an implementation guide, and not as a detailed technical argument about the security properties that Uptane provides.  Readers interested in such documentation should refer to published papers that cover this topic.  <xref target="UPTANEESCAR"/></t>

<section anchor="why-uptane-requires-a-standards-document" title="Why Uptane requires a standards document">

<t>A standards document that can guide the safe design, integration and deployment of Uptane in vehicles is needed at this time because:</t>

<t><list style="symbols">
  <t>The number of connected units on the average vehicle continues to grow, with mainstream cars now containing up to 100 million lines of code. <xref target="USATODAY"/></t>
  <t>The expanded use of software over-the-air strategies creates new attack surfaces for malicious parties. <xref target="CR-OTA"/></t>
  <t>Legacy update strategies, such as SSL/TLS or GPG/RSA, are not feasible for use on vehicle ECUs because they force manufacturers to chose between enhanced security and customizability.</t>
  <t>Conventional strategies are also complicated by the differing resources of the ECUs, which can vary greatly in memory, storage space, and Internet connectivity.</t>
  <t>The design of Uptane makes it possible to offer improved design flexibility, without sacrificing security.</t>
  <t>This added design flexibility, however, could be a liability if the framework is implemented incorrectly.</t>
  <t>Standardization of crucial steps in the design, implementation and use of Uptane can assure that customizability does not impact security or functionality.</t>
</list></t>

</section>
<section anchor="scope-of-standards-coverage" title="Scope of Standards coverage">

<t>This document sets guidelines for implementing Uptane in most systems capable of updating software on connected units in ground vehicles, including passenger vehicles, light-duty trucks, heavy-duty trucks, and motorcycles. Uptane could potentially also be applied to other ground vehicles, such as automated shuttles, recreational vehicles, and military ground vehicles. Uptane could even be applied to domains such as IoT devices, medical devices, and unmanned aerial vehicles. In this section, we define the scope of that applicability by providing sample use cases and possible exceptions, aspects of software update security that are not applicable to Uptane, and the design requirements governing the preparation of these standards.</t>

<section anchor="assumptions" title="Assumptions">

<t>We assume the following system preconditions for Uptane:</t>

<t><list style="symbols">
  <t>Vehicles have the ability to establish connectivity to required backend services. For example, this could be done through cellular, Wi-Fi, or hard-wired mechanisms.</t>
  <t>ECUs are either directly connected to the communication channel, or are indirectly connected via some sort of network gateway.</t>
  <t>ECUs are programmable and provide sufficient performance to be updated.</t>
  <t>ECUs must be able to perform a public key cryptography operation as well as some supporting operations.</t>
  <t>There are state-of-the-art secure servers in place, such as the Director and Image repository servers.</t>
</list></t>

<t>It is important that any bugs detected in Uptane implementations be patched promptly. Failure to do so could interfere with the effectiveness of Uptane’s operations.</t>

</section>
<section anchor="use-cases" title="Use cases">

<t>The following use cases provide a number of scenarios illustrating the manner in which software updates could be accomplished using Uptane.</t>

<section anchor="oems-initializing-uptane-at-the-factory-using-sota" title="OEMs initializing Uptane at the factory using SOTA">

<t>An OEM plans to install Uptane on new vehicles. This entails the following components: code to perform full and partial verification, the latest copy of the relevant metadata, the public keys, and an accurate attestation of the latest time. The OEM then either requires its tier-1 suppliers to provide these materials to the suppliers’ assembly lines or can choose to add the materials later at the OEM’s assembly lines. The OEM’s implementation is Uptane-compliant if:</t>

<t><list style="numbers">
  <t>all primaries perform full verification;</t>
  <t>all secondaries that are updated via OTA perform full or partial verification; and</t>
  <t>all other ECUs that do not perform verification cannot be updated via OTA.</t>
</list></t>

</section>
<section anchor="updating-one-ecu-with-a-complete-image" title="Updating one ECU with a complete image">

<t>A tier-1 supplier completes work on a revised image for an electronic brake control module. This module will control the brakes on all models of an SUV produced by the OEM mentioned above. Assuming supplier delegation is supported by the OEM for this ECU, each tier-1 supplier digitally signs the image, then delivers the signature and all of its metadata, including delegations, and associated images to the OEM. The OEM adds these metadata and images to its image repository, along with information about any dependencies and conflicts between this image and those for other ECUs used in the OEM’s vehicles. The OEM also updates the inventory database, so that the director repository can instruct the ECU on how to install these updated images.</t>

</section>
<section anchor="updating-individual-ecus-on-demand" title="Updating individual ECUs on demand">

<t>An OEM has issued a recall to address a problem with a keyless entry device that has been locking people out of their cars. The OEM prepares an updated flash image in the manner described above. The OEM then ships USB flash drives to vehicle owners and dealerships that allow those parties to update the firmware of their vehicles.</t>

</section>
<section anchor="update-one-ecu-with-multiple-deltas" title="Update one ECU with multiple deltas">

<t>The OEM wants to use delta updates to save over-the-air bytes. The delta images contain only the code and/or data that has changed from the previous image version. To do so, the OEM must first modify the Director repository, using the vehicle version manifest and dependency resolution to determine the differences between the previous and latest images. The OEM then adds the following to the custom Targets metadata used by the Director repository: (1) the algorithm used to apply a delta image, and (2) the Targets metadata about the delta image. The OEM will also check whether the delta images match the Targets metadata from the Director repository.</t>

</section>
</section>
</section>
<section anchor="exceptions" title="Exceptions">

<t>There are a number of factors that could impede the completion of the above scenarios:</t>

<t><list style="symbols">
  <t>ECUs may be lacking the necessary resources to function as designated. These resources could include weaknesses, in terms of CPU or RAM, that render performance of public key cryptography infeasible; a lack of sufficient storage to undo installation of bad software; or an ECU simply may reside on a low-speed network (e.g., LIN).</t>
  <t>ECUs may reside on different network segments, and may not be able to directly reach each other, requiring a gateway to facilitate communication.</t>
  <t>A user may replace OEM-installed ECUs with aftermarket ECUs.</t>
  <t>A vehicle may be able to download only a limited amount of data via a cellular channel, due to limits on a data plan.</t>
  <t>A system may lack sufficient power to download or install software updates.</t>
  <t>Vehicles may be offline for extended periods of time, thus missing required updates (e.g., key rotations).</t>
  <t>OEMs may be unwilling to implement costly security or hardware requirements.</t>
</list></t>

</section>
<section anchor="out-of-scope" title="Out of Scope">

<t>The following topics will not be addressed in this document, as they represent threats outside the scope of Uptane:</t>

<t><list style="symbols">
  <t>Physical attacks, such as manual tampering with ECUs outside the vehicle.</t>
  <t>Compromise of the packaged software, such as malware embedded in a trusted package.</t>
  <t>Compromise of the supply chain (e.g., build system, version control system, packaging process). A number of strategies (e.g., git signing, TPMs, in-toto <xref target="IN-TOTO"/>)  already exist to address this problem. Therefore, there is no need to duplicate those techniques here.</t>
  <t>Problems associated with OBD or UDS programming of ECUs, such as authentication of communications between ECUs.</t>
  <t>Malicious mirrors of package repositories, which may substitute original packages with malicious packages with matching version numbers <xref target="MERCURY"/>.</t>
</list></t>

</section>
<section anchor="design-requirements" title="Design requirements">

<t>The design requirements for this document are governed by the following principal parameters:</t>

<t><list style="symbols">
  <t>to clearly mandate the design and implementation steps that are security critical and must be followed as is, while offering flexibility in the implementation of non-critical steps. In this manner, users can adapt to support different use models and deployment scenarios.</t>
  <t>to ensure that, if Uptane is implemented, the security practices mandated or suggested in this document do not interfere with the functionality of ECUs, vehicles, or the systems that maintain them.</t>
  <t>to delineate best practices to ensure that, should any part of the SOTA mechanism of a vehicle be attacked, an attacker must compromise two or more modules to breach the SOTA mechanism.</t>
</list></t>

</section>
</section>
<section anchor="threat-model-and-attack-strategies" title="Threat model and attack strategies">

<t>The overarching goal of Uptane is to provide a system that is resilient in the face of various types of compromise. In this section, we describe the goals an attacker may have (<xref target="attacker_goals"/>) and the capabilities they may have or could develop (<xref target="capabilities"/>). We then describe and classify types of attacks on the system according to the attacker’s goals (<xref target="threats"/>).</t>

<section anchor="attacker_goals" title="Attacker goals">

<t>We assume that attackers may want to achieve one or more of the following goals, in increasing order of severity:</t>

<t><list style="symbols">
  <t>Read the contents of updates to discover confidential information, reverse-engineer firmware, or compare two firmware images to identify security fixes and hence determine the fixed security vulnerability</t>
  <t>Deny installation of updates to prevent vehicles from fixing software problems</t>
  <t>Cause one or more ECUs in the vehicle to fail, denying use of the vehicle or of certain functions</t>
  <t>Control ECUs within the vehicle, and possibly the vehicle itself</t>
</list></t>

</section>
<section anchor="capabilities" title="Attacker capabilities">

<t>Uptane is designed with resilience to compromise in mind. We assume that attackers may develop one or more of the following capabilities:</t>

<t><list style="symbols">
  <t>Intercept and modify network traffic (i.e., perform man-in-the-middle attacks). This capability may be developed in two domains:
  <list style="symbols">
      <t>Outside the vehicle, intercepting and modifying traffic between the vehicle and software repositories</t>
      <t>Inside the vehicle, intercepting and modifying traffic on one or more vehicle buses (e.g. via an OBD port or using a compromised ECU as a vector)</t>
    </list></t>
  <t>Compromise and control either a Director repository or Image repository server, and any keys stored on that repository, but not both the Director and Image repositories.</t>
  <t>Compromise either a Primary ECU or a Secondary ECU, but not both in the same vehicle</t>
</list></t>

</section>
<section anchor="threats" title="Description of threats">

<t>Uptane’s threat model includes the following types of attacks, organized according to the attacker goals listed in <xref target="attacker_goals"/>.</t>

<section anchor="read_updates" title="Read updates">

<t><list style="symbols">
  <t><spanx style="emph">Eavesdrop attack:</spanx> Read sensitive or confidential information from an update intended to be encrypted for a specific ECU. (Note: Not all implementations will have a need for protecting information in this way.)</t>
</list></t>

</section>
<section anchor="deny_updates" title="Deny installation of updates">

<t>An attacker seeking to deny the installation of updates may attempt one or more of the following strategies, among others:</t>

<t><list style="symbols">
  <t><spanx style="emph">Drop-request attack:</spanx> Block network traffic outside or inside the vehicle.</t>
  <t><spanx style="emph">Slow retrieval attack:</spanx> Slow down network traffic, in the extreme case sending barely enough packets to avoid a timeout. Similar to a drop-request attack, except that both the sender and receiver of the traffic still think network traffic is unimpeded.</t>
  <t><spanx style="emph">Freeze attack:</spanx> Continue to send a properly signed, but old, update bundle to the ECUs, even if newer updates exist.</t>
  <t><spanx style="emph">Partial bundle installation attack:</spanx> Install a valid (signed) update bundle, and then block selected updates within the bundle.</t>
  <t>Conduct a denial of service attack against the Uptane repositories or infrastructure.</t>
</list></t>

</section>
<section anchor="change_functionality" title="Interfere with ECU functionality">

<t>Attackers seeking to interfere with the functionality of vehicle ECUs in order to cause an operational failure or unexpected behavior may do so in one of the following ways:</t>

<t><list style="symbols">
  <t><spanx style="emph">Rollback attack:</spanx> Cause an ECU to install a previously valid software revision that is older than the currently installed version.</t>
  <t><spanx style="emph">Endless data attack:</spanx> Send a large amount of data to an ECU, until it runs out of storage, possibly causing the ECU to fail to operate.</t>
  <t><spanx style="emph">Mix-and-match attack:</spanx> Install a malicious software bundle in which some of the updates do not interoperate properly. This may be accomplished even if all of the individual images being installed are valid, as long as valid versions exist that are mutually incompatible.</t>
</list></t>

</section>
<section anchor="control_ecu" title="Control an ECU or vehicle">

<t>Full control of a vehicle, or one or more ECUs within a vehicle, is the most severe threat.</t>

<t><list style="symbols">
  <t><spanx style="emph">Arbitrary software attack:</spanx> Cause an ECU to install and run arbitrary code of the attacker’s choice.</t>
</list></t>

</section>
</section>
</section>
<section anchor="design" title="Detailed design of Uptane">

<t>Uptane is a secure software update framework for automobiles. We do not specify implementation details. Instead, we describe the components necessary for a compliant implementation and leave it up to individual implementors to make their own technological choices within those requirements.</t>

<t>At a high level, Uptane requires:</t>

<t><list style="symbols">
  <t>Two software repositories:
  <list style="symbols">
      <t>An Image repository containing binary images to install, and signed metadata about those images</t>
      <t>A Director repository connected to an inventory database that can sign metadata on demand for images in the Image repository</t>
    </list></t>
  <t>Repository tools for generating Uptane-specific metadata about images</t>
  <t>A public key infrastructure supporting the required metadata production/signing roles on each repository:
  <list style="symbols">
      <t>Root - Certificate authority for the Uptane ecosystem. Distributes public keys for verifying all the other roles’ metadata</t>
      <t>Timestamp - Indicates whether there are new metadata or images</t>
      <t>Snapshot - Indicates images released by the repository at a point in time, via signing metadata about Targets metadata</t>
      <t>Targets - Indicates metadata about images, such as hashes and file sizes</t>
    </list></t>
  <t>A secure way for ECUs to know the time.</t>
  <t>An ECU capable of downloading images and associated metadata from the Uptane servers.</t>
  <t>An in-vehicle client on a Primary ECU capable of verifying the signatures on all update metadata and downloading updates on behalf of its associated Secondary ECUs. The primary ECU MAY be the same ECU that communicates with the server.</t>
  <t>A client or library on each Secondary ECU capable of performing either full or partial verification of metadata</t>
</list></t>

<section anchor="roles" title="Roles on repositories">

<t>A repository contains images and metadata. Each role has a particular type of metadata associated with it, as described in <xref target="meta_structures"/>.</t>

<section anchor="root_role" title="The Root role">

<t>A repository’s Root role SHALL be responsible for a Certificate Authority as defined in <xref target="RFC3647"/>.
A repository’s Root role SHALL produce and sign Root metadata as described in <xref target="root_meta"/>.
A repository’s Root role SHALL sign the public keys used to verify the metadata produced by the Timestamp, Snapshot, and Targets roles.
A repository’s Root role SHALL revoke keys for the other roles, in case of compromise.</t>

</section>
<section anchor="targets_role" title="The Targets role">

<t>A repository’s Targets role SHALL produce and sign metadata about images and delegations as described in <xref target="targets_meta"/>.</t>

<section anchor="targets_role_delegations" title="Delegations">

<t>The Targets role on the Image repository MAY delegate the responsibility of signing metadata to other, custom-defined roles referred to as delegated targets. If it does, it MUST do so as specified in <xref target="delegations_meta"/>.</t>

<t>Responsibility for signing images or a subset of images MAY be delegated to more than one role and therefore it is possible for two different roles to be trusted for signing a particular image. For this reason, delegations MUST be prioritized.</t>

<t>A particular delegation for a subset of images MAY be designated as <spanx style="strong">terminating</spanx>. For terminating delegations, the client SHALL NOT search any further if it does not find validly signed metadata about those images. Delegations SHOULD NOT be terminating by default; terminating delegations SHOULD only be used when there is a compelling technical reason to do so.</t>

<t>A delegation for a subset of images MAY be a multi-role delegation <xref target="TAP-3"/>. A multi-role delegation indicates that multiple roles are needed to sign a particular image and each of the delegatee roles MUST sign the same metadata.</t>

<t>Delegations only apply to the Image repository. The Targets role on the Director repository MUST NOT delegate metadata signing responsibility.</t>

</section>
</section>
<section anchor="snapshot_role" title="The Snapshot role">

<t>A repository’s Snapshot role SHALL produce and sign metadata about all Targets metadata the repository releases, including the current version number of the top-level Targets metadata, and the version numbers of all delegated Targets metadata, as described in <xref target="snapshot_meta"/>.</t>

</section>
<section anchor="timestamp_role" title="The Timestamp role">

<t>A repository’s Timestamp role SHALL produce and sign metadata indicating whether there are new metadata or images on the repository. It MUST do so by signing the metadata about the Snapshot metadata file.</t>

</section>
</section>
<section anchor="meta_structures" title="Metadata structures">

<t>Uptane’s security guarantees all rely on properly created metadata that follows a designated structure. The Uptane standard <spanx style="strong">does not</spanx> mandate any particular format or encoding for the metadata as a whole. ASN.1 (with any encoding scheme like BER, DER, XER, etc.), JSON, XML, or any other encoding format that is capable of providing the required structure MAY be used.</t>

<t>However, string comparison is required as part of metadata verification. To ensure an accurate basis for comparing strings, all strings MUST be encoded in the Unicode Format for Network Interchange as defined in <xref target="RFC5198"/>, including normalization into Unicode Normalization Form C (<xref target="NFC"/>).</t>

<t>In the Deployment Considerations document (<xref target="DEPLOY"/>), the Uptane Alliance provides some examples of compliant metadata structures in ASN.1 and JSON.</t>

<section anchor="common_metadata" title="Common metadata structures">

<t>Every public key MUST be represented using a public key identifier.  A public key identifier is EITHER all of the following:</t>

<t><list style="symbols">
  <t>The value of the public key itself (which MAY be, for example, formatted as a PEM string)</t>
  <t>The public key cryptographic algorithm used by the key (such as RSA or ECDSA)</t>
  <t>The particular scheme used to verify the signature (such as <spanx style="verb">rsassa-pss-sha256</spanx> or <spanx style="verb">ecdsa-sha2-nistp256</spanx>)</t>
</list></t>

<t>OR a secure hash over at least the above components (such as the keyid mechanism in TUF).</t>

<t>All four Uptane roles (Root, Targets, Snapshot, and Timestamp) share a common structure. They SHALL contain the following two attributes:</t>

<t><list style="symbols">
  <t>A payload of metadata to be signed</t>
  <t>An attribute containing the signature(s) of the payload, where each entry specifies:
  <list style="symbols">
      <t>The public key identifier of the key being used to sign the payload</t>
      <t>A signature with this key over the payload</t>
    </list></t>
</list></t>

<t>The payload differs depending on the role. However, the payload for all roles shares a common structure. It SHALL contain the following four attributes:</t>

<t><list style="symbols">
  <t>An indicator of the type of role (Root, Targets, Snapshot, or Timestamp)</t>
  <t>An expiration date and time</t>
  <t>An integer version number, which SHOULD be incremented each time the metadata file is updated</t>
  <t>The role-specific metadata for the role indicated</t>
</list></t>

<t>The following sections describe the role-specific metadata. All roles SHALL follow the common structures described here.</t>

</section>
<section anchor="root_meta" title="Root metadata">

<t>A repository’s Root metadata distributes the public keys of the top-level Root, Targets, Snapshot, and Timestamp roles, as well as revocations of those keys. It SHALL contain two attributes:</t>

<t><list style="symbols">
  <t>A representation of the public keys for all four roles. Each key SHALL have a unique public key identifier.</t>
  <t>An attribute mapping each role to (1) its public key(s), and (2) the threshold of signatures required for that role</t>
</list></t>

<t>Additionally, it MAY contain a mapping of roles to a list of valid URLs from which the role metadata can be downloaded.  If this mapping of URLs is used, the implementer SHOULD implement this functionality following <xref target="TAP-5"/> to avoid adding unforeseen security risks.</t>

</section>
<section anchor="targets_meta" title="Targets metadata">

<t>The Targets metadata on a repository contains all of the information about images to be installed on ECUs. This includes filenames, hashes, file sizes, and MAY also include other useful information about images, such as what types of hardware are compatible with a particular image.</t>

<t>Targets metadata can also contain metadata about delegations, allowing one Targets role to delegate its authority to another. This means that an individual Targets metadata file might contain only metadata about delegations, only metadata about images, or some combination of the two. The details of how ECUs traverse the delegation tree to find valid metadata about images is specified in <xref target="resolve_delegations"/>.</t>

<section anchor="targets_images_meta" title="Metadata about images">

<t>To be available to install on clients, all images on the repository MUST have their metadata listed in a Targets role.  Each Targets role MAY provide a list of some images on the repository.  This list MUST provide, at a minimum, the following information about each image:</t>

<t><list style="symbols">
  <t>The image filename</t>
  <t>The size of the image in bytes</t>
  <t>One or more hashes of the image file, along with the hashing function used</t>
</list></t>

<section anchor="custom-metadata-about-images" title="Custom metadata about images">

<t>In addition to the required metadata, Targets metadata files MAY contain extra metadata for images on the repository. This metadata can be customized for a particular use case. Examples of use cases for different types of custom metadata can be found in the Deployment Considerations document (<xref target="DEPLOY"/>). However, there are a few important pieces of custom metadata that SHOULD be present in most implementations. In addition, there is one element in the custom metadata that MUST be present in the Targets metadata from the Director.</t>

<t>Custom metadata MAY also contain a demarcated field or section that MUST match whenever two pieces of metadata are checked against each other, such as when Targets metadata from the Director repository is checked against Targets metadata from the Image repository.</t>

<t>The information listed below SHOULD be provided for each image on both the Image repository and the Director repository. If a “MUST match section” is to be implemented, that is where this information SHOULD be placed.</t>

<t><list style="symbols">
  <t>A release counter, to be incremented each time a new version of the image is released. This can be used to prevent rollback attacks even in cases where the Director repository is compromised.</t>
  <t>A hardware identifier, or list of hardware identifiers, representing models of ECUs with which the image is compatible. This can be used to ensure that an ECU cannot be ordered to install an incompatible image, even in cases where the Director repository is compromised.</t>
</list></t>

<t>The following information is CONDITIONALLY REQUIRED for each image on the Director repository IF that image is encrypted:</t>

<t><list style="symbols">
  <t>Information about filenames, hashes, and file size of the encrypted image.</t>
  <t>Information about the encryption method, and other relevant information–for example, a symmetric encryption key encrypted by the ECU’s asymmetric key could be included in the Director repository metadata.</t>
</list></t>

<t>The following information MUST be provided for each image in the Targets metadata from the Director repository:</t>

<t><list style="symbols">
  <t>An ECU identifier (such as a serial number), specifying the ECU that should install the image.</t>
</list></t>

<t>The Director repository MAY provide a download URL for the image file. This may be useful, for example, when the image is on a public CDN and the director wishes to provide a signed URL.</t>

</section>
</section>
<section anchor="delegations_meta" title="Metadata about delegations">

<t>A Targets metadata file on the Image repository (but not the Director repository) MUST be able to delegate signing authority to other entities. For example, it could delegate signing authority for a particular ECU’s firmware to that ECU’s supplier. A metadata file MAY contain any number of delegations and MUST keep the delegations in prioritized order.</t>

<t>A list of delegations MUST provide the following information:</t>

<t><list style="symbols">
  <t>A list of public keys of all delegatees. Each key should have a unique public key identifier and a key type.</t>
  <t>A list of delegations, each of which contains:
  <list style="symbols">
      <t>A list of the filenames to which this role applies. This MAY be expressed using wildcards, or by enumerating a list, or a combination of the two.</t>
      <t>An optional list of the hardware identifiers to which this role applies.  If this is omitted, any hardware identifier will match.</t>
      <t>An indicator of whether or not this is a terminating delegation. (See <xref target="targets_role_delegations"/>.)</t>
      <t>A list of the roles to which this delegation applies. Each role needs to specify:
      <list style="symbols">
          <t>A name for the role (e.g. “supplier1-qa”)</t>
          <t>The key identifiers for each key this role uses</t>
          <t>A threshold of keys that must sign for this role</t>
        </list></t>
    </list></t>
</list></t>

<t>Note that <spanx style="strong">any</spanx> Targets metadata file stored on the Image repository may contain delegations, and these delegations can be in chains of arbitrary length.</t>

</section>
</section>
<section anchor="snapshot_meta" title="Snapshot metadata">

<t>The Snapshot metadata lists version numbers and filenames of all Targets metadata files. It protects against mix-and-match attacks if a delegated supplier key is compromised.</t>

<t>For each Targets metadata file on the repository, the Snapshot metadata SHALL contain the following information:</t>

<t><list style="symbols">
  <t>The filename and version number of the each Targets metadata file on the repository</t>
</list></t>

<t>The Snapshot metadata MAY also list the Root metadata filename and version number. This is not required, particularly for implementations of <xref target="TAP-5"/>, but MAY be included in all cases for backward compatibility.</t>

</section>
<section anchor="timestamp_meta" title="Timestamp metadata">

<t>The Timestamp metadata SHALL contain the following information:</t>

<t><list style="symbols">
  <t>The filename and version number of the latest Snapshot metadata on the repository.</t>
  <t>One or more hashes of the Snapshot metadata file, along with the hashing function used.</t>
</list></t>

</section>
<section anchor="repo_mapping_meta" title="Repository mapping metadata">

<t>As described in the introduction to <xref target="design"/>, Uptane requires a Director repository and an Image repository. However, it is possible to have an Uptane-compliant implementation that has more than two repositories.</t>

<t>Repository mapping metadata informs a Primary ECU about which repositories to trust for images or image paths. <xref target="TAP-4"/> describes how to make use of more complex repository mapping metadata in order to have more than the two required repositories.</t>

<t>Repository mapping metadata, or the equivalent informational content, MUST be present on all Primary ECUs, and MUST contain the following information:</t>

<t><list style="symbols">
  <t>A list of repository names and one or more URLs at which the named repository can be accessed. At a minimum, this MUST include the Director and Image repositories.</t>
  <t>A list of mappings of image paths to repositories, each of which contains:
  <list style="symbols">
      <t>A list of image paths. Image paths MAY be expressed using wildcards, or by enumerating a list, or a combination of the two.</t>
      <t>A list of repositories that MUST sign the Targets metadata for the image paths.</t>
    </list></t>
</list></t>

<t>For example, in the most basic Uptane case, the repository mapping metadata would contain:</t>

<t><list style="symbols">
  <t>The name and URL of the Director repository</t>
  <t>The name and URL of the Image repository</t>
  <t>A single mapping indicating that all images (<spanx style="verb">*</spanx>) MUST be signed by both the Director and Image repository</t>
</list></t>

<t>Note that the metadata need not be in the form of a metadata file. For example, in the basic case where there is only one Director and one Image repository, and all images need to have signed metadata from both repositories, it would be sufficient to have a configuration file with URLs for the two repositories, and a client that always checks for metadata matches between them. In this case, no explicit mapping would be defined, because the mapping is defined as part of the Uptane client implementation.</t>

<t>The <spanx style="emph">Uptane Deployment Considerations</spanx> document (<xref target="DEPLOY"/>) gives more guidance on how to implement repository mapping metadata for more complex use cases. It also discusses strategies for updating repository mapping metadata, if required.</t>

</section>
<section anchor="metadata_filename_rules" title="Rules for filenames in repositories and metadata">

<t>There is a difference between the file name in a metadata file or an ECU, and the file name on a repository. This difference exists in order to avoid race conditions, where metadata and images are read from, and written to, at the same time. For more details, the reader should read the TUF specification <xref target="TUF-spec"/> and PEP 458 <xref target="PEP-458"/>.</t>

<t>Unless stated otherwise, all files SHALL be written to repositories in accordance with the following two rules:</t>

<t><list style="numbers">
  <t>Metadata filenames SHALL be qualified with version numbers. If a metadata file A is specified as FILENAME.EXT in another metadata file B, then it SHALL be written as VERSION.FILENAME.EXT, where VERSION is A’s version number, as defined in <xref target="common_metadata"/>, with one exception: If the version number of the Timestamp metadata file might not be known in advance by a client, it MAY be read from, and written to, a repository using a filename without a version number qualification, i.e. FILENAME.EXT.</t>
  <t>If an image is specified in a Targets metadata file as FILENAME.EXT, it SHALL be written to the repository as HASH.FILENAME.EXT, where HASH is one of the hash digests of the file, as specified in <xref target="targets_images_meta"/>. The file MUST be written to the repository using <spanx style="emph">n</spanx> different filenames, one for each hash digest listed in its corresponding Targets metadata.</t>
</list></t>

<t>For example:</t>

<t><list style="symbols">
  <t>The version number of the Snapshot metadata file is 61, and its filename in the Timestamp metadata is “snapshot.json”. The filename on the repository will be “61.snapshot.json”.</t>
  <t>There is an image with the filename “acme_firmware.bin” specified in the Targets metadata, with a SHA3-256 of “aaaa” and a SHA-512/224 of “bbbb”. It will have two filenames on the repository: “aaaa.acme_firmware.bin” and “bbbb.acme_firmware.bin”.</t>
</list></t>

</section>
</section>
<section anchor="server-repository-implementation-requirements" title="Server / repository implementation requirements">

<t>An Uptane implementation SHALL make the following services available to vehicles:</t>

<t><list style="symbols">
  <t>Image repository</t>
  <t>Director repository</t>
</list></t>

<t>Additionally, an Uptane implementation requires ECUs to have a secure way to know the current time.</t>

<section anchor="image-repository" title="Image repository">

<t>The Image repository exists to allow an OEM and/or its suppliers to upload images and their associated metadata. It makes these images and their metadata available to vehicles. The Image repository is designed to be primarily controlled by human actors, and updated relatively infrequently.</t>

<t>The Image repository SHALL expose an interface permitting the download of metadata and images. This interface SHOULD be public.</t>

<t>The Image repository SHALL require authorization for writing metadata and images.</t>

<t>The Image repository SHALL provide a method for authorized users to upload images and their associated metadata. It SHALL check that a user writing metadata and images is authorized to do so for that specific image by checking the chain of delegations as described in <xref target="delegations_meta"/>.</t>

<t>The Image repository SHALL implement storage which permits authorized users to write an image file using a unique filename, and later read the same file using the same name. It MAY use any filesystem, key-value store, or database that fulfills this requirement.</t>

<t>The Image repository MAY require authentication for read access.</t>

</section>
<section anchor="director_repository" title="Director repository">

<t>The Director repository instructs ECUs as to which images should be installed by producing signed metadata on demand. Unlike the Image repository, it is mostly controlled by automated, online processes. It also consults a private inventory database containing information on vehicles, ECUs, and software revisions.</t>

<t>The Director repository SHALL expose an interface for primaries to upload vehicle version manifests (<xref target="vehicle_version_manifest"/>) and download metadata. This interface SHOULD be public.
The Director MAY encrypt images for ECUs that require them, either by encrypting on-the-fly or by storing encrypted images in the repository.</t>

<t>The Director repository SHALL implement storage which permits an automated service to write generated metadata files. It MAY use any filesystem, key-value store, or database that fulfills this requirement.</t>

<section anchor="directing-installation-of-images-on-vehicles" title="Directing installation of images on vehicles">

<t>A Director repository MUST conform to the following six-step process for directing the installation of software images on a vehicle.</t>

<t><list style="numbers">
  <t>The Director SHOULD first identify the vehicle. This MAY be done when the Director receives a vehicle version manifest sent by a Primary (as described in <xref target="construct_manifest_primary"/>), decodes the manifest, and determines the unique vehicle identifier. Additionally, the Director MAY utilize other mechanisms to uniquely identify a vehicle (e.g., 2-way TLS with unique client certificates).</t>
  <t>Using the vehicle identifier, the Director queries its inventory database (as described in <xref target="inventory_db"/>) for relevant information about each ECU in the vehicle.</t>
  <t>The Director SHALL check the manifest for accuracy compared to the information in the inventory database. If any of the required checks fail, the Director MAY drop the request. An implementer MAY make additional checks if desired. At a minimum, the Director SHALL check the following:
  <list style="symbols">
      <t>Each ECU recorded in the inventory database is also represented in the manifest.</t>
      <t>The signature of the manifest matches the ECU key of the Primary that sent it.</t>
      <t>The signature of each Secondary’s contribution to the manifest matches the ECU key of that Secondary.</t>
    </list></t>
  <t>The Director SHOULD check that the nonce or counter in each ECU Version Report has not been used before to prevent a replay of the ECU Version Report. If the nonce or counter is reused the Director SHOULD drop the request.</t>
  <t>The Director extracts information about currently installed images from the vehicle version manifest. Using this information, it determines if the vehicle is already up-to-date, and if not, determines a set of images that should be installed. The exact process by which this determination takes place is out of scope of this standard. However, the Director MUST take into account <spanx style="emph">dependencies</spanx> and <spanx style="emph">conflicts</spanx> between images and SHOULD consult well-established techniques for dependency resolution.</t>
  <t>The Director MAY encrypt images for ECUs that require it.</t>
  <t>The Director generates new metadata representing the desired set of images to be installed on the vehicle, based on the dependency resolution in step 4. This includes Targets (<xref target="targets_meta"/>), Snapshot (<xref target="snapshot_meta"/>), and Timestamp (<xref target="timestamp_meta"/>) metadata. It then sends this metadata to the Primary as described in <xref target="download_meta_primary"/>.</t>
</list></t>

</section>
<section anchor="inventory_db" title="Inventory Database">

<t>The Director SHALL use a private inventory database to store information about ECUs and vehicles. An implementor MAY use any durable database for this purpose.</t>

<t>The inventory database MUST record the following pieces of information:</t>

<t><list style="symbols">
  <t>Per vehicle:
  <list style="symbols">
      <t>A unique identifier (such as a VIN)</t>
    </list></t>
  <t>Per ECU:
  <list style="symbols">
      <t>A unique identifier (such as a serial number)</t>
      <t>The vehicle identifier the ECU is associated with</t>
      <t>An ECU key (symmetric or asymmetric; for asymmetric keys, only the public part SHOULD be stored)</t>
      <t>The ECU key identifier (as defined in <xref target="common_metadata"/>)</t>
      <t>Whether the ECU is a Primary or a Secondary</t>
    </list></t>
</list></t>

<t>The inventory database MAY record other information about ECUs and vehicles. It SHOULD record a hardware identifier for each ECU to protect against the possibility of directing the ECU to install incompatible firmware.</t>

</section>
</section>
</section>
<section anchor="in-vehicle-implementation-requirements" title="In-vehicle implementation requirements">

<t>An Uptane-compliant ECU SHALL be able to download and verify Image metadata and image binaries before installing a new image and MUST have a secure way of verifying the current time, or a sufficiently recent attestation of the time.</t>

<t>Each ECU in a vehicle receiving over-the-air updates is either a Primary or a Secondary ECU. A Primary ECU collects and delivers vehicle manifests to the Director (<xref target="vehicle_version_manifest"/>) that contain information about which images have been installed on ECUs in the vehicle. It also verifies the time and downloads and verifies the latest metadata and images for itself and for its secondaries. A Secondary ECU verifies the time, and downloads and verifies the latest metadata and images for itself from its associated Primary ECU. It also sends signed information about its installed images to its associated Primary.</t>

<t>All ECUs MUST verify image metadata as specified in <xref target="metadata_verification"/> before installing an image or making it available to other ECUs. A Primary ECU MUST perform full verification (<xref target="full_verification"/>). A Secondary ECU SHOULD perform full verification if possible. If a Secondary cannot perform full verification, it SHALL perform partial verification. See the Uptane Deployment Considerations (<xref target="DEPLOY"/>) for a discussion of how to choose between partial and full verification.</t>

<t>ECUs MUST have a secure source of time. An OEM/Uptane implementor MAY use any external source of time that is demonstrably secure. The Uptane Deployment Considerations (<xref target="DEPLOY"/>) describe one way to implement an external time server to cryptographically attest time, as well as the security properties required. When “loading time” is referenced in procedures in this standard, it should be understood to mean loading into memory the current time (if the ECU has its own secure clock), or the most recent attested time.</t>

<section anchor="build-time-prerequisite-requirements-for-ecus" title="Build-time prerequisite requirements for ECUs">

<t>For an ECU to be capable of receiving Uptane-secured updates, it MUST have the following data provisioned at the time it is manufactured or installed in the vehicle:</t>

<t><list style="numbers">
  <t>A sufficiently recent copy of required Uptane metadata at the time of manufacture or install. This is necessary for the ECU to authenticate that the remote repository is legitmate when it first downloads metadata in the field. See the Uptane Deployment Considerations (<xref target="DEPLOY"/>) for more information.
  <list style="symbols">
      <t>Partial verification Secondary ECUs MUST have the Root and Targets metadata from the Director repository (to reduce the scope of rollback and replay attacks). These ECUs MAY also have metadata from other roles or the Image repository if they will be used by the Secondary.</t>
      <t>Full verification ECUs MUST have a complete set of metadata (Root, Targets, Snapshot, and Timestamp) from both repositories (to prevent rollback and replay attacks), as well as the repository mapping metadata (<xref target="repo_mapping_meta"/>). Delegations are not required.</t>
    </list></t>
  <t>The current time, or a secure attestation of a sufficiently recent time.</t>
  <t>An <spanx style="strong">ECU key</spanx>. This is a private key, unique to the ECU, used to sign ECU version manifests and decrypt images. An ECU key MAY be either a symmetric key or an asymmetric key. If it is an asymmetric key, there MAY be separate keys for encryption and signing. For the purposes of this standard, the set of private keys that an ECU uses is referred to as the ECU key (singular), even if it is actually multiple keys used for different purposes.</t>
</list></t>

</section>
<section anchor="what-the-primary-does" title="What the Primary does">

<t>A Primary downloads, verifies, and distributes the latest time, metadata and images. To do so, it SHALL perform the following seven steps:</t>

<t><list style="numbers">
  <t>Construct and send vehicle version manifest (<xref target="construct_manifest_primary"/>)</t>
  <t>Download and check current time (<xref target="check_time_primary"/>)</t>
  <t>Download and verify metadata (<xref target="download_meta_primary"/>)</t>
  <t>Download and verify images (<xref target="download_images_primary"/>)</t>
  <t>OPTIONAL: Send latest time to secondaries (<xref target="send_time_primary"/>)</t>
  <t>Send metadata to Secondaries (<xref target="send_metadata_primary"/>)</t>
  <t>Send images to Secondaries (<xref target="send_images_primary"/>)</t>
</list></t>

<t>Note that the subsequent sections concerning requirements for a Primary do not prohibit implementing Primary capabilities on an ECU that does not communicate directly with the Uptane repositories. This allows for implementations to have multiple ECUs within the vehicle performing functions equivalent to a Primary.
If multiple such Primaries are included within a vehicle, each Secondary ECU SHALL have a single Primary responsible for providing its updates.</t>

<section anchor="construct_manifest_primary" title="Construct and send vehicle version manifest">

<t>The Primary SHALL build a <spanx style="emph">vehicle version manifest</spanx> as described in <xref target="vehicle_version_manifest"/>.</t>

<t>Once the complete manifest is built, the Primary MAY send the manifest to the Director repository. However, it is not strictly required that the Primary send the manifest until step three. If permitted by the implementation, a Primary MAY send only a diff of the manifest to save bandwidth. If an implementation permits diffs, the Director SHOULD have a way to request a full manifest.</t>

<t>Secondaries MAY send their version report at any time so that it is already stored on the Primary when it wishes to check for updates. Alternatively, the Primary MAY request a version report from each Secondary at the time of the update check.</t>

<section anchor="vehicle_version_manifest" title="Vehicle version manifest">

<t>The vehicle version manifest is a metadata structure that MUST contain the following information:</t>

<t><list style="symbols">
  <t>An attribute containing the signature(s) of the payload, each specified by:
  <list style="symbols">
      <t>The public key identifier of the key being used to sign the payload</t>
      <t>The signing method (e.g. ed25519, rsassa-pss, etc.)</t>
      <t>A hash of the payload to be signed</t>
      <t>The hashing function used (e.g. SHA3-256, SHA-512/224, etc.)</t>
      <t>The signature of the hash</t>
    </list></t>
  <t>A payload representing the installed versions of each software image on the vehicle. This payload SHALL contain:
  <list style="symbols">
      <t>The vehicle’s unique identifier (e.g. the VIN)</t>
      <t>The Primary ECU’s unique identifier (e.g. the serial number)</t>
      <t>A list of ECU version reports as specified in <xref target="version_report"/></t>
    </list></t>
</list></t>

<t>Note that one of the ECU version reports should be the version report for the Primary itself.</t>

</section>
<section anchor="version_report" title="ECU version report">

<t>An ECU version report is a metadata structure that MUST contain the following information:</t>

<t><list style="symbols">
  <t>An attribute containing the signature(s) of the payload, each specified by:
  <list style="symbols">
      <t>The public key identifier of the key being used to sign the payload</t>
      <t>The signing method (e.g. ed25519, rsassa-pss, etc.)</t>
      <t>A hash of the payload to be signed</t>
      <t>The hashing function used (e.g. SHA3-256, SHA-512/224, etc.)</t>
      <t>The signature of the hash</t>
    </list></t>
  <t>A payload containing:
  <list style="symbols">
      <t>The ECU’s unique identifier (e.g. the serial number)</t>
      <t>The filename, length, and hashes of its currently installed image (i.e. the non-custom Targets metadata for this particular image)</t>
      <t>An indicator of any detected security attack</t>
      <t>The latest time the ECU can verify at the time this version report was generated</t>
      <t>A nonce or counter to prevent a replay of the ECU version report. This value MUST change each update cycle and MAY be the cryptographic nonce used with a Time Server.</t>
    </list></t>
</list></t>

</section>
</section>
<section anchor="check_time_primary" title="Download and check current time">

<t>The Primary SHALL load the current time from a secure source.</t>

</section>
<section anchor="download_meta_primary" title="Download and verify metadata">

<t>The Primary SHALL download metadata for all targets and perform a full verification on it as specified in <xref target="full_verification"/>.</t>

</section>
<section anchor="download_images_primary" title="Download and verify images">

<t>The Primary SHALL download and verify images for itself and for all of its associated Secondaries. Images SHALL be verified by checking that the hash of the image file matches the hash specified in the Director’s Targets metadata for that image.</t>

<t>There may be several different filenames that all refer to the same image binary, as described in <xref target="metadata_filename_rules"/>. If the primary has received multiple hashes for a given image binary via the Targets role (see <xref target="targets_images_meta"/>) then it SHALL verify every hash for this image despite that the image is identified by a single hash as part of its filename.</t>

</section>
<section anchor="send_time_primary" title="Send latest time to Secondaries">

<t>Unless the Secondary ECU has its own way of verifying the time or does not have the capacity to verify a time message, the Primary is CONDITIONALLY REQUIRED to send the time to each ECU. The Secondary will verify the time message, then overwrite its current time with the received time.</t>

</section>
<section anchor="send_metadata_primary" title="Send metadata to Secondaries">

<t>The Primary SHALL send its latest downloaded metadata to all of its associated Secondaries. The metadata it sends to each Secondary MUST include all of the metadata required for verification on that Secondary. For full verification Secondaries, this includes the metadata for all four roles from both repositories, plus any delegated Targets metadata files the Secondary will recurse through to find the proper delegation. For partial verification Secondaries, this includes only the Targets metadata file from the Director repository.</t>

<t>The Primary SHOULD determine the minimal set of metadata files to send to each Secondary by performing delegation resolution as described in <xref target="full_verification"/>.</t>

<t>Each Secondary SHALL store the latest copy of all metadata required for its own verification.</t>

</section>
<section anchor="send_images_primary" title="Send images to Secondaries">

<t>The Primary SHALL send the latest image to each of its associated Secondaries that have storage to receive it.</t>

<t>For Secondaries without storage, the Primary SHOULD wait for a request from the Secondary to stream the new image file to it. The Secondary will send the request once it has verified the metadata sent in the previous step.</t>

</section>
</section>
<section anchor="installing-images-on-primary-or-secondary-ecus" title="Installing images on Primary or Secondary ECUs">

<t>An ECU SHALL perform the following steps when attempting to install a new image:</t>

<t><list style="numbers">
  <t>Verify latest attested time (<xref target="verify_time"/>)</t>
  <t>Verify metadata (<xref target="verify_metadata"/>)</t>
  <t>Download latest image (<xref target="download_image"/>)</t>
  <t>Verify image (<xref target="verify_image"/>)</t>
  <t>Install image (<xref target="install_image"/>)</t>
  <t>Create and send version report (<xref target="create_version_report"/>)</t>
</list></t>

<section anchor="verify_time" title="Load and verify the latest attested time">

<t>The ECU SHALL load and verify the current time, or the most recent securely attested time.</t>

</section>
<section anchor="verify_metadata" title="Verify metadata">

<t>The ECU SHALL verify the latest downloaded metadata (<xref target="metadata_verification"/>) using either full or partial verification. If the metadata verification fails for any reason, the ECU SHALL jump to the final step (<xref target="create_version_report"/>).</t>

</section>
<section anchor="download_image" title="Download latest image">

<t>If the ECU does not have secondary storage, i.e. buffer storage to temporarily store the latest image before installing it, it SHALL download the latest image from the Primary. (If the ECU has secondary storage, it will already have the latest image in its secondary storage as specified in <xref target="send_images_primary"/>, and should skip to the next step.) The ECU MAY first create a backup of its previous working image and store it elsewhere (e.g., the primary).</t>

<t>The filename used to identify the latest known image (i.e., the file to request from the Primary) SHALL be determined as follows:</t>

<t><list style="numbers">
  <t>Load the Targets metadata file from the Director repository.</t>
  <t>Find the Targets metadata associated with this ECU identifier.</t>
  <t>Construct the Image filename using the rule in <xref target="metadata_filename_rules"/>, or use the download URL specified in the Director metadata.</t>
  <t>If there is no Targets metadata about this image, abort the update cycle and report that there is no such image. Additionally, in the case of failure, the ECU SHALL retain its previous Targets metadata instead of using the new Targets metadata. Otherwise, download the image (up to the number of bytes specified in the Targets metadata) and verify it according to <xref target="verify_image"/>.</t>
</list></t>

<t>When the Primary responds to the download request, the ECU SHALL overwrite its current image with the downloaded image from the Primary.</t>

<t>If any part of this step fails, the ECU SHALL jump to the final step (<xref target="create_version_report"/>).</t>

</section>
<section anchor="verify_image" title="Verify image">

<t>The ECU SHALL verify that the latest image matches the latest metadata as follows:</t>

<t><list style="numbers">
  <t>Load the latest Targets metadata file from the Director.</t>
  <t>Find the Targets metadata associated with this ECU identifier.</t>
  <t>Check that the hardware identifier in the metadata matches the ECUs hardware identifier.</t>
  <t>Check that the image filename is valid for this ECU. This MAY be a comparison against a wildcard path, which restricts the ECUs to which a delegation will apply.</t>
  <t>Check that the release counter of the image in the previous metadata, if it exists, is less than or equal to the release counter in the latest metadata.</t>
  <t>If the image is encrypted, decrypt the image with a decryption key to be chosen as follows:
  <list style="symbols">
      <t>If the ECU key is a symmetric key, the ECU SHALL use the ECU key for image decryption.</t>
      <t>If the ECU key is asymmetric, the ECU SHALL check the Targets metadata for an encrypted symmetric key. If such a key is found, the ECU SHALL decrypt the symmetric key using its ECU key, and use the decrypted symmetric key for image decryption.</t>
      <t>If the ECU key is asymmetric and there is no symmetric key in the target metadata, the ECU SHALL use its ECU key for image decryption.</t>
    </list></t>
  <t>Check that all hashes listed in the metadata match the corresponding hashes of the image.</t>
</list></t>

<t>If the ECU has secondary storage, the checks SHOULD be performed on the image in secondary storage before it is installed.</t>

<t>NOTE: See <xref target="DEPLOY"/> for guidance on how to deal with Secondary ECU failures for ECUs that do not have secondary storage.</t>

<t>If any step fails, the ECU SHALL jump to the (<xref target="create_version_report"/>) step.</t>

</section>
<section anchor="install_image" title="Install image">

<t>The ECU SHALL attempt to install the update. This installation SHOULD occur at a time when all pre-conditions are met. These pre-conditions MAY include ensuring the vehicle is in a safe environment for install (e.g., the vehicle is parked when updating a specific ECU). Another pre-condition MAY include ensuring the ECU has a backup of its current image and metadata in case the current installation fails.</t>

</section>
<section anchor="create_version_report" title="Create and send version report">

<t>The ECU SHALL create a version report as described in <xref target="version_report"/>, and send it to the Primary (or simply save it to disk, if the ECU is a Primary). The Primary SHOULD write the version reports it receives to disk and associate them with the Secondaries that sent them.</t>

</section>
</section>
<section anchor="metadata_verification" title="Metadata verification procedures">

<t>A Primary ECU MUST perform full verification of metadata. A Secondary ECU SHOULD perform full verification of metadata. If a Secondary cannot perform full verification, it SHALL perform partial verification instead.</t>

<t>If a step in the following workflows does not succeed (e.g., the update is aborted because a new metadata file was not signed), an ECU SHOULD still be able to update again in the future. Errors raised during the update process SHOULD NOT leave ECUs in an unrecoverable state.</t>

<section anchor="partial_verification" title="Partial verification">

<t>In order to perform partial verification, an ECU SHALL perform the following steps:</t>

<t><list style="numbers">
  <t>Load and verify the current time or the most recent securely attested time.</t>
  <t>Download and check the Targets metadata file from the Director repository, following the procedure in <xref target="check_targets"/>.</t>
</list></t>

</section>
<section anchor="full_verification" title="Full verification">

<t>Full verification of metadata means that the ECU checks that the Targets metadata about images from the Director repository matches the Targets metadata about the same images from the Image repository. This provides resilience to a key compromise in the system.</t>

<t>Full verification MUST be performed by Primary ECUS and MAY be performed by Secondary ECUs. In the following instructions, whenever an ECU is directed to download metadata, it applies only to Primary ECUs.</t>

<t>If <xref target="TAP-5"/> is supported and a Primary has an external connection to the Uptane repositories, a Primary ECU SHALL download metadata and images following the rules specified in that TAP.  If <xref target="TAP-5"/> is not supported, or if the Primary does not have an external connection to the Uptane repositories, the download SHOULD follow the <xref target="TUF-spec"/> and the metadata file renaming rules specified in <xref target="metadata_filename_rules"/>.</t>

<t>Before starting full verification, the repository mapping metadata MUST be consulted to determine where to download metadata from. This procedure assumes the basic Uptane case: there are only two repositories (Director and Image), and all image paths are required to be signed by both repositories. If a more complex repository layout is being used, refer to <xref target="DEPLOY"/> for guidance on how to determine where metadata should be downloaded from.</t>

<t>In order to perform full verification, an ECU SHALL perform the following steps:</t>

<t><list style="numbers">
  <t>Load and verify the current time or the most recent securely attested time.</t>
  <t>Download and check the Root metadata file from the Director repository, following the procedure in <xref target="check_root"/>.</t>
  <t>Download and check the Timestamp metadata file from the Director repository, following the procedure in <xref target="check_timestamp"/>.</t>
  <t>Check the previously downloaded Snapshot metadata file from the Directory repository (if available). If the hashes and version number of that file match the hashes and version number listed in the new Timestamp metadata, there are no new updates and the verification process MAY be stopped and considered complete. Otherwise, download and check the Snapshot metadata file from the Director repository, following the procedure in <xref target="check_snapshot"/>.</t>
  <t>Download and check the Targets metadata file from the Director repository, following the procedure in <xref target="check_targets"/>.</t>
  <t>If the Targets metadata from the Directory repository indicates that there are no new targets that are not already currently installed, the verification process MAY be stopped and considered complete. Otherwise, download and check the Root metadata file from the Image repository, following the procedure in <xref target="check_root"/>.</t>
  <t>Download and check the Timestamp metadata file from the Image repository, following the procedure in <xref target="check_timestamp"/>.</t>
  <t>Check the previously downloaded Snapshot metadata file from the Image repository (if available). If the hashes and version number of that file match the hashes and version number listed in the new Timestamp metadata, the ECU MAY skip to the last step. Otherwise, download and check the Snapshot metadata file from the Image repository, following the procedure in <xref target="check_snapshot"/>.</t>
  <t>Download and check the top-level Targets metadata file from the Image repository, following the procedure in <xref target="check_targets"/>.</t>
  <t>Verify that Targets metadata from the Director and Image repositories match. A Primary ECU MUST perform this check on metadata for all images listed in the Targets metadata file from the Director repository downloaded in step 6. A Secondary ECU MAY elect to perform this check only on the metadata for the image it will install. (That is, the target metadata from the Director that contains the ECU identifier of the current ECU.) To check that the metadata for an image matches, complete the following procedure:
  <list style="numbers">
      <t>Locate and download a Targets metadata file from the Image repository that contains an image with exactly the same file name listed in the Director metadata, following the procedure in <xref target="resolve_delegations"/>.</t>
      <t>Check that the Targets metadata from the Image repository matches the Targets metadata from the Director repository:
      <list style="numbers">
          <t>Check that the non-custom metadata (i.e., length and hashes) of the unencrypted or encrypted image are the same in both sets of metadata. Note: the Primary is responsible for validating encrypted images and associated metadata. The target ECU (Primary or Secondary) is responsible for validating the unencrypted image and associated metadata.</t>
          <t>Check that all “MUST match” custom metadata (e.g., hardware identifier and release counter) are the same in both sets of metadata.</t>
          <t>Check that the release counter in the previous Targets metadata file is less than or equal to the release counter in this Targets metadata file.</t>
        </list></t>
    </list></t>
</list></t>

<t>If any step fails, the ECU MUST return an error code indicating the failure. If a check for a specific type of security attack fails (e.g. rollback, freeze, arbitrary software, etc.), the ECU SHOULD return an error code that indicates the type of attack.</t>

</section>
<section anchor="check_root" title="How to check Root metadata">

<t>To properly check Root metadata, an ECU SHOULD:</t>

<t><list style="numbers">
  <t>Load the previous Root metadata file.</t>
  <t>Update to the latest Root metadata file.
  <list style="numbers">
      <t>Let N denote the version number of the latest Root metadata file (which at first could be the same as the previous Root metadata file).</t>
      <t>Try downloading a new version N+1 of the Root metadata file, up to some X number of bytes. The value for X is set by the implementor. For example, X may be tens of kilobytes. The filename used to download the Root metadata file is of the fixed form VERSION_NUMBER.FILENAME.EXT (e.g., 42.root.json). If this file is not available, the current Root metadata file is the latest; continue with step 3.</t>
      <t>Version N+1 of the Root metadata file MUST have been signed by the following: (1) a threshold of keys specified in the latest Root metadata file (version N), and (2) a threshold of keys specified in the new Root metadata file being validated (version N+1). If version N+1 is not signed as required, discard it, abort the update cycle, and report the signature failure. On the next update cycle, begin at version N of the Root metadata file. (Checks for an arbitrary software attack.)</t>
      <t>The version number of the latest Root metadata file (version N) must be less than or equal to the version number of the new Root metadata file (version N+1). Effectively, this means checking that the version number signed in the new Root metadata file is indeed N+1. If the version of the new Root metadata file is less than the latest metadata file, discard it, abort the update cycle, and report the rollback attack. On the next update cycle, begin at step 1 and version N of the Root metadata file. (Checks for a rollback attack.)</t>
      <t>Set the latest Root metadata file to the new Root metadata file.</t>
      <t>Repeat steps 2.1 to 2.6.</t>
    </list></t>
  <t>Check that the current (or latest securely attested) time is lower than the expiration timestamp in the latest Root metadata file. (Checks for a freeze attack.)</t>
  <t>If the Timestamp and/or Snapshot keys have been rotated, delete the previous Timestamp and Snapshot metadata files. (Checks for recovery from fast-forward attacks <xref target="MERCURY"/>.)</t>
</list></t>

</section>
<section anchor="check_timestamp" title="How to check Timestamp metadata">

<t>To properly check Timestamp metadata, an ECU SHOULD:</t>

<t><list style="numbers">
  <t>Download up to Y number of bytes. The value for Y is set by the implementor. For example, Y may be tens of kilobytes. The filename used to download the Timestamp metadata file is of the fixed form FILENAME.EXT (e.g., timestamp.json).</t>
  <t>Check that it has been signed by the threshold of keys specified in the latest Root metadata file. If the new Timestamp metadata file is not properly signed, discard it, abort the update cycle, and report the signature failure. (Checks for an arbitrary software attack.)</t>
  <t>Check that the version number of the previous Timestamp metadata file, if any, is less than or equal to the version number of this Timestamp metadata file. If the new Timestamp metadata file is older than the trusted Timestamp metadata file, discard it, abort the update cycle, and report the potential rollback attack. (Checks for a rollback attack.)</t>
  <t>Check that the current (or latest securely attested) time is lower than the expiration timestamp in this Timestamp metadata file. If the new Timestamp metadata file has expired, discard it, abort the update cycle, and report the potential freeze attack. (Checks for a freeze attack.)</t>
</list></t>

</section>
<section anchor="check_snapshot" title="How to check Snapshot metadata">

<t>To properly check Snapshot metadata, an ECU SHOULD:</t>

<t><list style="numbers">
  <t>Download up to the number of bytes specified in the Timestamp metadata file, constructing the metadata filename as defined in <xref target="metadata_filename_rules"/>.</t>
  <t>The hashes and version number of the new Snapshot metadata file MUST match the hashes and version number listed in Timestamp metadata. If the hashes and version number do not match, discard the new Snapshot metadata, abort the update cycle, and report the failure. (Checks for a mix-and-match attack.)</t>
  <t>Check that it has been signed by the threshold of keys specified in the latest Root metadata file. If the new Snapshot metadata file is not signed as required, discard it, abort the update cycle, and report the signature failure. (Checks for an arbitrary software attack.)</t>
  <t>Check that the version number of the previous Snapshot metadata file, if any, is less than or equal to the version number of this Snapshot metadata file. If this Snapshot metadata file is older than the previous Snapshot metadata file, discard it, abort the update cycle, and report the potential rollback attack. (Checks for a rollback attack.)</t>
  <t>Check that the version number listed by the previous Snapshot metadata file for each Targets metadata file is less than or equal to its version number in this Snapshot metadata file. If this condition is not met, discard the new Snapshot metadata file, abort the update cycle, and report the failure. (Checks for a rollback attack.)</t>
  <t>Check that each Targets metadata filename listed in the previous Snapshot metadata file is also listed in this Snapshot metadata file. If this condition is not met, discard the new Snapshot metadata file, abort the update cycle, and report the failure. (Checks for a rollback attack.)</t>
  <t>Check that the current (or latest securely attested) time is lower than the expiration timestamp in this Snapshot metadata file. If the new Snapshot metadata file is expired, discard it, abort the update cycle, and report the potential freeze attack. (Checks for a freeze attack.)</t>
</list></t>

</section>
<section anchor="check_targets" title="How to check Targets metadata">

<t>To properly check Targets metadata, an ECU SHOULD:</t>

<t><list style="numbers">
  <t>Download up to Z number of bytes, constructing the metadata filename as defined in <xref target="metadata_filename_rules"/>. The value for Z is set by the implementor. For example, Z may be tens of kilobytes.</t>
  <t>The version number of the new Targets metadata file MUST match the version number listed in the latest Snapshot metadata. If the version number does not match, discard it, abort the update cycle, and report the failure. (Checks for a mix-and-match attack.) Skip this step if checking Targets metadata on a partial verification ECU; partial verification ECUs will not have Snapshot metadata.</t>
  <t>Check that the Targets metadata has been signed by the threshold of keys specified in the relevant metadata file (Checks for an arbitrary software attack):
  <list style="numbers">
      <t>If checking top-level Targets metadata, the threshold of keys is specified in the Root metadata.</t>
      <t>If checking delegated Targets metadata, the threshold of keys is specified in the Targets metadata file that delegated authority to this role.</t>
    </list></t>
  <t>Check that the version number of the previous Targets metadata file, if any, is less than or equal to the version number of this Targets metadata file. (Checks for a rollback attack.)</t>
  <t>Check that the current (or latest securely attested) time is lower than the expiration timestamp in this Targets metadata file. (Checks for a freeze attack.)</t>
  <t>If checking Targets metadata from the Director repository, verify that there are no delegations.</t>
  <t>If checking Targets metadata from the Director repository, check that no ECU identifier is represented more than once.</t>
  <t>If checking Targets metadata from the Director repository, and the ECU performing the verification is the Primary ECU, check that all listed ECU identifiers correspond to ECUs that are actually present in the vehicle.</t>
</list></t>

</section>
<section anchor="resolve_delegations" title="How to resolve delegations">

<t>To properly check Targets metadata for an image, an ECU MUST locate the metadata file(s) for the role (or roles) that have the authority to sign the image. This metadata might be located in the top-level Targets metadata, but it also may be delegated to another role or to multiple roles. Therefore, all delegations MUST be resolved using the following recursive procedure, beginning with the top-level Targets metadata file.</t>

<t><list style="numbers">
  <t>Download the current metadata file, and check it following the procedure in <xref target="check_targets"/>. If the file cannot be loaded, or if any verification step fails, abort the delegation resolution, and indicate that Image metadata cannot be found because of a missing or invalid role.</t>
  <t>If the current metadata file contains signed metadata about the image, end the delegation resolution and return the metadata to be checked.</t>
  <t>If the current metadata file was reached via a terminating delegation and does not contain signed metadata about the image, abort the delegation resolution for this image and return an error indicating that image metadata could not be found.</t>
  <t>Search the list of delegations, in listed order. For each delegation:
  <list style="numbers">
      <t>Check if the delegation applies to the image being processed. For the delegation to apply, it MUST include the hardware identifier of the target, and the target name must match one of the delegation’s image paths. If either of these tests fail, move on to the next delegation in the list.</t>
      <t>If the delegation is a multi-role delegation, follow the procedure described in <xref target="multirole_delegations"/>. If the multi-role delegation is terminating and no valid Image metadata is found, abort the delegation resolution and return an error indicating that image metadata could not be found.</t>
      <t>If the delegation is a normal delegation, perform delegation resolution, starting at step 1. Note that this may recurse an arbitrary number of levels deep. If a delegation that applies to the image is found but no image metadata is found in the delegated roles or any of its sub-delegations, simply continue on with the next delegation in the list. The search is only completed/aborted if image metadata or a terminating delegation that applies to the image is found.</t>
    </list></t>
  <t>If the end of the list of delegations in the top-level metadata is reached without finding valid image metadata, return an error indicating that image metadata could not be found.</t>
</list></t>

</section>
<section anchor="multirole_delegations" title="Multi-role delegations">

<t>It is possible to delegate signing authority to multiple delegated roles as described in <xref target="TAP-3"/>. Each multi-role delegation effectively contains a list of ordinary delegations, plus a threshold of those roles that must be in agreement about the non-custom metadata for the image. All multi-role delegations MUST be resolved using the following procedure. Note that there may be sub-delegations inside multi-role delegations.</t>

<t><list style="numbers">
  <t>For each of the roles in the delegation, find and load the image metadata (or error) following the procedure in <xref target="resolve_delegations"/>.</t>
  <t>Inspect the non-custom part of the metadata loaded in step 1:
  <list style="numbers">
      <t>Locate all sets of roles which have agreeing (i.e. identical) non-custom metadata and “MUST match” custom metadata. Discard any set of roles with a size smaller than the threshold of roles that must be in agreement for this delegation.</t>
      <t>Check for a conflict. A conflict exists if there remains more than one agreeing set of roles, each set having different metadata. If a conflict is found, choose and return the metadata from the set of roles which includes the earliest role in the multi-delegation list.</t>
      <t>If there is no conflict, check if there is any single set of roles with matching non-custom metadata. If there is, choose and return the metadata from this set.</t>
      <t>If no agreeing set can be found that meets the agreement threshold, return an error indicating that image metadata could not be found.</t>
    </list></t>
</list></t>

</section>
</section>
</section>
</section>


  </middle>

  <back>

    <references title='Normative References'>





<reference  anchor="RFC2119" target='https://www.rfc-editor.org/info/rfc2119'>
<front>
<title>Key words for use in RFCs to Indicate Requirement Levels</title>
<author initials='S.' surname='Bradner' fullname='S. Bradner'><organization /></author>
<date year='1997' month='March' />
<abstract><t>In many standards track documents several words are used to signify the requirements in the specification.  These words are often capitalized. This document defines these words as they should be interpreted in IETF documents.  This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t></abstract>
</front>
<seriesInfo name='BCP' value='14'/>
<seriesInfo name='RFC' value='2119'/>
<seriesInfo name='DOI' value='10.17487/RFC2119'/>
</reference>



<reference  anchor="RFC3647" target='https://www.rfc-editor.org/info/rfc3647'>
<front>
<title>Internet X.509 Public Key Infrastructure Certificate Policy and Certification Practices Framework</title>
<author initials='S.' surname='Chokhani' fullname='S. Chokhani'><organization /></author>
<author initials='W.' surname='Ford' fullname='W. Ford'><organization /></author>
<author initials='R.' surname='Sabett' fullname='R. Sabett'><organization /></author>
<author initials='C.' surname='Merrill' fullname='C. Merrill'><organization /></author>
<author initials='S.' surname='Wu' fullname='S. Wu'><organization /></author>
<date year='2003' month='November' />
<abstract><t>This document presents a framework to assist the writers of certificate policies or certification practice statements for participants within public key infrastructures, such as certification authorities, policy authorities, and communities of interest that wish to rely on certificates.  In particular, the framework provides a comprehensive list of topics that potentially (at the writer's discretion) need to be covered in a certificate policy or a certification practice statement.  This document supersedes RFC 2527.</t></abstract>
</front>
<seriesInfo name='RFC' value='3647'/>
<seriesInfo name='DOI' value='10.17487/RFC3647'/>
</reference>



<reference  anchor="RFC5198" target='https://www.rfc-editor.org/info/rfc5198'>
<front>
<title>Unicode Format for Network Interchange</title>
<author initials='J.' surname='Klensin' fullname='J. Klensin'><organization /></author>
<author initials='M.' surname='Padlipsky' fullname='M. Padlipsky'><organization /></author>
<date year='2008' month='March' />
<abstract><t>The Internet today is in need of a standardized form for the transmission of internationalized &quot;text&quot; information, paralleling the specifications for the use of ASCII that date from the early days of the ARPANET.  This document specifies that format, using UTF-8 with normalization and specific line-ending sequences.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='5198'/>
<seriesInfo name='DOI' value='10.17487/RFC5198'/>
</reference>


<reference anchor="NFC" target="http://www.unicode.org/reports/tr15/">
  <front>
    <title>Unicode Standard Annex #15: Unicode Normalization Forms</title>
    <author initials="M." surname="Davis">
      <organization></organization>
    </author>
    <author initials="M." surname="Duerst">
      <organization></organization>
    </author>
    <date year="2018" month="October"/>
  </front>
</reference>
<reference anchor="TAP-3" target="https://github.com/theupdateframework/taps/blob/d0818e580c322815a473520f2e8cc5f5eb8df499/tap3.md">
  <front>
    <title>The Update Framework TAP 3 - Multi-role delegations</title>
    <author initials="T.K." surname="Kuppusamy">
      <organization></organization>
    </author>
    <author initials="S." surname="Awwad">
      <organization></organization>
    </author>
    <author initials="E." surname="Cordell">
      <organization></organization>
    </author>
    <author initials="V." surname="Diaz">
      <organization></organization>
    </author>
    <author initials="J." surname="Moshenko">
      <organization></organization>
    </author>
    <author initials="J." surname="Cappos">
      <organization></organization>
    </author>
    <date year="2018" month="January" day="18"/>
  </front>
</reference>
<reference anchor="TAP-4" target="https://github.com/theupdateframework/taps/blob/2cb67d913ec19424d1e354b38f862886fbfd4105/tap4.md">
  <front>
    <title>The Update Framework TAP 4 - Multiple repository consensus on entrusted targets</title>
    <author initials="T.K." surname="Kuppusamy">
      <organization></organization>
    </author>
    <author initials="S." surname="Awwad">
      <organization></organization>
    </author>
    <author initials="E." surname="Cordell">
      <organization></organization>
    </author>
    <author initials="V." surname="Diaz">
      <organization></organization>
    </author>
    <author initials="J." surname="Moshenko">
      <organization></organization>
    </author>
    <author initials="J." surname="Cappos">
      <organization></organization>
    </author>
    <date year="2017" month="December" day="15"/>
  </front>
</reference>
<reference anchor="TAP-5" target="https://github.com/theupdateframework/taps/blob/01726d203c9b9c029d26f6612069ce3180500d9a/tap5.md#downloading-metadata-and-target-files">
  <front>
    <title>The Update Framework TAP 5 - Setting URLs for roles in the root metadata file</title>
    <author initials="T.K." surname="Kuppusamy">
      <organization></organization>
    </author>
    <author initials="S." surname="Awwad">
      <organization></organization>
    </author>
    <author initials="E." surname="Cordell">
      <organization></organization>
    </author>
    <author initials="V." surname="Diaz">
      <organization></organization>
    </author>
    <author initials="J." surname="Moshenko">
      <organization></organization>
    </author>
    <author initials="J." surname="Cappos">
      <organization></organization>
    </author>
    <date year="2018" month="January" day="22"/>
  </front>
</reference>
<reference anchor="TUF-spec" target="https://github.com/theupdateframework/specification/blob/2b4e18472fe25d5b57f36f6fa50104967c8faeaa/tuf-spec.md">
  <front>
    <title>The Update Framework Specification</title>
    <author initials="J." surname="Samuel">
      <organization></organization>
    </author>
    <author initials="N." surname="Mathewson">
      <organization></organization>
    </author>
    <author initials="G." surname="Condra">
      <organization></organization>
    </author>
    <author initials="V." surname="Diaz">
      <organization></organization>
    </author>
    <author initials="T.K." surname="Kuppusamy">
      <organization></organization>
    </author>
    <author initials="S." surname="Awwad">
      <organization></organization>
    </author>
    <author initials="S." surname="Tobias">
      <organization></organization>
    </author>
    <author initials="J." surname="Wright">
      <organization></organization>
    </author>
    <author initials="H." surname="Mehnert">
      <organization></organization>
    </author>
    <author initials="E." surname="Tryzelaar">
      <organization></organization>
    </author>
    <author initials="J." surname="Cappos">
      <organization></organization>
    </author>
    <author initials="R." surname="Dingledine">
      <organization></organization>
    </author>
    <date year="2018" month="September" day="19"/>
  </front>
</reference>


    </references>

    <references title='Informative References'>

<reference anchor="MERCURY" target="https://www.usenix.org/system/files/conference/atc17/atc17-kuppusamy.pdf">
  <front>
    <title>Mercury: Bandwidth-Effective Prevention of Rollback Attacks Against Community Repositories</title>
    <author initials="T.K." surname="Kuppusamy">
      <organization></organization>
    </author>
    <author initials="V." surname="Diaz">
      <organization></organization>
    </author>
    <author initials="J." surname="Cappos">
      <organization></organization>
    </author>
    <date year="2017" month="July" day="12"/>
  </front>
  <seriesInfo name="ISBN" value="978-1-931971-38-6"/>
</reference>
<reference anchor="UPTANEESCAR" target="https://ssl.engineering.nyu.edu/papers/kuppusamy_escar_16.pdf">
  <front>
    <title>Securing Software Updates for Automobiles</title>
    <author initials="T.K." surname="Kuppusamy">
      <organization></organization>
    </author>
    <author initials="A." surname="Brown">
      <organization></organization>
    </author>
    <author initials="S." surname="Awwad">
      <organization></organization>
    </author>
    <author initials="D." surname="McCoy">
      <organization></organization>
    </author>
    <author initials="R." surname="Bielawski">
      <organization></organization>
    </author>
    <author initials="C." surname="Mott">
      <organization></organization>
    </author>
    <author initials="S." surname="Lauzon">
      <organization></organization>
    </author>
    <author initials="A." surname="Weimerskirch">
      <organization></organization>
    </author>
    <author initials="J." surname="Cappos">
      <organization></organization>
    </author>
    <date year="2016" month="October" day="16"/>
  </front>
</reference>
<reference anchor="PEP-458" target="https://www.python.org/dev/peps/pep-0458/">
  <front>
    <title>PEP 458 -- Surviving a Compromise of PyPI</title>
    <author initials="T.K." surname="Kuppusamy">
      <organization></organization>
    </author>
    <author initials="V." surname="Diaz">
      <organization></organization>
    </author>
    <author initials="D." surname="Stufft">
      <organization></organization>
    </author>
    <author initials="J." surname="Cappos">
      <organization></organization>
    </author>
    <date year="2013" month="September" day="27"/>
  </front>
</reference>
<reference anchor="DEPLOY" target="https://docs.google.com/document/d/17wOs-T7mugwte5_Dt-KLGMsp-3_yAARejpFmrAMefSE/">
  <front>
    <title>Uptane Deployment Considerations</title>
    <author initials="." surname="Members of the Uptane Alliance Community">
      <organization></organization>
    </author>
    <date year="n.d."/>
  </front>
</reference>
<reference anchor="USATODAY" target="https://www.usatoday.com/story/tech/columnist/2016/06/28/your-average-car-lot-more-code-driven-than-you-think/86437052/">
  <front>
    <title>Your average car is a lot more code-driven than you think</title>
    <author initials="B." surname="O'Donnell">
      <organization></organization>
    </author>
    <date year="2016" month="June" day="28"/>
  </front>
</reference>
<reference anchor="CR-OTA" target="https://www.consumerreports.org/automotive-technology/automakers-embrace-over-the-air-updates-can-we-trust-digital-car-repair/">
  <front>
    <title>Automakers Embrace Over-the-Air Updates, but Can We Trust Digital Car Repair?</title>
    <author initials="K." surname="Barry">
      <organization></organization>
    </author>
    <date year="2018" month="April" day="20"/>
  </front>
</reference>
<reference anchor="IN-TOTO" target="https://in-toto.github.io/">
  <front>
    <title>in-toto: A framework to secure the integrity of software supply chains</title>
    <author >
      <organization></organization>
    </author>
    <date year="2018" month="October" day="29"/>
  </front>
</reference>


    </references>



  </back>

<!-- ##markdown-source:
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
mzWYfsEokWVStCtghKHPH0Lu/w+8NyV+RzIBAA==

-->

</rfc>


<?xml version="1.0" encoding="UTF-8"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc2629 version 1.2.9 -->

<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
]>

<?rfc toc="yes"?>
<?rfc sortrefs="yes"?>
<?rfc symrefs="yes"?>

<rfc ipr="noDerivativesTrust200902" docName="uptane-standard-design" category="info">

  <front>
    <title abbrev="UPTANE">Uptane Standard for Design and Implementation</title>

    <author initials="." surname="Members of the Uptane Alliance Community" fullname="Uptane Alliance Community">
      <organization>Uptane Alliance (c/o Prof. Justin Cappos)</organization>
      <address>
        <postal>
          <street>6 MetroTech</street>
          <city>Brooklyn</city>
          <region>NY</region>
          <code>11201</code>
          <country>USA</country>
        </postal>
        <email>uptane-standards@googlegroups.com</email>
      </address>
    </author>

    <date year="2020" month="September" day="17"/>

    <area>TODO</area>
    <workgroup>TODO</workgroup>
    <keyword>Internet-Draft</keyword>

    <abstract>


<t>This document describes a framework for securing ground vehicle software update systems.</t>



    </abstract>


  </front>

  <middle>


<section anchor="introduction" title="Introduction">

<t>Uptane is a secure software update framework for ground vehicles. This document describes procedures to enable programmers for OEMs and suppliers to securely design and implement this framework in a manner that better protects connected units on ground vehicles. Integrating Uptane as outlined in the sections that follow can reduce the ability of attackers to compromise critical systems. It also assures a faster and easier recovery process should a compromise occur.</t>

<t>These instructions specify the components necessary for a compliant implementation. Individual implementors can make their own technological choices within those requirements. This flexibility makes Uptane adaptable to the many customized update solutions used by manufacturers. If implementors wish to have compatible formats, they may use POUFs. POUFs contain a description of implementation choices as well as data binding formats. An implementor who adopts a POUF, as well as the Uptane Standard, will be able to interoperate with other implementations using that POUF.</t>

</section>
<section anchor="terminology" title="Terminology">

<section anchor="conformance-terminology" title="Conformance terminology">

<t>The keywords MUST, MUST NOT, REQUIRED, SHALL, SHALL NOT, SHOULD, SHOULD NOT, RECOMMENDED, MAY, and OPTIONAL in this document are to be interpreted as described in <xref target="RFC2119"/>.</t>

<t>In order to be considered “Uptane-compliant,” an implementation MUST follow all of these rules as specified in the document.</t>

</section>
<section anchor="terminology-1" title="Terminology">

<t><spanx style="emph">Bundle</spanx>: A set of images released by the repository that is meant to be installed by one or more target ECUs on a vehicle during the same update cycle.</t>

<t><spanx style="emph">Bus</spanx>: An internal communications network that interconnects components within a vehicle. A vehicle can have a number of buses that will vary in terms of power, speed and resources.</t>

<t><spanx style="emph">ECU Identifier</spanx>: An attribute used to identify a specific ECU (e.g., such as a unique serial number).</t>

<t><spanx style="emph">ECU Version Manifest</spanx>: Metadata which details the software version currently installed on the ECU.</t>

<t><spanx style="emph">Hardware Identifier</spanx>: An attribute used to identify a model of an ECU.</t>

<t><spanx style="emph">Image</spanx>: File containing software for an ECU to install. May contain a binary image to flash, installation instructions, and other necessary information for the ECU to properly apply the update. Each ECU typically holds only one image, although this may vary in some cases.</t>

<t><spanx style="emph">Metadata</spanx>:  Information describing the characteristics of data including, for example, structural
metadata describing data structures (e.g., data format, syntax, and semantics) and
descriptive metadata describing data contents (e.g., information security labels). As used in Uptane, metadata can be described as information associated with a role or an image that contains the characteristics or parameters thereof (e.g. cryptographic material parameters, file names and versions.)</t>

<t><spanx style="emph">Primary/Secondary ECUs</spanx>: Terms used to describe the control units within a ground vehicle. A Primary ECU downloads and verifies update images and metadata for itself and for Secondary ECUs, and distributes images and metadata to Secondaries. Thus, it requires extra storage space and a means to download images and metadata.  Secondary ECUs receive their update images and metadata from the Primary, and only need to verify and install their own metadata and images.</t>

<t><spanx style="emph">POUF</spanx>: A document that contains the protocol, operations, usage, and formats (POUF) of a specific Uptane implementation. The POUF contains decisions about SHOULDs and MAYs in an implementation, as well as descriptions of data binding formats. POUFs MAY be used to create compatible Uptane implementations.</t>

<t><spanx style="emph">Repository</spanx>: A server containing metadata about images. May also contain the images themselves. Other data may be stored on the repository to be accessed by ECUs during the update process.</t>

<t><spanx style="emph">Suppliers</spanx>: Independent companies to which auto manufacturers may outsource the production of ECUs. Tier-1 suppliers directly serve the manufacturers. Tier-2 suppliers are those that perform outsourced work for Tier-1 suppliers.</t>

<t><spanx style="emph">Vehicle Version Manifest</spanx>: A compilation of all ECU version manifests on a vehicle. It serves as a master list of all images currently running on all ECUs in the vehicle.</t>

</section>
<section anchor="uptane-role-terminology" title="Uptane Role terminology">

<t>These terms are defined in greater detail in <xref target="roles"/>.</t>

<t><spanx style="emph">Delegations</spanx>: A process by which the responsibility of signing metadata about images is assigned to another party.<vspace />
<spanx style="emph">Role</spanx>: A party (human or machine) responsible for signing a certain type of metadata. The role controls keys and is responsible for signing metadata entrusted to it with these keys. The roles mechanism of Uptane allows the system to distribute signing responsibilities so that the compromise of one key does not necessarily impact the security of the entire system.</t>

<t><list style="symbols">
  <t><spanx style="emph">Root Role</spanx>: Signs metadata that distributes and revokes public keys used to verify the Root, Timestamp, Snapshot, and Targets role metadata.</t>
  <t><spanx style="emph">Snapshot Role</spanx>: Signs metadata that indicates which images the repository has released at the same time.</t>
  <t><spanx style="emph">Targets Role</spanx>: Signs metadata used to verify the image, such as cryptographic hashes and file size.</t>
  <t><spanx style="emph">Timestamp Role</spanx>: Signs metadata that indicates if there are any new metadata or images on the repository.</t>
</list></t>

</section>
<section anchor="acronyms-and-abbreviations" title="Acronyms and abbreviations">

<t><spanx style="emph">CAN Bus</spanx>: Controller Area Network bus standard</t>

<t><spanx style="emph">CDN</spanx>: Content Delivery Network</t>

<t><spanx style="emph">ECUs</spanx>: Electronic Control Units, the computing units on a vehicle</t>

<t><spanx style="emph">LIN Bus</spanx>: Local Interconnect Bus</t>

<t><spanx style="emph">OBD</spanx>: On-board diagnostics</t>

<t><spanx style="emph">SOTA</spanx>: Software Updates Over-the-Air</t>

<t><spanx style="emph">UDS</spanx>: Unified Diagnostic Services</t>

<t><spanx style="emph">VIN</spanx>: Vehicle Identification Number</t>

</section>
</section>
<section anchor="rationale-for-and-scope-of-uptane-standards" title="Rationale for and scope of Uptane Standards">

<t>This Standards document clarifies the essential components and best practices for the secure design, implementation and deployment of Uptane by OEMs and suppliers. These practices contribute to compromise resilience, or the ability to minimize the extent of the threat posed by any given attack.</t>

<t>However, this specification is intended as an implementation guide, and not as a detailed technical argument about the security properties that Uptane provides.  Readers interested in such documentation should refer to published papers that cover this topic.  <xref target="UPTANEESCAR"/></t>

<section anchor="why-uptane-requires-a-standards-document" title="Why Uptane requires a standards document">

<t>A standards document that can guide the safe design, integration and deployment of Uptane in vehicles is needed at this time because:</t>

<t><list style="symbols">
  <t>The number of connected units on the average vehicle continues to grow, with mainstream cars now containing up to 100 million lines of code. <xref target="USATODAY"/></t>
  <t>The expanded use of software over-the-air strategies creates new attack surfaces for malicious parties. <xref target="CR-OTA"/></t>
  <t>Legacy update strategies, such as SSL/TLS or GPG/RSA, are not feasible for use on vehicle ECUs because they force manufacturers to chose between enhanced security and customizability.</t>
  <t>Conventional strategies are also complicated by the differing resources of the ECUs, which can vary greatly in memory, storage space, and Internet connectivity.</t>
  <t>The design of Uptane makes it possible to offer improved design flexibility, without sacrificing security.</t>
  <t>This added design flexibility, however, could be a liability if the framework is implemented incorrectly.</t>
  <t>Standardization of crucial steps in the design, implementation and use of Uptane can assure that customizability does not impact security or functionality.</t>
</list></t>

</section>
<section anchor="scope-of-standards-coverage" title="Scope of Standards coverage">

<t>This document sets guidelines for implementing Uptane in most systems capable of updating software on connected units in ground vehicles, including passenger vehicles, light-duty trucks, heavy-duty trucks, and motorcycles. Uptane could potentially also be applied to other ground vehicles, such as automated shuttles, recreational vehicles, and military ground vehicles. Uptane could even be applied to domains such as IoT devices, medical devices, and unmanned aerial vehicles. In this section, we define the scope of that applicability by providing sample use cases and possible exceptions, aspects of software update security that are not applicable to Uptane, and the design requirements governing the preparation of these standards.</t>

<section anchor="assumptions" title="Assumptions">

<t>We assume the following system preconditions for Uptane:</t>

<t><list style="symbols">
  <t>Vehicles have the ability to establish connectivity to required backend services. For example, this could be done through cellular, Wi-Fi, or hard-wired mechanisms.</t>
  <t>ECUs are either directly connected to the communication channel, or are indirectly connected via some sort of network gateway.</t>
  <t>ECUs are programmable and provide sufficient performance to be updated.</t>
  <t>ECUs must be able to perform a public key cryptography operation as well as some supporting operations.</t>
  <t>There are state-of-the-art secure servers in place, such as the Director and Image repository servers.</t>
</list></t>

<t>It is important that any bugs detected in Uptane implementations be patched promptly. Failure to do so could interfere with the effectiveness of Uptane’s operations.</t>

</section>
<section anchor="use-cases" title="Use cases">

<t>The following use cases provide a number of scenarios illustrating the manner in which software updates could be accomplished using Uptane.</t>

<section anchor="oems-initializing-uptane-at-the-factory-using-sota" title="OEMs initializing Uptane at the factory using SOTA">

<t>An OEM plans to install Uptane on new vehicles. This entails the following components: code to perform full and partial verification, the latest copy of the relevant metadata, the public keys, and an accurate attestation of the latest time. The OEM then either requires its tier-1 suppliers to provide these materials to the suppliers’ assembly lines or can choose to add the materials later at the OEM’s assembly lines. The OEM’s in-vehicle implementation is Uptane-compliant if:</t>

<t><list style="numbers">
  <t>all Primaries perform full verification;</t>
  <t>all Secondaries that are updated via OTA at least perform partial verification; and</t>
  <t>all other ECUs that do not perform any type of verification cannot be updated via OTA.</t>
</list></t>

</section>
<section anchor="updating-one-ecu-with-a-complete-image" title="Updating one ECU with a complete image">

<t>A tier-1 supplier completes work on a revised image for an electronic brake control module. This module will control the brakes on all models of an SUV produced by the OEM mentioned above. Assuming supplier delegation is supported by the OEM for this ECU, each tier-1 supplier digitally signs the image, then delivers the signature and all of its metadata, including delegations, and associated images to the OEM. The OEM adds these metadata and images to its image repository, along with information about any dependencies and conflicts between this image and those for other ECUs used in the OEM’s vehicles. The OEM also updates the inventory database, so that the director repository can instruct the ECU on how to install these updated images.</t>

</section>
<section anchor="updating-individual-ecus-on-demand" title="Updating individual ECUs on demand">

<t>An OEM has issued a recall to address a problem with a keyless entry device that has been locking people out of their cars. The OEM prepares an updated flash image in the manner described above. The OEM then ships USB flash drives to vehicle owners and dealerships that allow those parties to update the firmware of their vehicles.</t>

</section>
<section anchor="update-one-ecu-with-multiple-deltas" title="Update one ECU with multiple deltas">

<t>The OEM wants to use delta updates to save over-the-air bytes. The delta images contain only the code and/or data that has changed from the previous image version. To do so, the OEM must first modify the Director repository, using the vehicle version manifest and dependency resolution to determine the differences between the previous and latest images. The OEM then adds the following to the custom Targets metadata used by the Director repository: (1) the algorithm used to apply a delta image, and (2) the Targets metadata about the delta image. The OEM will also check whether the delta images match the Targets metadata from the Director repository.</t>

</section>
</section>
</section>
<section anchor="exceptions" title="Exceptions">

<t>There are a number of factors that could impede the completion of the above scenarios:</t>

<t><list style="symbols">
  <t>ECUs may be lacking the necessary resources to function as designated. These resources could include weaknesses, in terms of CPU or RAM, that render performance of public key cryptography infeasible; a lack of sufficient storage to undo installation of bad software; or an ECU simply may reside on a low-speed network (e.g., LIN).</t>
  <t>ECUs may reside on different network segments, and may not be able to directly reach each other, requiring a gateway to facilitate communication.</t>
  <t>A user may replace OEM-installed ECUs with aftermarket ECUs.</t>
  <t>A vehicle may be able to download only a limited amount of data via a cellular channel, due to limits on a data plan.</t>
  <t>A system may lack sufficient power to download or install software updates.</t>
  <t>Vehicles may be offline for extended periods of time, thus missing required updates (e.g., key rotations).</t>
  <t>OEMs may be unwilling to implement costly security or hardware requirements.</t>
</list></t>

</section>
<section anchor="out-of-scope" title="Out of Scope">

<t>The following topics will not be addressed in this document, as they represent threats outside the scope of Uptane:</t>

<t><list style="symbols">
  <t>Physical attacks, such as manual tampering with ECUs outside the vehicle.</t>
  <t>Compromise of the packaged software, such as malware embedded in a trusted package.</t>
  <t>Compromise of the supply chain (e.g., build system, version control system, packaging process). A number of strategies (e.g., git signing, TPMs, in-toto <xref target="IN-TOTO"/>)  already exist to address this problem. Therefore, there is no need to duplicate those techniques here.</t>
  <t>Problems associated with OBD or UDS programming of ECUs, such as authentication of communications between ECUs.</t>
  <t>Malicious mirrors of package repositories, which may substitute original packages with malicious packages with matching version numbers <xref target="MERCURY"/>.</t>
</list></t>

</section>
<section anchor="design-requirements" title="Design requirements">

<t>The design requirements for this document are governed by the following principal parameters:</t>

<t><list style="symbols">
  <t>to clearly mandate the design and implementation steps that are security critical and must be followed as is, while offering flexibility in the implementation of non-critical steps. In this manner, users can adapt to support different use models and deployment scenarios.</t>
  <t>to ensure that, if Uptane is implemented, the security practices mandated or suggested in this document do not interfere with the functionality of ECUs, vehicles, or the systems that maintain them.</t>
  <t>to delineate best practices to ensure that, should any part of the SOTA mechanism of a vehicle be attacked, an attacker must compromise two or more modules to breach the SOTA mechanism.</t>
</list></t>

</section>
</section>
<section anchor="threat-model-and-attack-strategies" title="Threat model and attack strategies">

<t>The overarching goal of Uptane is to provide a system that is resilient in the face of various types of compromise. In this section, we describe the goals an attacker may have (<xref target="attacker_goals"/>) and the capabilities they may have or could develop (<xref target="capabilities"/>). We then describe and classify types of attacks on the system according to the attacker’s goals (<xref target="threats"/>).</t>

<section anchor="attacker_goals" title="Attacker goals">

<t>We assume that attackers may want to achieve one or more of the following goals, in increasing order of severity:</t>

<t><list style="symbols">
  <t>Read the contents of updates to discover confidential information, reverse-engineer firmware, or compare two firmware images to identify security fixes and hence determine the fixed security vulnerability</t>
  <t>Deny installation of updates to prevent vehicles from fixing software problems</t>
  <t>Cause one or more ECUs in the vehicle to fail, denying use of the vehicle or of certain functions</t>
  <t>Control ECUs within the vehicle, and possibly the vehicle itself</t>
</list></t>

</section>
<section anchor="capabilities" title="Attacker capabilities">

<t>Uptane is designed with resilience to compromise in mind. We assume that attackers may develop one or more of the following capabilities:</t>

<t><list style="symbols">
  <t>Intercept and modify network traffic (i.e., perform man-in-the-middle attacks). This capability may be developed in two domains:
  <list style="symbols">
      <t>Outside the vehicle, intercepting and modifying traffic between the vehicle and software repositories</t>
      <t>Inside the vehicle, intercepting and modifying traffic on one or more vehicle buses (e.g. via an OBD port or using a compromised ECU as a vector)</t>
    </list></t>
  <t>Compromise and control either a Director repository or Image repository server, and any keys stored on that repository, but not both the Director and Image repositories.</t>
  <t>Compromise either a Primary ECU or a Secondary ECU, but not both in the same vehicle</t>
</list></t>

</section>
<section anchor="threats" title="Description of threats">

<t>Uptane’s threat model includes the following types of attacks, organized according to the attacker goals listed in <xref target="attacker_goals"/>.</t>

<section anchor="read_updates" title="Read updates">

<t><list style="symbols">
  <t><spanx style="emph">Eavesdrop attack:</spanx> Read sensitive or confidential information from an update intended to be encrypted for a specific ECU. (Note: Not all implementations will have a need for protecting information in this way.)</t>
</list></t>

</section>
<section anchor="deny_updates" title="Deny installation of updates">

<t>An attacker seeking to deny the installation of updates may attempt one or more of the following strategies, among others:</t>

<t><list style="symbols">
  <t><spanx style="emph">Drop-request attack:</spanx> Block network traffic outside or inside the vehicle.</t>
  <t><spanx style="emph">Slow retrieval attack:</spanx> Slow down network traffic, in the extreme case sending barely enough packets to avoid a timeout. Similar to a drop-request attack, except that both the sender and receiver of the traffic still think network traffic is unimpeded.</t>
  <t><spanx style="emph">Freeze attack:</spanx> Continue to send a properly signed, but old, update bundle to the ECUs, even if newer updates exist.</t>
  <t><spanx style="emph">Partial bundle installation attack:</spanx> Install a valid (signed) update bundle, and then block selected updates within the bundle.</t>
  <t>Conduct a denial of service attack against the Uptane repositories or infrastructure.</t>
</list></t>

</section>
<section anchor="change_functionality" title="Interfere with ECU functionality">

<t>Attackers seeking to interfere with the functionality of vehicle ECUs in order to cause an operational failure or unexpected behavior may do so in one of the following ways:</t>

<t><list style="symbols">
  <t><spanx style="emph">Rollback attack:</spanx> Cause an ECU to install a previously valid software revision that is older than the currently installed version.</t>
  <t><spanx style="emph">Endless data attack:</spanx> Send a large amount of data to an ECU, until it runs out of storage, possibly causing the ECU to fail to operate.</t>
  <t><spanx style="emph">Mix-and-match attack:</spanx> Install a malicious software bundle in which some of the updates do not interoperate properly. This may be accomplished even if all of the individual images being installed are valid, as long as valid versions exist that are mutually incompatible.</t>
</list></t>

</section>
<section anchor="control_ecu" title="Control an ECU or vehicle">

<t>Full control of a vehicle, or one or more ECUs within a vehicle, is the most severe threat.</t>

<t><list style="symbols">
  <t><spanx style="emph">Arbitrary software attack:</spanx> Cause an ECU to install and run arbitrary code of the attacker’s choice.</t>
</list></t>

</section>
</section>
</section>
<section anchor="design" title="Detailed design of Uptane">

<t>Uptane is a secure software update framework for automobiles. We do not specify implementation details. Instead, we describe the components necessary for a compliant implementation and leave it up to individual implementors to make their own technological choices within those requirements.</t>

<t>At a high level, Uptane requires:</t>

<t><list style="symbols">
  <t>Two software repositories:
  <list style="symbols">
      <t>An Image repository containing binary images to install, and signed metadata about those images</t>
      <t>A Director repository connected to an inventory database that can sign metadata on demand for images in the Image repository</t>
    </list></t>
  <t>Repository tools for generating Uptane-specific metadata about images</t>
  <t>A public key infrastructure supporting the required metadata production/signing roles on each repository:
  <list style="symbols">
      <t>Root - Certificate authority for the Uptane ecosystem. Distributes public keys for verifying all the other roles’ metadata</t>
      <t>Timestamp - Indicates whether there are new metadata or images</t>
      <t>Snapshot - Indicates images released by the repository at a point in time, via signing metadata about Targets metadata</t>
      <t>Targets - Indicates metadata about images, such as hashes and file sizes</t>
    </list></t>
  <t>A secure way for ECUs to know the time.</t>
  <t>An ECU capable of downloading images and associated metadata from the Uptane servers.</t>
  <t>An in-vehicle client on a Primary ECU capable of verifying the signatures on all update metadata and downloading updates on behalf of its associated Secondary ECUs. The Primary ECU MAY be the same ECU that communicates with the server.</t>
  <t>A client or library on each Secondary ECU capable of performing either full or partial verification of metadata</t>
</list></t>

<section anchor="roles" title="Roles on repositories">

<t>A repository contains images and metadata. Each role has a particular type of metadata associated with it, as described in <xref target="meta_structures"/>.</t>

<section anchor="root_role" title="The Root role">

<t>A repository’s Root role SHALL be responsible for a Certificate Authority as defined in <xref target="RFC3647"/>.
A repository’s Root role SHALL produce and sign Root metadata as described in <xref target="root_meta"/>.
A repository’s Root role SHALL sign the public keys used to verify the metadata produced by the Timestamp, Snapshot, and Targets roles.
A repository’s Root role SHALL revoke keys for the other roles, in case of compromise.</t>

</section>
<section anchor="targets_role" title="The Targets role">

<t>A repository’s Targets role SHALL produce and sign metadata about images and delegations as described in <xref target="targets_meta"/>.</t>

<section anchor="targets_role_delegations" title="Delegations">

<t>The Targets role on the Image repository MAY delegate the responsibility of signing metadata to other, custom-defined roles referred to as delegated targets. If it does, it MUST do so as specified in <xref target="delegations_meta"/>.</t>

<t>Responsibility for signing images or a subset of images MAY be delegated to more than one role and therefore it is possible for two different roles to be trusted for signing a particular image. For this reason, delegations MUST be prioritized.</t>

<t>A particular delegation for a subset of images MAY be designated as <spanx style="strong">terminating</spanx>. For terminating delegations, the client SHALL NOT search any further if it does not find validly signed metadata about those images. Delegations SHOULD NOT be terminating by default; terminating delegations SHOULD only be used when there is a compelling technical reason to do so.</t>

<t>A delegation for a subset of images MAY be a multi-role delegation <xref target="TAP-3"/>. A multi-role delegation indicates that multiple roles are needed to sign a particular image and each of the delegatee roles MUST sign the same metadata.</t>

<t>Delegations only apply to the Image repository. The Targets role on the Director repository MUST NOT delegate metadata signing responsibility.</t>

</section>
</section>
<section anchor="snapshot_role" title="The Snapshot role">

<t>A repository’s Snapshot role SHALL produce and sign metadata about all Targets metadata the repository releases, including the current version number of the top-level Targets metadata, and the version numbers of all delegated Targets metadata, as described in <xref target="snapshot_meta"/>.</t>

</section>
<section anchor="timestamp_role" title="The Timestamp role">

<t>A repository’s Timestamp role SHALL produce and sign metadata indicating whether there are new metadata or images on the repository. It MUST do so by signing the metadata about the Snapshot metadata file.</t>

</section>
</section>
<section anchor="meta_structures" title="Metadata structures">

<t>Uptane’s security guarantees all rely on properly created metadata that follows a designated structure. The Uptane standard <spanx style="strong">does not</spanx> mandate any particular format or encoding for the metadata as a whole. ASN.1 (with any encoding scheme like BER, DER, XER, etc.), JSON, XML, or any other encoding format that is capable of providing the required structure MAY be used.</t>

<t>However, string comparison is required as part of metadata verification. To ensure an accurate basis for comparing strings, all strings MUST be encoded in the Unicode Format for Network Interchange as defined in <xref target="RFC5198"/>, including normalization into Unicode Normalization Form C (<xref target="NFC"/>).</t>

<t>In the Deployment Considerations document (<xref target="DEPLOY"/>), the Uptane Alliance provides some examples of compliant metadata structures in ASN.1 and JSON.</t>

<section anchor="common_metadata" title="Common metadata structures">

<t>Every public key MUST be represented using a public key identifier.  A public key identifier is EITHER all of the following:</t>

<t><list style="symbols">
  <t>The value of the public key itself (which MAY be, for example, formatted as a PEM string)</t>
  <t>The public key cryptographic algorithm used by the key (such as RSA or ECDSA)</t>
  <t>The particular scheme used to verify the signature (such as <spanx style="verb">rsassa-pss-sha256</spanx> or <spanx style="verb">ecdsa-sha2-nistp256</spanx>)</t>
</list></t>

<t>OR a secure hash over at least the above components (such as the keyid mechanism in TUF).</t>

<t>All four Uptane roles (Root, Targets, Snapshot, and Timestamp) share a common structure. They SHALL contain the following two attributes:</t>

<t><list style="symbols">
  <t>A payload of metadata to be signed</t>
  <t>An attribute containing the signature(s) of the payload, where each entry specifies:
  <list style="symbols">
      <t>The public key identifier of the key being used to sign the payload</t>
      <t>A signature with this key over the payload</t>
    </list></t>
</list></t>

<t>The payload differs depending on the role. However, the payload for all roles shares a common structure. It SHALL contain the following four attributes:</t>

<t><list style="symbols">
  <t>An indicator of the type of role (Root, Targets, Snapshot, or Timestamp)</t>
  <t>An expiration date and time</t>
  <t>An integer version number, which SHOULD be incremented each time the metadata file is updated</t>
  <t>The role-specific metadata for the role indicated</t>
</list></t>

<t>The following sections describe the role-specific metadata. All roles SHALL follow the common structures described here.</t>

</section>
<section anchor="root_meta" title="Root metadata">

<t>A repository’s Root metadata distributes the public keys of the top-level Root, Targets, Snapshot, and Timestamp roles, as well as revocations of those keys. It SHALL contain two attributes:</t>

<t><list style="symbols">
  <t>A representation of the public keys for all four roles. Each key SHALL have a unique public key identifier.</t>
  <t>An attribute mapping each role to (1) its public key(s), and (2) the threshold of signatures required for that role</t>
</list></t>

<t>Additionally, it MAY contain a mapping of roles to a list of valid URLs from which the role metadata can be downloaded.  If this mapping of URLs is used, the implementer SHOULD implement this functionality following <xref target="TAP-5"/> to avoid adding unforeseen security risks.</t>

</section>
<section anchor="targets_meta" title="Targets metadata">

<t>The Targets metadata on a repository contains all of the information about images to be installed on ECUs. This includes filenames, hashes, file sizes, and MAY also include other useful information about images, such as what types of hardware are compatible with a particular image.</t>

<t>Targets metadata can also contain metadata about delegations, allowing one Targets role to delegate its authority to another. This means that an individual Targets metadata file might contain only metadata about delegations, only metadata about images, or some combination of the two. The details of how ECUs traverse the delegation tree to find valid metadata about images is specified in <xref target="resolve_delegations"/>.</t>

<section anchor="targets_images_meta" title="Metadata about images">

<t>To be available to install on clients, all images on the repository MUST have their metadata listed in a Targets role.  Each Targets role MAY provide a list of some images on the repository.  This list MUST provide, at a minimum, the following information about each image:</t>

<t><list style="symbols">
  <t>The image filename</t>
  <t>The size of the image in bytes</t>
  <t>One or more hashes of the image file, along with the hashing function used</t>
</list></t>

<section anchor="custom-metadata-about-images" title="Custom metadata about images">

<t>In addition to the required metadata, Targets metadata files MAY contain extra metadata for images on the repository. This metadata can be customized for a particular use case. Examples of use cases for different types of custom metadata can be found in the Deployment Considerations document (<xref target="DEPLOY"/>). However, there are a few important pieces of custom metadata that SHOULD be present in most implementations. In addition, there is one element in the custom metadata that MUST be present in the Targets metadata from the Director.</t>

<t>Custom metadata MAY also contain a demarcated field or section that MUST match whenever two pieces of metadata are checked against each other, such as when Targets metadata from the Director repository is checked against Targets metadata from the Image repository.</t>

<t>The information listed below SHOULD be provided for each image on both the Image repository and the Director repository. If a “MUST match section” is to be implemented, that is where this information SHOULD be placed.</t>

<t><list style="symbols">
  <t>A release counter, to be incremented each time a new version of the image is released. This can be used to prevent rollback attacks even in cases where the Director repository is compromised.</t>
  <t>A hardware identifier, or list of hardware identifiers, representing models of ECUs with which the image is compatible. This can be used to ensure that an ECU cannot be ordered to install an incompatible image, even in cases where the Director repository is compromised.</t>
</list></t>

<t>The following information is CONDITIONALLY REQUIRED for each image on the Director repository IF that image is encrypted:</t>

<t><list style="symbols">
  <t>Information about filenames, hashes, and file size of the encrypted image.</t>
  <t>Information about the encryption method, and other relevant information–for example, a symmetric encryption key encrypted by the ECU’s asymmetric key could be included in the Director repository metadata.</t>
</list></t>

<t>The following information MUST be provided for each image in the Targets metadata from the Director repository:</t>

<t><list style="symbols">
  <t>An ECU identifier (such as a serial number), specifying the ECU that should install the image.</t>
</list></t>

<t>The Director repository MAY provide a download URL for the image file. This may be useful, for example, when the image is on a public CDN and the director wishes to provide a signed URL.</t>

</section>
</section>
<section anchor="delegations_meta" title="Metadata about delegations">

<t>A Targets metadata file on the Image repository (but not the Director repository) MUST be able to delegate signing authority to other entities. For example, it could delegate signing authority for a particular ECU’s firmware to that ECU’s supplier. A metadata file MAY contain any number of delegations and MUST keep the delegations in prioritized order.</t>

<t>A list of delegations MUST provide the following information:</t>

<t><list style="symbols">
  <t>A list of public keys of all delegatees. Each key should have a unique public key identifier and a key type.</t>
  <t>A list of delegations, each of which contains:
  <list style="symbols">
      <t>A list of the filenames to which this role applies. This MAY be expressed using wildcards, or by enumerating a list, or a combination of the two.</t>
      <t>An optional list of the hardware identifiers to which this role applies.  If this is omitted, any hardware identifier will match.</t>
      <t>An indicator of whether or not this is a terminating delegation. (See <xref target="targets_role_delegations"/>.)</t>
      <t>A list of the roles to which this delegation applies. Each role needs to specify:
      <list style="symbols">
          <t>A name for the role (e.g. “supplier1-qa”)</t>
          <t>The key identifiers for each key this role uses</t>
          <t>A threshold of keys that must sign for this role</t>
        </list></t>
    </list></t>
</list></t>

<t>Note that <spanx style="strong">any</spanx> Targets metadata file stored on the Image repository may contain delegations, and these delegations can be in chains of arbitrary length.</t>

</section>
</section>
<section anchor="snapshot_meta" title="Snapshot metadata">

<t>The Snapshot metadata lists version numbers and filenames of all Targets metadata files. It protects against mix-and-match attacks if a delegated supplier key is compromised.</t>

<t>For each Targets metadata file on the repository, the Snapshot metadata SHALL contain the following information:</t>

<t><list style="symbols">
  <t>The filename and version number of the each Targets metadata file on the repository</t>
</list></t>

<t>The Snapshot metadata MAY also list the Root metadata filename and version number. This is not required, particularly for implementations of <xref target="TAP-5"/>, but MAY be included in all cases for backward compatibility.</t>

</section>
<section anchor="timestamp_meta" title="Timestamp metadata">

<t>The Timestamp metadata SHALL contain the following information:</t>

<t><list style="symbols">
  <t>The filename and version number of the latest Snapshot metadata on the repository.</t>
  <t>One or more hashes of the Snapshot metadata file, along with the hashing function used.</t>
</list></t>

</section>
<section anchor="repo_mapping_meta" title="Repository mapping metadata">

<t>As described in the introduction to <xref target="design"/>, Uptane requires a Director repository and an Image repository. However, it is possible to have an Uptane-compliant implementation that has more than two repositories.</t>

<t>Repository mapping metadata informs a Primary ECU about which repositories to trust for images or image paths. <xref target="TAP-4"/> describes how to make use of more complex repository mapping metadata in order to have more than the two required repositories.</t>

<t>Repository mapping metadata, or the equivalent informational content, MUST be present on all Primary ECUs, and MUST contain the following information:</t>

<t><list style="symbols">
  <t>A list of repository names and one or more URLs at which the named repository can be accessed. At a minimum, this MUST include the Director and Image repositories.</t>
  <t>A list of mappings of image paths to repositories, each of which contains:
  <list style="symbols">
      <t>A list of image paths. Image paths MAY be expressed using wildcards, or by enumerating a list, or a combination of the two.</t>
      <t>A list of repositories that MUST sign the Targets metadata for the image paths.</t>
    </list></t>
</list></t>

<t>For example, in the most basic Uptane case, the repository mapping metadata would contain:</t>

<t><list style="symbols">
  <t>The name and URL of the Director repository</t>
  <t>The name and URL of the Image repository</t>
  <t>A single mapping indicating that all images (<spanx style="verb">*</spanx>) MUST be signed by both the Director and Image repository</t>
</list></t>

<t>Note that the metadata need not be in the form of a metadata file. For example, in the basic case where there is only one Director and one Image repository, and all images need to have signed metadata from both repositories, it would be sufficient to have a configuration file with URLs for the two repositories, and a client that always checks for metadata matches between them. In this case, no explicit mapping would be defined, because the mapping is defined as part of the Uptane client implementation.</t>

<t>The <spanx style="emph">Uptane Deployment Considerations</spanx> document (<xref target="DEPLOY"/>) gives more guidance on how to implement repository mapping metadata for more complex use cases. It also discusses strategies for updating repository mapping metadata, if required.</t>

</section>
<section anchor="metadata_filename_rules" title="Rules for filenames in repositories and metadata">

<t>There is a difference between the file name in a metadata file or an ECU, and the file name on a repository. This difference exists in order to avoid race conditions, where metadata and images are read from, and written to, at the same time. For more details, the reader should read the TUF specification <xref target="TUF-spec"/> and PEP 458 <xref target="PEP-458"/>.</t>

<t>Unless stated otherwise, all files SHALL be written to repositories in accordance with the following two rules:</t>

<t><list style="numbers">
  <t>Metadata filenames SHALL be qualified with version numbers. If a metadata file A is specified as FILENAME.EXT in another metadata file B, then it SHALL be written as VERSION.FILENAME.EXT, where VERSION is A’s version number, as defined in <xref target="common_metadata"/>, with one exception: If the version number of the Timestamp metadata file might not be known in advance by a client, it MAY be read from, and written to, a repository using a filename without a version number qualification, i.e. FILENAME.EXT.</t>
  <t>If an image is specified in a Targets metadata file as FILENAME.EXT, it SHALL be written to the repository as HASH.FILENAME.EXT, where HASH is one of the hash digests of the file, as specified in <xref target="targets_images_meta"/>. The file MUST be written to the repository using <spanx style="emph">n</spanx> different filenames, one for each hash digest listed in its corresponding Targets metadata.</t>
</list></t>

<t>For example:</t>

<t><list style="symbols">
  <t>The version number of the Snapshot metadata file is 61, and its filename in the Timestamp metadata is “snapshot.json”. The filename on the repository will be “61.snapshot.json”.</t>
  <t>There is an image with the filename “acme_firmware.bin” specified in the Targets metadata, with a SHA3-256 of “aaaa” and a SHA-512/224 of “bbbb”. It will have two filenames on the repository: “aaaa.acme_firmware.bin” and “bbbb.acme_firmware.bin”.</t>
</list></t>

</section>
</section>
<section anchor="server-repository-implementation-requirements" title="Server / repository implementation requirements">

<t>An Uptane implementation SHALL make the following services available to vehicles:</t>

<t><list style="symbols">
  <t>Image repository</t>
  <t>Director repository</t>
</list></t>

<t>Additionally, an Uptane implementation requires ECUs to have a secure way to know the current time.</t>

<section anchor="image-repository" title="Image repository">

<t>The Image repository exists to allow an OEM and/or its suppliers to upload images and their associated metadata. It makes these images and their metadata available to vehicles. The Image repository is designed to be primarily controlled by human actors, and updated relatively infrequently.</t>

<t>The Image repository SHALL expose an interface permitting the download of metadata and images. This interface SHOULD be public.</t>

<t>The Image repository SHALL require authorization for writing metadata and images.</t>

<t>The Image repository SHALL provide a method for authorized users to upload images and their associated metadata. It SHALL check that a user writing metadata and images is authorized to do so for that specific image by checking the chain of delegations as described in <xref target="delegations_meta"/>.</t>

<t>The Image repository SHALL implement storage which permits authorized users to write an image file using a unique filename, and later read the same file using the same name. It MAY use any filesystem, key-value store, or database that fulfills this requirement.</t>

<t>The Image repository MAY require authentication for read access.</t>

</section>
<section anchor="director_repository" title="Director repository">

<t>The Director repository instructs ECUs as to which images should be installed by producing signed metadata on demand. Unlike the Image repository, it is mostly controlled by automated, online processes. It also consults a private inventory database containing information on vehicles, ECUs, and software revisions.</t>

<t>The Director repository SHALL expose an interface for Primaries to upload vehicle version manifests (<xref target="vehicle_version_manifest"/>) and download metadata. This interface SHOULD be public.
The Director MAY encrypt images for ECUs that require them, either by encrypting on-the-fly or by storing encrypted images in the repository.</t>

<t>The Director repository SHALL implement storage which permits an automated service to write generated metadata files. It MAY use any filesystem, key-value store, or database that fulfills this requirement.</t>

<section anchor="directing-installation-of-images-on-vehicles" title="Directing installation of images on vehicles">

<t>A Director repository MUST conform to the following six-step process for directing the installation of software images on a vehicle.</t>

<t><list style="numbers">
  <t>The Director SHOULD first identify the vehicle. This MAY be done when the Director receives a vehicle version manifest sent by a Primary (as described in <xref target="construct_manifest_primary"/>), decodes the manifest, and determines the unique vehicle identifier. Additionally, the Director MAY utilize other mechanisms to uniquely identify a vehicle (e.g., 2-way TLS with unique client certificates).</t>
  <t>Using the vehicle identifier, the Director queries its inventory database (as described in <xref target="inventory_db"/>) for relevant information about each ECU in the vehicle.</t>
  <t>The Director SHALL check the manifest for accuracy compared to the information in the inventory database. If any of the required checks fail, the Director MAY drop the request. An implementer MAY make additional checks if desired. At a minimum, the Director SHALL check the following:
  <list style="symbols">
      <t>Each ECU recorded in the inventory database is also represented in the manifest.</t>
      <t>The signature of the manifest matches the ECU key of the Primary that sent it.</t>
      <t>The signature of each Secondary’s contribution to the manifest matches the ECU key of that Secondary.</t>
    </list></t>
  <t>The Director SHOULD check that the nonce or counter in each ECU Version Report has not been used before to prevent a replay of the ECU Version Report. If the nonce or counter is reused the Director SHOULD drop the request.</t>
  <t>The Director extracts information about currently installed images from the vehicle version manifest. Using this information, it determines if the vehicle is already up-to-date, and if not, determines a set of images that should be installed. The exact process by which this determination takes place is out of scope of this standard. However, the Director MUST take into account <spanx style="emph">dependencies</spanx> and <spanx style="emph">conflicts</spanx> between images and SHOULD consult well-established techniques for dependency resolution.</t>
  <t>The Director MAY encrypt images for ECUs that require it.</t>
  <t>The Director generates new metadata representing the desired set of images to be installed on the vehicle, based on the dependency resolution in step 4. This includes Targets (<xref target="targets_meta"/>), Snapshot (<xref target="snapshot_meta"/>), and Timestamp (<xref target="timestamp_meta"/>) metadata. It then sends this metadata to the Primary as described in <xref target="download_meta_primary"/>.</t>
</list></t>

</section>
<section anchor="inventory_db" title="Inventory Database">

<t>The Director SHALL use a private inventory database to store information about ECUs and vehicles. An implementor MAY use any durable database for this purpose.</t>

<t>The inventory database MUST record the following pieces of information:</t>

<t><list style="symbols">
  <t>Per vehicle:
  <list style="symbols">
      <t>A unique identifier (such as a VIN)</t>
    </list></t>
  <t>Per ECU:
  <list style="symbols">
      <t>A unique identifier (such as a serial number)</t>
      <t>The vehicle identifier the ECU is associated with</t>
      <t>An ECU key (symmetric or asymmetric; for asymmetric keys, only the public part SHOULD be stored)</t>
      <t>The ECU key identifier (as defined in <xref target="common_metadata"/>)</t>
      <t>Whether the ECU is a Primary or a Secondary</t>
    </list></t>
</list></t>

<t>The inventory database MAY record other information about ECUs and vehicles. It SHOULD record a hardware identifier for each ECU to protect against the possibility of directing the ECU to install incompatible firmware.</t>

</section>
</section>
</section>
<section anchor="in-vehicle-implementation-requirements" title="In-vehicle implementation requirements">

<t>An Uptane-compliant ECU SHALL be able to download and verify Image metadata and image binaries before installing a new image and MUST have a secure way of verifying the current time, or a sufficiently recent attestation of the time.</t>

<t>Each ECU receiving over-the-air updates in a vehicle is either a Primary or a Secondary ECU. A Primary ECU collects and delivers vehicle manifests to the Director (<xref target="vehicle_version_manifest"/>) that contain information about which images have been installed on ECUs in the vehicle. It also verifies the time and downloads and verifies the latest metadata and images for itself and for its Secondaries. A Secondary ECU verifies the time, and downloads and verifies the latest metadata and images for itself from its associated Primary ECU. It also sends signed information about its installed images to its associated Primary.</t>

<t>All ECUs MUST verify image metadata as specified in <xref target="metadata_verification"/> before installing an image or making it available to other ECUs. A Primary ECU MUST perform full verification (<xref target="full_verification"/>). A Secondary ECU SHOULD perform full verification if possible. If a Secondary cannot perform full verification, it SHALL, at the very least, perform partial verification. In addition, it MAY also perform some steps from the full verification process. See the Uptane Deployment Considerations (<xref target="DEPLOY"/>) for a discussion of how to choose between partial and full verification.</t>

<t>ECUs MUST have a secure source of time. An OEM/Uptane implementor MAY use any external source of time that is demonstrably secure. The Uptane Deployment Considerations (<xref target="DEPLOY"/>) describe one way to implement an external time server to cryptographically attest time, as well as the security properties required. When “loading time” is referenced in procedures in this standard, it should be understood to mean loading into memory the current time (if the ECU has its own secure clock), or the most recent attested time.</t>

<section anchor="build-time-prerequisite-requirements-for-ecus" title="Build-time prerequisite requirements for ECUs">

<t>For an ECU to be capable of receiving Uptane-secured updates, it MUST have the following data provisioned at the time it is manufactured or installed in the vehicle:</t>

<t><list style="numbers">
  <t>A sufficiently recent copy of required Uptane metadata at the time of manufacture or install. This is necessary for the ECU to authenticate that the remote repository is legitmate when it first downloads metadata in the field. See the Uptane Deployment Considerations (<xref target="DEPLOY"/>) for more information.
  <list style="symbols">
      <t>Partial verification Secondary ECUs MUST have the Root and Targets metadata from the Director repository (to reduce the scope of rollback and replay attacks). These ECUs MAY also have metadata from other roles or the Image repository if they will be used by the Secondary.</t>
      <t>Full verification ECUs MUST have a complete set of metadata (Root, Targets, Snapshot, and Timestamp) from both repositories (to prevent rollback and replay attacks), as well as the repository mapping metadata (<xref target="repo_mapping_meta"/>). Delegations are not required.</t>
    </list></t>
  <t>The current time, or a secure attestation of a sufficiently recent time.</t>
  <t>An <spanx style="strong">ECU key</spanx>. This is a private key, unique to the ECU, used to sign ECU version manifests and decrypt images. An ECU key MAY be either a symmetric key or an asymmetric key. If it is an asymmetric key, there MAY be separate keys for encryption and signing. For the purposes of this standard, the set of private keys that an ECU uses is referred to as the ECU key (singular), even if it is actually multiple keys used for different purposes.</t>
</list></t>

</section>
<section anchor="what-the-primary-does" title="What the Primary does">

<t>A Primary downloads, verifies, and distributes the latest time, metadata and images. To do so, it SHALL perform the following seven steps:</t>

<t><list style="numbers">
  <t>Construct and send vehicle version manifest (<xref target="construct_manifest_primary"/>)</t>
  <t>Download and check current time (<xref target="check_time_primary"/>)</t>
  <t>Download and verify metadata (<xref target="download_meta_primary"/>)</t>
  <t>Download and verify images (<xref target="download_images_primary"/>)</t>
  <t>OPTIONAL: Send latest time to Secondaries (<xref target="send_time_primary"/>)</t>
  <t>Send metadata to Secondaries (<xref target="send_metadata_primary"/>)</t>
  <t>Send images to Secondaries (<xref target="send_images_primary"/>)</t>
</list></t>

<t>Note that the subsequent sections concerning requirements for a Primary do not prohibit implementing Primary capabilities on an ECU that does not communicate directly with the Uptane repositories. This allows for implementations to have multiple ECUs within the vehicle performing functions equivalent to a Primary.
If multiple such Primaries are included within a vehicle, each Secondary ECU SHALL have a single Primary responsible for providing its updates.</t>

<section anchor="construct_manifest_primary" title="Construct and send vehicle version manifest">

<t>The Primary SHALL build a <spanx style="emph">vehicle version manifest</spanx> as described in <xref target="vehicle_version_manifest"/>.</t>

<t>Once the complete manifest is built, the Primary MAY send the manifest to the Director repository. However, it is not strictly required that the Primary send the manifest until step three. If permitted by the implementation, a Primary MAY send only a diff of the manifest to save bandwidth. If an implementation permits diffs, the Director SHOULD have a way to request a full manifest.</t>

<t>Secondaries MAY send their version report at any time so that it is already stored on the Primary when it wishes to check for updates. Alternatively, the Primary MAY request a version report from each Secondary at the time of the update check.</t>

<section anchor="vehicle_version_manifest" title="Vehicle version manifest">

<t>The vehicle version manifest is a metadata structure that MUST contain the following information:</t>

<t><list style="symbols">
  <t>An attribute containing the signature(s) of the payload, each specified by:
  <list style="symbols">
      <t>The public key identifier of the key being used to sign the payload</t>
      <t>The signing method (e.g. ed25519, rsassa-pss, etc.)</t>
      <t>A hash of the payload to be signed</t>
      <t>The hashing function used (e.g. SHA3-256, SHA-512/224, etc.)</t>
      <t>The signature of the hash</t>
    </list></t>
  <t>A payload representing the installed versions of each software image on the vehicle. This payload SHALL contain:
  <list style="symbols">
      <t>The vehicle’s unique identifier (e.g. the VIN)</t>
      <t>The Primary ECU’s unique identifier (e.g. the serial number)</t>
      <t>A list of ECU version reports as specified in <xref target="version_report"/></t>
    </list></t>
</list></t>

<t>Note that one of the ECU version reports should be the version report for the Primary itself.</t>

</section>
<section anchor="version_report" title="ECU version report">

<t>An ECU version report is a metadata structure that MUST contain the following information:</t>

<t><list style="symbols">
  <t>An attribute containing the signature(s) of the payload, each specified by:
  <list style="symbols">
      <t>The public key identifier of the key being used to sign the payload</t>
      <t>The signing method (e.g. ed25519, rsassa-pss, etc.)</t>
      <t>A hash of the payload to be signed</t>
      <t>The hashing function used (e.g. SHA3-256, SHA-512/224, etc.)</t>
      <t>The signature of the hash</t>
    </list></t>
  <t>A payload containing:
  <list style="symbols">
      <t>The ECU’s unique identifier (e.g. the serial number)</t>
      <t>The filename, length, and hashes of its currently installed image (i.e. the non-custom Targets metadata for this particular image)</t>
      <t>An indicator of any detected security attack</t>
      <t>The latest time the ECU can verify at the time this version report was generated</t>
      <t>A nonce or counter to prevent a replay of the ECU version report. This value MUST change each update cycle and MAY be the cryptographic nonce used with a Time Server.</t>
    </list></t>
</list></t>

</section>
</section>
<section anchor="check_time_primary" title="Download and check current time">

<t>The Primary SHALL load the current time from a secure source.</t>

</section>
<section anchor="download_meta_primary" title="Download and verify metadata">

<t>The Primary SHALL download metadata for all targets and perform a full verification on it as specified in <xref target="full_verification"/>.</t>

</section>
<section anchor="download_images_primary" title="Download and verify images">

<t>The Primary SHALL download and verify images for itself and for all of its associated Secondaries. Images SHALL be verified by checking that the hash of the image file matches the hash specified in the Director’s Targets metadata for that image.</t>

<t>There may be several different filenames that all refer to the same image binary, as described in <xref target="metadata_filename_rules"/>. If the Primary has received multiple hashes for a given image binary via the Targets role (see <xref target="targets_images_meta"/>) then it SHALL verify every hash for this image despite that the image is identified by a single hash as part of its filename.</t>

</section>
<section anchor="send_time_primary" title="Send latest time to Secondaries">

<t>Unless the Secondary ECU has its own way of verifying the time or does not have the capacity to verify a time message, the Primary is CONDITIONALLY REQUIRED to send the time to each ECU. The Secondary will verify the time message, then overwrite its current time with the received time.</t>

</section>
<section anchor="send_metadata_primary" title="Send metadata to Secondaries">

<t>The Primary SHALL send its latest downloaded metadata to all of its associated Secondaries. The metadata it sends to each Secondary MUST include all of the metadata required for verification on that Secondary. For full verification Secondaries, this includes the metadata for all four roles from both repositories, plus any delegated Targets metadata files the Secondary will recurse through to find the proper delegation. For partial verification Secondaries, this MAY include fewer metadata files; it includes only the Targets metadata file from the Director repository at a minimum.</t>

<t>The Primary SHOULD determine the minimal set of metadata files to send to each Secondary by performing delegation resolution as described in <xref target="full_verification"/>.</t>

<t>Each Secondary SHALL store the latest copy of all metadata required for its own verification.</t>

</section>
<section anchor="send_images_primary" title="Send images to Secondaries">

<t>The Primary SHALL send the latest image to each of its associated Secondaries that have storage to receive it.</t>

<t>For Secondaries without storage, the Primary SHOULD wait for a request from the Secondary to stream the new image file to it. The Secondary will send the request once it has verified the metadata sent in the previous step.</t>

</section>
</section>
<section anchor="installing-images-on-primary-or-secondary-ecus" title="Installing images on Primary or Secondary ECUs">

<t>An ECU SHALL perform the following steps when attempting to install a new image:</t>

<t><list style="numbers">
  <t>Verify latest attested time. This is optional if the ECU does not have the capacity to verify a time message (<xref target="verify_time"/>)</t>
  <t>Verify metadata (<xref target="verify_metadata"/>)</t>
  <t>Download latest image (<xref target="download_image"/>)</t>
  <t>Verify image (<xref target="verify_image"/>)</t>
  <t>Install image (<xref target="install_image"/>)</t>
  <t>Create and send version report (<xref target="create_version_report"/>)</t>
</list></t>

<section anchor="verify_time" title="Load and verify the latest attested time">

<t>IF the ECU has the capability to verify a time message, the ECU is CONDITIONALLY REQUIRED to load and verify the current time, or the most recent securely attested time.</t>

</section>
<section anchor="verify_metadata" title="Verify metadata">

<t>The ECU SHALL verify the latest downloaded metadata (<xref target="metadata_verification"/>) using either full or partial verification. If the metadata verification fails for any reason, the ECU SHALL jump to the final step (<xref target="create_version_report"/>).</t>

</section>
<section anchor="download_image" title="Download latest image">

<t>If the ECU does not have secondary storage, i.e. buffer storage to temporarily store the latest image before installing it, it SHALL download the latest image from the Primary. (If the ECU has secondary storage, it will already have the latest image in its secondary storage as specified in <xref target="send_images_primary"/>, and should skip to the next step.) The ECU MAY first create a backup of its previous working image and store it elsewhere (e.g., the Primary).</t>

<t>The filename used to identify the latest known image (i.e., the file to request from the Primary) SHALL be determined as follows:</t>

<t><list style="numbers">
  <t>Load the Targets metadata file from the Director repository.</t>
  <t>Find the Targets metadata associated with this ECU identifier.</t>
  <t>Construct the Image filename using the rule in <xref target="metadata_filename_rules"/>, or use the download URL specified in the Director metadata.</t>
  <t>If there is no Targets metadata about this image, abort the update cycle and report that there is no such image. Additionally, in the case of failure, the ECU SHALL retain its previous Targets metadata instead of using the new Targets metadata. Otherwise, download the image (up to the number of bytes specified in the Targets metadata) and verify it according to <xref target="verify_image"/>.</t>
</list></t>

<t>When the Primary responds to the download request, the ECU SHALL overwrite its current image with the downloaded image from the Primary.</t>

<t>If any part of this step fails, the ECU SHALL jump to the final step (<xref target="create_version_report"/>).</t>

</section>
<section anchor="verify_image" title="Verify image">

<t>The ECU SHALL verify that the latest image matches the latest metadata as follows:</t>

<t><list style="numbers">
  <t>Load the latest Targets metadata file from the Director.</t>
  <t>Find the Targets metadata associated with this ECU identifier.</t>
  <t>Check that the hardware identifier in the metadata matches the ECUs hardware identifier.</t>
  <t>Check that the image filename is valid for this ECU. This MAY be a comparison against a wildcard path, which restricts the ECUs to which a delegation will apply.</t>
  <t>Check that the release counter of the image in the previous metadata, if it exists, is less than or equal to the release counter in the latest metadata.</t>
  <t>If the image is encrypted, decrypt the image with a decryption key to be chosen as follows:
  <list style="symbols">
      <t>If the ECU key is a symmetric key, the ECU SHALL use the ECU key for image decryption.</t>
      <t>If the ECU key is asymmetric, the ECU SHALL check the Targets metadata for an encrypted symmetric key. If such a key is found, the ECU SHALL decrypt the symmetric key using its ECU key, and use the decrypted symmetric key for image decryption.</t>
      <t>If the ECU key is asymmetric and there is no symmetric key in the target metadata, the ECU SHALL use its ECU key for image decryption.</t>
    </list></t>
  <t>Check that all hashes listed in the metadata match the corresponding hashes of the image.</t>
</list></t>

<t>If the ECU has secondary storage, the checks SHOULD be performed on the image in secondary storage before it is installed.</t>

<t>When checking hashes, the ECU SHOULD additionally check that the length of the image matches the length listed in the metadata.</t>

<t>NOTE: Verifying image size along with hash will become a requirement in a future version of the Uptane standard.</t>

<t>NOTE: See <xref target="DEPLOY"/> for guidance on how to deal with Secondary ECU failures for ECUs that do not have secondary storage.</t>

<t>If any step fails, the ECU SHALL jump to the (<xref target="create_version_report"/>) step.</t>

</section>
<section anchor="install_image" title="Install image">

<t>The ECU SHALL attempt to install the update. This installation SHOULD occur at a time when all pre-conditions are met. These pre-conditions MAY include ensuring the vehicle is in a safe environment for install (e.g., the vehicle is parked when updating a specific ECU). Another pre-condition MAY include ensuring the ECU has a backup of its current image and metadata in case the current installation fails.</t>

</section>
<section anchor="create_version_report" title="Create and send version report">

<t>The ECU SHALL create a version report as described in <xref target="version_report"/>, and send it to the Primary (or simply save it to disk, if the ECU is a Primary). The Primary SHOULD write the version reports it receives to disk and associate them with the Secondaries that sent them.</t>

</section>
</section>
<section anchor="metadata_verification" title="Metadata verification procedures">

<t>A Primary ECU MUST perform full verification of metadata. A Secondary ECU SHOULD perform full verification of metadata. If a Secondary cannot perform full verification, it SHALL, at the very least, perform partial verification.</t>

<t>If a step in the following workflows does not succeed (e.g., the update is aborted because a new metadata file was not signed), an ECU SHOULD still be able to update again in the future. Errors raised during the update process SHOULD NOT leave ECUs in an unrecoverable state.</t>

<section anchor="partial_verification" title="Partial verification">

<t>In order to perform partial verification, an ECU SHALL perform the following steps:</t>

<t><list style="numbers">
  <t>Load and verify the current time or the most recent securely attested time.</t>
  <t>Download and check the Targets metadata file from the Director repository, following the procedure in <xref target="check_targets"/>.</t>
</list></t>

<t>Note that this verification procedure is the smallest set of Uptane checks permissible for an Uptane Secondary ECU. An ECU MAY additionally implement more metadata checks.</t>

<t>For example, an ECU MAY also fetch and verify Root metadata from the Director (following the procedure in <xref target="check_root"/>) before checking Targets metadata. Performing this additional check would provide the ECU with a secure way to receive and validate a rotation of the Director’s Targets key.</t>

<t>See <xref target="DEPLOY"/> for more discussion on this topic.</t>

</section>
<section anchor="full_verification" title="Full verification">

<t>Full verification of metadata means that the ECU checks that the Targets metadata about images from the Director repository matches the Targets metadata about the same images from the Image repository. This provides resilience to a key compromise in the system.</t>

<t>Full verification MUST be performed by Primary ECUS and MAY be performed by Secondary ECUs. In the following instructions, whenever an ECU is directed to download metadata, it applies only to Primary ECUs.</t>

<t>If <xref target="TAP-5"/> is supported and a Primary has an external connection to the Uptane repositories, a Primary ECU SHALL download metadata and images following the rules specified in that TAP.  If <xref target="TAP-5"/> is not supported, or if the Primary does not have an external connection to the Uptane repositories, the download SHOULD follow the <xref target="TUF-spec"/> and the metadata file renaming rules specified in <xref target="metadata_filename_rules"/>.</t>

<t>Before starting full verification, the repository mapping metadata MUST be consulted to determine where to download metadata from. This procedure assumes the basic Uptane case: there are only two repositories (Director and Image), and all image paths are required to be signed by both repositories. If a more complex repository layout is being used, refer to <xref target="DEPLOY"/> for guidance on how to determine where metadata should be downloaded from.</t>

<t>In order to perform full verification, an ECU SHALL perform the following steps:</t>

<t><list style="numbers">
  <t>Load and verify the current time or the most recent securely attested time.</t>
  <t>Download and check the Root metadata file from the Director repository, following the procedure in <xref target="check_root"/>.</t>
  <t>Download and check the Timestamp metadata file from the Director repository, following the procedure in <xref target="check_timestamp"/>.</t>
  <t>Check the previously downloaded Snapshot metadata file from the Directory repository (if available). If the hashes and version number of that file match the hashes and version number listed in the new Timestamp metadata, there are no new updates and the verification process MAY be stopped and considered complete. Otherwise, download and check the Snapshot metadata file from the Director repository, following the procedure in <xref target="check_snapshot"/>.</t>
  <t>Download and check the Targets metadata file from the Director repository, following the procedure in <xref target="check_targets"/>.</t>
  <t>If the Targets metadata from the Directory repository indicates that there are no new targets that are not already currently installed, the verification process MAY be stopped and considered complete. Otherwise, download and check the Root metadata file from the Image repository, following the procedure in <xref target="check_root"/>.</t>
  <t>Download and check the Timestamp metadata file from the Image repository, following the procedure in <xref target="check_timestamp"/>.</t>
  <t>Check the previously downloaded Snapshot metadata file from the Image repository (if available). If the hashes and version number of that file match the hashes and version number listed in the new Timestamp metadata, the ECU MAY skip to the last step. Otherwise, download and check the Snapshot metadata file from the Image repository, following the procedure in <xref target="check_snapshot"/>.</t>
  <t>Download and check the top-level Targets metadata file from the Image repository, following the procedure in <xref target="check_targets"/>.</t>
  <t>Verify that Targets metadata from the Director and Image repositories match. A Primary ECU MUST perform this check on metadata for all images listed in the Targets metadata file from the Director repository downloaded in step 6. A Secondary ECU MAY elect to perform this check only on the metadata for the image it will install. (That is, the target metadata from the Director that contains the ECU identifier of the current ECU.) To check that the metadata for an image matches, complete the following procedure:
  <list style="numbers">
      <t>Locate and download a Targets metadata file from the Image repository that contains an image with exactly the same file name listed in the Director metadata, following the procedure in <xref target="resolve_delegations"/>.</t>
      <t>Check that the Targets metadata from the Image repository matches the Targets metadata from the Director repository:
      <list style="numbers">
          <t>Check that the non-custom metadata (i.e., length and hashes) of the unencrypted or encrypted image are the same in both sets of metadata. Note: the Primary is responsible for validating encrypted images and associated metadata. The target ECU (Primary or Secondary) is responsible for validating the unencrypted image and associated metadata.</t>
          <t>Check that all “MUST match” custom metadata (e.g., hardware identifier and release counter) are the same in both sets of metadata.</t>
          <t>Check that the release counter in the previous Targets metadata file is less than or equal to the release counter in this Targets metadata file.</t>
        </list></t>
    </list></t>
</list></t>

<t>If any step fails, the ECU MUST return an error code indicating the failure. If a check for a specific type of security attack fails (e.g. rollback, freeze, arbitrary software, etc.), the ECU SHOULD return an error code that indicates the type of attack.</t>

</section>
<section anchor="check_root" title="How to check Root metadata">

<t>To properly check Root metadata, an ECU SHOULD:</t>

<t><list style="numbers">
  <t>Load the previous Root metadata file.</t>
  <t>Update to the latest Root metadata file.
  <list style="numbers">
      <t>Let N denote the version number of the latest Root metadata file (which at first could be the same as the previous Root metadata file).</t>
      <t>Try downloading a new version N+1 of the Root metadata file, up to some X number of bytes. The value for X is set by the implementor. For example, X may be tens of kilobytes. The filename used to download the Root metadata file is of the fixed form VERSION_NUMBER.FILENAME.EXT (e.g., 42.root.json). If this file is not available, the current Root metadata file is the latest; continue with step 3.</t>
      <t>Version N+1 of the Root metadata file MUST have been signed by the following: (1) a threshold of keys specified in the latest Root metadata file (version N), and (2) a threshold of keys specified in the new Root metadata file being validated (version N+1). If version N+1 is not signed as required, discard it, abort the update cycle, and report the signature failure. On the next update cycle, begin at version N of the Root metadata file. (Checks for an arbitrary software attack.)</t>
      <t>The version number of the latest Root metadata file (version N) must be less than or equal to the version number of the new Root metadata file (version N+1). Effectively, this means checking that the version number signed in the new Root metadata file is indeed N+1. If the version of the new Root metadata file is less than the latest metadata file, discard it, abort the update cycle, and report the rollback attack. On the next update cycle, begin at step 1 and version N of the Root metadata file. (Checks for a rollback attack.)</t>
      <t>Set the latest Root metadata file to the new Root metadata file.</t>
      <t>Repeat steps 2.1 to 2.6.</t>
    </list></t>
  <t>Check that the current (or latest securely attested) time is lower than the expiration timestamp in the latest Root metadata file. (Checks for a freeze attack.)</t>
  <t>If the Timestamp and/or Snapshot keys have been rotated, delete the previous Timestamp and Snapshot metadata files. (Checks for recovery from fast-forward attacks <xref target="MERCURY"/>.)</t>
</list></t>

</section>
<section anchor="check_timestamp" title="How to check Timestamp metadata">

<t>To properly check Timestamp metadata, an ECU SHOULD:</t>

<t><list style="numbers">
  <t>Download up to Y number of bytes. The value for Y is set by the implementor. For example, Y may be tens of kilobytes. The filename used to download the Timestamp metadata file is of the fixed form FILENAME.EXT (e.g., timestamp.json).</t>
  <t>Check that it has been signed by the threshold of keys specified in the latest Root metadata file. If the new Timestamp metadata file is not properly signed, discard it, abort the update cycle, and report the signature failure. (Checks for an arbitrary software attack.)</t>
  <t>Check that the version number of the previous Timestamp metadata file, if any, is less than or equal to the version number of this Timestamp metadata file. If the new Timestamp metadata file is older than the trusted Timestamp metadata file, discard it, abort the update cycle, and report the potential rollback attack. (Checks for a rollback attack.)</t>
  <t>Check that the current (or latest securely attested) time is lower than the expiration timestamp in this Timestamp metadata file. If the new Timestamp metadata file has expired, discard it, abort the update cycle, and report the potential freeze attack. (Checks for a freeze attack.)</t>
</list></t>

</section>
<section anchor="check_snapshot" title="How to check Snapshot metadata">

<t>To properly check Snapshot metadata, an ECU SHOULD:</t>

<t><list style="numbers">
  <t>Download up to the number of bytes specified in the Timestamp metadata file, constructing the metadata filename as defined in <xref target="metadata_filename_rules"/>.</t>
  <t>The hashes and version number of the new Snapshot metadata file MUST match the hashes and version number listed in Timestamp metadata. If the hashes and version number do not match, discard the new Snapshot metadata, abort the update cycle, and report the failure. (Checks for a mix-and-match attack.)</t>
  <t>Check that it has been signed by the threshold of keys specified in the latest Root metadata file. If the new Snapshot metadata file is not signed as required, discard it, abort the update cycle, and report the signature failure. (Checks for an arbitrary software attack.)</t>
  <t>Check that the version number of the previous Snapshot metadata file, if any, is less than or equal to the version number of this Snapshot metadata file. If this Snapshot metadata file is older than the previous Snapshot metadata file, discard it, abort the update cycle, and report the potential rollback attack. (Checks for a rollback attack.)</t>
  <t>Check that the version number listed by the previous Snapshot metadata file for each Targets metadata file is less than or equal to its version number in this Snapshot metadata file. If this condition is not met, discard the new Snapshot metadata file, abort the update cycle, and report the failure. (Checks for a rollback attack.)</t>
  <t>Check that each Targets metadata filename listed in the previous Snapshot metadata file is also listed in this Snapshot metadata file. If this condition is not met, discard the new Snapshot metadata file, abort the update cycle, and report the failure. (Checks for a rollback attack.)</t>
  <t>Check that the current (or latest securely attested) time is lower than the expiration timestamp in this Snapshot metadata file. If the new Snapshot metadata file is expired, discard it, abort the update cycle, and report the potential freeze attack. (Checks for a freeze attack.)</t>
</list></t>

</section>
<section anchor="check_targets" title="How to check Targets metadata">

<t>To properly check Targets metadata, an ECU SHOULD:</t>

<t><list style="numbers">
  <t>Download up to Z number of bytes, constructing the metadata filename as defined in <xref target="metadata_filename_rules"/>. The value for Z is set by the implementor. For example, Z may be tens of kilobytes.</t>
  <t>The version number of the new Targets metadata file MUST match the version number listed in the latest Snapshot metadata. If the version number does not match, discard it, abort the update cycle, and report the failure. (Checks for a mix-and-match attack.) This step MAY be skipped when checking Targets metadata on a partial verification ECU; partial verification ECUs might not have Snapshot metadata.</t>
  <t>Check that the Targets metadata has been signed by the threshold of keys specified in the relevant metadata file (Checks for an arbitrary software attack):
  <list style="numbers">
      <t>If checking top-level Targets metadata, the threshold of keys is specified in the Root metadata.</t>
      <t>If checking delegated Targets metadata, the threshold of keys is specified in the Targets metadata file that delegated authority to this role.</t>
    </list></t>
  <t>Check that the version number of the previous Targets metadata file, if any, is less than or equal to the version number of this Targets metadata file. (Checks for a rollback attack.)</t>
  <t>Check that the current (or latest securely attested) time is lower than the expiration timestamp in this Targets metadata file. (Checks for a freeze attack.)</t>
  <t>If checking Targets metadata from the Director repository, verify that there are no delegations.</t>
  <t>If checking Targets metadata from the Director repository, check that no ECU identifier is represented more than once.</t>
  <t>If checking Targets metadata from the Director repository, and the ECU performing the verification is the Primary ECU, check that all listed ECU identifiers correspond to ECUs that are actually present in the vehicle.</t>
</list></t>

</section>
<section anchor="resolve_delegations" title="How to resolve delegations">

<t>To properly check Targets metadata for an image, an ECU MUST locate the metadata file(s) for the role (or roles) that have the authority to sign the image. This metadata might be located in the top-level Targets metadata, but it also may be delegated to another role or to multiple roles. Therefore, all delegations MUST be resolved using the following recursive procedure, beginning with the top-level Targets metadata file.</t>

<t><list style="numbers">
  <t>Download the current metadata file, and check it following the procedure in <xref target="check_targets"/>. If the file cannot be loaded, or if any verification step fails, abort the delegation resolution, and indicate that Image metadata cannot be found because of a missing or invalid role.</t>
  <t>If the current metadata file contains signed metadata about the image, end the delegation resolution and return the metadata to be checked.</t>
  <t>If the current metadata file was reached via a terminating delegation and does not contain signed metadata about the image, abort the delegation resolution for this image and return an error indicating that image metadata could not be found.</t>
  <t>Search the list of delegations, in listed order. For each delegation:
  <list style="numbers">
      <t>Check if the delegation applies to the image being processed. For the delegation to apply, it MUST include the hardware identifier of the target, and the target name must match one of the delegation’s image paths. If either of these tests fail, move on to the next delegation in the list.</t>
      <t>If the delegation is a multi-role delegation, follow the procedure described in <xref target="multirole_delegations"/>. If the multi-role delegation is terminating and no valid Image metadata is found, abort the delegation resolution and return an error indicating that image metadata could not be found.</t>
      <t>If the delegation is a normal delegation, perform delegation resolution, starting at step 1. Note that this may recurse an arbitrary number of levels deep. If a delegation that applies to the image is found but no image metadata is found in the delegated roles or any of its sub-delegations, simply continue on with the next delegation in the list. The search is only completed/aborted if image metadata or a terminating delegation that applies to the image is found.</t>
    </list></t>
  <t>If the end of the list of delegations in the top-level metadata is reached without finding valid image metadata, return an error indicating that image metadata could not be found.</t>
</list></t>

</section>
<section anchor="multirole_delegations" title="Multi-role delegations">

<t>It is possible to delegate signing authority to multiple delegated roles as described in <xref target="TAP-3"/>. Each multi-role delegation effectively contains a list of ordinary delegations, plus a threshold of those roles that must be in agreement about the non-custom metadata for the image. All multi-role delegations MUST be resolved using the following procedure. Note that there may be sub-delegations inside multi-role delegations.</t>

<t><list style="numbers">
  <t>For each of the roles in the delegation, find and load the image metadata (or error) following the procedure in <xref target="resolve_delegations"/>.</t>
  <t>Inspect the non-custom part of the metadata loaded in step 1:
  <list style="numbers">
      <t>Locate all sets of roles which have agreeing (i.e. identical) non-custom metadata and “MUST match” custom metadata. Discard any set of roles with a size smaller than the threshold of roles that must be in agreement for this delegation.</t>
      <t>Check for a conflict. A conflict exists if there remains more than one agreeing set of roles, each set having different metadata. If a conflict is found, choose and return the metadata from the set of roles which includes the earliest role in the multi-delegation list.</t>
      <t>If there is no conflict, check if there is any single set of roles with matching non-custom metadata. If there is, choose and return the metadata from this set.</t>
      <t>If no agreeing set can be found that meets the agreement threshold, return an error indicating that image metadata could not be found.</t>
    </list></t>
</list></t>

</section>
</section>
</section>
</section>


  </middle>

  <back>

    <references title='Normative References'>





<reference  anchor="RFC2119" target='https://www.rfc-editor.org/info/rfc2119'>
<front>
<title>Key words for use in RFCs to Indicate Requirement Levels</title>
<author initials='S.' surname='Bradner' fullname='S. Bradner'><organization /></author>
<date year='1997' month='March' />
<abstract><t>In many standards track documents several words are used to signify the requirements in the specification.  These words are often capitalized. This document defines these words as they should be interpreted in IETF documents.  This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t></abstract>
</front>
<seriesInfo name='BCP' value='14'/>
<seriesInfo name='RFC' value='2119'/>
<seriesInfo name='DOI' value='10.17487/RFC2119'/>
</reference>



<reference  anchor="RFC3647" target='https://www.rfc-editor.org/info/rfc3647'>
<front>
<title>Internet X.509 Public Key Infrastructure Certificate Policy and Certification Practices Framework</title>
<author initials='S.' surname='Chokhani' fullname='S. Chokhani'><organization /></author>
<author initials='W.' surname='Ford' fullname='W. Ford'><organization /></author>
<author initials='R.' surname='Sabett' fullname='R. Sabett'><organization /></author>
<author initials='C.' surname='Merrill' fullname='C. Merrill'><organization /></author>
<author initials='S.' surname='Wu' fullname='S. Wu'><organization /></author>
<date year='2003' month='November' />
<abstract><t>This document presents a framework to assist the writers of certificate policies or certification practice statements for participants within public key infrastructures, such as certification authorities, policy authorities, and communities of interest that wish to rely on certificates.  In particular, the framework provides a comprehensive list of topics that potentially (at the writer's discretion) need to be covered in a certificate policy or a certification practice statement.  This document supersedes RFC 2527.</t></abstract>
</front>
<seriesInfo name='RFC' value='3647'/>
<seriesInfo name='DOI' value='10.17487/RFC3647'/>
</reference>



<reference  anchor="RFC5198" target='https://www.rfc-editor.org/info/rfc5198'>
<front>
<title>Unicode Format for Network Interchange</title>
<author initials='J.' surname='Klensin' fullname='J. Klensin'><organization /></author>
<author initials='M.' surname='Padlipsky' fullname='M. Padlipsky'><organization /></author>
<date year='2008' month='March' />
<abstract><t>The Internet today is in need of a standardized form for the transmission of internationalized &quot;text&quot; information, paralleling the specifications for the use of ASCII that date from the early days of the ARPANET.  This document specifies that format, using UTF-8 with normalization and specific line-ending sequences.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='5198'/>
<seriesInfo name='DOI' value='10.17487/RFC5198'/>
</reference>


<reference anchor="NFC" target="http://www.unicode.org/reports/tr15/">
  <front>
    <title>Unicode Standard Annex #15: Unicode Normalization Forms</title>
    <author initials="M." surname="Davis">
      <organization></organization>
    </author>
    <author initials="M." surname="Duerst">
      <organization></organization>
    </author>
    <date year="2018" month="October"/>
  </front>
</reference>
<reference anchor="TAP-3" target="https://github.com/theupdateframework/taps/blob/d0818e580c322815a473520f2e8cc5f5eb8df499/tap3.md">
  <front>
    <title>The Update Framework TAP 3 - Multi-role delegations</title>
    <author initials="T.K." surname="Kuppusamy">
      <organization></organization>
    </author>
    <author initials="S." surname="Awwad">
      <organization></organization>
    </author>
    <author initials="E." surname="Cordell">
      <organization></organization>
    </author>
    <author initials="V." surname="Diaz">
      <organization></organization>
    </author>
    <author initials="J." surname="Moshenko">
      <organization></organization>
    </author>
    <author initials="J." surname="Cappos">
      <organization></organization>
    </author>
    <date year="2018" month="January" day="18"/>
  </front>
</reference>
<reference anchor="TAP-4" target="https://github.com/theupdateframework/taps/blob/2cb67d913ec19424d1e354b38f862886fbfd4105/tap4.md">
  <front>
    <title>The Update Framework TAP 4 - Multiple repository consensus on entrusted targets</title>
    <author initials="T.K." surname="Kuppusamy">
      <organization></organization>
    </author>
    <author initials="S." surname="Awwad">
      <organization></organization>
    </author>
    <author initials="E." surname="Cordell">
      <organization></organization>
    </author>
    <author initials="V." surname="Diaz">
      <organization></organization>
    </author>
    <author initials="J." surname="Moshenko">
      <organization></organization>
    </author>
    <author initials="J." surname="Cappos">
      <organization></organization>
    </author>
    <date year="2017" month="December" day="15"/>
  </front>
</reference>
<reference anchor="TAP-5" target="https://github.com/theupdateframework/taps/blob/01726d203c9b9c029d26f6612069ce3180500d9a/tap5.md#downloading-metadata-and-target-files">
  <front>
    <title>The Update Framework TAP 5 - Setting URLs for roles in the root metadata file</title>
    <author initials="T.K." surname="Kuppusamy">
      <organization></organization>
    </author>
    <author initials="S." surname="Awwad">
      <organization></organization>
    </author>
    <author initials="E." surname="Cordell">
      <organization></organization>
    </author>
    <author initials="V." surname="Diaz">
      <organization></organization>
    </author>
    <author initials="J." surname="Moshenko">
      <organization></organization>
    </author>
    <author initials="J." surname="Cappos">
      <organization></organization>
    </author>
    <date year="2018" month="January" day="22"/>
  </front>
</reference>
<reference anchor="TUF-spec" target="https://github.com/theupdateframework/specification/blob/2b4e18472fe25d5b57f36f6fa50104967c8faeaa/tuf-spec.md">
  <front>
    <title>The Update Framework Specification</title>
    <author initials="J." surname="Samuel">
      <organization></organization>
    </author>
    <author initials="N." surname="Mathewson">
      <organization></organization>
    </author>
    <author initials="G." surname="Condra">
      <organization></organization>
    </author>
    <author initials="V." surname="Diaz">
      <organization></organization>
    </author>
    <author initials="T.K." surname="Kuppusamy">
      <organization></organization>
    </author>
    <author initials="S." surname="Awwad">
      <organization></organization>
    </author>
    <author initials="S." surname="Tobias">
      <organization></organization>
    </author>
    <author initials="J." surname="Wright">
      <organization></organization>
    </author>
    <author initials="H." surname="Mehnert">
      <organization></organization>
    </author>
    <author initials="E." surname="Tryzelaar">
      <organization></organization>
    </author>
    <author initials="J." surname="Cappos">
      <organization></organization>
    </author>
    <author initials="R." surname="Dingledine">
      <organization></organization>
    </author>
    <date year="2018" month="September" day="19"/>
  </front>
</reference>


    </references>

    <references title='Informative References'>

<reference anchor="MERCURY" target="https://www.usenix.org/system/files/conference/atc17/atc17-kuppusamy.pdf">
  <front>
    <title>Mercury: Bandwidth-Effective Prevention of Rollback Attacks Against Community Repositories</title>
    <author initials="T.K." surname="Kuppusamy">
      <organization></organization>
    </author>
    <author initials="V." surname="Diaz">
      <organization></organization>
    </author>
    <author initials="J." surname="Cappos">
      <organization></organization>
    </author>
    <date year="2017" month="July" day="12"/>
  </front>
  <seriesInfo name="ISBN" value="978-1-931971-38-6"/>
</reference>
<reference anchor="UPTANEESCAR" target="https://ssl.engineering.nyu.edu/papers/kuppusamy_escar_16.pdf">
  <front>
    <title>Securing Software Updates for Automobiles</title>
    <author initials="T.K." surname="Kuppusamy">
      <organization></organization>
    </author>
    <author initials="A." surname="Brown">
      <organization></organization>
    </author>
    <author initials="S." surname="Awwad">
      <organization></organization>
    </author>
    <author initials="D." surname="McCoy">
      <organization></organization>
    </author>
    <author initials="R." surname="Bielawski">
      <organization></organization>
    </author>
    <author initials="C." surname="Mott">
      <organization></organization>
    </author>
    <author initials="S." surname="Lauzon">
      <organization></organization>
    </author>
    <author initials="A." surname="Weimerskirch">
      <organization></organization>
    </author>
    <author initials="J." surname="Cappos">
      <organization></organization>
    </author>
    <date year="2016" month="October" day="16"/>
  </front>
</reference>
<reference anchor="PEP-458" target="https://www.python.org/dev/peps/pep-0458/">
  <front>
    <title>PEP 458 -- Surviving a Compromise of PyPI</title>
    <author initials="T.K." surname="Kuppusamy">
      <organization></organization>
    </author>
    <author initials="V." surname="Diaz">
      <organization></organization>
    </author>
    <author initials="D." surname="Stufft">
      <organization></organization>
    </author>
    <author initials="J." surname="Cappos">
      <organization></organization>
    </author>
    <date year="2013" month="September" day="27"/>
  </front>
</reference>
<reference anchor="DEPLOY" target="https://uptane.github.io/deployment-considerations/index.html">
  <front>
    <title>Uptane Deployment Considerations</title>
    <author initials="." surname="Members of the Uptane Alliance Community">
      <organization></organization>
    </author>
    <date year="n.d."/>
  </front>
</reference>
<reference anchor="USATODAY" target="https://www.usatoday.com/story/tech/columnist/2016/06/28/your-average-car-lot-more-code-driven-than-you-think/86437052/">
  <front>
    <title>Your average car is a lot more code-driven than you think</title>
    <author initials="B." surname="O'Donnell">
      <organization></organization>
    </author>
    <date year="2016" month="June" day="28"/>
  </front>
</reference>
<reference anchor="CR-OTA" target="https://www.consumerreports.org/automotive-technology/automakers-embrace-over-the-air-updates-can-we-trust-digital-car-repair/">
  <front>
    <title>Automakers Embrace Over-the-Air Updates, but Can We Trust Digital Car Repair?</title>
    <author initials="K." surname="Barry">
      <organization></organization>
    </author>
    <date year="2018" month="April" day="20"/>
  </front>
</reference>
<reference anchor="IN-TOTO" target="https://in-toto.github.io/">
  <front>
    <title>in-toto: A framework to secure the integrity of software supply chains</title>
    <author >
      <organization></organization>
    </author>
    <date year="2018" month="October" day="29"/>
  </front>
</reference>


    </references>



  </back>

<!-- ##markdown-source:
H4sIAIwIY18AA+292XLbWLYo+K6vQNgPKemStCUPabseupUeTuqc9NCWnFl1
OjpcIAlKuCYBFgBKZjoccT+k++ful/Sa99oYKNmZVbdPRNdDlkUAe1h77TUP
4/F4r8mbZfYs+bBu0iJLzuC/87SaJ4uySl5kdX5RJPBLcrpaL7NVVjRpk5fF
XjqdVtkVfPXu/OTNy715OSvSFYyyoVHGtYwyntMIe7O0yS7KavssyYtFubeX
r6tnSVG+yKr8Cga8yurzalM3x/fvP71/vJdWWfosOX/74u3edVl9uqjKzVr+
/pRt4af5s+S0aLKqyJrxiypdNHt7NOPHdFkWsIptVu+t82fJ/9mUs1FSl1VT
ZYsa/rVd4T/+r729dNNcltWzvSQZw5LqZ8nrbDXNqjopF0lzmSk0TpbLPC1m
WfK8XK02Rd5s4Ysk4b3ufqesLtIi/53A1X13f3avTN5V5WKS/DtsPC+S5+l6
XdYH9G22SvNlB5j1/35RlhfLjOBRT2blil6uYXNZ8yx5DHtoqvI8m13S77Ny
UzQI8g9nJ/RDlV3QWt78jZ/DSp8lP1Vl+Wm5LeSTOezr6Oj4/tHeXlFWKzob
hNLd5D8Y8sk8WyT7rz+cnY+Ss59PfvlllLw++dsoyZrZBBf//tXz46Ojp/zN
XyeP7j9N3v3HaVKvsxk/ffD44Y/89E3W4PEmH4ocJyaMg02t0yovLnBb8H81
f/To6OkT/khffoOrWwp8k1fwV/IcXnjz6vkz2kqTVhcIlcumWT+7d+/6+nqy
4U8ncDL3qmwNWFHfa6qjR/f4A74Gd3QCuwgnRZF9Tu4ePXq2Y/L6Dg0S0Ar/
p6g1SV6kV3nd/XUDGNfQz3O4IM8SgPuT8dF92uj5ybvkQZI2cGxXyfz+k6Mn
2SN4AD+PH3S3WMMeL/LmcjNFvLgHKLxZ45iLClAVoXyvSdf1vemynN6TwZ7c
nz04Pn5y9Ch9+OODR8f3F8fZk9ns0eJRNn0yXzx8+hQ/eTBZzT14zulu4MjJ
Kx1aljpOXm+WTT6uymUGWAJ4SuCphwFzPvmPSfIfm/V6U6erbfzsbJKcXF+n
8/jXlxO4ZRUMvox//xWAmae/xz/++yR5XdaXWfGp7Dzg29YG/f2j8dETg/5D
hf7xbPr4x/lTgf7DPwZ9GezoQTY7evrw+OH8KHvw6OH0wZPFk8fHT548XkwX
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
hj5/Crn/fwFNb3XvljYBAA==

-->

</rfc>


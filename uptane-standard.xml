<?xml version="1.0" encoding="UTF-8"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc2629 version 1.2.9 -->

<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
]>

<?rfc toc="yes"?>
<?rfc sortrefs="yes"?>
<?rfc symrefs="yes"?>

<rfc ipr="noDerivativesTrust200902" docName="uptane-standard-design" category="info">

  <front>
    <title abbrev="UPTANE">Uptane Standard for Design and Implementation</title>

    <author initials="." surname="Members of the Uptane Alliance Community" fullname="Uptane Alliance Community">
      <organization>Uptane Alliance (c/o Prof. Justin Cappos)</organization>
      <address>
        <postal>
          <street>6 MetroTech</street>
          <city>Brooklyn</city>
          <region>NY</region>
          <code>11201</code>
          <country>USA</country>
        </postal>
        <email>uptane-standards@googlegroups.com</email>
      </address>
    </author>

    <date year="2020" month="September" day="14"/>

    <area>TODO</area>
    <workgroup>TODO</workgroup>
    <keyword>Internet-Draft</keyword>

    <abstract>


<t>This document describes a framework for securing ground vehicle software update systems.</t>



    </abstract>


  </front>

  <middle>


<section anchor="introduction" title="Introduction">

<t>Uptane is a secure software update framework for ground vehicles. This document describes procedures to enable programmers for OEMs and suppliers to securely design and implement this framework in a manner that better protects connected units on ground vehicles. Integrating Uptane as outlined in the sections that follow can reduce the ability of attackers to compromise critical systems. It also assures a faster and easier recovery process should a compromise occur.</t>

<t>These instructions specify the components necessary for a compliant implementation. Individual implementors can make their own technological choices within those requirements. This flexibility makes Uptane adaptable to the many customized update solutions used by manufacturers. If implementors wish to have compatible formats, they may use POUFs. POUFs contain a description of implementation choices as well as data binding formats. An implementor who adopts a POUF, as well as the Uptane Standard, will be able to interoperate with other implementations using that POUF.</t>

</section>
<section anchor="terminology" title="Terminology">

<section anchor="conformance-terminology" title="Conformance terminology">

<t>The keywords MUST, MUST NOT, REQUIRED, SHALL, SHALL NOT, SHOULD, SHOULD NOT, RECOMMENDED, MAY, and OPTIONAL in this document are to be interpreted as described in <xref target="RFC2119"/>.</t>

<t>In order to be considered “Uptane-compliant,” an implementation MUST follow all of these rules as specified in the document.</t>

</section>
<section anchor="terminology-1" title="Terminology">

<t><spanx style="emph">Bundle</spanx>: A set of images released by the repository that is meant to be installed by one or more target ECUs on a vehicle during the same update cycle.</t>

<t><spanx style="emph">Bus</spanx>: An internal communications network that interconnects components within a vehicle. A vehicle can have a number of buses that will vary in terms of power, speed and resources.</t>

<t><spanx style="emph">ECU Identifier</spanx>: An attribute used to identify a specific ECU (e.g., such as a unique serial number).</t>

<t><spanx style="emph">ECU Version Manifest</spanx>: Metadata which details the software version currently installed on the ECU.</t>

<t><spanx style="emph">Hardware Identifier</spanx>: An attribute used to identify a model of an ECU.</t>

<t><spanx style="emph">Image</spanx>: File containing software for an ECU to install. May contain a binary image to flash, installation instructions, and other necessary information for the ECU to properly apply the update. Each ECU typically holds only one image, although this may vary in some cases.</t>

<t><spanx style="emph">Metadata</spanx>:  Information describing the characteristics of data including, for example, structural
metadata describing data structures (e.g., data format, syntax, and semantics) and
descriptive metadata describing data contents (e.g., information security labels). As used in Uptane, metadata can be described as information associated with a role or an image that contains the characteristics or parameters thereof (e.g. cryptographic material parameters, file names and versions.)</t>

<t><spanx style="emph">Primary/Secondary ECUs</spanx>: Terms used to describe the control units within a ground vehicle. A Primary ECU downloads and verifies update images and metadata for itself and for Secondary ECUs, and distributes images and metadata to Secondaries. Thus, it requires extra storage space and a means to download images and metadata.  Secondary ECUs receive their update images and metadata from the Primary, and only need to verify and install their own metadata and images.</t>

<t><spanx style="emph">POUF</spanx>: A document that contains the protocol, operations, usage, and formats (POUF) of a specific Uptane implementation. The POUF contains decisions about SHOULDs and MAYs in an implementation, as well as descriptions of data binding formats. POUFs MAY be used to create compatible Uptane implementations.</t>

<t><spanx style="emph">Repository</spanx>: A server containing metadata about images. May also contain the images themselves. Other data may be stored on the repository to be accessed by ECUs during the update process.</t>

<t><spanx style="emph">Suppliers</spanx>: Independent companies to which auto manufacturers may outsource the production of ECUs. Tier-1 suppliers directly serve the manufacturers. Tier-2 suppliers are those that perform outsourced work for Tier-1 suppliers.</t>

<t><spanx style="emph">Vehicle Version Manifest</spanx>: A compilation of all ECU version manifests on a vehicle. It serves as a master list of all images currently running on all ECUs in the vehicle.</t>

</section>
<section anchor="uptane-role-terminology" title="Uptane Role terminology">

<t>These terms are defined in greater detail in <xref target="roles"/>.</t>

<t><spanx style="emph">Delegations</spanx>: A process by which the responsibility of signing metadata about images is assigned to another party.<vspace />
<spanx style="emph">Role</spanx>: A party (human or machine) responsible for signing a certain type of metadata. The role controls keys and is responsible for signing metadata entrusted to it with these keys. The roles mechanism of Uptane allows the system to distribute signing responsibilities so that the compromise of one key does not necessarily impact the security of the entire system.</t>

<t><list style="symbols">
  <t><spanx style="emph">Root Role</spanx>: Signs metadata that distributes and revokes public keys used to verify the Root, Timestamp, Snapshot, and Targets role metadata.</t>
  <t><spanx style="emph">Snapshot Role</spanx>: Signs metadata that indicates which images the repository has released at the same time.</t>
  <t><spanx style="emph">Targets Role</spanx>: Signs metadata used to verify the image, such as cryptographic hashes and file size.</t>
  <t><spanx style="emph">Timestamp Role</spanx>: Signs metadata that indicates if there are any new metadata or images on the repository.</t>
</list></t>

</section>
<section anchor="acronyms-and-abbreviations" title="Acronyms and abbreviations">

<t><spanx style="emph">CAN Bus</spanx>: Controller Area Network bus standard</t>

<t><spanx style="emph">CDN</spanx>: Content Delivery Network</t>

<t><spanx style="emph">ECUs</spanx>: Electronic Control Units, the computing units on a vehicle</t>

<t><spanx style="emph">LIN Bus</spanx>: Local Interconnect Bus</t>

<t><spanx style="emph">OBD</spanx>: On-board diagnostics</t>

<t><spanx style="emph">SOTA</spanx>: Software Updates Over-the-Air</t>

<t><spanx style="emph">UDS</spanx>: Unified Diagnostic Services</t>

<t><spanx style="emph">VIN</spanx>: Vehicle Identification Number</t>

</section>
</section>
<section anchor="rationale-for-and-scope-of-uptane-standards" title="Rationale for and scope of Uptane Standards">

<t>This Standards document clarifies the essential components and best practices for the secure design, implementation and deployment of Uptane by OEMs and suppliers. These practices contribute to compromise resilience, or the ability to minimize the extent of the threat posed by any given attack.</t>

<t>However, this specification is intended as an implementation guide, and not as a detailed technical argument about the security properties that Uptane provides.  Readers interested in such documentation should refer to published papers that cover this topic.  <xref target="UPTANEESCAR"/></t>

<section anchor="why-uptane-requires-a-standards-document" title="Why Uptane requires a standards document">

<t>A standards document that can guide the safe design, integration and deployment of Uptane in vehicles is needed at this time because:</t>

<t><list style="symbols">
  <t>The number of connected units on the average vehicle continues to grow, with mainstream cars now containing up to 100 million lines of code. <xref target="USATODAY"/></t>
  <t>The expanded use of software over-the-air strategies creates new attack surfaces for malicious parties. <xref target="CR-OTA"/></t>
  <t>Legacy update strategies, such as SSL/TLS or GPG/RSA, are not feasible for use on vehicle ECUs because they force manufacturers to chose between enhanced security and customizability.</t>
  <t>Conventional strategies are also complicated by the differing resources of the ECUs, which can vary greatly in memory, storage space, and Internet connectivity.</t>
  <t>The design of Uptane makes it possible to offer improved design flexibility, without sacrificing security.</t>
  <t>This added design flexibility, however, could be a liability if the framework is implemented incorrectly.</t>
  <t>Standardization of crucial steps in the design, implementation and use of Uptane can assure that customizability does not impact security or functionality.</t>
</list></t>

</section>
<section anchor="scope-of-standards-coverage" title="Scope of Standards coverage">

<t>This document sets guidelines for implementing Uptane in most systems capable of updating software on connected units in ground vehicles, including passenger vehicles, light-duty trucks, heavy-duty trucks, and motorcycles. Uptane could potentially also be applied to other ground vehicles, such as automated shuttles, recreational vehicles, and military ground vehicles. Uptane could even be applied to domains such as IoT devices, medical devices, and unmanned aerial vehicles. In this section, we define the scope of that applicability by providing sample use cases and possible exceptions, aspects of software update security that are not applicable to Uptane, and the design requirements governing the preparation of these standards.</t>

<section anchor="assumptions" title="Assumptions">

<t>We assume the following system preconditions for Uptane:</t>

<t><list style="symbols">
  <t>Vehicles have the ability to establish connectivity to required backend services. For example, this could be done through cellular, Wi-Fi, or hard-wired mechanisms.</t>
  <t>ECUs are either directly connected to the communication channel, or are indirectly connected via some sort of network gateway.</t>
  <t>ECUs are programmable and provide sufficient performance to be updated.</t>
  <t>ECUs must be able to perform a public key cryptography operation as well as some supporting operations.</t>
  <t>There are state-of-the-art secure servers in place, such as the Director and Image repository servers.</t>
</list></t>

<t>It is important that any bugs detected in Uptane implementations be patched promptly. Failure to do so could interfere with the effectiveness of Uptane’s operations.</t>

</section>
<section anchor="use-cases" title="Use cases">

<t>The following use cases provide a number of scenarios illustrating the manner in which software updates could be accomplished using Uptane.</t>

<section anchor="oems-initializing-uptane-at-the-factory-using-sota" title="OEMs initializing Uptane at the factory using SOTA">

<t>An OEM plans to install Uptane on new vehicles. This entails the following components: code to perform full and partial verification, the latest copy of the relevant metadata, the public keys, and an accurate attestation of the latest time. The OEM then either requires its tier-1 suppliers to provide these materials to the suppliers’ assembly lines or can choose to add the materials later at the OEM’s assembly lines. The OEM’s in-vehicle implementation is Uptane-compliant if:</t>

<t><list style="numbers">
  <t>all Primaries perform full verification;</t>
  <t>all Secondaries that are updated via OTA at least perform partial verification; and</t>
  <t>all other ECUs that do not perform any type of verification cannot be updated via OTA.</t>
</list></t>

</section>
<section anchor="updating-one-ecu-with-a-complete-image" title="Updating one ECU with a complete image">

<t>A tier-1 supplier completes work on a revised image for an electronic brake control module. This module will control the brakes on all models of an SUV produced by the OEM mentioned above. Assuming supplier delegation is supported by the OEM for this ECU, each tier-1 supplier digitally signs the image, then delivers the signature and all of its metadata, including delegations, and associated images to the OEM. The OEM adds these metadata and images to its image repository, along with information about any dependencies and conflicts between this image and those for other ECUs used in the OEM’s vehicles. The OEM also updates the inventory database, so that the director repository can instruct the ECU on how to install these updated images.</t>

</section>
<section anchor="updating-individual-ecus-on-demand" title="Updating individual ECUs on demand">

<t>An OEM has issued a recall to address a problem with a keyless entry device that has been locking people out of their cars. The OEM prepares an updated flash image in the manner described above. The OEM then ships USB flash drives to vehicle owners and dealerships that allow those parties to update the firmware of their vehicles.</t>

</section>
<section anchor="update-one-ecu-with-multiple-deltas" title="Update one ECU with multiple deltas">

<t>The OEM wants to use delta updates to save over-the-air bytes. The delta images contain only the code and/or data that has changed from the previous image version. To do so, the OEM must first modify the Director repository, using the vehicle version manifest and dependency resolution to determine the differences between the previous and latest images. The OEM then adds the following to the custom Targets metadata used by the Director repository: (1) the algorithm used to apply a delta image, and (2) the Targets metadata about the delta image. The OEM will also check whether the delta images match the Targets metadata from the Director repository.</t>

</section>
</section>
</section>
<section anchor="exceptions" title="Exceptions">

<t>There are a number of factors that could impede the completion of the above scenarios:</t>

<t><list style="symbols">
  <t>ECUs may be lacking the necessary resources to function as designated. These resources could include weaknesses, in terms of CPU or RAM, that render performance of public key cryptography infeasible; a lack of sufficient storage to undo installation of bad software; or an ECU simply may reside on a low-speed network (e.g., LIN).</t>
  <t>ECUs may reside on different network segments, and may not be able to directly reach each other, requiring a gateway to facilitate communication.</t>
  <t>A user may replace OEM-installed ECUs with aftermarket ECUs.</t>
  <t>A vehicle may be able to download only a limited amount of data via a cellular channel, due to limits on a data plan.</t>
  <t>A system may lack sufficient power to download or install software updates.</t>
  <t>Vehicles may be offline for extended periods of time, thus missing required updates (e.g., key rotations).</t>
  <t>OEMs may be unwilling to implement costly security or hardware requirements.</t>
</list></t>

</section>
<section anchor="out-of-scope" title="Out of Scope">

<t>The following topics will not be addressed in this document, as they represent threats outside the scope of Uptane:</t>

<t><list style="symbols">
  <t>Physical attacks, such as manual tampering with ECUs outside the vehicle.</t>
  <t>Compromise of the packaged software, such as malware embedded in a trusted package.</t>
  <t>Compromise of the supply chain (e.g., build system, version control system, packaging process). A number of strategies (e.g., git signing, TPMs, in-toto <xref target="IN-TOTO"/>)  already exist to address this problem. Therefore, there is no need to duplicate those techniques here.</t>
  <t>Problems associated with OBD or UDS programming of ECUs, such as authentication of communications between ECUs.</t>
  <t>Malicious mirrors of package repositories, which may substitute original packages with malicious packages with matching version numbers <xref target="MERCURY"/>.</t>
</list></t>

</section>
<section anchor="design-requirements" title="Design requirements">

<t>The design requirements for this document are governed by the following principal parameters:</t>

<t><list style="symbols">
  <t>to clearly mandate the design and implementation steps that are security critical and must be followed as is, while offering flexibility in the implementation of non-critical steps. In this manner, users can adapt to support different use models and deployment scenarios.</t>
  <t>to ensure that, if Uptane is implemented, the security practices mandated or suggested in this document do not interfere with the functionality of ECUs, vehicles, or the systems that maintain them.</t>
  <t>to delineate best practices to ensure that, should any part of the SOTA mechanism of a vehicle be attacked, an attacker must compromise two or more modules to breach the SOTA mechanism.</t>
</list></t>

</section>
</section>
<section anchor="threat-model-and-attack-strategies" title="Threat model and attack strategies">

<t>The overarching goal of Uptane is to provide a system that is resilient in the face of various types of compromise. In this section, we describe the goals an attacker may have (<xref target="attacker_goals"/>) and the capabilities they may have or could develop (<xref target="capabilities"/>). We then describe and classify types of attacks on the system according to the attacker’s goals (<xref target="threats"/>).</t>

<section anchor="attacker_goals" title="Attacker goals">

<t>We assume that attackers may want to achieve one or more of the following goals, in increasing order of severity:</t>

<t><list style="symbols">
  <t>Read the contents of updates to discover confidential information, reverse-engineer firmware, or compare two firmware images to identify security fixes and hence determine the fixed security vulnerability</t>
  <t>Deny installation of updates to prevent vehicles from fixing software problems</t>
  <t>Cause one or more ECUs in the vehicle to fail, denying use of the vehicle or of certain functions</t>
  <t>Control ECUs within the vehicle, and possibly the vehicle itself</t>
</list></t>

</section>
<section anchor="capabilities" title="Attacker capabilities">

<t>Uptane is designed with resilience to compromise in mind. We assume that attackers may develop one or more of the following capabilities:</t>

<t><list style="symbols">
  <t>Intercept and modify network traffic (i.e., perform man-in-the-middle attacks). This capability may be developed in two domains:
  <list style="symbols">
      <t>Outside the vehicle, intercepting and modifying traffic between the vehicle and software repositories</t>
      <t>Inside the vehicle, intercepting and modifying traffic on one or more vehicle buses (e.g. via an OBD port or using a compromised ECU as a vector)</t>
    </list></t>
  <t>Compromise and control either a Director repository or Image repository server, and any keys stored on that repository, but not both the Director and Image repositories.</t>
  <t>Compromise either a Primary ECU or a Secondary ECU, but not both in the same vehicle</t>
</list></t>

</section>
<section anchor="threats" title="Description of threats">

<t>Uptane’s threat model includes the following types of attacks, organized according to the attacker goals listed in <xref target="attacker_goals"/>.</t>

<section anchor="read_updates" title="Read updates">

<t><list style="symbols">
  <t><spanx style="emph">Eavesdrop attack:</spanx> Read sensitive or confidential information from an update intended to be encrypted for a specific ECU. (Note: Not all implementations will have a need for protecting information in this way.)</t>
</list></t>

</section>
<section anchor="deny_updates" title="Deny installation of updates">

<t>An attacker seeking to deny the installation of updates may attempt one or more of the following strategies, among others:</t>

<t><list style="symbols">
  <t><spanx style="emph">Drop-request attack:</spanx> Block network traffic outside or inside the vehicle.</t>
  <t><spanx style="emph">Slow retrieval attack:</spanx> Slow down network traffic, in the extreme case sending barely enough packets to avoid a timeout. Similar to a drop-request attack, except that both the sender and receiver of the traffic still think network traffic is unimpeded.</t>
  <t><spanx style="emph">Freeze attack:</spanx> Continue to send a properly signed, but old, update bundle to the ECUs, even if newer updates exist.</t>
  <t><spanx style="emph">Partial bundle installation attack:</spanx> Install a valid (signed) update bundle, and then block selected updates within the bundle.</t>
  <t>Conduct a denial of service attack against the Uptane repositories or infrastructure.</t>
</list></t>

</section>
<section anchor="change_functionality" title="Interfere with ECU functionality">

<t>Attackers seeking to interfere with the functionality of vehicle ECUs in order to cause an operational failure or unexpected behavior may do so in one of the following ways:</t>

<t><list style="symbols">
  <t><spanx style="emph">Rollback attack:</spanx> Cause an ECU to install a previously valid software revision that is older than the currently installed version.</t>
  <t><spanx style="emph">Endless data attack:</spanx> Send a large amount of data to an ECU, until it runs out of storage, possibly causing the ECU to fail to operate.</t>
  <t><spanx style="emph">Mix-and-match attack:</spanx> Install a malicious software bundle in which some of the updates do not interoperate properly. This may be accomplished even if all of the individual images being installed are valid, as long as valid versions exist that are mutually incompatible.</t>
</list></t>

</section>
<section anchor="control_ecu" title="Control an ECU or vehicle">

<t>Full control of a vehicle, or one or more ECUs within a vehicle, is the most severe threat.</t>

<t><list style="symbols">
  <t><spanx style="emph">Arbitrary software attack:</spanx> Cause an ECU to install and run arbitrary code of the attacker’s choice.</t>
</list></t>

</section>
</section>
</section>
<section anchor="design" title="Detailed design of Uptane">

<t>Uptane is a secure software update framework for automobiles. We do not specify implementation details. Instead, we describe the components necessary for a compliant implementation and leave it up to individual implementors to make their own technological choices within those requirements.</t>

<t>At a high level, Uptane requires:</t>

<t><list style="symbols">
  <t>Two software repositories:
  <list style="symbols">
      <t>An Image repository containing binary images to install, and signed metadata about those images</t>
      <t>A Director repository connected to an inventory database that can sign metadata on demand for images in the Image repository</t>
    </list></t>
  <t>Repository tools for generating Uptane-specific metadata about images</t>
  <t>A public key infrastructure supporting the required metadata production/signing roles on each repository:
  <list style="symbols">
      <t>Root - Certificate authority for the Uptane ecosystem. Distributes public keys for verifying all the other roles’ metadata</t>
      <t>Timestamp - Indicates whether there are new metadata or images</t>
      <t>Snapshot - Indicates images released by the repository at a point in time, via signing metadata about Targets metadata</t>
      <t>Targets - Indicates metadata about images, such as hashes and file sizes</t>
    </list></t>
  <t>A secure way for ECUs to know the time.</t>
  <t>An ECU capable of downloading images and associated metadata from the Uptane servers.</t>
  <t>An in-vehicle client on a Primary ECU capable of verifying the signatures on all update metadata and downloading updates on behalf of its associated Secondary ECUs. The Primary ECU MAY be the same ECU that communicates with the server.</t>
  <t>A client or library on each Secondary ECU capable of performing either full or partial verification of metadata</t>
</list></t>

<section anchor="roles" title="Roles on repositories">

<t>A repository contains images and metadata. Each role has a particular type of metadata associated with it, as described in <xref target="meta_structures"/>.</t>

<section anchor="root_role" title="The Root role">

<t>A repository’s Root role SHALL be responsible for a Certificate Authority as defined in <xref target="RFC3647"/>.
A repository’s Root role SHALL produce and sign Root metadata as described in <xref target="root_meta"/>.
A repository’s Root role SHALL sign the public keys used to verify the metadata produced by the Timestamp, Snapshot, and Targets roles.
A repository’s Root role SHALL revoke keys for the other roles, in case of compromise.</t>

</section>
<section anchor="targets_role" title="The Targets role">

<t>A repository’s Targets role SHALL produce and sign metadata about images and delegations as described in <xref target="targets_meta"/>.</t>

<section anchor="targets_role_delegations" title="Delegations">

<t>The Targets role on the Image repository MAY delegate the responsibility of signing metadata to other, custom-defined roles referred to as delegated targets. If it does, it MUST do so as specified in <xref target="delegations_meta"/>.</t>

<t>Responsibility for signing images or a subset of images MAY be delegated to more than one role and therefore it is possible for two different roles to be trusted for signing a particular image. For this reason, delegations MUST be prioritized.</t>

<t>A particular delegation for a subset of images MAY be designated as <spanx style="strong">terminating</spanx>. For terminating delegations, the client SHALL NOT search any further if it does not find validly signed metadata about those images. Delegations SHOULD NOT be terminating by default; terminating delegations SHOULD only be used when there is a compelling technical reason to do so.</t>

<t>A delegation for a subset of images MAY be a multi-role delegation <xref target="TAP-3"/>. A multi-role delegation indicates that multiple roles are needed to sign a particular image and each of the delegatee roles MUST sign the same metadata.</t>

<t>Delegations only apply to the Image repository. The Targets role on the Director repository MUST NOT delegate metadata signing responsibility.</t>

</section>
</section>
<section anchor="snapshot_role" title="The Snapshot role">

<t>A repository’s Snapshot role SHALL produce and sign metadata about all Targets metadata the repository releases, including the current version number of the top-level Targets metadata, and the version numbers of all delegated Targets metadata, as described in <xref target="snapshot_meta"/>.</t>

</section>
<section anchor="timestamp_role" title="The Timestamp role">

<t>A repository’s Timestamp role SHALL produce and sign metadata indicating whether there are new metadata or images on the repository. It MUST do so by signing the metadata about the Snapshot metadata file.</t>

</section>
</section>
<section anchor="meta_structures" title="Metadata structures">

<t>Uptane’s security guarantees all rely on properly created metadata that follows a designated structure. The Uptane standard <spanx style="strong">does not</spanx> mandate any particular format or encoding for the metadata as a whole. ASN.1 (with any encoding scheme like BER, DER, XER, etc.), JSON, XML, or any other encoding format that is capable of providing the required structure MAY be used.</t>

<t>However, string comparison is required as part of metadata verification. To ensure an accurate basis for comparing strings, all strings MUST be encoded in the Unicode Format for Network Interchange as defined in <xref target="RFC5198"/>, including normalization into Unicode Normalization Form C (<xref target="NFC"/>).</t>

<t>In the Deployment Considerations document (<xref target="DEPLOY"/>), the Uptane Alliance provides some examples of compliant metadata structures in ASN.1 and JSON.</t>

<section anchor="common_metadata" title="Common metadata structures">

<t>Every public key MUST be represented using a public key identifier.  A public key identifier is EITHER all of the following:</t>

<t><list style="symbols">
  <t>The value of the public key itself (which MAY be, for example, formatted as a PEM string)</t>
  <t>The public key cryptographic algorithm used by the key (such as RSA or ECDSA)</t>
  <t>The particular scheme used to verify the signature (such as <spanx style="verb">rsassa-pss-sha256</spanx> or <spanx style="verb">ecdsa-sha2-nistp256</spanx>)</t>
</list></t>

<t>OR a secure hash over at least the above components (such as the keyid mechanism in TUF).</t>

<t>All four Uptane roles (Root, Targets, Snapshot, and Timestamp) share a common structure. They SHALL contain the following two attributes:</t>

<t><list style="symbols">
  <t>A payload of metadata to be signed</t>
  <t>An attribute containing the signature(s) of the payload, where each entry specifies:
  <list style="symbols">
      <t>The public key identifier of the key being used to sign the payload</t>
      <t>A signature with this key over the payload</t>
    </list></t>
</list></t>

<t>The payload differs depending on the role. However, the payload for all roles shares a common structure. It SHALL contain the following four attributes:</t>

<t><list style="symbols">
  <t>An indicator of the type of role (Root, Targets, Snapshot, or Timestamp)</t>
  <t>An expiration date and time</t>
  <t>An integer version number, which SHOULD be incremented each time the metadata file is updated</t>
  <t>The role-specific metadata for the role indicated</t>
</list></t>

<t>The following sections describe the role-specific metadata. All roles SHALL follow the common structures described here.</t>

</section>
<section anchor="root_meta" title="Root metadata">

<t>A repository’s Root metadata distributes the public keys of the top-level Root, Targets, Snapshot, and Timestamp roles, as well as revocations of those keys. It SHALL contain two attributes:</t>

<t><list style="symbols">
  <t>A representation of the public keys for all four roles. Each key SHALL have a unique public key identifier.</t>
  <t>An attribute mapping each role to (1) its public key(s), and (2) the threshold of signatures required for that role</t>
</list></t>

<t>Additionally, it MAY contain a mapping of roles to a list of valid URLs from which the role metadata can be downloaded.  If this mapping of URLs is used, the implementer SHOULD implement this functionality following <xref target="TAP-5"/> to avoid adding unforeseen security risks.</t>

</section>
<section anchor="targets_meta" title="Targets metadata">

<t>The Targets metadata on a repository contains all of the information about images to be installed on ECUs. This includes filenames, hashes, file sizes, and MAY also include other useful information about images, such as what types of hardware are compatible with a particular image.</t>

<t>Targets metadata can also contain metadata about delegations, allowing one Targets role to delegate its authority to another. This means that an individual Targets metadata file might contain only metadata about delegations, only metadata about images, or some combination of the two. The details of how ECUs traverse the delegation tree to find valid metadata about images is specified in <xref target="resolve_delegations"/>.</t>

<section anchor="targets_images_meta" title="Metadata about images">

<t>To be available to install on clients, all images on the repository MUST have their metadata listed in a Targets role.  Each Targets role MAY provide a list of some images on the repository.  This list MUST provide, at a minimum, the following information about each image:</t>

<t><list style="symbols">
  <t>The image filename</t>
  <t>The size of the image in bytes</t>
  <t>One or more hashes of the image file, along with the hashing function used</t>
</list></t>

<section anchor="custom-metadata-about-images" title="Custom metadata about images">

<t>In addition to the required metadata, Targets metadata files MAY contain extra metadata for images on the repository. This metadata can be customized for a particular use case. Examples of use cases for different types of custom metadata can be found in the Deployment Considerations document (<xref target="DEPLOY"/>). However, there are a few important pieces of custom metadata that SHOULD be present in most implementations. In addition, there is one element in the custom metadata that MUST be present in the Targets metadata from the Director.</t>

<t>Custom metadata MAY also contain a demarcated field or section that MUST match whenever two pieces of metadata are checked against each other, such as when Targets metadata from the Director repository is checked against Targets metadata from the Image repository.</t>

<t>The information listed below SHOULD be provided for each image on both the Image repository and the Director repository. If a “MUST match section” is to be implemented, that is where this information SHOULD be placed.</t>

<t><list style="symbols">
  <t>A release counter, to be incremented each time a new version of the image is released. This can be used to prevent rollback attacks even in cases where the Director repository is compromised.</t>
  <t>A hardware identifier, or list of hardware identifiers, representing models of ECUs with which the image is compatible. This can be used to ensure that an ECU cannot be ordered to install an incompatible image, even in cases where the Director repository is compromised.</t>
</list></t>

<t>The following information is CONDITIONALLY REQUIRED for each image on the Director repository IF that image is encrypted:</t>

<t><list style="symbols">
  <t>Information about filenames, hashes, and file size of the encrypted image.</t>
  <t>Information about the encryption method, and other relevant information–for example, a symmetric encryption key encrypted by the ECU’s asymmetric key could be included in the Director repository metadata.</t>
</list></t>

<t>The following information MUST be provided for each image in the Targets metadata from the Director repository:</t>

<t><list style="symbols">
  <t>An ECU identifier (such as a serial number), specifying the ECU that should install the image.</t>
</list></t>

<t>The Director repository MAY provide a download URL for the image file. This may be useful, for example, when the image is on a public CDN and the director wishes to provide a signed URL.</t>

</section>
</section>
<section anchor="delegations_meta" title="Metadata about delegations">

<t>A Targets metadata file on the Image repository (but not the Director repository) MUST be able to delegate signing authority to other entities. For example, it could delegate signing authority for a particular ECU’s firmware to that ECU’s supplier. A metadata file MAY contain any number of delegations and MUST keep the delegations in prioritized order.</t>

<t>A list of delegations MUST provide the following information:</t>

<t><list style="symbols">
  <t>A list of public keys of all delegatees. Each key should have a unique public key identifier and a key type.</t>
  <t>A list of delegations, each of which contains:
  <list style="symbols">
      <t>A list of the filenames to which this role applies. This MAY be expressed using wildcards, or by enumerating a list, or a combination of the two.</t>
      <t>An optional list of the hardware identifiers to which this role applies.  If this is omitted, any hardware identifier will match.</t>
      <t>An indicator of whether or not this is a terminating delegation. (See <xref target="targets_role_delegations"/>.)</t>
      <t>A list of the roles to which this delegation applies. Each role needs to specify:
      <list style="symbols">
          <t>A name for the role (e.g. “supplier1-qa”)</t>
          <t>The key identifiers for each key this role uses</t>
          <t>A threshold of keys that must sign for this role</t>
        </list></t>
    </list></t>
</list></t>

<t>Note that <spanx style="strong">any</spanx> Targets metadata file stored on the Image repository may contain delegations, and these delegations can be in chains of arbitrary length.</t>

</section>
</section>
<section anchor="snapshot_meta" title="Snapshot metadata">

<t>The Snapshot metadata lists version numbers and filenames of all Targets metadata files. It protects against mix-and-match attacks if a delegated supplier key is compromised.</t>

<t>For each Targets metadata file on the repository, the Snapshot metadata SHALL contain the following information:</t>

<t><list style="symbols">
  <t>The filename and version number of the each Targets metadata file on the repository</t>
</list></t>

<t>The Snapshot metadata MAY also list the Root metadata filename and version number. This is not required, particularly for implementations of <xref target="TAP-5"/>, but MAY be included in all cases for backward compatibility.</t>

</section>
<section anchor="timestamp_meta" title="Timestamp metadata">

<t>The Timestamp metadata SHALL contain the following information:</t>

<t><list style="symbols">
  <t>The filename and version number of the latest Snapshot metadata on the repository.</t>
  <t>One or more hashes of the Snapshot metadata file, along with the hashing function used.</t>
</list></t>

</section>
<section anchor="repo_mapping_meta" title="Repository mapping metadata">

<t>As described in the introduction to <xref target="design"/>, Uptane requires a Director repository and an Image repository. However, it is possible to have an Uptane-compliant implementation that has more than two repositories.</t>

<t>Repository mapping metadata informs a Primary ECU about which repositories to trust for images or image paths. <xref target="TAP-4"/> describes how to make use of more complex repository mapping metadata in order to have more than the two required repositories.</t>

<t>Repository mapping metadata, or the equivalent informational content, MUST be present on all Primary ECUs, and MUST contain the following information:</t>

<t><list style="symbols">
  <t>A list of repository names and one or more URLs at which the named repository can be accessed. At a minimum, this MUST include the Director and Image repositories.</t>
  <t>A list of mappings of image paths to repositories, each of which contains:
  <list style="symbols">
      <t>A list of image paths. Image paths MAY be expressed using wildcards, or by enumerating a list, or a combination of the two.</t>
      <t>A list of repositories that MUST sign the Targets metadata for the image paths.</t>
    </list></t>
</list></t>

<t>For example, in the most basic Uptane case, the repository mapping metadata would contain:</t>

<t><list style="symbols">
  <t>The name and URL of the Director repository</t>
  <t>The name and URL of the Image repository</t>
  <t>A single mapping indicating that all images (<spanx style="verb">*</spanx>) MUST be signed by both the Director and Image repository</t>
</list></t>

<t>Note that the metadata need not be in the form of a metadata file. For example, in the basic case where there is only one Director and one Image repository, and all images need to have signed metadata from both repositories, it would be sufficient to have a configuration file with URLs for the two repositories, and a client that always checks for metadata matches between them. In this case, no explicit mapping would be defined, because the mapping is defined as part of the Uptane client implementation.</t>

<t>The <spanx style="emph">Uptane Deployment Considerations</spanx> document (<xref target="DEPLOY"/>) gives more guidance on how to implement repository mapping metadata for more complex use cases. It also discusses strategies for updating repository mapping metadata, if required.</t>

</section>
<section anchor="metadata_filename_rules" title="Rules for filenames in repositories and metadata">

<t>There is a difference between the file name in a metadata file or an ECU, and the file name on a repository. This difference exists in order to avoid race conditions, where metadata and images are read from, and written to, at the same time. For more details, the reader should read the TUF specification <xref target="TUF-spec"/> and PEP 458 <xref target="PEP-458"/>.</t>

<t>Unless stated otherwise, all files SHALL be written to repositories in accordance with the following two rules:</t>

<t><list style="numbers">
  <t>Metadata filenames SHALL be qualified with version numbers. If a metadata file A is specified as FILENAME.EXT in another metadata file B, then it SHALL be written as VERSION.FILENAME.EXT, where VERSION is A’s version number, as defined in <xref target="common_metadata"/>, with one exception: If the version number of the Timestamp metadata file might not be known in advance by a client, it MAY be read from, and written to, a repository using a filename without a version number qualification, i.e. FILENAME.EXT.</t>
  <t>If an image is specified in a Targets metadata file as FILENAME.EXT, it SHALL be written to the repository as HASH.FILENAME.EXT, where HASH is one of the hash digests of the file, as specified in <xref target="targets_images_meta"/>. The file MUST be written to the repository using <spanx style="emph">n</spanx> different filenames, one for each hash digest listed in its corresponding Targets metadata.</t>
</list></t>

<t>For example:</t>

<t><list style="symbols">
  <t>The version number of the Snapshot metadata file is 61, and its filename in the Timestamp metadata is “snapshot.json”. The filename on the repository will be “61.snapshot.json”.</t>
  <t>There is an image with the filename “acme_firmware.bin” specified in the Targets metadata, with a SHA3-256 of “aaaa” and a SHA-512/224 of “bbbb”. It will have two filenames on the repository: “aaaa.acme_firmware.bin” and “bbbb.acme_firmware.bin”.</t>
</list></t>

</section>
</section>
<section anchor="server-repository-implementation-requirements" title="Server / repository implementation requirements">

<t>An Uptane implementation SHALL make the following services available to vehicles:</t>

<t><list style="symbols">
  <t>Image repository</t>
  <t>Director repository</t>
</list></t>

<t>Additionally, an Uptane implementation requires ECUs to have a secure way to know the current time.</t>

<section anchor="image-repository" title="Image repository">

<t>The Image repository exists to allow an OEM and/or its suppliers to upload images and their associated metadata. It makes these images and their metadata available to vehicles. The Image repository is designed to be primarily controlled by human actors, and updated relatively infrequently.</t>

<t>The Image repository SHALL expose an interface permitting the download of metadata and images. This interface SHOULD be public.</t>

<t>The Image repository SHALL require authorization for writing metadata and images.</t>

<t>The Image repository SHALL provide a method for authorized users to upload images and their associated metadata. It SHALL check that a user writing metadata and images is authorized to do so for that specific image by checking the chain of delegations as described in <xref target="delegations_meta"/>.</t>

<t>The Image repository SHALL implement storage which permits authorized users to write an image file using a unique filename, and later read the same file using the same name. It MAY use any filesystem, key-value store, or database that fulfills this requirement.</t>

<t>The Image repository MAY require authentication for read access.</t>

</section>
<section anchor="director_repository" title="Director repository">

<t>The Director repository instructs ECUs as to which images should be installed by producing signed metadata on demand. Unlike the Image repository, it is mostly controlled by automated, online processes. It also consults a private inventory database containing information on vehicles, ECUs, and software revisions.</t>

<t>The Director repository SHALL expose an interface for Primaries to upload vehicle version manifests (<xref target="vehicle_version_manifest"/>) and download metadata. This interface SHOULD be public.
The Director MAY encrypt images for ECUs that require them, either by encrypting on-the-fly or by storing encrypted images in the repository.</t>

<t>The Director repository SHALL implement storage which permits an automated service to write generated metadata files. It MAY use any filesystem, key-value store, or database that fulfills this requirement.</t>

<section anchor="directing-installation-of-images-on-vehicles" title="Directing installation of images on vehicles">

<t>A Director repository MUST conform to the following six-step process for directing the installation of software images on a vehicle.</t>

<t><list style="numbers">
  <t>The Director SHOULD first identify the vehicle. This MAY be done when the Director receives a vehicle version manifest sent by a Primary (as described in <xref target="construct_manifest_primary"/>), decodes the manifest, and determines the unique vehicle identifier. Additionally, the Director MAY utilize other mechanisms to uniquely identify a vehicle (e.g., 2-way TLS with unique client certificates).</t>
  <t>Using the vehicle identifier, the Director queries its inventory database (as described in <xref target="inventory_db"/>) for relevant information about each ECU in the vehicle.</t>
  <t>The Director SHALL check the manifest for accuracy compared to the information in the inventory database. If any of the required checks fail, the Director MAY drop the request. An implementer MAY make additional checks if desired. At a minimum, the Director SHALL check the following:
  <list style="symbols">
      <t>Each ECU recorded in the inventory database is also represented in the manifest.</t>
      <t>The signature of the manifest matches the ECU key of the Primary that sent it.</t>
      <t>The signature of each Secondary’s contribution to the manifest matches the ECU key of that Secondary.</t>
    </list></t>
  <t>The Director SHOULD check that the nonce or counter in each ECU Version Report has not been used before to prevent a replay of the ECU Version Report. If the nonce or counter is reused the Director SHOULD drop the request.</t>
  <t>The Director extracts information about currently installed images from the vehicle version manifest. Using this information, it determines if the vehicle is already up-to-date, and if not, determines a set of images that should be installed. The exact process by which this determination takes place is out of scope of this standard. However, the Director MUST take into account <spanx style="emph">dependencies</spanx> and <spanx style="emph">conflicts</spanx> between images and SHOULD consult well-established techniques for dependency resolution.</t>
  <t>The Director MAY encrypt images for ECUs that require it.</t>
  <t>The Director generates new metadata representing the desired set of images to be installed on the vehicle, based on the dependency resolution in step 4. This includes Targets (<xref target="targets_meta"/>), Snapshot (<xref target="snapshot_meta"/>), and Timestamp (<xref target="timestamp_meta"/>) metadata. It then sends this metadata to the Primary as described in <xref target="download_meta_primary"/>.</t>
</list></t>

</section>
<section anchor="inventory_db" title="Inventory Database">

<t>The Director SHALL use a private inventory database to store information about ECUs and vehicles. An implementor MAY use any durable database for this purpose.</t>

<t>The inventory database MUST record the following pieces of information:</t>

<t><list style="symbols">
  <t>Per vehicle:
  <list style="symbols">
      <t>A unique identifier (such as a VIN)</t>
    </list></t>
  <t>Per ECU:
  <list style="symbols">
      <t>A unique identifier (such as a serial number)</t>
      <t>The vehicle identifier the ECU is associated with</t>
      <t>An ECU key (symmetric or asymmetric; for asymmetric keys, only the public part SHOULD be stored)</t>
      <t>The ECU key identifier (as defined in <xref target="common_metadata"/>)</t>
      <t>Whether the ECU is a Primary or a Secondary</t>
    </list></t>
</list></t>

<t>The inventory database MAY record other information about ECUs and vehicles. It SHOULD record a hardware identifier for each ECU to protect against the possibility of directing the ECU to install incompatible firmware.</t>

</section>
</section>
</section>
<section anchor="in-vehicle-implementation-requirements" title="In-vehicle implementation requirements">

<t>An Uptane-compliant ECU SHALL be able to download and verify Image metadata and image binaries before installing a new image and MUST have a secure way of verifying the current time, or a sufficiently recent attestation of the time.</t>

<t>Each ECU receiving over-the-air updates in a vehicle is either a Primary or a Secondary ECU. A Primary ECU collects and delivers vehicle manifests to the Director (<xref target="vehicle_version_manifest"/>) that contain information about which images have been installed on ECUs in the vehicle. It also verifies the time and downloads and verifies the latest metadata and images for itself and for its Secondaries. A Secondary ECU verifies the time, and downloads and verifies the latest metadata and images for itself from its associated Primary ECU. It also sends signed information about its installed images to its associated Primary.</t>

<t>All ECUs MUST verify image metadata as specified in <xref target="metadata_verification"/> before installing an image or making it available to other ECUs. A Primary ECU MUST perform full verification (<xref target="full_verification"/>). A Secondary ECU SHOULD perform full verification if possible. If a Secondary cannot perform full verification, it SHALL, at the very least, perform partial verification. In addition, it MAY also perform some steps from the full verification process. See the Uptane Deployment Considerations (<xref target="DEPLOY"/>) for a discussion of how to choose between partial and full verification.</t>

<t>ECUs MUST have a secure source of time. An OEM/Uptane implementor MAY use any external source of time that is demonstrably secure. The Uptane Deployment Considerations (<xref target="DEPLOY"/>) describe one way to implement an external time server to cryptographically attest time, as well as the security properties required. When “loading time” is referenced in procedures in this standard, it should be understood to mean loading into memory the current time (if the ECU has its own secure clock), or the most recent attested time.</t>

<section anchor="build-time-prerequisite-requirements-for-ecus" title="Build-time prerequisite requirements for ECUs">

<t>For an ECU to be capable of receiving Uptane-secured updates, it MUST have the following data provisioned at the time it is manufactured or installed in the vehicle:</t>

<t><list style="numbers">
  <t>A sufficiently recent copy of required Uptane metadata at the time of manufacture or install. This is necessary for the ECU to authenticate that the remote repository is legitmate when it first downloads metadata in the field. See the Uptane Deployment Considerations (<xref target="DEPLOY"/>) for more information.
  <list style="symbols">
      <t>Partial verification Secondary ECUs MUST have the Root and Targets metadata from the Director repository (to reduce the scope of rollback and replay attacks). These ECUs MAY also have metadata from other roles or the Image repository if they will be used by the Secondary.</t>
      <t>Full verification ECUs MUST have a complete set of metadata (Root, Targets, Snapshot, and Timestamp) from both repositories (to prevent rollback and replay attacks), as well as the repository mapping metadata (<xref target="repo_mapping_meta"/>). Delegations are not required.</t>
    </list></t>
  <t>The current time, or a secure attestation of a sufficiently recent time.</t>
  <t>An <spanx style="strong">ECU key</spanx>. This is a private key, unique to the ECU, used to sign ECU version manifests and decrypt images. An ECU key MAY be either a symmetric key or an asymmetric key. If it is an asymmetric key, there MAY be separate keys for encryption and signing. For the purposes of this standard, the set of private keys that an ECU uses is referred to as the ECU key (singular), even if it is actually multiple keys used for different purposes.</t>
</list></t>

</section>
<section anchor="what-the-primary-does" title="What the Primary does">

<t>A Primary downloads, verifies, and distributes the latest time, metadata and images. To do so, it SHALL perform the following seven steps:</t>

<t><list style="numbers">
  <t>Construct and send vehicle version manifest (<xref target="construct_manifest_primary"/>)</t>
  <t>Download and check current time (<xref target="check_time_primary"/>)</t>
  <t>Download and verify metadata (<xref target="download_meta_primary"/>)</t>
  <t>Download and verify images (<xref target="download_images_primary"/>)</t>
  <t>OPTIONAL: Send latest time to Secondaries (<xref target="send_time_primary"/>)</t>
  <t>Send metadata to Secondaries (<xref target="send_metadata_primary"/>)</t>
  <t>Send images to Secondaries (<xref target="send_images_primary"/>)</t>
</list></t>

<t>Note that the subsequent sections concerning requirements for a Primary do not prohibit implementing Primary capabilities on an ECU that does not communicate directly with the Uptane repositories. This allows for implementations to have multiple ECUs within the vehicle performing functions equivalent to a Primary.
If multiple such Primaries are included within a vehicle, each Secondary ECU SHALL have a single Primary responsible for providing its updates.</t>

<section anchor="construct_manifest_primary" title="Construct and send vehicle version manifest">

<t>The Primary SHALL build a <spanx style="emph">vehicle version manifest</spanx> as described in <xref target="vehicle_version_manifest"/>.</t>

<t>Once the complete manifest is built, the Primary MAY send the manifest to the Director repository. However, it is not strictly required that the Primary send the manifest until step three. If permitted by the implementation, a Primary MAY send only a diff of the manifest to save bandwidth. If an implementation permits diffs, the Director SHOULD have a way to request a full manifest.</t>

<t>Secondaries MAY send their version report at any time so that it is already stored on the Primary when it wishes to check for updates. Alternatively, the Primary MAY request a version report from each Secondary at the time of the update check.</t>

<section anchor="vehicle_version_manifest" title="Vehicle version manifest">

<t>The vehicle version manifest is a metadata structure that MUST contain the following information:</t>

<t><list style="symbols">
  <t>An attribute containing the signature(s) of the payload, each specified by:
  <list style="symbols">
      <t>The public key identifier of the key being used to sign the payload</t>
      <t>The signing method (e.g. ed25519, rsassa-pss, etc.)</t>
      <t>A hash of the payload to be signed</t>
      <t>The hashing function used (e.g. SHA3-256, SHA-512/224, etc.)</t>
      <t>The signature of the hash</t>
    </list></t>
  <t>A payload representing the installed versions of each software image on the vehicle. This payload SHALL contain:
  <list style="symbols">
      <t>The vehicle’s unique identifier (e.g. the VIN)</t>
      <t>The Primary ECU’s unique identifier (e.g. the serial number)</t>
      <t>A list of ECU version reports as specified in <xref target="version_report"/></t>
    </list></t>
</list></t>

<t>Note that one of the ECU version reports should be the version report for the Primary itself.</t>

</section>
<section anchor="version_report" title="ECU version report">

<t>An ECU version report is a metadata structure that MUST contain the following information:</t>

<t><list style="symbols">
  <t>An attribute containing the signature(s) of the payload, each specified by:
  <list style="symbols">
      <t>The public key identifier of the key being used to sign the payload</t>
      <t>The signing method (e.g. ed25519, rsassa-pss, etc.)</t>
      <t>A hash of the payload to be signed</t>
      <t>The hashing function used (e.g. SHA3-256, SHA-512/224, etc.)</t>
      <t>The signature of the hash</t>
    </list></t>
  <t>A payload containing:
  <list style="symbols">
      <t>The ECU’s unique identifier (e.g. the serial number)</t>
      <t>The filename, length, and hashes of its currently installed image (i.e. the non-custom Targets metadata for this particular image)</t>
      <t>An indicator of any detected security attack</t>
      <t>The latest time the ECU can verify at the time this version report was generated</t>
      <t>A nonce or counter to prevent a replay of the ECU version report. This value MUST change each update cycle and MAY be the cryptographic nonce used with a Time Server.</t>
    </list></t>
</list></t>

</section>
</section>
<section anchor="check_time_primary" title="Download and check current time">

<t>The Primary SHALL load the current time from a secure source.</t>

</section>
<section anchor="download_meta_primary" title="Download and verify metadata">

<t>The Primary SHALL download metadata for all targets and perform a full verification on it as specified in <xref target="full_verification"/>.</t>

</section>
<section anchor="download_images_primary" title="Download and verify images">

<t>The Primary SHALL download and verify images for itself and for all of its associated Secondaries. Images SHALL be verified by checking that the hash of the image file matches the hash specified in the Director’s Targets metadata for that image.</t>

<t>There may be several different filenames that all refer to the same image binary, as described in <xref target="metadata_filename_rules"/>. If the Primary has received multiple hashes for a given image binary via the Targets role (see <xref target="targets_images_meta"/>) then it SHALL verify every hash for this image despite that the image is identified by a single hash as part of its filename.</t>

</section>
<section anchor="send_time_primary" title="Send latest time to Secondaries">

<t>Unless the Secondary ECU has its own way of verifying the time or does not have the capacity to verify a time message, the Primary is CONDITIONALLY REQUIRED to send the time to each ECU. The Secondary will verify the time message, then overwrite its current time with the received time.</t>

</section>
<section anchor="send_metadata_primary" title="Send metadata to Secondaries">

<t>The Primary SHALL send its latest downloaded metadata to all of its associated Secondaries. The metadata it sends to each Secondary MUST include all of the metadata required for verification on that Secondary. For full verification Secondaries, this includes the metadata for all four roles from both repositories, plus any delegated Targets metadata files the Secondary will recurse through to find the proper delegation. For partial verification Secondaries, this MAY include fewer metadata files; it includes only the Targets metadata file from the Director repository at a minimum.</t>

<t>The Primary SHOULD determine the minimal set of metadata files to send to each Secondary by performing delegation resolution as described in <xref target="full_verification"/>.</t>

<t>Each Secondary SHALL store the latest copy of all metadata required for its own verification.</t>

</section>
<section anchor="send_images_primary" title="Send images to Secondaries">

<t>The Primary SHALL send the latest image to each of its associated Secondaries that have storage to receive it.</t>

<t>For Secondaries without storage, the Primary SHOULD wait for a request from the Secondary to stream the new image file to it. The Secondary will send the request once it has verified the metadata sent in the previous step.</t>

</section>
</section>
<section anchor="installing-images-on-primary-or-secondary-ecus" title="Installing images on Primary or Secondary ECUs">

<t>An ECU SHALL perform the following steps when attempting to install a new image:</t>

<t><list style="numbers">
  <t>Verify latest attested time (<xref target="verify_time"/>)</t>
  <t>Verify metadata (<xref target="verify_metadata"/>)</t>
  <t>Download latest image (<xref target="download_image"/>)</t>
  <t>Verify image (<xref target="verify_image"/>)</t>
  <t>Install image (<xref target="install_image"/>)</t>
  <t>Create and send version report (<xref target="create_version_report"/>)</t>
</list></t>

<section anchor="verify_time" title="Load and verify the latest attested time">

<t>The ECU SHALL load and verify the current time, or the most recent securely attested time.</t>

</section>
<section anchor="verify_metadata" title="Verify metadata">

<t>The ECU SHALL verify the latest downloaded metadata (<xref target="metadata_verification"/>) using either full or partial verification. If the metadata verification fails for any reason, the ECU SHALL jump to the final step (<xref target="create_version_report"/>).</t>

</section>
<section anchor="download_image" title="Download latest image">

<t>If the ECU does not have secondary storage, i.e. buffer storage to temporarily store the latest image before installing it, it SHALL download the latest image from the Primary. (If the ECU has secondary storage, it will already have the latest image in its secondary storage as specified in <xref target="send_images_primary"/>, and should skip to the next step.) The ECU MAY first create a backup of its previous working image and store it elsewhere (e.g., the Primary).</t>

<t>The filename used to identify the latest known image (i.e., the file to request from the Primary) SHALL be determined as follows:</t>

<t><list style="numbers">
  <t>Load the Targets metadata file from the Director repository.</t>
  <t>Find the Targets metadata associated with this ECU identifier.</t>
  <t>Construct the Image filename using the rule in <xref target="metadata_filename_rules"/>, or use the download URL specified in the Director metadata.</t>
  <t>If there is no Targets metadata about this image, abort the update cycle and report that there is no such image. Additionally, in the case of failure, the ECU SHALL retain its previous Targets metadata instead of using the new Targets metadata. Otherwise, download the image (up to the number of bytes specified in the Targets metadata) and verify it according to <xref target="verify_image"/>.</t>
</list></t>

<t>When the Primary responds to the download request, the ECU SHALL overwrite its current image with the downloaded image from the Primary.</t>

<t>If any part of this step fails, the ECU SHALL jump to the final step (<xref target="create_version_report"/>).</t>

</section>
<section anchor="verify_image" title="Verify image">

<t>The ECU SHALL verify that the latest image matches the latest metadata as follows:</t>

<t><list style="numbers">
  <t>Load the latest Targets metadata file from the Director.</t>
  <t>Find the Targets metadata associated with this ECU identifier.</t>
  <t>Check that the hardware identifier in the metadata matches the ECUs hardware identifier.</t>
  <t>Check that the image filename is valid for this ECU. This MAY be a comparison against a wildcard path, which restricts the ECUs to which a delegation will apply.</t>
  <t>Check that the release counter of the image in the previous metadata, if it exists, is less than or equal to the release counter in the latest metadata.</t>
  <t>If the image is encrypted, decrypt the image with a decryption key to be chosen as follows:
  <list style="symbols">
      <t>If the ECU key is a symmetric key, the ECU SHALL use the ECU key for image decryption.</t>
      <t>If the ECU key is asymmetric, the ECU SHALL check the Targets metadata for an encrypted symmetric key. If such a key is found, the ECU SHALL decrypt the symmetric key using its ECU key, and use the decrypted symmetric key for image decryption.</t>
      <t>If the ECU key is asymmetric and there is no symmetric key in the target metadata, the ECU SHALL use its ECU key for image decryption.</t>
    </list></t>
  <t>Check that all hashes listed in the metadata match the corresponding hashes of the image.</t>
</list></t>

<t>If the ECU has secondary storage, the checks SHOULD be performed on the image in secondary storage before it is installed.</t>

<t>When checking hashes, the ECU SHOULD additionally check that the length of the image matches the length listed in the metadata.</t>

<t>NOTE: Verifying image size along with hash will become a requirement in a future version of the Uptane standard.</t>

<t>NOTE: See <xref target="DEPLOY"/> for guidance on how to deal with Secondary ECU failures for ECUs that do not have secondary storage.</t>

<t>If any step fails, the ECU SHALL jump to the (<xref target="create_version_report"/>) step.</t>

</section>
<section anchor="install_image" title="Install image">

<t>The ECU SHALL attempt to install the update. This installation SHOULD occur at a time when all pre-conditions are met. These pre-conditions MAY include ensuring the vehicle is in a safe environment for install (e.g., the vehicle is parked when updating a specific ECU). Another pre-condition MAY include ensuring the ECU has a backup of its current image and metadata in case the current installation fails.</t>

</section>
<section anchor="create_version_report" title="Create and send version report">

<t>The ECU SHALL create a version report as described in <xref target="version_report"/>, and send it to the Primary (or simply save it to disk, if the ECU is a Primary). The Primary SHOULD write the version reports it receives to disk and associate them with the Secondaries that sent them.</t>

</section>
</section>
<section anchor="metadata_verification" title="Metadata verification procedures">

<t>A Primary ECU MUST perform full verification of metadata. A Secondary ECU SHOULD perform full verification of metadata. If a Secondary cannot perform full verification, it SHALL, at the very least, perform partial verification.</t>

<t>If a step in the following workflows does not succeed (e.g., the update is aborted because a new metadata file was not signed), an ECU SHOULD still be able to update again in the future. Errors raised during the update process SHOULD NOT leave ECUs in an unrecoverable state.</t>

<section anchor="partial_verification" title="Partial verification">

<t>In order to perform partial verification, an ECU SHALL perform the following steps:</t>

<t><list style="numbers">
  <t>Load and verify the current time or the most recent securely attested time.</t>
  <t>Download and check the Targets metadata file from the Director repository, following the procedure in <xref target="check_targets"/>.</t>
</list></t>

<t>Note that this verification procedure is the smallest set of Uptane checks permissible for an Uptane Secondary ECU. An ECU MAY additionally implement more metadata checks.</t>

<t>For example, an ECU MAY also fetch and verify Root metadata from the Director (following the procedure in <xref target="check_root"/>) before checking Targets metadata. Performing this additional check would provide the ECU with a secure way to receive and validate a rotation of the Director’s Targets key.</t>

<t>See <xref target="DEPLOY"/> for more discussion on this topic.</t>

</section>
<section anchor="full_verification" title="Full verification">

<t>Full verification of metadata means that the ECU checks that the Targets metadata about images from the Director repository matches the Targets metadata about the same images from the Image repository. This provides resilience to a key compromise in the system.</t>

<t>Full verification MUST be performed by Primary ECUS and MAY be performed by Secondary ECUs. In the following instructions, whenever an ECU is directed to download metadata, it applies only to Primary ECUs.</t>

<t>If <xref target="TAP-5"/> is supported and a Primary has an external connection to the Uptane repositories, a Primary ECU SHALL download metadata and images following the rules specified in that TAP.  If <xref target="TAP-5"/> is not supported, or if the Primary does not have an external connection to the Uptane repositories, the download SHOULD follow the <xref target="TUF-spec"/> and the metadata file renaming rules specified in <xref target="metadata_filename_rules"/>.</t>

<t>Before starting full verification, the repository mapping metadata MUST be consulted to determine where to download metadata from. This procedure assumes the basic Uptane case: there are only two repositories (Director and Image), and all image paths are required to be signed by both repositories. If a more complex repository layout is being used, refer to <xref target="DEPLOY"/> for guidance on how to determine where metadata should be downloaded from.</t>

<t>In order to perform full verification, an ECU SHALL perform the following steps:</t>

<t><list style="numbers">
  <t>Load and verify the current time or the most recent securely attested time.</t>
  <t>Download and check the Root metadata file from the Director repository, following the procedure in <xref target="check_root"/>.</t>
  <t>Download and check the Timestamp metadata file from the Director repository, following the procedure in <xref target="check_timestamp"/>.</t>
  <t>Check the previously downloaded Snapshot metadata file from the Directory repository (if available). If the hashes and version number of that file match the hashes and version number listed in the new Timestamp metadata, there are no new updates and the verification process MAY be stopped and considered complete. Otherwise, download and check the Snapshot metadata file from the Director repository, following the procedure in <xref target="check_snapshot"/>.</t>
  <t>Download and check the Targets metadata file from the Director repository, following the procedure in <xref target="check_targets"/>.</t>
  <t>If the Targets metadata from the Directory repository indicates that there are no new targets that are not already currently installed, the verification process MAY be stopped and considered complete. Otherwise, download and check the Root metadata file from the Image repository, following the procedure in <xref target="check_root"/>.</t>
  <t>Download and check the Timestamp metadata file from the Image repository, following the procedure in <xref target="check_timestamp"/>.</t>
  <t>Check the previously downloaded Snapshot metadata file from the Image repository (if available). If the hashes and version number of that file match the hashes and version number listed in the new Timestamp metadata, the ECU MAY skip to the last step. Otherwise, download and check the Snapshot metadata file from the Image repository, following the procedure in <xref target="check_snapshot"/>.</t>
  <t>Download and check the top-level Targets metadata file from the Image repository, following the procedure in <xref target="check_targets"/>.</t>
  <t>Verify that Targets metadata from the Director and Image repositories match. A Primary ECU MUST perform this check on metadata for all images listed in the Targets metadata file from the Director repository downloaded in step 6. A Secondary ECU MAY elect to perform this check only on the metadata for the image it will install. (That is, the target metadata from the Director that contains the ECU identifier of the current ECU.) To check that the metadata for an image matches, complete the following procedure:
  <list style="numbers">
      <t>Locate and download a Targets metadata file from the Image repository that contains an image with exactly the same file name listed in the Director metadata, following the procedure in <xref target="resolve_delegations"/>.</t>
      <t>Check that the Targets metadata from the Image repository matches the Targets metadata from the Director repository:
      <list style="numbers">
          <t>Check that the non-custom metadata (i.e., length and hashes) of the unencrypted or encrypted image are the same in both sets of metadata. Note: the Primary is responsible for validating encrypted images and associated metadata. The target ECU (Primary or Secondary) is responsible for validating the unencrypted image and associated metadata.</t>
          <t>Check that all “MUST match” custom metadata (e.g., hardware identifier and release counter) are the same in both sets of metadata.</t>
          <t>Check that the release counter in the previous Targets metadata file is less than or equal to the release counter in this Targets metadata file.</t>
        </list></t>
    </list></t>
</list></t>

<t>If any step fails, the ECU MUST return an error code indicating the failure. If a check for a specific type of security attack fails (e.g. rollback, freeze, arbitrary software, etc.), the ECU SHOULD return an error code that indicates the type of attack.</t>

</section>
<section anchor="check_root" title="How to check Root metadata">

<t>To properly check Root metadata, an ECU SHOULD:</t>

<t><list style="numbers">
  <t>Load the previous Root metadata file.</t>
  <t>Update to the latest Root metadata file.
  <list style="numbers">
      <t>Let N denote the version number of the latest Root metadata file (which at first could be the same as the previous Root metadata file).</t>
      <t>Try downloading a new version N+1 of the Root metadata file, up to some X number of bytes. The value for X is set by the implementor. For example, X may be tens of kilobytes. The filename used to download the Root metadata file is of the fixed form VERSION_NUMBER.FILENAME.EXT (e.g., 42.root.json). If this file is not available, the current Root metadata file is the latest; continue with step 3.</t>
      <t>Version N+1 of the Root metadata file MUST have been signed by the following: (1) a threshold of keys specified in the latest Root metadata file (version N), and (2) a threshold of keys specified in the new Root metadata file being validated (version N+1). If version N+1 is not signed as required, discard it, abort the update cycle, and report the signature failure. On the next update cycle, begin at version N of the Root metadata file. (Checks for an arbitrary software attack.)</t>
      <t>The version number of the latest Root metadata file (version N) must be less than or equal to the version number of the new Root metadata file (version N+1). Effectively, this means checking that the version number signed in the new Root metadata file is indeed N+1. If the version of the new Root metadata file is less than the latest metadata file, discard it, abort the update cycle, and report the rollback attack. On the next update cycle, begin at step 1 and version N of the Root metadata file. (Checks for a rollback attack.)</t>
      <t>Set the latest Root metadata file to the new Root metadata file.</t>
      <t>Repeat steps 2.1 to 2.6.</t>
    </list></t>
  <t>Check that the current (or latest securely attested) time is lower than the expiration timestamp in the latest Root metadata file. (Checks for a freeze attack.)</t>
  <t>If the Timestamp and/or Snapshot keys have been rotated, delete the previous Timestamp and Snapshot metadata files. (Checks for recovery from fast-forward attacks <xref target="MERCURY"/>.)</t>
</list></t>

</section>
<section anchor="check_timestamp" title="How to check Timestamp metadata">

<t>To properly check Timestamp metadata, an ECU SHOULD:</t>

<t><list style="numbers">
  <t>Download up to Y number of bytes. The value for Y is set by the implementor. For example, Y may be tens of kilobytes. The filename used to download the Timestamp metadata file is of the fixed form FILENAME.EXT (e.g., timestamp.json).</t>
  <t>Check that it has been signed by the threshold of keys specified in the latest Root metadata file. If the new Timestamp metadata file is not properly signed, discard it, abort the update cycle, and report the signature failure. (Checks for an arbitrary software attack.)</t>
  <t>Check that the version number of the previous Timestamp metadata file, if any, is less than or equal to the version number of this Timestamp metadata file. If the new Timestamp metadata file is older than the trusted Timestamp metadata file, discard it, abort the update cycle, and report the potential rollback attack. (Checks for a rollback attack.)</t>
  <t>Check that the current (or latest securely attested) time is lower than the expiration timestamp in this Timestamp metadata file. If the new Timestamp metadata file has expired, discard it, abort the update cycle, and report the potential freeze attack. (Checks for a freeze attack.)</t>
</list></t>

</section>
<section anchor="check_snapshot" title="How to check Snapshot metadata">

<t>To properly check Snapshot metadata, an ECU SHOULD:</t>

<t><list style="numbers">
  <t>Download up to the number of bytes specified in the Timestamp metadata file, constructing the metadata filename as defined in <xref target="metadata_filename_rules"/>.</t>
  <t>The hashes and version number of the new Snapshot metadata file MUST match the hashes and version number listed in Timestamp metadata. If the hashes and version number do not match, discard the new Snapshot metadata, abort the update cycle, and report the failure. (Checks for a mix-and-match attack.)</t>
  <t>Check that it has been signed by the threshold of keys specified in the latest Root metadata file. If the new Snapshot metadata file is not signed as required, discard it, abort the update cycle, and report the signature failure. (Checks for an arbitrary software attack.)</t>
  <t>Check that the version number of the previous Snapshot metadata file, if any, is less than or equal to the version number of this Snapshot metadata file. If this Snapshot metadata file is older than the previous Snapshot metadata file, discard it, abort the update cycle, and report the potential rollback attack. (Checks for a rollback attack.)</t>
  <t>Check that the version number listed by the previous Snapshot metadata file for each Targets metadata file is less than or equal to its version number in this Snapshot metadata file. If this condition is not met, discard the new Snapshot metadata file, abort the update cycle, and report the failure. (Checks for a rollback attack.)</t>
  <t>Check that each Targets metadata filename listed in the previous Snapshot metadata file is also listed in this Snapshot metadata file. If this condition is not met, discard the new Snapshot metadata file, abort the update cycle, and report the failure. (Checks for a rollback attack.)</t>
  <t>Check that the current (or latest securely attested) time is lower than the expiration timestamp in this Snapshot metadata file. If the new Snapshot metadata file is expired, discard it, abort the update cycle, and report the potential freeze attack. (Checks for a freeze attack.)</t>
</list></t>

</section>
<section anchor="check_targets" title="How to check Targets metadata">

<t>To properly check Targets metadata, an ECU SHOULD:</t>

<t><list style="numbers">
  <t>Download up to Z number of bytes, constructing the metadata filename as defined in <xref target="metadata_filename_rules"/>. The value for Z is set by the implementor. For example, Z may be tens of kilobytes.</t>
  <t>The version number of the new Targets metadata file MUST match the version number listed in the latest Snapshot metadata. If the version number does not match, discard it, abort the update cycle, and report the failure. (Checks for a mix-and-match attack.) This step MAY be skipped when checking Targets metadata on a partial verification ECU; partial verification ECUs might not have Snapshot metadata.</t>
  <t>Check that the Targets metadata has been signed by the threshold of keys specified in the relevant metadata file (Checks for an arbitrary software attack):
  <list style="numbers">
      <t>If checking top-level Targets metadata, the threshold of keys is specified in the Root metadata.</t>
      <t>If checking delegated Targets metadata, the threshold of keys is specified in the Targets metadata file that delegated authority to this role.</t>
    </list></t>
  <t>Check that the version number of the previous Targets metadata file, if any, is less than or equal to the version number of this Targets metadata file. (Checks for a rollback attack.)</t>
  <t>Check that the current (or latest securely attested) time is lower than the expiration timestamp in this Targets metadata file. (Checks for a freeze attack.)</t>
  <t>If checking Targets metadata from the Director repository, verify that there are no delegations.</t>
  <t>If checking Targets metadata from the Director repository, check that no ECU identifier is represented more than once.</t>
  <t>If checking Targets metadata from the Director repository, and the ECU performing the verification is the Primary ECU, check that all listed ECU identifiers correspond to ECUs that are actually present in the vehicle.</t>
</list></t>

</section>
<section anchor="resolve_delegations" title="How to resolve delegations">

<t>To properly check Targets metadata for an image, an ECU MUST locate the metadata file(s) for the role (or roles) that have the authority to sign the image. This metadata might be located in the top-level Targets metadata, but it also may be delegated to another role or to multiple roles. Therefore, all delegations MUST be resolved using the following recursive procedure, beginning with the top-level Targets metadata file.</t>

<t><list style="numbers">
  <t>Download the current metadata file, and check it following the procedure in <xref target="check_targets"/>. If the file cannot be loaded, or if any verification step fails, abort the delegation resolution, and indicate that Image metadata cannot be found because of a missing or invalid role.</t>
  <t>If the current metadata file contains signed metadata about the image, end the delegation resolution and return the metadata to be checked.</t>
  <t>If the current metadata file was reached via a terminating delegation and does not contain signed metadata about the image, abort the delegation resolution for this image and return an error indicating that image metadata could not be found.</t>
  <t>Search the list of delegations, in listed order. For each delegation:
  <list style="numbers">
      <t>Check if the delegation applies to the image being processed. For the delegation to apply, it MUST include the hardware identifier of the target, and the target name must match one of the delegation’s image paths. If either of these tests fail, move on to the next delegation in the list.</t>
      <t>If the delegation is a multi-role delegation, follow the procedure described in <xref target="multirole_delegations"/>. If the multi-role delegation is terminating and no valid Image metadata is found, abort the delegation resolution and return an error indicating that image metadata could not be found.</t>
      <t>If the delegation is a normal delegation, perform delegation resolution, starting at step 1. Note that this may recurse an arbitrary number of levels deep. If a delegation that applies to the image is found but no image metadata is found in the delegated roles or any of its sub-delegations, simply continue on with the next delegation in the list. The search is only completed/aborted if image metadata or a terminating delegation that applies to the image is found.</t>
    </list></t>
  <t>If the end of the list of delegations in the top-level metadata is reached without finding valid image metadata, return an error indicating that image metadata could not be found.</t>
</list></t>

</section>
<section anchor="multirole_delegations" title="Multi-role delegations">

<t>It is possible to delegate signing authority to multiple delegated roles as described in <xref target="TAP-3"/>. Each multi-role delegation effectively contains a list of ordinary delegations, plus a threshold of those roles that must be in agreement about the non-custom metadata for the image. All multi-role delegations MUST be resolved using the following procedure. Note that there may be sub-delegations inside multi-role delegations.</t>

<t><list style="numbers">
  <t>For each of the roles in the delegation, find and load the image metadata (or error) following the procedure in <xref target="resolve_delegations"/>.</t>
  <t>Inspect the non-custom part of the metadata loaded in step 1:
  <list style="numbers">
      <t>Locate all sets of roles which have agreeing (i.e. identical) non-custom metadata and “MUST match” custom metadata. Discard any set of roles with a size smaller than the threshold of roles that must be in agreement for this delegation.</t>
      <t>Check for a conflict. A conflict exists if there remains more than one agreeing set of roles, each set having different metadata. If a conflict is found, choose and return the metadata from the set of roles which includes the earliest role in the multi-delegation list.</t>
      <t>If there is no conflict, check if there is any single set of roles with matching non-custom metadata. If there is, choose and return the metadata from this set.</t>
      <t>If no agreeing set can be found that meets the agreement threshold, return an error indicating that image metadata could not be found.</t>
    </list></t>
</list></t>

</section>
</section>
</section>
</section>


  </middle>

  <back>

    <references title='Normative References'>





<reference  anchor="RFC2119" target='https://www.rfc-editor.org/info/rfc2119'>
<front>
<title>Key words for use in RFCs to Indicate Requirement Levels</title>
<author initials='S.' surname='Bradner' fullname='S. Bradner'><organization /></author>
<date year='1997' month='March' />
<abstract><t>In many standards track documents several words are used to signify the requirements in the specification.  These words are often capitalized. This document defines these words as they should be interpreted in IETF documents.  This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t></abstract>
</front>
<seriesInfo name='BCP' value='14'/>
<seriesInfo name='RFC' value='2119'/>
<seriesInfo name='DOI' value='10.17487/RFC2119'/>
</reference>



<reference  anchor="RFC3647" target='https://www.rfc-editor.org/info/rfc3647'>
<front>
<title>Internet X.509 Public Key Infrastructure Certificate Policy and Certification Practices Framework</title>
<author initials='S.' surname='Chokhani' fullname='S. Chokhani'><organization /></author>
<author initials='W.' surname='Ford' fullname='W. Ford'><organization /></author>
<author initials='R.' surname='Sabett' fullname='R. Sabett'><organization /></author>
<author initials='C.' surname='Merrill' fullname='C. Merrill'><organization /></author>
<author initials='S.' surname='Wu' fullname='S. Wu'><organization /></author>
<date year='2003' month='November' />
<abstract><t>This document presents a framework to assist the writers of certificate policies or certification practice statements for participants within public key infrastructures, such as certification authorities, policy authorities, and communities of interest that wish to rely on certificates.  In particular, the framework provides a comprehensive list of topics that potentially (at the writer's discretion) need to be covered in a certificate policy or a certification practice statement.  This document supersedes RFC 2527.</t></abstract>
</front>
<seriesInfo name='RFC' value='3647'/>
<seriesInfo name='DOI' value='10.17487/RFC3647'/>
</reference>



<reference  anchor="RFC5198" target='https://www.rfc-editor.org/info/rfc5198'>
<front>
<title>Unicode Format for Network Interchange</title>
<author initials='J.' surname='Klensin' fullname='J. Klensin'><organization /></author>
<author initials='M.' surname='Padlipsky' fullname='M. Padlipsky'><organization /></author>
<date year='2008' month='March' />
<abstract><t>The Internet today is in need of a standardized form for the transmission of internationalized &quot;text&quot; information, paralleling the specifications for the use of ASCII that date from the early days of the ARPANET.  This document specifies that format, using UTF-8 with normalization and specific line-ending sequences.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='5198'/>
<seriesInfo name='DOI' value='10.17487/RFC5198'/>
</reference>


<reference anchor="NFC" target="http://www.unicode.org/reports/tr15/">
  <front>
    <title>Unicode Standard Annex #15: Unicode Normalization Forms</title>
    <author initials="M." surname="Davis">
      <organization></organization>
    </author>
    <author initials="M." surname="Duerst">
      <organization></organization>
    </author>
    <date year="2018" month="October"/>
  </front>
</reference>
<reference anchor="TAP-3" target="https://github.com/theupdateframework/taps/blob/d0818e580c322815a473520f2e8cc5f5eb8df499/tap3.md">
  <front>
    <title>The Update Framework TAP 3 - Multi-role delegations</title>
    <author initials="T.K." surname="Kuppusamy">
      <organization></organization>
    </author>
    <author initials="S." surname="Awwad">
      <organization></organization>
    </author>
    <author initials="E." surname="Cordell">
      <organization></organization>
    </author>
    <author initials="V." surname="Diaz">
      <organization></organization>
    </author>
    <author initials="J." surname="Moshenko">
      <organization></organization>
    </author>
    <author initials="J." surname="Cappos">
      <organization></organization>
    </author>
    <date year="2018" month="January" day="18"/>
  </front>
</reference>
<reference anchor="TAP-4" target="https://github.com/theupdateframework/taps/blob/2cb67d913ec19424d1e354b38f862886fbfd4105/tap4.md">
  <front>
    <title>The Update Framework TAP 4 - Multiple repository consensus on entrusted targets</title>
    <author initials="T.K." surname="Kuppusamy">
      <organization></organization>
    </author>
    <author initials="S." surname="Awwad">
      <organization></organization>
    </author>
    <author initials="E." surname="Cordell">
      <organization></organization>
    </author>
    <author initials="V." surname="Diaz">
      <organization></organization>
    </author>
    <author initials="J." surname="Moshenko">
      <organization></organization>
    </author>
    <author initials="J." surname="Cappos">
      <organization></organization>
    </author>
    <date year="2017" month="December" day="15"/>
  </front>
</reference>
<reference anchor="TAP-5" target="https://github.com/theupdateframework/taps/blob/01726d203c9b9c029d26f6612069ce3180500d9a/tap5.md#downloading-metadata-and-target-files">
  <front>
    <title>The Update Framework TAP 5 - Setting URLs for roles in the root metadata file</title>
    <author initials="T.K." surname="Kuppusamy">
      <organization></organization>
    </author>
    <author initials="S." surname="Awwad">
      <organization></organization>
    </author>
    <author initials="E." surname="Cordell">
      <organization></organization>
    </author>
    <author initials="V." surname="Diaz">
      <organization></organization>
    </author>
    <author initials="J." surname="Moshenko">
      <organization></organization>
    </author>
    <author initials="J." surname="Cappos">
      <organization></organization>
    </author>
    <date year="2018" month="January" day="22"/>
  </front>
</reference>
<reference anchor="TUF-spec" target="https://github.com/theupdateframework/specification/blob/2b4e18472fe25d5b57f36f6fa50104967c8faeaa/tuf-spec.md">
  <front>
    <title>The Update Framework Specification</title>
    <author initials="J." surname="Samuel">
      <organization></organization>
    </author>
    <author initials="N." surname="Mathewson">
      <organization></organization>
    </author>
    <author initials="G." surname="Condra">
      <organization></organization>
    </author>
    <author initials="V." surname="Diaz">
      <organization></organization>
    </author>
    <author initials="T.K." surname="Kuppusamy">
      <organization></organization>
    </author>
    <author initials="S." surname="Awwad">
      <organization></organization>
    </author>
    <author initials="S." surname="Tobias">
      <organization></organization>
    </author>
    <author initials="J." surname="Wright">
      <organization></organization>
    </author>
    <author initials="H." surname="Mehnert">
      <organization></organization>
    </author>
    <author initials="E." surname="Tryzelaar">
      <organization></organization>
    </author>
    <author initials="J." surname="Cappos">
      <organization></organization>
    </author>
    <author initials="R." surname="Dingledine">
      <organization></organization>
    </author>
    <date year="2018" month="September" day="19"/>
  </front>
</reference>


    </references>

    <references title='Informative References'>

<reference anchor="MERCURY" target="https://www.usenix.org/system/files/conference/atc17/atc17-kuppusamy.pdf">
  <front>
    <title>Mercury: Bandwidth-Effective Prevention of Rollback Attacks Against Community Repositories</title>
    <author initials="T.K." surname="Kuppusamy">
      <organization></organization>
    </author>
    <author initials="V." surname="Diaz">
      <organization></organization>
    </author>
    <author initials="J." surname="Cappos">
      <organization></organization>
    </author>
    <date year="2017" month="July" day="12"/>
  </front>
  <seriesInfo name="ISBN" value="978-1-931971-38-6"/>
</reference>
<reference anchor="UPTANEESCAR" target="https://ssl.engineering.nyu.edu/papers/kuppusamy_escar_16.pdf">
  <front>
    <title>Securing Software Updates for Automobiles</title>
    <author initials="T.K." surname="Kuppusamy">
      <organization></organization>
    </author>
    <author initials="A." surname="Brown">
      <organization></organization>
    </author>
    <author initials="S." surname="Awwad">
      <organization></organization>
    </author>
    <author initials="D." surname="McCoy">
      <organization></organization>
    </author>
    <author initials="R." surname="Bielawski">
      <organization></organization>
    </author>
    <author initials="C." surname="Mott">
      <organization></organization>
    </author>
    <author initials="S." surname="Lauzon">
      <organization></organization>
    </author>
    <author initials="A." surname="Weimerskirch">
      <organization></organization>
    </author>
    <author initials="J." surname="Cappos">
      <organization></organization>
    </author>
    <date year="2016" month="October" day="16"/>
  </front>
</reference>
<reference anchor="PEP-458" target="https://www.python.org/dev/peps/pep-0458/">
  <front>
    <title>PEP 458 -- Surviving a Compromise of PyPI</title>
    <author initials="T.K." surname="Kuppusamy">
      <organization></organization>
    </author>
    <author initials="V." surname="Diaz">
      <organization></organization>
    </author>
    <author initials="D." surname="Stufft">
      <organization></organization>
    </author>
    <author initials="J." surname="Cappos">
      <organization></organization>
    </author>
    <date year="2013" month="September" day="27"/>
  </front>
</reference>
<reference anchor="DEPLOY" target="https://uptane.github.io/deployment-considerations/index.html">
  <front>
    <title>Uptane Deployment Considerations</title>
    <author initials="." surname="Members of the Uptane Alliance Community">
      <organization></organization>
    </author>
    <date year="n.d."/>
  </front>
</reference>
<reference anchor="USATODAY" target="https://www.usatoday.com/story/tech/columnist/2016/06/28/your-average-car-lot-more-code-driven-than-you-think/86437052/">
  <front>
    <title>Your average car is a lot more code-driven than you think</title>
    <author initials="B." surname="O'Donnell">
      <organization></organization>
    </author>
    <date year="2016" month="June" day="28"/>
  </front>
</reference>
<reference anchor="CR-OTA" target="https://www.consumerreports.org/automotive-technology/automakers-embrace-over-the-air-updates-can-we-trust-digital-car-repair/">
  <front>
    <title>Automakers Embrace Over-the-Air Updates, but Can We Trust Digital Car Repair?</title>
    <author initials="K." surname="Barry">
      <organization></organization>
    </author>
    <date year="2018" month="April" day="20"/>
  </front>
</reference>
<reference anchor="IN-TOTO" target="https://in-toto.github.io/">
  <front>
    <title>in-toto: A framework to secure the integrity of software supply chains</title>
    <author >
      <organization></organization>
    </author>
    <date year="2018" month="October" day="29"/>
  </front>
</reference>


    </references>



  </back>

<!-- ##markdown-source:
H4sIALdrX18AA+1923LbSJbgu74CYT+UpCVpS7ZctuthV2XLU5rxbS25qms2
NtwgAUoYkwAbACWzHI7YD9n9ufmSPdfMkwmAku3qnp2I7YdqiwDycvLkuV/G
4/FOW7SL/GnyftWmZZ6cwX+ztM6SeVUnz/OmuCgT+CU5Xa4W+TIv27QtqnIn
nU7r/Aq+ent+/PpkJ6tmZbqEUdY0yriRUcYZjbAzS9v8oqo3T5OinFc7O8Wq
fpqU1fO8Lq5gwKu8Oa/XTXt4//6T+4c7aZ2nT5PzN8/f7FxX9ceLulqv5O+P
+QZ+yp4mp2Wb12Xejp/X6bzd2aEZP6SLqoRVbPJmZ1U8Tf5HW81GSVPVbZ3P
G/jXZon/+J87O+m6vazqpztJMoYlNU+TV/lymtdNUs2T9jJXaBwvFkVazvLk
WbVcrsui3cAXScJ73f5OVV+kZfEHgav77u7sXpW8rav5JPln2HhRJs/S1apq
9ujbfJkWiw4wm/92UVUXi5zg0Uxm1ZJebmBzefs0eQR7aOvqPJ9d0u+zal22
CPL3Z8f0Q51f0Fpe/87PYaVPk5/rqvq42JTySQb7Ojg4vH+ws1NW9ZLOBqF0
N/kXhnyS5fNk99X7s/NRcvbL8cuXo+TV8e+jJG9nE1z8uxfPDg8OnvA3f5kc
3X+SvP2X06RZ5TN++uDRwx/56eu8xeNN3pcFTkwYB5tapXVRXuC24P8a/ujo
4Mlj/khffo2rWwh8kxfwV/IMXnj94tlT2kqb1hcIlcu2XT29d+/6+nqy5k8n
cDL36nwFWNHca+uDo3v8AV+DOzqBuwjHZZl/Su4eHD3dMnlzhwbxaIX/U9Sa
JM/Tq6Lp/roGjGvp5wwuyNME4P54fHCfNnp+/DZ5kKQtHNtVkt1/fPA4P4IH
8PP4QXeLDezxomgv11PEi3uAwusVjjmvAVURyvfadNXcmy6q6T0Z7PH92YPD
w8cHR+nDHx8cHd6fH+aPZ7Oj+VE+fZzNHz55gp88mCwzC55zuhs4cvJCh5al
jpNX60VbjOtqkQOWAJ4SeJphwJxP/mWS/Mt6tVo36XITPjubJMfX12kW/noy
gVtWw+CL8PdfAZhF+kf44z9PkldVc5mXH6vOA75tMejvH4wPHjvoP1ToH86m
j37Mngj0H34f9GWwgwf57ODJw8OH2UH+4Ojh9MHj+eNHh48fP5pP59nDg/tH
+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

-->

</rfc>


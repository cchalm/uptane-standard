<?xml version="1.0" encoding="UTF-8"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc2629 version 1.2.9 -->

<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
]>

<?rfc toc="yes"?>
<?rfc sortrefs="yes"?>
<?rfc symrefs="yes"?>

<rfc ipr="noDerivativesTrust200902" docName="uptane-standard-design" category="info">

  <front>
    <title abbrev="UPTANE">Uptane Standard for Design and Implementation</title>

    <author initials="." surname="Members of the Uptane Community" fullname="Uptane Community">
      <organization>Joint Development Foundation Projects, LLC, Uptane Series (c/o Prof. Justin Cappos)</organization>
      <address>
        <postal>
          <street>6 MetroTech</street>
          <city>Brooklyn</city>
          <region>NY</region>
          <code>11201</code>
          <country>USA</country>
        </postal>
        <email>uptane-standards@googlegroups.com</email>
      </address>
    </author>

    <date year="2021" month="March" day="30"/>

    <area>TODO</area>
    <workgroup>TODO</workgroup>
    <keyword>Internet-Draft</keyword>

    <abstract>


<t>This document describes a framework for securing ground vehicle software update systems.</t>



    </abstract>


  </front>

  <middle>


<section anchor="introduction" title="Introduction">

<t>Uptane is a secure software update framework for ground vehicles. This document describes procedures to enable programmers for OEMs and suppliers to securely design and implement this framework in a manner that better protects connected units on ground vehicles. Integrating Uptane as outlined in the sections that follow can reduce the ability of attackers to compromise critical systems. It also assures a faster and easier recovery process should a compromise occur.</t>

<t>These instructions specify the components necessary for a compliant implementation. Individual implementers can make their own technological choices within those requirements. This flexibility makes Uptane adaptable to the many customized update solutions used by manufacturers. If implementers wish to have compatible formats, they may use POUFs. POUFs contain a description of implementation choices as well as data binding formats. An implementer who adopts a POUF, as well as the Uptane Standard, will be able to interoperate with other implementations using that POUF.</t>

</section>
<section anchor="terminology" title="Terminology">

<section anchor="conformance-terminology" title="Conformance terminology">

<t>The keywords MUST, MUST NOT, REQUIRED, SHALL, SHALL NOT, SHOULD, SHOULD NOT, RECOMMENDED, MAY, and OPTIONAL in this document are to be interpreted as described in <xref target="RFC2119"/>.</t>

<t>In order to be considered Uptane-compliant, an implementation MUST follow all of these rules as specified in the document.</t>

</section>
<section anchor="terminology-1" title="Terminology">

<t>For definitions of terms used in this Standard, please refer to the <eref target="https://uptane.github.io/deployment-considerations/glossary.html">glossary</eref> in the Deployment Best Practices.</t>

</section>
<section anchor="uptane-role-terminology" title="Uptane role terminology">

<t>These terms are defined in greater detail in <xref target="roles"/>.</t>

<t><spanx style="emph">Delegation</spanx>: A process by which the responsibility of signing metadata about images is assigned to another party.
<spanx style="emph">Role</spanx>: A party (human or machine) responsible for signing a certain type of metadata. The role controls keys and is responsible for signing metadata entrusted to it with these keys. The roles mechanism of Uptane allows the system to distribute signing responsibilities so that the compromise of one key does not necessarily impact the security of the entire system.</t>

<t><list style="symbols">
  <t><spanx style="emph">Root role</spanx>: Signs metadata that distributes and revokes public keys used to verify the Root, Timestamp, Snapshot, and Targets role metadata.</t>
  <t><spanx style="emph">Snapshot role</spanx>: Signs metadata that indicates which images the repository has released at the same time.</t>
  <t><spanx style="emph">Targets role</spanx>: Signs metadata used to verify the image, such as cryptographic hashes and file size.</t>
  <t><spanx style="emph">Timestamp role</spanx>: Signs metadata that indicates if there are any new metadata or images on the repository.</t>
</list></t>

</section>
<section anchor="acronyms-and-abbreviations" title="Acronyms and abbreviations">

<t><spanx style="emph">CDN</spanx>: Content Delivery Network</t>

<t><spanx style="emph">ECUs</spanx>: Electronic Control Units, the computing units on a vehicle</t>

<t><spanx style="emph">LIN Bus</spanx>: Local Interconnect Bus</t>

<t><spanx style="emph">OBD</spanx>: On-board diagnostics</t>

<t><spanx style="emph">SOTA</spanx>: Software Updates Over-the-Air</t>

<t><spanx style="emph">UDS</spanx>: Unified Diagnostic Services</t>

<t><spanx style="emph">VIN</spanx>: Vehicle Identification Number</t>

</section>
</section>
<section anchor="rationale-for-and-scope-of-the-uptane-standard" title="Rationale for and scope of the Uptane Standard">

<t>This Standard document provides the essential components for the secure design, implementation, and deployment of Uptane by OEMs and suppliers. These guidelines contribute to compromise resilience, or the ability to minimize the extent of the threat posed by any given attack.</t>

<t>However, this specification is intended as an implementation guide, and not as a detailed technical argument about the security properties that Uptane provides.  Readers interested in such documentation should refer to published papers that cover this topic.  <xref target="UPTANEESCAR"/></t>

<section anchor="why-uptane-requires-a-standards-document" title="Why Uptane requires a standards document">

<t>A standards document that can guide the safe design, integration, and deployment of Uptane in vehicles is needed at this time because:</t>

<t><list style="symbols">
  <t>The number of connected units on the average vehicle continues to grow, with mainstream cars now containing up to 100 million lines of code. <xref target="USATODAY"/></t>
  <t>The expanded use of software over-the-air strategies creates new attack surfaces for malicious parties. <xref target="CR-OTA"/></t>
  <t>Legacy update strategies, such as SSL/TLS or GPG/RSA, are not feasible for use on vehicle ECUs because they force manufacturers to chose between enhanced security and customizability.</t>
  <t>Conventional strategies are also complicated by the differing resources of the ECUs, which can vary greatly in memory, storage space, and Internet connectivity.</t>
  <t>The design of Uptane makes it possible to offer improved design flexibility without sacrificing security.</t>
  <t>This added design flexibility, however, could be a liability if the framework is implemented incorrectly.</t>
  <t>Standardization of crucial steps in the design, implementation, and use of Uptane can assure that customizability does not impact security or functionality.</t>
</list></t>

</section>
<section anchor="scope-of-standard-coverage" title="Scope of Standard coverage">

<t>This document sets guidelines for implementing Uptane in most systems capable of updating software on connected units in ground vehicles, including passenger vehicles, light-duty trucks, heavy-duty trucks, and motorcycles. Uptane could potentially also be applied to other ground vehicles, such as automated shuttles, recreational vehicles, and military ground vehicles. Uptane could even be applied to domains such as IoT devices, medical devices, and autonomous aerial vehicles. In this section, we define the scope of that applicability by providing sample use cases and possible exceptions, aspects of software update security that are not applicable to Uptane, and the design requirements governing the preparation of these standards.</t>

<section anchor="assumptions" title="Assumptions">

<t>We assume the following system preconditions for Uptane:</t>

<t><list style="symbols">
  <t>Vehicles have the ability to establish connectivity to required backend services. For example, this could be done through cellular, Wi-Fi, or hard-wired mechanisms.</t>
  <t>ECUs are either directly connected to the communication channel, or are indirectly connected via some sort of network gateway.</t>
  <t>ECUs are programmable and provide sufficient performance to be updated.</t>
  <t>ECUs must be able to perform public key cryptography operations and calculate hashes of images and metadata files.</t>
  <t>There are state-of-the-art secure servers in place, such as the Director and Image repository servers.</t>
</list></t>

<t>It is important that any bugs detected in Uptane implementations be patched promptly. Failure to do so could interfere with the effectiveness of Uptane’s operations.</t>

</section>
<section anchor="use-cases" title="Use cases">

<t>The following use cases provide a number of scenarios illustrating the manner in which software updates could be accomplished using Uptane.</t>

<section anchor="oems-initializing-uptane-at-the-factory-using-sota" title="OEMs initializing Uptane at the factory using SOTA">

<t>An OEM plans to install Uptane on new vehicles. This entails the following components: code to perform full and partial verification, the latest copy of the relevant metadata, the public keys, and an accurate attestation of the latest time. The OEM then either requires its tier-1 suppliers to provide these materials to the suppliers’ assembly lines or can choose to add the materials later at the OEM’s assembly lines. The OEM’s in-vehicle implementation is Uptane-compliant if:</t>

<t><list style="numbers">
  <t>all Primaries perform full verification;</t>
  <t>all Secondaries that are updated via OTA at least perform partial verification; and</t>
  <t>all other ECUs that do not perform any type of verification cannot be updated via OTA.</t>
</list></t>

</section>
<section anchor="updating-one-ecu-with-a-complete-image" title="Updating one ECU with a complete image">

<t>A tier-1 supplier completes work on a revised image for an electronic brake control module. This module will control the brakes on all models of an SUV produced by the OEM mentioned above. Assuming supplier delegation is supported by the OEM for this ECU, each tier-1 supplier digitally signs the image, then delivers the signature, all of its metadata, including delegations, and associated images to the OEM. The OEM adds these metadata and images to its Image repository, along with information about any dependencies and conflicts between this image and those for other ECUs used in the OEM’s vehicles. The OEM also updates the inventory database, so that the Director repository can instruct the ECU on how to install these updated images.</t>

</section>
<section anchor="updating-individual-ecus-on-demand" title="Updating individual ECUs on demand">

<t>An OEM has issued a recall to address a problem with a keyless entry device that has been locking people out of their cars. The OEM prepares an updated flash image in the manner described above. The OEM then ships USB flash drives to vehicle owners and dealerships that allow those parties to update the firmware of their vehicles.</t>

</section>
<section anchor="update-one-ecu-with-multiple-deltas" title="Update one ECU with multiple deltas">

<t>The OEM wants to use delta updates to save over-the-air bytes. The delta images contain only the code and/or data that has changed from the previous image version. To do so, the OEM must first modify the Director repository, using the vehicle version manifest and dependency resolution to determine the differences between the previous and latest images. The OEM then adds the following to the custom Targets metadata used by the Director repository: (1) the algorithm used to apply a delta image, and (2) the Targets metadata about the delta image. The OEM will also check whether the delta images match the Targets metadata from the Director repository.</t>

</section>
</section>
</section>
<section anchor="exceptions" title="Exceptions">

<t>There are a number of factors that could impede the completion of the above scenarios:</t>

<t><list style="symbols">
  <t>ECUs may be lacking the necessary resources to function as designated. These insufficient resources could include limited CPU or RAM inadequate for performance of public key cryptography; a lack of sufficient storage to undo installation of bad software; or a location on a low-speed network (e.g., LIN).</t>
  <t>ECUs may reside on different network segments, and may not be able to directly reach each other, requiring a gateway to facilitate communication.</t>
  <t>A user may replace OEM-installed ECUs with aftermarket ECUs.</t>
  <t>A vehicle may be able to download only a limited amount of data via a cellular channel due to limits on a data plan.</t>
  <t>A system may lack sufficient power to download or install software updates.</t>
  <t>Vehicles may be offline for extended periods of time, thus missing required updates (e.g., key rotations).</t>
  <t>OEMs may be unwilling to implement costly security or hardware requirements.</t>
</list></t>

</section>
<section anchor="out-of-scope" title="Out of scope">

<t>The following topics will not be addressed in this document, as they represent threats outside the scope of Uptane:</t>

<t><list style="symbols">
  <t>Physical attacks, such as manual tampering with ECUs outside the vehicle.</t>
  <t>Compromise of the packaged software, such as malware embedded in a trusted package.</t>
  <t>Compromise of the supply chain (e.g., build system, version control system, packaging process). A number of strategies (e.g., git signing, TPMs, in-toto <xref target="IN-TOTO"/>)  already exist to address this problem. Therefore, there is no need to duplicate those techniques here.</t>
  <t>Problems associated with OBD or UDS programming of ECUs, such as authentication of communications between ECUs.</t>
  <t>Malicious mirrors of package repositories, which may substitute original packages with malicious packages with matching version numbers <xref target="MERCURY"/>.</t>
</list></t>

</section>
<section anchor="design-requirements" title="Design requirements">

<t>The design requirements for this document are governed by the following principal parameters:</t>

<t><list style="symbols">
  <t>to clearly mandate the design and implementation steps that are security critical and must be followed as is, while offering flexibility in the implementation of non-critical steps. In this manner, users can adapt to support different use models and deployment scenarios.</t>
  <t>to ensure that, if Uptane is implemented, the security practices mandated or suggested in this document do not interfere with the functionality of ECUs, vehicles, or the systems that maintain them.</t>
  <t>to delineate guidelines to ensure that, should any part of the SOTA mechanism of a vehicle be attacked, an attacker must compromise two or more modules to breach the SOTA mechanism.</t>
</list></t>

</section>
</section>
<section anchor="threat-model-and-attack-strategies" title="Threat model and attack strategies">

<t>The overarching goal of Uptane is to provide a system that is resilient in the face of various types of compromise. In this section, we describe the goals an attacker may have (<xref target="attacker_goals"/>) and the capabilities they may have or could develop (<xref target="capabilities"/>). We then describe and classify types of attacks on the system according to the attacker’s goals (<xref target="threats"/>).</t>

<section anchor="attacker_goals" title="Attacker goals">

<t>We assume that attackers may want to achieve one or more of the following goals, in increasing order of severity:</t>

<t><list style="symbols">
  <t>Read the contents of updates to discover confidential information, reverse-engineer firmware, or compare two firmware images to identify security fixes and hence determine the fixed security vulnerability.</t>
  <t>Deny installation of updates to prevent vehicles from fixing software problems.</t>
  <t>Cause one or more ECUs in the vehicle to fail, denying use of the vehicle or of certain functions.</t>
  <t>Control ECUs within the vehicle, and possibly the vehicle itself.</t>
</list></t>

</section>
<section anchor="capabilities" title="Attacker capabilities">

<t>Uptane is designed with resilience to compromise in mind. We assume that attackers may develop one or more of the following capabilities:</t>

<t><list style="symbols">
  <t>Intercept and modify network traffic (i.e., perform man-in-the-middle attacks). This capability may be developed in two domains:
  <list style="symbols">
      <t>Outside the vehicle, intercepting and modifying traffic between the vehicle and software repositories.</t>
      <t>Inside the vehicle, intercepting and modifying traffic on one or more vehicle buses (e.g., via an OBD port or using a compromised ECU as a vector).</t>
    </list></t>
  <t>Compromise and control either a Director repository or Image repository server, and any keys stored on that repository, but not both the Director and Image repositories.</t>
  <t>Compromise either a Primary ECU or a Secondary ECU, but not both in the same vehicle.</t>
</list></t>

</section>
<section anchor="threats" title="Description of threats">

<t>Uptane’s threat model includes the following types of attacks, organized according to the attacker goals listed in <xref target="attacker_goals"/>.</t>

<section anchor="read_updates" title="Read updates">

<t><list style="symbols">
  <t><spanx style="emph">Eavesdrop attack:</spanx> Read sensitive or confidential information from an update intended to be encrypted for a specific ECU. (Note: Not all implementations will have a need for protecting information in this way.)</t>
</list></t>

</section>
<section anchor="deny_updates" title="Deny installation of updates">

<t>An attacker seeking to deny the installation of updates may attempt one or more of the following strategies:</t>

<t><list style="symbols">
  <t><spanx style="emph">Drop-request attack:</spanx> Block network traffic outside or inside the vehicle.</t>
  <t><spanx style="emph">Slow retrieval attack:</spanx> Slow down network traffic, in the extreme case sending barely enough packets to avoid a timeout. Similar to a drop-request attack, except that both the sender and receiver of the traffic still think network traffic is unimpeded.</t>
  <t><spanx style="emph">Freeze attack:</spanx> Continue to send a properly signed, but old, update bundle to the ECUs, even if newer updates exist.</t>
  <t><spanx style="emph">Partial bundle installation attack:</spanx> Install a valid (signed) update bundle, and then block selected updates within the bundle.</t>
  <t>Conduct a denial of service attack against the Uptane repositories or infrastructure.</t>
</list></t>

</section>
<section anchor="change_functionality" title="Interfere with ECU functionality">

<t>Attackers seeking to interfere with the functionality of vehicle ECUs in order to cause an operational failure or unexpected behavior may do so in one of the following ways:</t>

<t><list style="symbols">
  <t><spanx style="emph">Rollback attack:</spanx> Cause an ECU to install a previously valid software revision that is older than the currently installed version.</t>
  <t><spanx style="emph">Endless data attack:</spanx> Send a large amount of data to an ECU until it runs out of storage, possibly causing the ECU to fail to operate.</t>
  <t><spanx style="emph">Mix-and-match attack:</spanx> Install a malicious software bundle in which some of the updates do not interoperate properly. This may be accomplished even if all of the individual images being installed are valid, as long as valid versions exist that are mutually incompatible.</t>
</list></t>

</section>
<section anchor="control_ecu" title="Control an ECU or vehicle">

<t>Full control of a vehicle, or one or more ECUs within a vehicle, is the most severe threat.</t>

<t><list style="symbols">
  <t><spanx style="emph">Arbitrary software attack:</spanx> Cause an ECU to install and run arbitrary code of the attacker’s choice.</t>
</list></t>

</section>
</section>
</section>
<section anchor="design" title="Detailed design of Uptane">

<t>Uptane does not specify implementation details. Instead, this Standard describes the components necessary for a compliant implementation and leaves it up to individual implementers to make their own technological choices within those requirements.</t>

<t>At a high level, Uptane requires:</t>

<t><list style="symbols">
  <t>Two software repositories:
  <list style="symbols">
      <t>An Image repository containing binary images to install and signed metadata about those images.</t>
      <t>A Director repository connected to an inventory database that can sign metadata on demand for images in the Image repository.</t>
    </list></t>
  <t>Repository tools for generating Uptane-specific metadata about images.</t>
  <t>A public key infrastructure supporting the required metadata production and signing roles on each repository:
  <list style="symbols">
      <t>Root - The certificate authority for the Uptane ecosystem. Distributes public keys for verifying all the other roles’ metadata.</t>
      <t>Timestamp - Indicates whether there are new metadata or images.</t>
      <t>Snapshot - Indicates images released by the repository at a point in time via signing metadata about Targets metadata.</t>
      <t>Targets - Indicates metadata about images, such as hashes and file sizes.</t>
    </list></t>
  <t>A secure way for ECUs to know the time.</t>
  <t>An ECU capable of downloading images and associated metadata from the Uptane servers.</t>
  <t>An in-vehicle client on a Primary ECU capable of verifying the signatures on all update metadata and downloading updates on behalf of its associated Secondary ECUs. The Primary ECU MAY be the same ECU that communicates with the server.</t>
  <t>A client or library on each Secondary ECU capable of performing either full or partial verification of metadata.</t>
</list></t>

<section anchor="roles" title="Roles on repositories">

<t>A repository contains images and metadata. Each role has a particular type of metadata associated with it, as described in <xref target="meta_structures"/>.</t>

<section anchor="root_role" title="The Root role">

<t>A repository’s Root role SHALL be responsible for a Certificate Authority as defined in <xref target="RFC3647"/>.
A repository’s Root role SHALL produce and sign Root metadata as described in <xref target="root_meta"/>.
A repository’s Root role SHALL sign the public keys used to verify the metadata produced by the Timestamp, Snapshot, and Targets roles.
A repository’s Root role SHALL revoke keys for the other roles if they are compromised.</t>

</section>
<section anchor="targets_role" title="The Targets role">

<t>A repository’s Targets role SHALL produce and sign metadata about images and delegations as described in <xref target="targets_meta"/>.</t>

<section anchor="targets_role_delegations" title="Delegations">

<t>The Targets role on the Image repository MAY delegate the responsibility of signing metadata to other, custom-defined roles referred to as delegated targets. If it does, it MUST do so as specified in <xref target="delegations_meta"/>.</t>

<t>Responsibility for signing images or a subset of images MAY be delegated to more than one role and therefore it is possible for two different roles to be trusted for signing a particular image. For this reason, delegations MUST be prioritized.</t>

<t>A particular delegation for a subset of images MAY be designated as <spanx style="strong">terminating</spanx>. For terminating delegations, the client SHALL NOT search any further if it does not find validly signed metadata about those images. Delegations SHOULD NOT be terminating by default; terminating delegations SHOULD only be used when there is a compelling technical reason to do so.</t>

<t>A delegation for a subset of images MAY be a multi-role delegation <xref target="TAP-3"/>. A multi-role delegation indicates that multiple roles are needed to sign a particular image and each of the delegatee roles MUST sign the same metadata.</t>

<t>Delegations only apply to the Image repository. The Targets role on the Director repository MUST NOT delegate metadata signing responsibility.</t>

</section>
</section>
<section anchor="snapshot_role" title="The Snapshot role">

<t>A repository’s Snapshot role SHALL produce and sign metadata about all Targets metadata the repository releases, including the current version number of the top-level Targets metadata, and the version numbers of all delegated Targets metadata, as described in <xref target="snapshot_meta"/>.</t>

</section>
<section anchor="timestamp_role" title="The Timestamp role">

<t>A repository’s Timestamp role SHALL produce and sign metadata indicating whether there are new metadata or images on the repository. It MUST do so by signing the metadata about the Snapshot metadata file.</t>

</section>
</section>
<section anchor="meta_structures" title="Metadata structures">

<t>Uptane’s security guarantees all rely on properly created metadata that follows a designated structure. The Uptane Standard <spanx style="strong">does not</spanx> mandate any particular format or encoding for the metadata as a whole. ASN.1 (with any encoding scheme like BER, DER, XER, etc.), JSON, XML, or any other encoding format that is capable of providing the required structure MAY be used.</t>

<t>However, string comparison is required as part of metadata verification. To ensure an accurate basis for comparing strings, all strings MUST be encoded in the Unicode Format for Network Interchange as defined in <xref target="RFC5198"/>, including normalization into Unicode Normalization Form C (<xref target="NFC"/>).</t>

<t>In the <spanx style="emph">Deployment Best Practices</spanx> (<xref target="DEPLOY"/>), Joint Development Foundation Projects, LLC, Uptane Series provides some examples of compliant metadata structures in ASN.1 and JSON.</t>

<section anchor="common_metadata" title="Common metadata structures">

<t>Every public key MUST be represented using a public key identifier.  A public key identifier is EITHER all of the following:</t>

<t><list style="symbols">
  <t>The value of the public key itself (which MAY be, for example, formatted as a PEM string)</t>
  <t>The public key cryptographic algorithm used by the key (such as RSA or ECDSA)</t>
  <t>The particular scheme used to verify the signature (such as <spanx style="verb">rsassa-pss-sha256</spanx> or <spanx style="verb">ecdsa-sha2-nistp256</spanx>)</t>
</list></t>

<t>OR a secure hash over at least the above components (such as the keyid mechanism in TUF).</t>

<t>All four Uptane roles (Root, Targets, Snapshot, and Timestamp) share a common structure. They SHALL contain the following two attributes:</t>

<t><list style="symbols">
  <t>A payload of metadata to be signed</t>
  <t>An attribute containing the signature(s) of the payload, where each entry specifies:
  <list style="symbols">
      <t>The public key identifier of the key being used to sign the payload</t>
      <t>A signature with this key over the payload</t>
    </list></t>
</list></t>

<t>The payload differs depending on the role. However, the payload for all roles shares a common structure. It SHALL contain the following four attributes:</t>

<t><list style="symbols">
  <t>An indicator of the type of role (Root, Targets, Snapshot, or Timestamp)</t>
  <t>An expiration date and time</t>
  <t>An integer version number, which SHOULD be incremented each time the metadata file is updated</t>
  <t>The role-specific metadata for the role indicated</t>
</list></t>

<t>The following sections describe the role-specific metadata. All roles SHALL follow the common structures described here.</t>

</section>
<section anchor="root_meta" title="Root metadata">

<t>A repository’s Root metadata distributes the public keys of the top-level Root, Targets, Snapshot, and Timestamp roles, as well as revocations of those keys. It SHALL contain two attributes:</t>

<t><list style="symbols">
  <t>A representation of the public keys for all four roles. Each key SHALL have a unique public key identifier.</t>
  <t>An attribute mapping each role to (1) its public key(s), and (2) the threshold of signatures required for that role.</t>
</list></t>

</section>
<section anchor="targets_meta" title="Targets metadata">

<t>The Targets metadata on a repository contains all of the information about images to be installed on ECUs. This includes filenames, hashes, file sizes, and MAY also include other useful information, such as what types of hardware are compatible with a particular image.</t>

<t>Targets metadata can also contain metadata about delegations, allowing one Targets role to delegate its authority to another. This means that an individual Targets metadata file might contain only metadata about delegations, only metadata about images, or some combination of the two. The details of how ECUs traverse the delegation tree to find valid metadata about images is specified in <xref target="resolve_delegations"/>.</t>

<section anchor="targets_images_meta" title="Metadata about images">

<t>To be available to install on clients, all images on the repository MUST have their metadata listed in a Targets role.  Each Targets role MAY provide a list of some images on the repository.  This list MUST provide, at a minimum, the following information about each image:</t>

<t><list style="symbols">
  <t>The image filename</t>
  <t>The size of the image in bytes</t>
  <t>One or more hashes of the image file, along with the hashing function used</t>
</list></t>

<section anchor="custom-metadata-about-images" title="Custom metadata about images">

<t>In addition to the required metadata, Targets metadata files MAY contain extra metadata for images on the repository. This metadata can be customized for a particular use case. Examples of use cases for different types of custom metadata can be found in the <spanx style="emph">Deployment Best Practices</spanx> document (<xref target="DEPLOY"/>). However, there are a few important pieces of custom metadata that SHOULD be present in most implementations. In addition, there is one element in the custom metadata that MUST be present in the Targets metadata from the Director.</t>

<t>Custom metadata MAY also contain a demarcated field or section that MUST match whenever two pieces of metadata are checked against each other, such as when Targets metadata from the Director repository is checked against Targets metadata from the Image repository.</t>

<t>The information listed below SHOULD be provided for each image on both the Image repository and the Director repository. If a “MUST match section” is to be implemented, that is where this information SHOULD be placed.</t>

<t><list style="symbols">
  <t>A release counter, to be incremented each time a new version of the image is released. This can be used to prevent rollback attacks even in cases where the Director repository is compromised.</t>
  <t>A hardware identifier, or list of hardware identifiers, representing models of ECUs with which the image is compatible. This can be used to ensure that an ECU cannot be ordered to install an incompatible image, even in cases where the Director repository is compromised.</t>
</list></t>

<t>The following information is CONDITIONALLY REQUIRED for each image on the Director repository IF that image is encrypted:</t>

<t><list style="symbols">
  <t>Information about filenames, hashes, and file size of the encrypted image.</t>
  <t>Information about the encryption method, and other relevant information–for example, a symmetric encryption key encrypted by the ECU’s asymmetric key could be included in the Director repository metadata.</t>
</list></t>

<t>The following information MUST be provided from the Director repository for each image in the Targets metadata:</t>

<t><list style="symbols">
  <t>An ECU identifier (such as a serial number), specifying the ECU that should install the image.</t>
</list></t>

<t>The Director repository MAY provide a download URL for the image file. This may be useful, for example, when the image is on a public CDN and the Director wishes to provide a signed URL.</t>

</section>
</section>
<section anchor="delegations_meta" title="Metadata about delegations">

<t>A Targets metadata file on the Image repository (but not the Director repository) MUST be able to delegate signing authority to other entities. For example, it could delegate signing authority for a particular ECU’s firmware to that ECU’s supplier. A metadata file MAY contain any number of delegations and MUST keep the delegations in prioritized order.</t>

<t>Any metadata file with delegations MUST provide the following information:</t>

<t><list style="symbols">
  <t>A list of public keys of all delegatees. Each key should have a unique public key identifier and a key type.</t>
  <t>A list of delegations, each of which contains:
  <list style="symbols">
      <t>A list of the filenames to which this role applies. This MAY be expressed using wildcards, or by enumerating a list, or a combination of the two.</t>
      <t>An optional list of the hardware identifiers to which this role applies.  If this is omitted, any hardware identifier will match.</t>
      <t>An indicator of whether or not this is a terminating delegation. (See <xref target="targets_role_delegations"/>.)</t>
      <t>A list of the roles to which this delegation applies. Each role needs to specify:
      <list style="symbols">
          <t>A name for the role (e.g., “supplier1-qa”)</t>
          <t>The key identifiers for each key this role uses</t>
          <t>A threshold of keys that must sign for this role</t>
        </list></t>
    </list></t>
</list></t>

<t>Note that <spanx style="strong">any</spanx> Targets metadata file stored on the Image repository may contain delegations, and these delegations can be in chains of arbitrary length.</t>

</section>
</section>
<section anchor="snapshot_meta" title="Snapshot metadata">

<t>The Snapshot metadata lists version numbers and filenames of all Targets metadata files. It protects against mix-and-match attacks if a delegated supplier key is compromised.</t>

<t>For each Targets metadata file on the repository, the Snapshot metadata SHALL contain the following information:</t>

<t><list style="symbols">
  <t>The filename and version number of the Targets metadata file.</t>
</list></t>

<t>The Snapshot metadata MAY also list the Root metadata filename and version number for the purpose of backward compatibility. Historically, this was a requirement in TUF, but it is no longer required and does not provide a significant security benefit.</t>

</section>
<section anchor="timestamp_meta" title="Timestamp metadata">

<t>The Timestamp metadata SHALL contain the following information:</t>

<t><list style="symbols">
  <t>The filename and version number of the latest Snapshot metadata on the repository.</t>
  <t>One or more hashes of the Snapshot metadata file, along with the hashing function used.</t>
</list></t>

</section>
<section anchor="repo_mapping_meta" title="Repository mapping metadata">

<t>As described in the introduction to <xref target="design"/>, Uptane requires a Director repository and an Image repository. However, it is possible to have an Uptane-compliant implementation that has more than two repositories.</t>

<t>Repository mapping metadata informs a Primary ECU about which repositories to trust for images or image paths. <xref target="TAP-4"/> describes how to make use of more complex repository mapping metadata in order to have more than the two required repositories.</t>

<t>Repository mapping metadata, or the equivalent informational content, MUST be present on all Primary ECUs, and MUST contain the following information:</t>

<t><list style="symbols">
  <t>A list of repository names and one or more URLs at which the named repository can be accessed. At a minimum, this MUST include the Director and Image repositories.</t>
  <t>A list of mappings of image paths to repositories, each of which contains:
  <list style="symbols">
      <t>A list of image paths. Image paths MAY be expressed using wildcards, or by enumerating a list, or a combination of the two.</t>
      <t>A list of repositories that MUST provide signed Targets metadata for images stored at those paths.</t>
    </list></t>
</list></t>

<t>For example, in the most basic Uptane case, the repository mapping metadata would contain:</t>

<t><list style="symbols">
  <t>The name and URL of the Director repository.</t>
  <t>The name and URL of the Image repository.</t>
  <t>A single mapping indicating that all images (<spanx style="verb">*</spanx>) MUST be signed by both the Director and Image repository.</t>
</list></t>

<t>Note that the metadata need not be in the form of a metadata file. For example, in the basic case where there is only one Director and one Image repository, and all images need to have signed metadata from both repositories, it would be sufficient to have a configuration file with URLs for the two repositories and a client that always checks for metadata matches between them. In this case, no explicit mapping would be defined, because the mapping is defined as part of the Uptane client implementation.</t>

<t>The <spanx style="emph">Uptane Deployment Best Practices</spanx> document (<xref target="DEPLOY"/>) provides more guidance on how to implement repository mapping metadata for more complex use cases. It also discusses strategies for updating repository mapping metadata, if required.</t>

</section>
<section anchor="metadata_filename_rules" title="Rules for filenames in repositories and metadata">

<t>There is a difference between the filename in a metadata file or an ECU, and the filename on a repository. This difference exists in order to avoid race conditions, where metadata and images are read from, and written to, at the same time. For more details, the reader should read the TUF specification <xref target="TUF-spec"/> and PEP 458 <xref target="PEP-458"/>.</t>

<t>Unless stated otherwise, all files SHALL be written to repositories in accordance with the following two rules:</t>

<t><list style="numbers">
  <t>Metadata filenames SHALL be qualified with version numbers. If a metadata file A is specified as FILENAME.EXT in another metadata file B, then it SHALL be written as VERSION.FILENAME.EXT, where VERSION is A’s version number, as defined in <xref target="common_metadata"/>, with one exception: If the version number of the Timestamp metadata file might not be known in advance by a client, it MAY be read from, and written to, a repository using a filename without a version number qualification, i.e., FILENAME.EXT.</t>
  <t>If an image is specified in a Targets metadata file as FILENAME.EXT, it SHALL be written to the repository as HASH.FILENAME.EXT, where HASH is one of the hash digests of the file, as specified in <xref target="targets_images_meta"/>. The file MUST be written to the repository using <spanx style="emph">n</spanx> different filenames, one for each hash digest listed in its corresponding Targets metadata.</t>
</list></t>

<t>For example:</t>

<t><list style="symbols">
  <t>The version number of the Snapshot metadata file is 61, and its filename in the Timestamp metadata is <spanx style="emph">snapshot.json</spanx>. The filename on the repository will be <spanx style="emph">61.snapshot.json</spanx>.</t>
  <t>There is an image with the <spanx style="emph">filename acme_firmware.bin</spanx> specified in the Targets metadata, with a SHA3-256 of <spanx style="emph">aaaa</spanx> and a SHA-512/224 of <spanx style="emph">bbbb</spanx>. It will have two filenames on the repository: <spanx style="emph">aaaa.acme_firmware.bin</spanx> and <spanx style="emph">bbbb.acme_firmware.bin</spanx>.</t>
</list></t>

</section>
</section>
<section anchor="server-repository-implementation-requirements" title="Server / repository implementation requirements">

<t>An Uptane implementation SHALL make the following services available to vehicles:</t>

<t><list style="symbols">
  <t>Image repository</t>
  <t>Director repository</t>
</list></t>

<t>Additionally, an Uptane implementation requires ECUs to have a secure way to know the current time.</t>

<section anchor="image-repository" title="Image repository">

<t>The Image repository exists to allow an OEM and/or its suppliers to upload images and their associated metadata. It makes these images and their metadata available to vehicles. The Image repository is designed to be primarily controlled by human actors, and updated relatively infrequently.</t>

<t>The Image repository SHALL expose an interface permitting the download of metadata and images. This interface SHOULD be public.</t>

<t>The Image repository SHALL require authorization for writing metadata and images.</t>

<t>The Image repository SHALL provide a method for authorized users to upload images and their associated metadata. It SHALL check that a user writing metadata and images is authorized to do so for that specific image by checking the chain of delegations as described in <xref target="delegations_meta"/>.</t>

<t>The Image repository SHALL implement storage which permits authorized users to write an image file using a unique filename, and later read the same file using the same name. It MAY use any filesystem, key-value store, or database that fulfills this requirement.</t>

<t>The Image repository MAY require authentication for read access.</t>

</section>
<section anchor="director_repository" title="Director repository">

<t>The Director repository instructs ECUs as to which images should be installed by producing signed metadata on demand. Unlike the Image repository, it is mostly controlled by automated, online processes. It also consults a private inventory database containing information on vehicles, ECUs, and software revisions.</t>

<t>The Director repository SHALL expose an interface for Primaries to upload vehicle version manifests (<xref target="vehicle_version_manifest"/>) and download metadata. This interface SHOULD be public.
The Director MAY encrypt images for ECUs that require them, either by encrypting on-the-fly or by storing encrypted images on the repository.</t>

<t>The Director repository SHALL implement storage which permits an automated service to write generated metadata files. It MAY use any filesystem, key-value store, or database that fulfills this requirement.</t>

<section anchor="directing-installation-of-images-on-vehicles" title="Directing installation of images on vehicles">

<t>A Director repository MUST conform to the following six-step process for directing the installation of software images on a vehicle.</t>

<t><list style="numbers">
  <t>The Director SHOULD first identify the vehicle. This MAY be done when the Director receives a vehicle version manifest sent by a Primary (as described in <xref target="construct_manifest_primary"/>), decodes the manifest, and determines the unique vehicle identifier. Additionally, the Director MAY utilize other mechanisms to uniquely identify a vehicle (e.g., 2-way TLS with unique client certificates).</t>
  <t>Using the vehicle identifier, the Director queries its inventory database (as described in <xref target="inventory_db"/>) for relevant information about each ECU in the vehicle.</t>
  <t>The Director SHALL check the manifest for accuracy compared to the information in the inventory database. If any of the required checks fail, the Director MAY drop the request. An implementer MAY make additional checks if desired. At a minimum, the Director SHALL check the following:
  <list style="symbols">
      <t>Each ECU recorded in the inventory database is also represented in the manifest.</t>
      <t>The signature of the manifest matches the ECU key of the Primary that sent it.</t>
      <t>The signature of each Secondary’s contribution to the manifest matches the ECU key of that Secondary.</t>
    </list></t>
  <t>The Director SHOULD check that the nonce or counter in each ECU version report has not been used before to prevent a replay of the ECU version report. If the nonce or counter is reused the Director SHOULD drop the request.</t>
  <t>The Director extracts information about currently installed images from the vehicle version manifest. Using this information, it determines if the vehicle is already up-to-date, and if not, determines a set of images that should be installed. The exact process by which this determination takes place is out of scope of this Standard. However, the Director MUST take into account <spanx style="emph">dependencies</spanx> and <spanx style="emph">conflicts</spanx> between images and SHOULD consult well-established techniques for dependency resolution.</t>
  <t>The Director MAY encrypt images for ECUs that require it.</t>
  <t>The Director generates new metadata representing the desired set of images to be installed on the vehicle, based on the dependency resolution in step 4. This includes Targets (<xref target="targets_meta"/>), Snapshot (<xref target="snapshot_meta"/>), and Timestamp (<xref target="timestamp_meta"/>) metadata. It then sends this metadata to the Primary as described in <xref target="download_meta_primary"/>.</t>
</list></t>

</section>
<section anchor="inventory_db" title="Inventory Database">

<t>The Director SHALL use a private inventory database to store information about ECUs and vehicles. An implementer MAY use any durable database for this purpose.</t>

<t>The inventory database MUST record the following pieces of information:</t>

<t><list style="symbols">
  <t>Per vehicle:
  <list style="symbols">
      <t>A unique identifier (such as a VIN)</t>
    </list></t>
  <t>Per ECU:
  <list style="symbols">
      <t>A unique identifier (such as a serial number)</t>
      <t>The vehicle identifier the ECU is associated with</t>
      <t>An ECU key (symmetric or asymmetric; for asymmetric keys, only the public part SHOULD be stored)</t>
      <t>The ECU key identifier (as defined in <xref target="common_metadata"/>)</t>
      <t>Whether the ECU is a Primary or a Secondary</t>
    </list></t>
</list></t>

<t>The inventory database MAY record other information about ECUs and vehicles. It SHOULD record a hardware identifier for each ECU to protect against the possibility of directing the ECU to install incompatible firmware.</t>

</section>
</section>
</section>
<section anchor="in-vehicle-implementation-requirements" title="In-vehicle implementation requirements">

<t>An Uptane-compliant ECU SHALL be able to download and verify image metadata and image binaries before installing a new image and MUST have a secure way of verifying the current time, or a sufficiently recent attestation of the time.</t>

<t>All ECUs SHOULD monitor the download speed of image metadata and image binaries to detect and respond to a slow retrieval attack. If the download is slower than a pre-defined threshold, the ECU SHOULD send an alert to the Director repository, for example as part of the next vehicle version manifest.</t>

<t>Each ECU receiving over-the-air updates in a vehicle is either a Primary or a Secondary ECU. A Primary ECU collects and delivers vehicle manifests to the Director (<xref target="vehicle_version_manifest"/>) that contain information about which images have been installed on ECUs in the vehicle. It also verifies the time and downloads and verifies the latest metadata and images for itself and for its Secondaries. A Secondary ECU verifies the time, and downloads and verifies the latest metadata and images for itself from its associated Primary ECU. It also sends signed information about its installed images to its associated Primary.</t>

<t>All ECUs MUST verify image metadata as specified in <xref target="metadata_verification"/> before installing an image or making it available to other ECUs. A Primary ECU MUST perform full verification (<xref target="full_verification"/>). A Secondary ECU SHOULD perform full verification if possible. If a Secondary cannot perform full verification, it SHALL, at the very least, perform partial verification. In addition, it MAY also perform some steps from the full verification process. See the <spanx style="emph">Uptane Deployment Best Practices</spanx> document (<xref target="DEPLOY"/>) for a discussion of how to choose between partial and full verification.</t>

<t>ECUs MUST have a secure source of time. An OEM/Uptane implementer MAY use any external source of time that is demonstrably secure. The <spanx style="emph">Uptane Deployment Best Practices</spanx> document (<xref target="DEPLOY"/>) describes one way to implement an external time server to cryptographically attest time, as well as the security properties required.</t>

<section anchor="build-time-prerequisite-requirements-for-ecus" title="Build-time prerequisite requirements for ECUs">

<t>For an ECU to be capable of receiving Uptane-secured updates, it MUST have the following data provisioned at the time it is manufactured or installed in the vehicle:</t>

<t><list style="numbers">
  <t>A sufficiently recent copy of required Uptane metadata at the time of manufacture or install. This is necessary for the ECU to authenticate that the remote repository is legitimate when it first downloads metadata in the field. See <spanx style="emph">Uptane Deployment Best Practices</spanx> (<xref target="DEPLOY"/>) for more information.
  <list style="symbols">
      <t>Partial verification Secondary ECUs MUST have the Root and Targets metadata from the Director repository (to reduce the scope of rollback and replay attacks). These ECUs MAY also have metadata from other roles or the Image repository if they will be used by the Secondary.</t>
      <t>Full verification ECUs MUST have a complete set of metadata (Root, Targets, Snapshot, and Timestamp) from both repositories (to prevent rollback and replay attacks), as well as the repository mapping metadata (<xref target="repo_mapping_meta"/>). Delegations are not required.</t>
    </list></t>
  <t>The current time, or a secure attestation of a sufficiently recent time.</t>
  <t>An <spanx style="strong">ECU key</spanx>. This is a private key, unique to the ECU, used to sign ECU version reports and decrypt images. An ECU key MAY be either a symmetric key or an asymmetric key. If it is an asymmetric key, there MAY be separate keys for encryption and signing. For the purposes of this Standard, the set of private keys that an ECU uses is referred to as the ECU key (singular), even if it is actually multiple keys used for different purposes.</t>
</list></t>

</section>
<section anchor="what-the-primary-does" title="What the Primary does">

<t>A Primary downloads, verifies, and distributes the latest time, metadata, and images. To do so, it SHALL perform the following seven steps:</t>

<t><list style="numbers">
  <t>Construct and send vehicle version manifest (<xref target="construct_manifest_primary"/>)</t>
  <t>Download and check current time (<xref target="check_time_primary"/>)</t>
  <t>Download and verify metadata (<xref target="download_meta_primary"/>)</t>
  <t>Download and verify images (<xref target="download_images_primary"/>)</t>
  <t>OPTIONAL: Send latest time to Secondaries (<xref target="send_time_primary"/>)</t>
  <t>Send metadata to Secondaries (<xref target="send_metadata_primary"/>)</t>
  <t>Send images to Secondaries (<xref target="send_images_primary"/>)</t>
</list></t>

<t>Note that the subsequent sections concerning requirements for a Primary do not prohibit implementing Primary capabilities on an ECU that does not communicate directly with the Uptane repositories. This allows for implementations to have multiple ECUs within the vehicle performing functions equivalent to a Primary.
If multiple such Primaries are included within a vehicle, each Secondary ECU SHALL have a single Primary responsible for providing its updates.</t>

<section anchor="construct_manifest_primary" title="Construct and send vehicle version manifest">

<t>The Primary SHALL build a <spanx style="emph">vehicle version manifest</spanx> as described in <xref target="vehicle_version_manifest"/>.</t>

<t>Once the complete manifest is built, the Primary MAY send the manifest to the Director repository. However, it is not strictly required that the Primary send the manifest until step three. If permitted by the implementation, a Primary MAY send only a diff of the manifest to save bandwidth. If an implementation permits diffs, the Director SHOULD have a way to request a full manifest.</t>

<t>Secondaries MAY send their version report at any time so that it is already stored on the Primary when it wishes to check for updates. Alternatively, the Primary MAY request a version report from each Secondary at the time of the update check.</t>

<section anchor="vehicle_version_manifest" title="Vehicle version manifest">

<t>The vehicle version manifest is a metadata structure that MUST contain the following information:</t>

<t><list style="symbols">
  <t>An attribute containing the signature(s) of the payload, each specified by:
  <list style="symbols">
      <t>The public key identifier of the key being used to sign the payload</t>
      <t>The signing method (i.e., ed25519, rsassa-pss, etc.)</t>
      <t>A hash of the payload to be signed</t>
      <t>The hashing function used (i.e., SHA3-256, SHA-512/224, etc.)</t>
      <t>The signature of the hash</t>
    </list></t>
  <t>A payload representing the installed versions of each software image on the vehicle. This payload SHALL contain:
  <list style="symbols">
      <t>The vehicle’s unique identifier (e.g., the VIN)</t>
      <t>The Primary ECU’s unique identifier (e.g., the serial number)</t>
      <t>A list of ECU version reports as specified in <xref target="version_report"/></t>
    </list></t>
</list></t>

<t>Note that one of the ECU version reports should be the version report for the Primary itself.</t>

</section>
<section anchor="version_report" title="ECU version report">

<t>An ECU version report is a metadata structure that MUST contain the following information:</t>

<t><list style="symbols">
  <t>An attribute containing the signature(s) of the payload, each specified by:
  <list style="symbols">
      <t>The public key identifier of the key being used to sign the payload</t>
      <t>The signing method (i.e., ed25519, rsassa-pss, etc.)</t>
      <t>A hash of the payload to be signed</t>
      <t>The hashing function used (i.e., SHA3-256, SHA-512/224, etc.)</t>
      <t>The signature of the hash</t>
    </list></t>
  <t>A payload containing:
  <list style="symbols">
      <t>The ECU’s unique identifier (e.g., the serial number)</t>
      <t>The filename, length, and hashes of its currently installed image (i.e., the non-custom Targets metadata for this particular image)</t>
      <t>An indicator of any detected security attack</t>
      <t>The latest time the ECU can verify at the time this version report was generated</t>
      <t>A nonce or counter to prevent a replay of the ECU version report. This value MUST change each update cycle. It MAY be a cryptographic nonce used with a time server as described in <spanx style="emph">Uptane Deployment Best Practices</spanx>  (<xref target="DEPLOY"/>).</t>
    </list></t>
</list></t>

</section>
</section>
<section anchor="check_time_primary" title="Download and check current time">

<t>The Primary SHALL load the current time from a secure source.</t>

</section>
<section anchor="download_meta_primary" title="Download and verify metadata">

<t>The Primary SHALL download metadata for all targets and perform a full verification on it as specified in <xref target="full_verification"/>.</t>

</section>
<section anchor="download_images_primary" title="Download and verify images">

<t>The Primary SHALL download and verify images for itself and for all of its associated Secondaries. Images SHALL be verified by checking that the hash of the image file matches the hash specified in the Director’s Targets metadata for that image.</t>

<t>There may be several different filenames that all refer to the same image binary, as described in <xref target="metadata_filename_rules"/>. If the Primary has received multiple hashes for a given image binary via the Targets role (see <xref target="targets_images_meta"/>) then it SHALL verify every hash for this image even though the image is identified by a single hash as part of its filename.</t>

</section>
<section anchor="send_time_primary" title="Send latest time to Secondaries">

<t>Unless the Secondary ECU has its own way of verifying the time or does not have the capacity to verify a time message, the Primary is CONDITIONALLY REQUIRED to send the time to each ECU. The Secondary will verify the time message, then overwrite its current time with the received time.</t>

</section>
<section anchor="send_metadata_primary" title="Send metadata to Secondaries">

<t>The Primary SHALL send its latest downloaded metadata to all of its associated Secondaries. The metadata it sends to each Secondary MUST include all of the metadata required for verification on that Secondary. For full verification Secondaries, this includes the metadata for all four roles from both repositories, plus any delegated Targets metadata files the Secondary will recurse through to find the proper delegation. For partial verification Secondaries, this MAY include fewer metadata files; at a minimum, it includes only the Targets metadata file from the Director repository.</t>

<t>The Primary SHOULD determine the minimal set of metadata files to send to each Secondary by performing delegation resolution as described in <xref target="full_verification"/>.</t>

<t>Each Secondary SHALL store the latest copy of all metadata required for its own verification.</t>

</section>
<section anchor="send_images_primary" title="Send images to Secondaries">

<t>The Primary SHALL send the latest image to each of its associated Secondaries that have sufficient storage to receive it.</t>

<t>For Secondaries without sufficient storage to store a copy of the image, the Primary SHOULD wait for a request from the Secondary to stream the new image file to it. The Secondary will send the request once it has verified the metadata sent in the previous step.</t>

</section>
</section>
<section anchor="installing-images-on-primary-or-secondary-ecus" title="Installing images on Primary or Secondary ECUs">

<t>An ECU SHALL perform the following steps when attempting to install a new image:</t>

<t><list style="numbers">
  <t>Verify latest attested time. This is optional if the ECU does not have the capacity to verify a time message (<xref target="verify_time"/>)</t>
  <t>Verify metadata (<xref target="verify_metadata"/>)</t>
  <t>Download latest image (<xref target="download_image"/>)</t>
  <t>Verify image (<xref target="verify_image"/>)</t>
  <t>Install image (<xref target="install_image"/>)</t>
  <t>Create and send version report (<xref target="create_version_report"/>)</t>
</list></t>

<section anchor="verify_time" title="Load and verify the latest attested time">

<t>IF the ECU has the capability to verify a time message, the ECU is CONDITIONALLY REQUIRED to load and verify the current time, or the most recent securely attested time.</t>

</section>
<section anchor="verify_metadata" title="Verify metadata">

<t>The ECU SHALL verify the latest downloaded metadata (<xref target="metadata_verification"/>) using either full or partial verification. If the metadata verification fails for any reason, the ECU SHALL jump to the final step (<xref target="create_version_report"/>).</t>

</section>
<section anchor="download_image" title="Download latest image">

<t>If the ECU has limited secondary storage, i.e., insufficient buffer storage to temporarily store the latest image before installing it, it SHALL download the latest image from the Primary. (If the ECU has sufficient secondary storage, it will already have the latest image in its secondary storage as specified in <xref target="send_images_primary"/>, and should skip to the next step.) The ECU MAY first create a backup of its previous working image and store it elsewhere (e.g., the Primary).</t>

<t>The filename used to identify the latest known image (i.e., the file to request from the Primary) SHALL be determined as follows:</t>

<t><list style="numbers">
  <t>Load the Targets metadata file from the Director repository.</t>
  <t>Find the Targets metadata associated with this ECU identifier.</t>
  <t>Construct the Image filename using the rule in <xref target="metadata_filename_rules"/>, or use the download URL specified in the Director metadata.</t>
  <t>If there is no Targets metadata about this image, abort the update cycle and report that there is no such image. Additionally, in the case of failure, the ECU SHALL retain its previous Targets metadata instead of using the new Targets metadata. Otherwise, download the image (up to the number of bytes specified in the Targets metadata) and verify it according to <xref target="verify_image"/>.</t>
</list></t>

<t>When the Primary responds to the download request, the ECU SHALL overwrite its current image with the downloaded image from the Primary.</t>

<t>If any part of this step fails, the ECU SHALL jump to the final step (<xref target="create_version_report"/>).</t>

</section>
<section anchor="verify_image" title="Verify image">

<t>The ECU SHALL verify that the latest image matches the latest metadata as follows:</t>

<t><list style="numbers">
  <t>Load the latest Targets metadata file from the Director.</t>
  <t>Find the Targets metadata associated with this ECU identifier.</t>
  <t>Check that the hardware identifier in the metadata matches the ECU’s hardware identifier.</t>
  <t>Check that the image filename is valid for this ECU. This MAY be a comparison against a wildcard path, which restricts the ECUs to which a delegation will apply.</t>
  <t>Check that the release counter of the image in the previous metadata, if it exists, is less than or equal to the release counter in the latest metadata.</t>
  <t>If the image is encrypted, decrypt the image with a decryption key to be chosen as follows:
  <list style="symbols">
      <t>If the ECU key is a symmetric key, the ECU SHALL use the ECU key for image decryption.</t>
      <t>If the ECU key is asymmetric, the ECU SHALL check the Targets metadata for an encrypted symmetric key. If such a key is found, the ECU SHALL decrypt the symmetric key using its ECU key, and use the decrypted symmetric key for image decryption.</t>
      <t>If the ECU key is asymmetric and there is no symmetric key in the Targets metadata, the ECU SHALL use its ECU key for image decryption.</t>
    </list></t>
  <t>Check that all hashes listed in the metadata match the corresponding hashes of the image.</t>
</list></t>

<t>If the ECU has enough secondary storage capacity to store the image, the checks SHOULD be performed on the image in secondary storage before it is installed.</t>

<t>When checking hashes, the ECU SHOULD additionally check that the length of the image matches the length listed in the metadata.</t>

<t>NOTE: Verifying image size along with the hashes will become a requirement in a future version of the Uptane Standard.</t>

<t>NOTE: See <xref target="DEPLOY"/> for guidance on how to deal with Secondary ECU failures for ECUs that have limited secondary storage.</t>

<t>If any step fails, the ECU SHALL jump to the final step (<xref target="create_version_report"/>).</t>

</section>
<section anchor="install_image" title="Install image">

<t>The ECU SHALL attempt to install the update. This installation SHOULD occur at a time when all pre-conditions are met. These pre-conditions MAY include ensuring the vehicle is in a safe environment for install (e.g., the vehicle is parked when updating a specific ECU). Another pre-condition MAY include ensuring the ECU has a backup of its current image and metadata in case the current installation fails.</t>

</section>
<section anchor="create_version_report" title="Create and send version report">

<t>The ECU SHALL create a version report as described in <xref target="version_report"/>, and send it to the Primary (or simply save it to disk, if the ECU is a Primary). The Primary SHOULD write the version reports it receives to disk and associate them with the Secondaries that sent them.</t>

</section>
</section>
<section anchor="metadata_verification" title="Metadata verification procedures">

<t>A Primary ECU MUST perform full verification of metadata. A Secondary ECU SHOULD perform full verification of metadata. If a Secondary cannot perform full verification, it SHALL, at the very least, perform partial verification.</t>

<t>If a step in the following workflows does not succeed (e.g., the update is aborted because a new metadata file was not signed), an ECU SHOULD still be able to update again in the future. Errors raised during the update process SHOULD NOT leave ECUs in an unrecoverable state.</t>

<section anchor="partial_verification" title="Partial verification">

<t>In order to perform partial verification, an ECU SHALL perform the following steps:</t>

<t><list style="numbers">
  <t>Load and verify the current time or the most recent securely attested time.</t>
  <t>Download and check the Targets metadata file from the Director repository, following the procedure in <xref target="check_targets"/>.</t>
</list></t>

<t>Note that this verification procedure is the smallest set of Uptane checks permissible for an Uptane Secondary ECU. An ECU MAY additionally implement more metadata checks.</t>

<t>For example, an ECU MAY also fetch and verify Root metadata from the Director (following the procedure in <xref target="check_root"/>) before checking Targets metadata. Performing this additional check would provide the ECU with a secure way to receive and validate a rotation of the Director’s Targets key.</t>

<t>See <xref target="DEPLOY"/> for more discussion on this topic.</t>

</section>
<section anchor="full_verification" title="Full verification">

<t>Full verification of metadata means that the ECU checks that the Targets metadata about images from the Director repository matches the Targets metadata about the same images from the Image repository. This provides resilience to a key compromise in the system.</t>

<t>Full verification MUST be performed by Primary ECUs and SHOULD be performed by Secondary ECUs. In the following instructions, whenever an ECU is directed to download metadata, it applies only to Primary ECUs.</t>

<t>Before starting full verification, the repository mapping metadata MUST be consulted to determine where to download metadata from. This procedure assumes the basic Uptane case: there are only two repositories (Director and Image), and all image paths are required to be signed by both repositories. If a more complex repository layout is being used, refer to <xref target="DEPLOY"/> for guidance on how to determine where metadata should be downloaded from.</t>

<t>In order to perform full verification, an ECU SHALL perform the following steps:</t>

<t><list style="numbers">
  <t>Load and verify the current time or the most recent securely attested time.</t>
  <t>Download and check the Root metadata file from the Director repository, following the procedure in <xref target="check_root"/>.</t>
  <t>Download and check the Timestamp metadata file from the Director repository, following the procedure in <xref target="check_timestamp"/>.</t>
  <t>Check the previously downloaded Snapshot metadata file from the Directory repository (if available). If the hashes and version number of that file match the hashes and version number listed in the new Timestamp metadata, there are no new updates and the verification process MAY be stopped and considered complete. Otherwise, download and check the Snapshot metadata file from the Director repository, following the procedure in <xref target="check_snapshot"/>.</t>
  <t>Download and check the Targets metadata file from the Director repository, following the procedure in <xref target="check_targets"/>.</t>
  <t>If the Targets metadata from the Directory repository indicates that there are no new targets that are not already currently installed, the verification process MAY be stopped and considered complete. Otherwise, download and check the Root metadata file from the Image repository, following the procedure in <xref target="check_root"/>.</t>
  <t>Download and check the Timestamp metadata file from the Image repository, following the procedure in <xref target="check_timestamp"/>.</t>
  <t>Check the previously downloaded Snapshot metadata file from the Image repository (if available). If the hashes and version number of that file match the hashes and version number listed in the new Timestamp metadata, the ECU MAY skip to the last step. Otherwise, download and check the Snapshot metadata file from the Image repository, following the procedure in <xref target="check_snapshot"/>.</t>
  <t>Download and check the top-level Targets metadata file from the Image repository, following the procedure in <xref target="check_targets"/>.</t>
  <t>Verify that Targets metadata from the Director and Image repositories match. A Primary ECU MUST perform this check on metadata for all images listed in the Targets metadata file from the Director repository downloaded in step 6. A Secondary ECU MAY elect to perform this check only on the metadata for the image it will install. (That is, the image metadata from the Director that contains the ECU identifier of the current ECU.) To check that the metadata for an image matches, complete the following procedure:
  <list style="numbers">
      <t>Locate and download a Targets metadata file from the Image repository that contains an image with exactly the same filename listed in the Director metadata, following the procedure in <xref target="resolve_delegations"/>.</t>
      <t>Check that the Targets metadata from the Image repository matches the Targets metadata from the Director repository:
      <list style="numbers">
          <t>Check that the non-custom metadata (i.e., length and hashes) of the unencrypted or encrypted image are the same in both sets of metadata. Note: the Primary is responsible for validating encrypted images and associated metadata. The target ECU (Primary or Secondary) is responsible for validating the unencrypted image and associated metadata.</t>
          <t>Check that all MUST match custom metadata (e.g., hardware identifier and release counter) are the same in both sets of metadata.</t>
          <t>Check that the release counter in the previous Targets metadata file is less than or equal to the release counter in this Targets metadata file.</t>
        </list></t>
    </list></t>
</list></t>

<t>If any step fails, the ECU MUST return an error code indicating the failure. If a check for a specific type of security attack fails (i.e., rollback, freeze, arbitrary software, etc.), the ECU SHOULD return an error code that indicates the type of attack.</t>

</section>
<section anchor="check_root" title="How to check Root metadata">

<t>To properly check Root metadata, an ECU SHOULD:</t>

<t><list style="numbers">
  <t>Load the previous Root metadata file.</t>
  <t>Update to the latest Root metadata file.
  <list style="numbers">
      <t>Let N denote the version number of the latest Root metadata file (which at first could be the same as the previous Root metadata file).</t>
      <t>Try downloading a new version N+1 of the Root metadata file, up to some X number of bytes. The value for X is set by the implementer. For example, X may be tens of kilobytes. The filename used to download the Root metadata file is of the fixed form VERSION_NUMBER.FILENAME.EXT (e.g., 42.root.json). If this file is not available, the current Root metadata file is the latest; continue with step 3.</t>
      <t>Version N+1 of the Root metadata file MUST have been signed by the following: (1) a threshold of keys specified in the latest Root metadata file (version N), and (2) a threshold of keys specified in the new Root metadata file being validated (version N+1). If version N+1 is not signed as required, discard it, abort the update cycle, and report the signature failure. On the next update cycle, begin at version N of the Root metadata file. (Checks for an arbitrary software attack.)</t>
      <t>The version number of the latest Root metadata file (version N) must be less than or equal to the version number of the new Root metadata file (version N+1). Effectively, this means checking that the version number signed in the new Root metadata file is indeed N+1. If the version of the new Root metadata file is less than the latest metadata file, discard it, abort the update cycle, and report the rollback attack. On the next update cycle, begin at step 1 and version N of the Root metadata file. (Checks for a rollback attack.)</t>
      <t>Set the latest Root metadata file to the new Root metadata file.</t>
      <t>Repeat steps 2.1 to 2.6.</t>
    </list></t>
  <t>Check that the current (or latest securely attested) time is lower than the expiration timestamp in the latest Root metadata file. (Checks for a freeze attack.)</t>
  <t>If the Timestamp and/or Snapshot keys have been rotated, delete the previous Timestamp and Snapshot metadata files. (Checks for recovery from fast-forward attacks <xref target="MERCURY"/>.)</t>
</list></t>

</section>
<section anchor="check_timestamp" title="How to check Timestamp metadata">

<t>To properly check Timestamp metadata, an ECU SHOULD:</t>

<t><list style="numbers">
  <t>Download up to Y number of bytes. The value for Y is set by the implementer. For example, Y may be tens of kilobytes. The filename used to download the Timestamp metadata file is of the fixed form FILENAME.EXT (e.g., timestamp.json).</t>
  <t>Check that it has been signed by the threshold of keys specified in the latest Root metadata file. If the new Timestamp metadata file is not properly signed, discard it, abort the update cycle, and report the signature failure. (Checks for an arbitrary software attack.)</t>
  <t>Check that the version number of the previous Timestamp metadata file, if any, is less than or equal to the version number of this Timestamp metadata file. If the new Timestamp metadata file is older than the trusted Timestamp metadata file, discard it, abort the update cycle, and report the potential rollback attack. (Checks for a rollback attack.)</t>
  <t>Check that the current (or latest securely attested) time is lower than the expiration timestamp in this Timestamp metadata file. If the new Timestamp metadata file has expired, discard it, abort the update cycle, and report the potential freeze attack. (Checks for a freeze attack.)</t>
</list></t>

</section>
<section anchor="check_snapshot" title="How to check Snapshot metadata">

<t>To properly check Snapshot metadata, an ECU SHOULD:</t>

<t><list style="numbers">
  <t>Download up to the number of bytes specified in the Timestamp metadata file, constructing the metadata filename as defined in <xref target="metadata_filename_rules"/>.</t>
  <t>The hashes and version number of the new Snapshot metadata file MUST match the hashes and version number listed in the Timestamp metadata. If the hashes and version number do not match, discard the new Snapshot metadata, abort the update cycle, and report the failure. (Checks for a mix-and-match attack.)</t>
  <t>Check that it has been signed by the threshold of keys specified in the latest Root metadata file. If the new Snapshot metadata file is not signed as required, discard it, abort the update cycle, and report the signature failure. (Checks for an arbitrary software attack.)</t>
  <t>Check that the version number of the previous Snapshot metadata file, if any, is less than or equal to the version number of this Snapshot metadata file. If this Snapshot metadata file is older than the previous Snapshot metadata file, discard it, abort the update cycle, and report the potential rollback attack. (Checks for a rollback attack.)</t>
  <t>Check that the version number listed by the previous Snapshot metadata file for each Targets metadata file is less than or equal to its version number in this Snapshot metadata file. If this condition is not met, discard the new Snapshot metadata file, abort the update cycle, and report the failure. (Checks for a rollback attack.)</t>
  <t>Check that each Targets metadata filename listed in the previous Snapshot metadata file is also listed in this Snapshot metadata file. If this condition is not met, discard the new Snapshot metadata file, abort the update cycle, and report the failure. (Checks for a rollback attack.)</t>
  <t>Check that the current (or latest securely attested) time is lower than the expiration timestamp in this Snapshot metadata file. If the new Snapshot metadata file is expired, discard it, abort the update cycle, and report the potential freeze attack. (Checks for a freeze attack.)</t>
</list></t>

</section>
<section anchor="check_targets" title="How to check Targets metadata">

<t>To properly check Targets metadata, an ECU SHOULD:</t>

<t><list style="numbers">
  <t>Download up to Z number of bytes, constructing the metadata filename as defined in <xref target="metadata_filename_rules"/>. The value for Z is set by the implementer. For example, Z may be tens of kilobytes.</t>
  <t>The version number of the new Targets metadata file MUST match the version number listed in the latest Snapshot metadata. If the version number does not match, discard it, abort the update cycle, and report the failure. (Checks for a mix-and-match attack.) This step MAY be skipped when checking Targets metadata on a partial verification ECU; partial verification ECUs might not have Snapshot metadata.</t>
  <t>Check that the Targets metadata has been signed by the threshold of keys specified in the relevant metadata file. (Checks for an arbitrary software attack.):
  <list style="numbers">
      <t>If checking top-level Targets metadata, the threshold of keys is specified in the Root metadata.</t>
      <t>If checking delegated Targets metadata, the threshold of keys is specified in the Targets metadata file that delegated authority to this role.</t>
    </list></t>
  <t>Check that the version number of the previous Targets metadata file, if any, is less than or equal to the version number of this Targets metadata file. (Checks for a rollback attack.)</t>
  <t>Check that the current (or latest securely attested) time is lower than the expiration timestamp in this Targets metadata file. (Checks for a freeze attack.)</t>
  <t>If checking Targets metadata from the Director repository, verify that there are no delegations.</t>
  <t>If checking Targets metadata from the Director repository, check that no ECU identifier is represented more than once.</t>
  <t>If checking Targets metadata from the Director repository, and the ECU performing the verification is the Primary ECU, check that all listed ECU identifiers correspond to ECUs that are actually present in the vehicle.</t>
</list></t>

</section>
<section anchor="resolve_delegations" title="How to resolve delegations">

<t>To properly check Targets metadata for an image, an ECU MUST locate the metadata file(s) for the role (or roles) that have the authority to sign the image. This metadata might be located in the top-level Targets metadata, but it also may be delegated to another role or to multiple roles. Therefore, all delegations MUST be resolved using the following recursive procedure, beginning with the top-level Targets metadata file.</t>

<t><list style="numbers">
  <t>Download and check the current metadata file, following the procedure in <xref target="check_targets"/>. If the file cannot be loaded, or if any verification step fails, abort the delegation resolution, and indicate that image metadata cannot be found because of a missing or invalid role.</t>
  <t>If the current metadata file contains signed metadata about the image, end the delegation resolution and return the metadata to be checked.</t>
  <t>If the current metadata file was reached via a terminating delegation and does not contain signed metadata about the image, abort the delegation resolution for this image and return an error indicating that image metadata could not be found.</t>
  <t>Search the list of delegations, in listed order. For each delegation:
  <list style="numbers">
      <t>Check if the delegation applies to the image being processed. For the delegation to apply, it MUST include the hardware identifier of the target, and the target name MUST match one of the delegation’s image paths. If either of these tests fail, move on to the next delegation in the list.</t>
      <t>If the delegation is a multi-role delegation, follow the procedure described in <xref target="multirole_delegations"/>. If the multi-role delegation is terminating and no valid image metadata is found, abort the delegation resolution and return an error indicating that image metadata could not be found.</t>
      <t>If the delegation is a normal delegation, perform delegation resolution, starting at step 1. Note that this may recurse an arbitrary number of levels deep. If a delegation that applies to the image is found but no image metadata is found in the delegated roles or any of its sub-delegations, simply continue on with the next delegation in the list. The search is only completed or aborted if image metadata or a terminating delegation that applies to the image is found.</t>
    </list></t>
  <t>If the end of the list of delegations in the top-level metadata is reached without finding valid image metadata, return an error indicating that image metadata could not be found.</t>
</list></t>

</section>
<section anchor="multirole_delegations" title="Multi-role delegations">

<t>It is possible to delegate signing authority to multiple delegated roles as described in <xref target="TAP-3"/>. Each multi-role delegation effectively contains a list of ordinary delegations, plus a threshold of those roles that must be in agreement about the non-custom metadata for the image. All multi-role delegations MUST be resolved using the following procedure. Note that there may be sub-delegations inside multi-role delegations.</t>

<t><list style="numbers">
  <t>For each of the roles in the delegation, find and load the image metadata following the procedure in <xref target="resolve_delegations"/>.</t>
  <t>Inspect the non-custom part of the metadata loaded in step 1:
  <list style="numbers">
      <t>Locate all sets of roles that have agreeing (i.e., identical) non-custom metadata and “MUST match” custom metadata. Discard any set of roles with a size smaller than the threshold of roles that must be in agreement for this delegation.</t>
      <t>Check for a conflict. A conflict exists if there is more than one agreeing set of roles, yet each set has different metadata. If a conflict is found, choose and return the metadata from the set of roles which includes the earliest role in the multi-delegation list.</t>
      <t>If there is no conflict, check if there is any single set of roles with matching non-custom metadata. If there is, choose and return the metadata from this set.</t>
      <t>If no agreeing set can be found that meets the agreement threshold, return an error indicating that image metadata could not be found.</t>
    </list></t>
</list></t>

</section>
</section>
</section>
</section>


  </middle>

  <back>

    <references title='Normative References'>





<reference  anchor="RFC2119" target='https://www.rfc-editor.org/info/rfc2119'>
<front>
<title>Key words for use in RFCs to Indicate Requirement Levels</title>
<author initials='S.' surname='Bradner' fullname='S. Bradner'><organization /></author>
<date year='1997' month='March' />
<abstract><t>In many standards track documents several words are used to signify the requirements in the specification.  These words are often capitalized. This document defines these words as they should be interpreted in IETF documents.  This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t></abstract>
</front>
<seriesInfo name='BCP' value='14'/>
<seriesInfo name='RFC' value='2119'/>
<seriesInfo name='DOI' value='10.17487/RFC2119'/>
</reference>



<reference  anchor="RFC3647" target='https://www.rfc-editor.org/info/rfc3647'>
<front>
<title>Internet X.509 Public Key Infrastructure Certificate Policy and Certification Practices Framework</title>
<author initials='S.' surname='Chokhani' fullname='S. Chokhani'><organization /></author>
<author initials='W.' surname='Ford' fullname='W. Ford'><organization /></author>
<author initials='R.' surname='Sabett' fullname='R. Sabett'><organization /></author>
<author initials='C.' surname='Merrill' fullname='C. Merrill'><organization /></author>
<author initials='S.' surname='Wu' fullname='S. Wu'><organization /></author>
<date year='2003' month='November' />
<abstract><t>This document presents a framework to assist the writers of certificate policies or certification practice statements for participants within public key infrastructures, such as certification authorities, policy authorities, and communities of interest that wish to rely on certificates.  In particular, the framework provides a comprehensive list of topics that potentially (at the writer's discretion) need to be covered in a certificate policy or a certification practice statement.  This document supersedes RFC 2527.</t></abstract>
</front>
<seriesInfo name='RFC' value='3647'/>
<seriesInfo name='DOI' value='10.17487/RFC3647'/>
</reference>



<reference  anchor="RFC5198" target='https://www.rfc-editor.org/info/rfc5198'>
<front>
<title>Unicode Format for Network Interchange</title>
<author initials='J.' surname='Klensin' fullname='J. Klensin'><organization /></author>
<author initials='M.' surname='Padlipsky' fullname='M. Padlipsky'><organization /></author>
<date year='2008' month='March' />
<abstract><t>The Internet today is in need of a standardized form for the transmission of internationalized &quot;text&quot; information, paralleling the specifications for the use of ASCII that date from the early days of the ARPANET.  This document specifies that format, using UTF-8 with normalization and specific line-ending sequences.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='5198'/>
<seriesInfo name='DOI' value='10.17487/RFC5198'/>
</reference>


<reference anchor="NFC" target="https://www.unicode.org/reports/tr15/">
  <front>
    <title>Unicode Standard Annex #15: Unicode Normalization Forms</title>
    <author initials="M." surname="Davis">
      <organization></organization>
    </author>
    <author initials="M." surname="Duerst">
      <organization></organization>
    </author>
    <date year="2018" month="October"/>
  </front>
</reference>
<reference anchor="TAP-3" target="https://github.com/theupdateframework/taps/blob/d0818e580c322815a473520f2e8cc5f5eb8df499/tap3.md">
  <front>
    <title>The Update Framework TAP 3 - Multi-role delegations</title>
    <author initials="T.K." surname="Kuppusamy">
      <organization></organization>
    </author>
    <author initials="S." surname="Awwad">
      <organization></organization>
    </author>
    <author initials="E." surname="Cordell">
      <organization></organization>
    </author>
    <author initials="V." surname="Diaz">
      <organization></organization>
    </author>
    <author initials="J." surname="Moshenko">
      <organization></organization>
    </author>
    <author initials="J." surname="Cappos">
      <organization></organization>
    </author>
    <date year="2018" month="January" day="18"/>
  </front>
</reference>
<reference anchor="TAP-4" target="https://github.com/theupdateframework/taps/blob/2cb67d913ec19424d1e354b38f862886fbfd4105/tap4.md">
  <front>
    <title>The Update Framework TAP 4 - Multiple repository consensus on entrusted targets</title>
    <author initials="T.K." surname="Kuppusamy">
      <organization></organization>
    </author>
    <author initials="S." surname="Awwad">
      <organization></organization>
    </author>
    <author initials="E." surname="Cordell">
      <organization></organization>
    </author>
    <author initials="V." surname="Diaz">
      <organization></organization>
    </author>
    <author initials="J." surname="Moshenko">
      <organization></organization>
    </author>
    <author initials="J." surname="Cappos">
      <organization></organization>
    </author>
    <date year="2017" month="December" day="15"/>
  </front>
</reference>
<reference anchor="TUF-spec" target="https://github.com/theupdateframework/specification/blob/2b4e18472fe25d5b57f36f6fa50104967c8faeaa/tuf-spec.md">
  <front>
    <title>The Update Framework Specification</title>
    <author initials="J." surname="Samuel">
      <organization></organization>
    </author>
    <author initials="N." surname="Mathewson">
      <organization></organization>
    </author>
    <author initials="G." surname="Condra">
      <organization></organization>
    </author>
    <author initials="V." surname="Diaz">
      <organization></organization>
    </author>
    <author initials="T.K." surname="Kuppusamy">
      <organization></organization>
    </author>
    <author initials="S." surname="Awwad">
      <organization></organization>
    </author>
    <author initials="S." surname="Tobias">
      <organization></organization>
    </author>
    <author initials="J." surname="Wright">
      <organization></organization>
    </author>
    <author initials="H." surname="Mehnert">
      <organization></organization>
    </author>
    <author initials="E." surname="Tryzelaar">
      <organization></organization>
    </author>
    <author initials="J." surname="Cappos">
      <organization></organization>
    </author>
    <author initials="R." surname="Dingledine">
      <organization></organization>
    </author>
    <date year="2018" month="September" day="19"/>
  </front>
</reference>


    </references>

    <references title='Informative References'>

<reference anchor="MERCURY" target="https://www.usenix.org/system/files/conference/atc17/atc17-kuppusamy.pdf">
  <front>
    <title>Mercury: Bandwidth-Effective Prevention of Rollback Attacks Against Community Repositories</title>
    <author initials="T.K." surname="Kuppusamy">
      <organization></organization>
    </author>
    <author initials="V." surname="Diaz">
      <organization></organization>
    </author>
    <author initials="J." surname="Cappos">
      <organization></organization>
    </author>
    <date year="2017" month="July" day="12"/>
  </front>
  <seriesInfo name="ISBN" value="978-1-931971-38-6"/>
</reference>
<reference anchor="UPTANEESCAR" target="https://ssl.engineering.nyu.edu/papers/kuppusamy_escar_16.pdf">
  <front>
    <title>Securing Software Updates for Automobiles</title>
    <author initials="T.K." surname="Kuppusamy">
      <organization></organization>
    </author>
    <author initials="A." surname="Brown">
      <organization></organization>
    </author>
    <author initials="S." surname="Awwad">
      <organization></organization>
    </author>
    <author initials="D." surname="McCoy">
      <organization></organization>
    </author>
    <author initials="R." surname="Bielawski">
      <organization></organization>
    </author>
    <author initials="C." surname="Mott">
      <organization></organization>
    </author>
    <author initials="S." surname="Lauzon">
      <organization></organization>
    </author>
    <author initials="A." surname="Weimerskirch">
      <organization></organization>
    </author>
    <author initials="J." surname="Cappos">
      <organization></organization>
    </author>
    <date year="2016" month="October" day="16"/>
  </front>
</reference>
<reference anchor="PEP-458" target="https://www.python.org/dev/peps/pep-0458/">
  <front>
    <title>PEP 458 -- Surviving a Compromise of PyPI</title>
    <author initials="T.K." surname="Kuppusamy">
      <organization></organization>
    </author>
    <author initials="V." surname="Diaz">
      <organization></organization>
    </author>
    <author initials="D." surname="Stufft">
      <organization></organization>
    </author>
    <author initials="J." surname="Cappos">
      <organization></organization>
    </author>
    <date year="2013" month="September" day="27"/>
  </front>
</reference>
<reference anchor="DEPLOY" target="https://uptane.github.io/deployment-considerations/index.html">
  <front>
    <title>Uptane Deployment Best Practices</title>
    <author initials="." surname="Members of the Uptane Community">
      <organization></organization>
    </author>
    <date year="n.d."/>
  </front>
</reference>
<reference anchor="USATODAY" target="https://www.usatoday.com/story/tech/columnist/2016/06/28/your-average-car-lot-more-code-driven-than-you-think/86437052/">
  <front>
    <title>Your average car is a lot more code-driven than you think</title>
    <author initials="B." surname="O'Donnell">
      <organization></organization>
    </author>
    <date year="2016" month="June" day="28"/>
  </front>
</reference>
<reference anchor="CR-OTA" target="https://www.consumerreports.org/automotive-technology/automakers-embrace-over-the-air-updates-can-we-trust-digital-car-repair/">
  <front>
    <title>Automakers Embrace Over-the-Air Updates, but Can We Trust Digital Car Repair?</title>
    <author initials="K." surname="Barry">
      <organization></organization>
    </author>
    <date year="2018" month="April" day="20"/>
  </front>
</reference>
<reference anchor="IN-TOTO" target="https://in-toto.io/">
  <front>
    <title>in-toto: A framework to secure the integrity of software supply chains</title>
    <author >
      <organization></organization>
    </author>
    <date year="2018" month="October" day="29"/>
  </front>
</reference>


    </references>



  </back>

<!-- ##markdown-source:
H4sIAIwzY2AAA+19WXfbVprgu34FTvwQSU1SlrzEdh5mZFvuqNrbWHJS6T59
XCABSmiTAAsAJTM+/u/z7XcBQMl2qnr6nMmDY4PAXb777dsdj8c7bdEu8ifJ
+1WblnlyBn9maZ0l86pOnudNcVEm8CQ5Xa4W+TIv27QtqnInnU7r/Aq+ent+
/PpkJ6tmZbqEUdY0yriRUcYZjbAzS9v8oqo3T5KinFc7O8WqfpKU1fO8Lq5g
wKu8Oa/XTXt09+7ju0c7aZ2nT5LzN8/f7FxX9ceLulqv5N8f8w08yp4kp2Wb
12Xejp/X6bzd2aEZP6SLqoRVbPJmZ1U8Sf6jrWajpKnqts7nDfxts8S//OfO
TrpuL6v6yU6SjGFJzZPkVb6c5nWTVPOkvcwVGs+q5XJdFu0GXkwS3mLvT1V9
kZbFHwScJ8lfqqJsAXpX+aJaIdCSF9UaAIK/Jm/r6r/yWQvLefny2cjgDqDI
m2R3dlDhG/NJ8hcASFEmz9LVqmr2aJZ8mRaLDpCb/31RVReLnODUTGbVkl5u
YNN5+yR5CHtr6+o8n13S8xkspcWjeH92TA/q/IJW/fp3/h329CR5WlfVx8Wm
lE8y2Pjh4dHdw52dsqqXdGYIvTvJv/GJJFk+T3ZfvT87HyVnvxy/fDlKXh3/
PkrydjbBxb978ezo8PAxf/PXyYO7j5O3/3aaNKt8xr/ee3j/J/71dd7isSfv
ywInJkyETa3SuigvcFvwv4Y/enD4+BF/pC+/xtUt5CQA7PUyeQYvvH7x7Alt
pU3rC4TKZduumicHB9fX15M1fzuBQzyo8xWgS3PQ1ocPDvgLpo8fdAajkOOy
zD8ldw4fPNkye/MDDeLwDf9TnJskz9Orouk+XQMqtvQYkAYmB8A/Gh/epZ2e
H79N7iVpC+d2lWR3Hx0+yh/AD/B4fK9/jxdFe7meImIcAG6vVzjmvAZkRjAf
tOmqOZguqumBDPbo7uze0dGjwwfp/Z/uPTi6Oz/KH81mD+YP8umjbH7/8WP8
5N5kmfngOSeiwZGTFzq0LHWcvFov2mJcV4sc0AQQlcDTDAPmfPJvk+Tf1qvV
ukmXm/C3s0lyfH2dZuHTkwkQZA2DL8LnvwIwi/SP8OFfJsmrqrnMy49V5wcm
txj0dw/Hh48M+vcV+kez6cOfsscC/fvfB30Z7PBePjt8fP/ofnaY33twf3rv
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
JQDtKgjuDXt0OsWTdOEYyhWWl6KjtjGr7c7B1+VR1AEdTWxqSqaf02xC5Bt5
NGIr5z75xPY7sVGUuORYgdO7LrL20qV9Bx5JTTLBQZpO1JfsZUEmMX3skk22
9jy3lc8qfOgWdSTzqZUc3m5K9pI02BARJyG7sMped64qt+tlwlzdqmNId1iQ
Ocb5l90zd+uPFkVKXURRkYVByRV8UxJNPNG2cr8OU8Yg1jJdDNIUKVfGw107
c1c1eMuqz2/tHUygcA6f6ebPbRmsUXhRdjE5VK7SzrOjBw8OH48S1zFaGsVL
ZwruBx0sN+yYrOP31mrrNJpwPvIzzP2JepMPcMigbXMnVNm5X7OxHIMwPSkK
V4r80XGDSnkHenn5x6YvBsVZODgmBa70G8+XdtN3ndiVX73aq713nIKK6PzG
ly++cuCVevQN5gLu4j4L6FM0cN2Nd7s8kmBPwgQSX7AWCrn0vPj/ae1/Bq05
kDr4fBtSn1/6KdLcZ4XNGNcUgop7hhJXdGctZ9KMpd9kb+k2R7Sj5r97vf18
KCpOkS1KdhCXIDsObOGBUSCkhOX4Ymr4QoumjrAdO4ZY1qgccycZ6Ctzioh1
cUYp0wvfU0F4rRJzoyEcu68ovJCA18CXJXFNkO9QjfXBW/jSwkalmrd6g1GI
N0t3bMI+HZZJIfKxyK30oZO7d+rYpvx8p9+k7Ju6kxJtzcMlVYVmUKs77YkU
VKRHdZl3TyBl2+oLbYU8ZNRuXX13oJ5YnLQAH7hrkuy2U/7YwubiwsiiEg6h
C5+jefUTflofvdIpXVO92LtzLyJz7QM50Tpp6eFH9ygDB+opM0ysxwG5hNQA
oWoML+i9GboFsq9K+4uFuxXwl9TCntKUM2dsCqtjC/yiuNJsMb35F69ZxVGC
ptK7TdBALKi+3ONcJvP7yOHmFAgjoBo75InIA4S1rBdRY1Fj5FwXoZYsjeFF
0/1ySMXTm/wmn+903SZWgR34lInTIehwGizp7U2OYOOgdp4Hc7ijn2ImjQqV
N/PrSwxEXOShdTLcjrStnBmpW9JcFvbzujWTl9y7iqUzX0nJBFw84Ik4ftEc
JIYtruTvzna/ksC141bqYwG0G5xczklZQh4Ofwvax7FdxKXVPLoqtuSCVjTe
tQJeyqF3r0HMK6PkXvIGd5mqtzBpgGPZhMFU3ZseBvt5rBbrRpSCofvYpD9A
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

-->

</rfc>


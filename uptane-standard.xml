<?xml version="1.0" encoding="UTF-8"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc2629 version 1.2.9 -->

<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
]>

<?rfc toc="yes"?>
<?rfc sortrefs="yes"?>
<?rfc symrefs="yes"?>

<rfc ipr="noDerivativesTrust200902" docName="uptane-standard-design" category="info">

  <front>
    <title abbrev="UPTANE">Uptane Standard for Design and Implementation</title>

    <author initials="." surname="Members of the Uptane Alliance Community" fullname="Uptane Alliance Community">
      <organization>Uptane Alliance (c/o Prof. Justin Cappos)</organization>
      <address>
        <postal>
          <street>6 MetroTech</street>
          <city>Brooklyn</city>
          <region>NY</region>
          <code>11201</code>
          <country>USA</country>
        </postal>
        <email>uptane-standards@googlegroups.com</email>
      </address>
    </author>

    <date year="2020" month="May" day="13"/>

    <area>TODO</area>
    <workgroup>TODO</workgroup>
    <keyword>Internet-Draft</keyword>

    <abstract>


<t>This document describes a framework for securing ground vehicle software update systems.</t>



    </abstract>


  </front>

  <middle>


<section anchor="introduction" title="Introduction">

<t>Uptane is a secure software update framework for ground vehicles. This document describes procedures to enable programmers for OEMs and suppliers to securely design and implement this framework in a manner that better protects connected units on ground vehicles. Integrating Uptane as outlined in the sections that follow can reduce the ability of attackers to compromise critical systems. It also assures a faster and easier recovery process should a compromise occur.</t>

<t>These instructions specify the components necessary for a compliant implementation. Individual implementors can make their own technological choices within those requirements. This flexibility makes Uptane adaptable to the many customized update solutions used by manufacturers. If implementors wish to have compatible formats, they may use POUFs. POUFs contain a description of implementation choices as well as data binding formats. An implementor who adopts a POUF, as well as the Uptane Standard, will be able to interoperate with other implementations using that POUF.</t>

</section>
<section anchor="terminology" title="Terminology">

<section anchor="conformance-terminology" title="Conformance terminology">

<t>The keywords MUST, MUST NOT, REQUIRED, SHALL, SHALL NOT, SHOULD, SHOULD NOT, RECOMMENDED, MAY, and OPTIONAL in this document are to be interpreted as described in <xref target="RFC2119"/>.</t>

<t>In order to be considered “Uptane-compliant,” an implementation MUST follow all of these rules as specified in the document.</t>

</section>
<section anchor="terminology-1" title="Terminology">

<t><spanx style="emph">Bundle</spanx>: A set of images released by the repository that is meant to be installed by one or more target ECUs on a vehicle during the same update cycle.</t>

<t><spanx style="emph">Bus</spanx>: An internal communications network that interconnects components within a vehicle. A vehicle can have a number of buses that will vary in terms of power, speed and resources.</t>

<t><spanx style="emph">ECU Identifier</spanx>: An attribute used to identify a specific ECU (e.g., such as a unique serial number).</t>

<t><spanx style="emph">ECU Version Manifest</spanx>: Metadata which details the software version currently installed on the ECU.</t>

<t><spanx style="emph">Hardware Identifier</spanx>: An attribute used to identify a model of an ECU.</t>

<t><spanx style="emph">Image</spanx>: File containing software for an ECU to install. May contain a binary image to flash, installation instructions, and other necessary information for the ECU to properly apply the update. Each ECU typically holds only one image, although this may vary in some cases.</t>

<t><spanx style="emph">Metadata</spanx>:  Information describing the characteristics of data including, for example, structural
metadata describing data structures (e.g., data format, syntax, and semantics) and
descriptive metadata describing data contents (e.g., information security labels). As used in Uptane, metadata can be described as information associated with a role or an image that contains the characteristics or parameters thereof (e.g. cryptographic material parameters, file names and versions.)</t>

<t><spanx style="emph">Primary/Secondary ECUs</spanx>: Terms used to describe the control units within a ground vehicle. A primary ECU downloads and verifies update images and metadata for itself and for secondary ECUs, and distributes images and metadata to secondaries. Thus, it requires extra storage space and a means to download images and metadata.  Secondary ECUs receive their update images and metadata from the primary, and only need to verify and install their own metadata and images.</t>

<t><spanx style="emph">POUF</spanx>: A document that contains the protocol, operations, usage, and formats (POUF) of a specific Uptane implementation. The POUF contains decisions about SHOULDs and MAYs in an implementation, as well as descriptions of data binding formats. POUFs MAY be used to create compatible Uptane implementations.</t>

<t><spanx style="emph">Repository</spanx>: A server containing metadata about images. May also contain the images themselves. Other data may be stored on the repository to be accessed by ECUs during the update process.</t>

<t><spanx style="emph">Suppliers</spanx>: Independent companies to which auto manufacturers may outsource the production of ECUs. Tier-1 suppliers directly serve the manufacturers. Tier-2 suppliers are those that perform outsourced work for Tier-1 suppliers.</t>

<t><spanx style="emph">Vehicle Version Manifest</spanx>: A compilation of all ECU version manifests on a vehicle. It serves as a master list of all images currently running on all ECUs in the vehicle.</t>

</section>
<section anchor="uptane-role-terminology" title="Uptane Role terminology">

<t>These terms are defined in greater detail in <xref target="roles"/>.</t>

<t><spanx style="emph">Delegations</spanx>: A process by which the responsibility of signing metadata about images is assigned to another party.<vspace />
<spanx style="emph">Role</spanx>: A party (human or machine) responsible for signing a certain type of metadata. The role controls keys and is responsible for signing metadata entrusted to it with these keys. The roles mechanism of Uptane allows the system to distribute signing responsibilities so that the compromise of one key does not necessarily impact the security of the entire system.</t>

<t><list style="symbols">
  <t><spanx style="emph">Root Role</spanx>: Signs metadata that distributes and revokes public keys used to verify the Root, Timestamp, Snapshot, and Targets role metadata.</t>
  <t><spanx style="emph">Snapshot Role</spanx>: Signs metadata that indicates which images the repository has released at the same time.</t>
  <t><spanx style="emph">Targets Role</spanx>: Signs metadata used to verify the image, such as cryptographic hashes and file size.</t>
  <t><spanx style="emph">Timestamp Role</spanx>: Signs metadata that indicates if there are any new metadata or images on the repository.</t>
</list></t>

</section>
<section anchor="acronyms-and-abbreviations" title="Acronyms and abbreviations">

<t><spanx style="emph">CAN Bus</spanx>: Controller Area Network bus standard</t>

<t><spanx style="emph">CDN</spanx>: Content Delivery Network</t>

<t><spanx style="emph">ECUs</spanx>: Electronic Control Units, the computing units on a vehicle</t>

<t><spanx style="emph">LIN Bus</spanx>: Local Interconnect Bus</t>

<t><spanx style="emph">OBD</spanx>: On-board diagnostics</t>

<t><spanx style="emph">SOTA</spanx>: Software Updates Over-the-Air</t>

<t><spanx style="emph">UDS</spanx>: Unified Diagnostic Services</t>

<t><spanx style="emph">VIN</spanx>: Vehicle Identification Number</t>

</section>
</section>
<section anchor="rationale-for-and-scope-of-uptane-standards" title="Rationale for and scope of Uptane Standards">

<t>This Standards document clarifies the essential components and best practices for the secure design, implementation and deployment of Uptane by OEMs and suppliers. These practices contribute to compromise resilience, or the ability to minimize the extent of the threat posed by any given attack.</t>

<t>However, this specification is intended as an implementation guide, and not as a detailed technical argument about the security properties that Uptane provides.  Readers interested in such documentation should refer to published papers that cover this topic.  <xref target="UPTANEESCAR"/></t>

<section anchor="why-uptane-requires-a-standards-document" title="Why Uptane requires a standards document">

<t>A standards document that can guide the safe design, integration and deployment of Uptane in vehicles is needed at this time because:</t>

<t><list style="symbols">
  <t>The number of connected units on the average vehicle continues to grow, with mainstream cars now containing up to 100 million lines of code. <xref target="USATODAY"/></t>
  <t>The expanded use of software over-the-air strategies creates new attack surfaces for malicious parties. <xref target="CR-OTA"/></t>
  <t>Legacy update strategies, such as SSL/TLS or GPG/RSA, are not feasible for use on vehicle ECUs because they force manufacturers to chose between enhanced security and customizability.</t>
  <t>Conventional strategies are also complicated by the differing resources of the ECUs, which can vary greatly in memory, storage space, and Internet connectivity.</t>
  <t>The design of Uptane makes it possible to offer improved design flexibility, without sacrificing security.</t>
  <t>This added design flexibility, however, could be a liability if the framework is implemented incorrectly.</t>
  <t>Standardization of crucial steps in the design, implementation and use of Uptane can assure that customizability does not impact security or functionality.</t>
</list></t>

</section>
<section anchor="scope-of-standards-coverage" title="Scope of Standards coverage">

<t>This document sets guidelines for implementing Uptane in most systems capable of updating software on connected units in ground vehicles, including passenger vehicles, light-duty trucks, heavy-duty trucks, and motorcycles. Uptane could potentially also be applied to other ground vehicles, such as automated shuttles, recreational vehicles, and military ground vehicles. Uptane could even be applied to domains such as IoT devices, medical devices, and unmanned aerial vehicles. In this section, we define the scope of that applicability by providing sample use cases and possible exceptions, aspects of software update security that are not applicable to Uptane, and the design requirements governing the preparation of these standards.</t>

<section anchor="assumptions" title="Assumptions">

<t>We assume the following system preconditions for Uptane:</t>

<t><list style="symbols">
  <t>Vehicles have the ability to establish connectivity to required backend services. For example, this could be done through cellular, Wi-Fi, or hard-wired mechanisms.</t>
  <t>ECUs are either directly connected to the communication channel, or are indirectly connected via some sort of network gateway.</t>
  <t>ECUs are programmable and provide sufficient performance to be updated.</t>
  <t>ECUs must be able to perform a public key cryptography operation as well as some supporting operations.</t>
  <t>There are state-of-the-art secure servers in place, such as the Director and Image repository servers.</t>
</list></t>

<t>It is important that any bugs detected in Uptane implementations be patched promptly. Failure to do so could interfere with the effectiveness of Uptane’s operations.</t>

</section>
<section anchor="use-cases" title="Use cases">

<t>The following use cases provide a number of scenarios illustrating the manner in which software updates could be accomplished using Uptane.</t>

<section anchor="oems-initializing-uptane-at-the-factory-using-sota" title="OEMs initializing Uptane at the factory using SOTA">

<t>An OEM plans to install Uptane on new vehicles. This entails the following components: code to perform full and partial verification, the latest copy of the relevant metadata, the public keys, and an accurate attestation of the latest time. The OEM then either requires its tier-1 suppliers to provide these materials to the suppliers’ assembly lines or can choose to add the materials later at the OEM’s assembly lines. The OEM’s implementation is Uptane-compliant if:</t>

<t><list style="numbers">
  <t>all primaries perform full verification;</t>
  <t>all secondaries that are updated via OTA perform full or partial verification; and</t>
  <t>all other ECUs that do not perform verification cannot be updated via OTA.</t>
</list></t>

</section>
<section anchor="updating-one-ecu-with-a-complete-image" title="Updating one ECU with a complete image">

<t>A tier-1 supplier completes work on a revised image for an electronic brake control module. This module will control the brakes on all models of an SUV produced by the OEM mentioned above. Assuming supplier delegation is supported by the OEM for this ECU, each tier-1 supplier digitally signs the image, then delivers the signature and all of its metadata, including delegations, and associated images to the OEM. The OEM adds these metadata and images to its image repository, along with information about any dependencies and conflicts between this image and those for other ECUs used in the OEM’s vehicles. The OEM also updates the inventory database, so that the director repository can instruct the ECU on how to install these updated images.</t>

</section>
<section anchor="updating-individual-ecus-on-demand" title="Updating individual ECUs on demand">

<t>An OEM has issued a recall to address a problem with a keyless entry device that has been locking people out of their cars. The OEM prepares an updated flash image in the manner described above. The OEM then ships USB flash drives to vehicle owners and dealerships that allow those parties to update the firmware of their vehicles.</t>

</section>
<section anchor="update-one-ecu-with-multiple-deltas" title="Update one ECU with multiple deltas">

<t>The OEM wants to use delta updates to save over-the-air bytes. The delta images contain only the code and/or data that has changed from the previous image version. To do so, the OEM must first modify the Director repository, using the vehicle version manifest and dependency resolution to determine the differences between the previous and latest images. The OEM then adds the following to the custom Targets metadata used by the Director repository: (1) the algorithm used to apply a delta image, and (2) the Targets metadata about the delta image. The OEM will also check whether the delta images match the Targets metadata from the Director repository.</t>

</section>
</section>
</section>
<section anchor="exceptions" title="Exceptions">

<t>There are a number of factors that could impede the completion of the above scenarios:</t>

<t><list style="symbols">
  <t>ECUs may be lacking the necessary resources to function as designated. These resources could include weaknesses, in terms of CPU or RAM, that render performance of public key cryptography infeasible; a lack of sufficient storage to undo installation of bad software; or an ECU simply may reside on a low-speed network (e.g., LIN).</t>
  <t>ECUs may reside on different network segments, and may not be able to directly reach each other, requiring a gateway to facilitate communication.</t>
  <t>A user may replace OEM-installed ECUs with aftermarket ECUs.</t>
  <t>A vehicle may be able to download only a limited amount of data via a cellular channel, due to limits on a data plan.</t>
  <t>A system may lack sufficient power to download or install software updates.</t>
  <t>Vehicles may be offline for extended periods of time, thus missing required updates (e.g., key rotations).</t>
  <t>OEMs may be unwilling to implement costly security or hardware requirements.</t>
</list></t>

</section>
<section anchor="out-of-scope" title="Out of Scope">

<t>The following topics will not be addressed in this document, as they represent threats outside the scope of Uptane:</t>

<t><list style="symbols">
  <t>Physical attacks, such as manual tampering with ECUs outside the vehicle.</t>
  <t>Compromise of the packaged software, such as malware embedded in a trusted package.</t>
  <t>Compromise of the supply chain (e.g., build system, version control system, packaging process). A number of strategies (e.g., git signing, TPMs, in-toto <xref target="IN-TOTO"/>)  already exist to address this problem. Therefore, there is no need to duplicate those techniques here.</t>
  <t>Problems associated with OBD or UDS programming of ECUs, such as authentication of communications between ECUs.</t>
  <t>Malicious mirrors of package repositories, which may substitute original packages with malicious packages with matching version numbers <xref target="MERCURY"/>.</t>
</list></t>

</section>
<section anchor="design-requirements" title="Design requirements">

<t>The design requirements for this document are governed by the following principal parameters:</t>

<t><list style="symbols">
  <t>to clearly mandate the design and implementation steps that are security critical and must be followed as is, while offering flexibility in the implementation of non-critical steps. In this manner, users can adapt to support different use models and deployment scenarios.</t>
  <t>to ensure that, if Uptane is implemented, the security practices mandated or suggested in this document do not interfere with the functionality of ECUs, vehicles, or the systems that maintain them.</t>
  <t>to delineate best practices to ensure that, should any part of the SOTA mechanism of a vehicle be attacked, an attacker must compromise two or more modules to breach the SOTA mechanism.</t>
</list></t>

</section>
</section>
<section anchor="threat-model-and-attack-strategies" title="Threat model and attack strategies">

<t>The overarching goal of Uptane is to provide a system that is resilient in the face of various types of compromise. In this section, we describe the goals an attacker may have (<xref target="attacker_goals"/>) and the capabilities they may have or could develop (<xref target="capabilities"/>). We then describe and classify types of attacks on the system according to the attacker’s goals (<xref target="threats"/>).</t>

<section anchor="attacker_goals" title="Attacker goals">

<t>We assume that attackers may want to achieve one or more of the following goals, in increasing order of severity:</t>

<t><list style="symbols">
  <t>Read the contents of updates to discover confidential information, reverse-engineer firmware, or compare two firmware images to identify security fixes and hence determine the fixed security vulnerability</t>
  <t>Deny installation of updates to prevent vehicles from fixing software problems</t>
  <t>Cause one or more ECUs in the vehicle to fail, denying use of the vehicle or of certain functions</t>
  <t>Control ECUs within the vehicle, and possibly the vehicle itself</t>
</list></t>

</section>
<section anchor="capabilities" title="Attacker capabilities">

<t>Uptane is designed with resilience to compromise in mind. We assume that attackers may develop one or more of the following capabilities:</t>

<t><list style="symbols">
  <t>Intercept and modify network traffic (i.e., perform man-in-the-middle attacks). This capability may be developed in two domains:
  <list style="symbols">
      <t>Outside the vehicle, intercepting and modifying traffic between the vehicle and software repositories</t>
      <t>Inside the vehicle, intercepting and modifying traffic on one or more vehicle buses (e.g. via an OBD port or using a compromised ECU as a vector)</t>
    </list></t>
  <t>Compromise and control either a Director repository or Image repository server, and any keys stored on that repository, but not both the Director and Image repositories.</t>
  <t>Compromise either a Primary ECU or a Secondary ECU, but not both in the same vehicle</t>
</list></t>

</section>
<section anchor="threats" title="Description of threats">

<t>Uptane’s threat model includes the following types of attacks, organized according to the attacker goals listed in <xref target="attacker_goals"/>.</t>

<section anchor="read_updates" title="Read updates">

<t><list style="symbols">
  <t><spanx style="emph">Eavesdrop attack:</spanx> Read sensitive or confidential information from an update intended to be encrypted for a specific ECU. (Note: Not all implementations will have a need for protecting information in this way.)</t>
</list></t>

</section>
<section anchor="deny_updates" title="Deny installation of updates">

<t>An attacker seeking to deny the installation of updates may attempt one or more of the following strategies, among others:</t>

<t><list style="symbols">
  <t><spanx style="emph">Drop-request attack:</spanx> Block network traffic outside or inside the vehicle.</t>
  <t><spanx style="emph">Slow retrieval attack:</spanx> Slow down network traffic, in the extreme case sending barely enough packets to avoid a timeout. Similar to a drop-request attack, except that both the sender and receiver of the traffic still think network traffic is unimpeded.</t>
  <t><spanx style="emph">Freeze attack:</spanx> Continue to send a properly signed, but old, update bundle to the ECUs, even if newer updates exist.</t>
  <t><spanx style="emph">Partial bundle installation attack:</spanx> Install a valid (signed) update bundle, and then block selected updates within the bundle.</t>
  <t>Conduct a denial of service attack against the Uptane repositories or infrastructure.</t>
</list></t>

</section>
<section anchor="change_functionality" title="Interfere with ECU functionality">

<t>Attackers seeking to interfere with the functionality of vehicle ECUs in order to cause an operational failure or unexpected behavior may do so in one of the following ways:</t>

<t><list style="symbols">
  <t><spanx style="emph">Rollback attack:</spanx> Cause an ECU to install a previously valid software revision that is older than the currently installed version.</t>
  <t><spanx style="emph">Endless data attack:</spanx> Send a large amount of data to an ECU, until it runs out of storage, possibly causing the ECU to fail to operate.</t>
  <t><spanx style="emph">Mix-and-match attack:</spanx> Install a malicious software bundle in which some of the updates do not interoperate properly. This may be accomplished even if all of the individual images being installed are valid, as long as valid versions exist that are mutually incompatible.</t>
</list></t>

</section>
<section anchor="control_ecu" title="Control an ECU or vehicle">

<t>Full control of a vehicle, or one or more ECUs within a vehicle, is the most severe threat.</t>

<t><list style="symbols">
  <t><spanx style="emph">Arbitrary software attack:</spanx> Cause an ECU to install and run arbitrary code of the attacker’s choice.</t>
</list></t>

</section>
</section>
</section>
<section anchor="design" title="Detailed design of Uptane">

<t>Uptane is a secure software update framework for automobiles. We do not specify implementation details. Instead, we describe the components necessary for a compliant implementation and leave it up to individual implementors to make their own technological choices within those requirements.</t>

<t>At a high level, Uptane requires:</t>

<t><list style="symbols">
  <t>Two software repositories:
  <list style="symbols">
      <t>An Image repository containing binary images to install, and signed metadata about those images</t>
      <t>A Director repository connected to an inventory database that can sign metadata on demand for images in the Image repository</t>
    </list></t>
  <t>Repository tools for generating Uptane-specific metadata about images</t>
  <t>A public key infrastructure supporting the required metadata production/signing roles on each repository:
  <list style="symbols">
      <t>Root - Certificate authority for the Uptane ecosystem. Distributes public keys for verifying all the other roles’ metadata</t>
      <t>Timestamp - Indicates whether there are new metadata or images</t>
      <t>Snapshot - Indicates images released by the repository at a point in time, via signing metadata about Targets metadata</t>
      <t>Targets - Indicates metadata about images, such as hashes and file sizes</t>
    </list></t>
  <t>A secure way for ECUs to know the time.</t>
  <t>An ECU capable of downloading images and associated metadata from the Uptane servers.</t>
  <t>An in-vehicle client on a Primary ECU capable of verifying the signatures on all update metadata and downloading updates on behalf of its associated Secondary ECUs. The primary ECU MAY be the same ECU that communicates with the server.</t>
  <t>A client or library on each Secondary ECU capable of performing either full or partial verification of metadata</t>
</list></t>

<section anchor="roles" title="Roles on repositories">

<t>A repository contains images and metadata. Each role has a particular type of metadata associated with it, as described in <xref target="meta_structures"/>.</t>

<section anchor="root_role" title="The Root role">

<t>A repository’s Root role SHALL be responsible for a Certificate Authority as defined in <xref target="RFC3647"/>.
A repository’s Root role SHALL produce and sign Root metadata as described in <xref target="root_meta"/>.
A repository’s Root role SHALL sign the public keys used to verify the metadata produced by the Timestamp, Snapshot, and Targets roles.
A repository’s Root role SHALL revoke keys for the other roles, in case of compromise.</t>

</section>
<section anchor="targets_role" title="The Targets role">

<t>A repository’s Targets role SHALL produce and sign metadata about images and delegations as described in <xref target="targets_meta"/>.</t>

<section anchor="targets_role_delegations" title="Delegations">

<t>The Targets role on the Image repository MAY delegate the responsibility of signing metadata to other, custom-defined roles referred to as delegated targets. If it does, it MUST do so as specified in <xref target="delegations_meta"/>.</t>

<t>Responsibility for signing images or a subset of images MAY be delegated to more than one role and therefore it is possible for two different roles to be trusted for signing a particular image. For this reason, delegations MUST be prioritized.</t>

<t>A particular delegation for a subset of images MAY be designated as <spanx style="strong">terminating</spanx>. For terminating delegations, the client SHALL NOT search any further if it does not find validly signed metadata about those images. Delegations SHOULD NOT be terminating by default; terminating delegations SHOULD only be used when there is a compelling technical reason to do so.</t>

<t>A delegation for a subset of images MAY be a multi-role delegation <xref target="TAP-3"/>. A multi-role delegation indicates that multiple roles are needed to sign a particular image and each of the delegatee roles MUST sign the same metadata.</t>

<t>Delegations only apply to the Image repository. The Targets role on the Director repository MUST NOT delegate metadata signing responsibility.</t>

</section>
</section>
<section anchor="snapshot_role" title="The Snapshot role">

<t>A repository’s Snapshot role SHALL produce and sign metadata about all Targets metadata the repository releases, including the current version number of the top-level Targets metadata, and the version numbers of all delegated Targets metadata, as described in <xref target="snapshot_meta"/>.</t>

</section>
<section anchor="timestamp_role" title="The Timestamp role">

<t>A repository’s Timestamp role SHALL produce and sign metadata indicating whether there are new metadata or images on the repository. It MUST do so by signing the metadata about the Snapshot metadata file.</t>

</section>
</section>
<section anchor="meta_structures" title="Metadata structures">

<t>Uptane’s security guarantees all rely on properly created metadata that follows a designated structure. The Uptane standard <spanx style="strong">does not</spanx> mandate any particular format or encoding for the metadata as a whole. ASN.1 (with any encoding scheme like BER, DER, XER, etc.), JSON, XML, or any other encoding format that is capable of providing the required structure MAY be used.</t>

<t>However, string comparison is required as part of metadata verification. To ensure an accurate basis for comparing strings, all strings MUST be encoded in the Unicode Format for Network Interchange as defined in <xref target="RFC5198"/>, including normalization into Unicode Normalization Form C (<xref target="NFC"/>).</t>

<t>In the Deployment Considerations document (<xref target="DEPLOY"/>), the Uptane Alliance provides some examples of compliant metadata structures in ASN.1 and JSON.</t>

<section anchor="common_metadata" title="Common metadata structures">

<t>Every public key MUST be represented using a public key identifier.  A public key identifier is EITHER all of the following:</t>

<t><list style="symbols">
  <t>The value of the public key itself (which MAY be, for example, formatted as a PEM string)</t>
  <t>The public key cryptographic algorithm used by the key (such as RSA or ECDSA)</t>
  <t>The particular scheme used to verify the signature (such as <spanx style="verb">rsassa-pss-sha256</spanx> or <spanx style="verb">ecdsa-sha2-nistp256</spanx>)</t>
</list></t>

<t>OR a secure hash over at least the above components (such as the keyid mechanism in TUF).</t>

<t>All four Uptane roles (Root, Targets, Snapshot, and Timestamp) share a common structure. They SHALL contain the following two attributes:</t>

<t><list style="symbols">
  <t>A payload of metadata to be signed</t>
  <t>An attribute containing the signature(s) of the payload, where each entry specifies:
  <list style="symbols">
      <t>The public key identifier of the key being used to sign the payload</t>
      <t>A signature with this key over the payload</t>
    </list></t>
</list></t>

<t>The payload differs depending on the role. However, the payload for all roles shares a common structure. It SHALL contain the following four attributes:</t>

<t><list style="symbols">
  <t>An indicator of the type of role (Root, Targets, Snapshot, or Timestamp)</t>
  <t>An expiration date and time</t>
  <t>An integer version number, which SHOULD be incremented each time the metadata file is updated</t>
  <t>The role-specific metadata for the role indicated</t>
</list></t>

<t>The following sections describe the role-specific metadata. All roles SHALL follow the common structures described here.</t>

</section>
<section anchor="root_meta" title="Root metadata">

<t>A repository’s Root metadata distributes the public keys of the top-level Root, Targets, Snapshot, and Timestamp roles, as well as revocations of those keys. It SHALL contain two attributes:</t>

<t><list style="symbols">
  <t>A representation of the public keys for all four roles. Each key SHALL have a unique public key identifier.</t>
  <t>An attribute mapping each role to (1) its public key(s), and (2) the threshold of signatures required for that role</t>
</list></t>

<t>Additionally, it MAY contain a mapping of roles to a list of valid URLs from which the role metadata can be downloaded.  If this mapping of URLs is used, the implementer SHOULD implement this functionality following <xref target="TAP-5"/> to avoid adding unforeseen security risks.</t>

</section>
<section anchor="targets_meta" title="Targets metadata">

<t>The Targets metadata on a repository contains all of the information about images to be installed on ECUs. This includes filenames, hashes, file sizes, and MAY also include other useful information about images, such as what types of hardware are compatible with a particular image.</t>

<t>Targets metadata can also contain metadata about delegations, allowing one Targets role to delegate its authority to another. This means that an individual Targets metadata file might contain only metadata about delegations, only metadata about images, or some combination of the two. The details of how ECUs traverse the delegation tree to find valid metadata about images is specified in <xref target="resolve_delegations"/>.</t>

<section anchor="targets_images_meta" title="Metadata about images">

<t>To be available to install on clients, all images on the repository MUST have their metadata listed in a Targets role.  Each Targets role MAY provide a list of some images on the repository.  This list MUST provide, at a minimum, the following information about each image:</t>

<t><list style="symbols">
  <t>The image filename</t>
  <t>The size of the image in bytes</t>
  <t>One or more hashes of the image file, along with the hashing function used</t>
</list></t>

<section anchor="custom-metadata-about-images" title="Custom metadata about images">

<t>In addition to the required metadata, Targets metadata files MAY contain extra metadata for images on the repository. This metadata can be customized for a particular use case. Examples of use cases for different types of custom metadata can be found in the Deployment Considerations document (<xref target="DEPLOY"/>). However, there are a few important pieces of custom metadata that SHOULD be present in most implementations. In addition, there is one element in the custom metadata that MUST be present in the Targets metadata from the Director.</t>

<t>Custom metadata MAY also contain a demarcated field or section that MUST match whenever two pieces of metadata are checked against each other, such as when Targets metadata from the Director repository is checked against Targets metadata from the Image repository.</t>

<t>The information listed below SHOULD be provided for each image on both the Image repository and the Director repository. If a “MUST match section” is to be implemented, that is where this information SHOULD be placed.</t>

<t><list style="symbols">
  <t>A release counter, to be incremented each time a new version of the image is released. This can be used to prevent rollback attacks even in cases where the Director repository is compromised.</t>
  <t>A hardware identifier, or list of hardware identifiers, representing models of ECUs with which the image is compatible. This can be used to ensure that an ECU cannot be ordered to install an incompatible image, even in cases where the Director repository is compromised.</t>
</list></t>

<t>The following information is CONDITIONALLY REQUIRED for each image on the Director repository IF that image is encrypted:</t>

<t><list style="symbols">
  <t>Information about filenames, hashes, and file size of the encrypted image.</t>
  <t>Information about the encryption method, and other relevant information–for example, a symmetric encryption key encrypted by the ECU’s asymmetric key could be included in the Director repository metadata.</t>
</list></t>

<t>The following information MUST be provided for each image in the Targets metadata from the Director repository:</t>

<t><list style="symbols">
  <t>An ECU identifier (such as a serial number), specifying the ECU that should install the image.</t>
</list></t>

<t>The Director repository MAY provide a download URL for the image file. This may be useful, for example, when the image is on a public CDN and the director wishes to provide a signed URL.</t>

</section>
</section>
<section anchor="delegations_meta" title="Metadata about delegations">

<t>A Targets metadata file on the Image repository (but not the Director repository) MUST be able to delegate signing authority to other entities. For example, it could delegate signing authority for a particular ECU’s firmware to that ECU’s supplier. A metadata file MAY contain any number of delegations and MUST keep the delegations in prioritized order.</t>

<t>A list of delegations MUST provide the following information:</t>

<t><list style="symbols">
  <t>A list of public keys of all delegatees. Each key should have a unique public key identifier and a key type.</t>
  <t>A list of delegations, each of which contains:
  <list style="symbols">
      <t>A list of the filenames to which this role applies. This MAY be expressed using wildcards, or by enumerating a list, or a combination of the two.</t>
      <t>An optional list of the hardware identifiers to which this role applies.  If this is omitted, any hardware identifier will match.</t>
      <t>An indicator of whether or not this is a terminating delegation. (See <xref target="targets_role_delegations"/>.)</t>
      <t>A list of the roles to which this delegation applies. Each role needs to specify:
      <list style="symbols">
          <t>A name for the role (e.g. “supplier1-qa”)</t>
          <t>The key identifiers for each key this role uses</t>
          <t>A threshold of keys that must sign for this role</t>
        </list></t>
    </list></t>
</list></t>

<t>Note that <spanx style="strong">any</spanx> Targets metadata file stored on the Image repository may contain delegations, and these delegations can be in chains of arbitrary length.</t>

</section>
</section>
<section anchor="snapshot_meta" title="Snapshot metadata">

<t>The Snapshot metadata lists version numbers and filenames of all Targets metadata files. It protects against mix-and-match attacks if a delegated supplier key is compromised.</t>

<t>For each Targets metadata file on the repository, the Snapshot metadata SHALL contain the following information:</t>

<t><list style="symbols">
  <t>The filename and version number of the each Targets metadata file on the repository</t>
</list></t>

<t>The Snapshot metadata MAY also list the Root metadata filename and version number. This is not required, particularly for implementations of <xref target="TAP-5"/>, but MAY be included in all cases for backward compatibility.</t>

</section>
<section anchor="timestamp_meta" title="Timestamp metadata">

<t>The Timestamp metadata SHALL contain the following information:</t>

<t><list style="symbols">
  <t>The filename and version number of the latest Snapshot metadata on the repository.</t>
  <t>One or more hashes of the Snapshot metadata file, along with the hashing function used.</t>
</list></t>

</section>
<section anchor="repo_mapping_meta" title="Repository mapping metadata">

<t>As described in the introduction to <xref target="design"/>, Uptane requires a Director repository and an Image repository. However, it is possible to have an Uptane-compliant implementation that has more than two repositories.</t>

<t>Repository mapping metadata informs a Primary ECU about which repositories to trust for images or image paths. <xref target="TAP-4"/> describes how to make use of more complex repository mapping metadata in order to have more than the two required repositories.</t>

<t>Repository mapping metadata, or the equivalent informational content, MUST be present on all Primary ECUs, and MUST contain the following information:</t>

<t><list style="symbols">
  <t>A list of repository names and one or more URLs at which the named repository can be accessed. At a minimum, this MUST include the Director and Image repositories.</t>
  <t>A list of mappings of image paths to repositories, each of which contains:
  <list style="symbols">
      <t>A list of image paths. Image paths MAY be expressed using wildcards, or by enumerating a list, or a combination of the two.</t>
      <t>A list of repositories that MUST sign the Targets metadata for the image paths.</t>
    </list></t>
</list></t>

<t>For example, in the most basic Uptane case, the repository mapping metadata would contain:</t>

<t><list style="symbols">
  <t>The name and URL of the Director repository</t>
  <t>The name and URL of the Image repository</t>
  <t>A single mapping indicating that all images (<spanx style="verb">*</spanx>) MUST be signed by both the Director and Image repository</t>
</list></t>

<t>Note that the metadata need not be in the form of a metadata file. For example, in the basic case where there is only one Director and one Image repository, and all images need to have signed metadata from both repositories, it would be sufficient to have a configuration file with URLs for the two repositories, and a client that always checks for metadata matches between them. In this case, no explicit mapping would be defined, because the mapping is defined as part of the Uptane client implementation.</t>

<t>The <spanx style="emph">Uptane Deployment Considerations</spanx> document (<xref target="DEPLOY"/>) gives more guidance on how to implement repository mapping metadata for more complex use cases. It also discusses strategies for updating repository mapping metadata, if required.</t>

</section>
<section anchor="metadata_filename_rules" title="Rules for filenames in repositories and metadata">

<t>There is a difference between the file name in a metadata file or an ECU, and the file name on a repository. This difference exists in order to avoid race conditions, where metadata and images are read from, and written to, at the same time. For more details, the reader should read the TUF specification <xref target="TUF-spec"/> and PEP 458 <xref target="PEP-458"/>.</t>

<t>Unless stated otherwise, all files SHALL be written to repositories in accordance with the following two rules:</t>

<t><list style="numbers">
  <t>Metadata filenames SHALL be qualified with version numbers. If a metadata file A is specified as FILENAME.EXT in another metadata file B, then it SHALL be written as VERSION.FILENAME.EXT, where VERSION is A’s version number, as defined in <xref target="common_metadata"/>, with one exception: If the version number of the Timestamp metadata file might not be known in advance by a client, it MAY be read from, and written to, a repository using a filename without a version number qualification, i.e. FILENAME.EXT.</t>
  <t>If an image is specified in a Targets metadata file as FILENAME.EXT, it SHALL be written to the repository as HASH.FILENAME.EXT, where HASH is one of the hash digests of the file, as specified in <xref target="targets_images_meta"/>. The file MUST be written to the repository using <spanx style="emph">n</spanx> different filenames, one for each hash digest listed in its corresponding Targets metadata.</t>
</list></t>

<t>For example:</t>

<t><list style="symbols">
  <t>The version number of the Snapshot metadata file is 61, and its filename in the Timestamp metadata is “snapshot.json”. The filename on the repository will be “61.snapshot.json”.</t>
  <t>There is an image with the filename “acme_firmware.bin” specified in the Targets metadata, with a SHA256 of “aaaa” and a SHA512-256 of “bbbb”. It will have two filenames on the repository: “aaaa.acme_firmware.bin” and “bbbb.acme_firmware.bin”.</t>
</list></t>

</section>
</section>
<section anchor="server-repository-implementation-requirements" title="Server / repository implementation requirements">

<t>An Uptane implementation SHALL make the following services available to vehicles:</t>

<t><list style="symbols">
  <t>Image repository</t>
  <t>Director repository</t>
</list></t>

<t>Additionally, an Uptane implementation requires ECUs to have a secure way to know the current time.</t>

<section anchor="image-repository" title="Image repository">

<t>The Image repository exists to allow an OEM and/or its suppliers to upload images and their associated metadata. It makes these images and their metadata available to vehicles. The Image repository is designed to be primarily controlled by human actors, and updated relatively infrequently.</t>

<t>The Image repository SHALL expose an interface permitting the download of metadata and images. This interface SHOULD be public.</t>

<t>The Image repository SHALL require authorization for writing metadata and images.</t>

<t>The Image repository SHALL provide a method for authorized users to upload images and their associated metadata. It SHALL check that a user writing metadata and images is authorized to do so for that specific image by checking the chain of delegations as described in <xref target="delegations_meta"/>.</t>

<t>The Image repository SHALL implement storage which permits authorized users to write an image file using a unique filename, and later read the same file using the same name. It MAY use any filesystem, key-value store, or database that fulfills this requirement.</t>

<t>The Image repository MAY require authentication for read access.</t>

</section>
<section anchor="director_repository" title="Director repository">

<t>The Director repository instructs ECUs as to which images should be installed by producing signed metadata on demand. Unlike the Image repository, it is mostly controlled by automated, online processes. It also consults a private inventory database containing information on vehicles, ECUs, and software revisions.</t>

<t>The Director repository SHALL expose an interface for primaries to upload vehicle version manifests (<xref target="vehicle_version_manifest"/>) and download metadata. This interface SHOULD be public.
The Director MAY encrypt images for ECUs that require them, either by encrypting on-the-fly or by storing encrypted images in the repository.</t>

<t>The Director repository SHALL implement storage which permits an automated service to write generated metadata files. It MAY use any filesystem, key-value store, or database that fulfills this requirement.</t>

<section anchor="directing-installation-of-images-on-vehicles" title="Directing installation of images on vehicles">

<t>A Director repository MUST conform to the following six-step process for directing the installation of software images on a vehicle.</t>

<t><list style="numbers">
  <t>The Director SHOULD first identify the vehicle. This MAY be done when the Director receives a vehicle version manifest sent by a Primary (as described in <xref target="construct_manifest_primary"/>), decodes the manifest, and determines the unique vehicle identifier. Additionally, the Director MAY utilize other mechanisms to uniquely identify a vehicle (e.g., 2-way TLS with unique client certificates).</t>
  <t>Using the vehicle identifier, the Director queries its inventory database (as described in <xref target="inventory_db"/>) for relevant information about each ECU in the vehicle.</t>
  <t>The Director SHALL check the manifest for accuracy compared to the information in the inventory database. If any of the required checks fail, the Director MAY drop the request. An implementer MAY make additional checks if desired. At a minimum, the Director SHALL check the following:
  <list style="symbols">
      <t>Each ECU recorded in the inventory database is also represented in the manifest.</t>
      <t>The signature of the manifest matches the ECU key of the Primary that sent it.</t>
      <t>The signature of each Secondary’s contribution to the manifest matches the ECU key of that Secondary.</t>
    </list></t>
  <t>The Director SHOULD check that the nonce or counter in each ECU Version Report has not been used before to prevent a replay of the ECU Version Report. If the nonce or counter is reused the Director SHOULD drop the request.</t>
  <t>The Director extracts information about currently installed images from the vehicle version manifest. Using this information, it determines if the vehicle is already up-to-date, and if not, determines a set of images that should be installed. The exact process by which this determination takes place is out of scope of this standard. However, the Director MUST take into account <spanx style="emph">dependencies</spanx> and <spanx style="emph">conflicts</spanx> between images and SHOULD consult well-established techniques for dependency resolution.</t>
  <t>The Director MAY encrypt images for ECUs that require it.</t>
  <t>The Director generates new metadata representing the desired set of images to be installed on the vehicle, based on the dependency resolution in step 4. This includes Targets (<xref target="targets_meta"/>), Snapshot (<xref target="snapshot_meta"/>), and Timestamp (<xref target="timestamp_meta"/>) metadata. It then sends this metadata to the Primary as described in <xref target="download_meta_primary"/>.</t>
</list></t>

</section>
<section anchor="inventory_db" title="Inventory Database">

<t>The Director SHALL use a private inventory database to store information about ECUs and vehicles. An implementor MAY use any durable database for this purpose.</t>

<t>The inventory database MUST record the following pieces of information:</t>

<t><list style="symbols">
  <t>Per vehicle:
  <list style="symbols">
      <t>A unique identifier (such as a VIN)</t>
    </list></t>
  <t>Per ECU:
  <list style="symbols">
      <t>A unique identifier (such as a serial number)</t>
      <t>The vehicle identifier the ECU is associated with</t>
      <t>An ECU key (symmetric or asymmetric; for asymmetric keys, only the public part SHOULD be stored)</t>
      <t>The ECU key identifier (as defined in <xref target="common_metadata"/>)</t>
      <t>Whether the ECU is a Primary or a Secondary</t>
    </list></t>
</list></t>

<t>The inventory database MAY record other information about ECUs and vehicles. It SHOULD record a hardware identifier for each ECU to protect against the possibility of directing the ECU to install incompatible firmware.</t>

</section>
</section>
</section>
<section anchor="in-vehicle-implementation-requirements" title="In-vehicle implementation requirements">

<t>An Uptane-compliant ECU SHALL be able to download and verify Image metadata and image binaries before installing a new image and MUST have a secure way of verifying the current time, or a sufficiently recent attestation of the time.</t>

<t>Each ECU in a vehicle receiving over-the-air updates is either a Primary or a Secondary ECU. A Primary ECU collects and delivers vehicle manifests to the Director (<xref target="vehicle_version_manifest"/>) that contain information about which images have been installed on ECUs in the vehicle. It also verifies the time and downloads and verifies the latest metadata and images for itself and for its secondaries. A Secondary ECU verifies the time, and downloads and verifies the latest metadata and images for itself from its associated Primary ECU. It also sends signed information about its installed images to its associated Primary.</t>

<t>All ECUs MUST verify image metadata as specified in <xref target="metadata_verification"/> before installing an image or making it available to other ECUs. A Primary ECU MUST perform full verification (<xref target="full_verification"/>). A Secondary ECU SHOULD perform full verification if possible. If a Secondary cannot perform full verification, it SHALL perform partial verification. See the Uptane Deployment Considerations (<xref target="DEPLOY"/>) for a discussion of how to choose between partial and full verification.</t>

<t>ECUs MUST have a secure source of time. An OEM/Uptane implementor MAY use any external source of time that is demonstrably secure. The Uptane Deployment Considerations (<xref target="DEPLOY"/>) describe one way to implement an external time server to cryptographically attest time, as well as the security properties required. When “loading time” is referenced in procedures in this standard, it should be understood to mean loading into memory the current time (if the ECU has its own secure clock), or the most recent attested time.</t>

<section anchor="build-time-prerequisite-requirements-for-ecus" title="Build-time prerequisite requirements for ECUs">

<t>For an ECU to be capable of receiving Uptane-secured updates, it MUST have the following data provisioned at the time it is manufactured or installed in the vehicle:</t>

<t><list style="numbers">
  <t>A sufficiently recent copy of required Uptane metadata at the time of manufacture or install. This is necessary for the ECU to authenticate that the remote repository is legitmate when it first downloads metadata in the field. See the Uptane Deployment Considerations (<xref target="DEPLOY"/>) for more information.
  <list style="symbols">
      <t>Partial verification Secondary ECUs MUST have the Root and Targets metadata from the Director repository (to reduce the scope of rollback and replay attacks). These ECUs MAY also have metadata from other roles or the Image repository if they will be used by the Secondary.</t>
      <t>Full verification ECUs MUST have a complete set of metadata (Root, Targets, Snapshot, and Timestamp) from both repositories (to prevent rollback and replay attacks), as well as the repository mapping metadata (<xref target="repo_mapping_meta"/>). Delegations are not required.</t>
    </list></t>
  <t>The current time, or a secure attestation of a sufficiently recent time.</t>
  <t>An <spanx style="strong">ECU key</spanx>. This is a private key, unique to the ECU, used to sign ECU version manifests and decrypt images. An ECU key MAY be either a symmetric key or an asymmetric key. If it is an asymmetric key, there MAY be separate keys for encryption and signing. For the purposes of this standard, the set of private keys that an ECU uses is referred to as the ECU key (singular), even if it is actually multiple keys used for different purposes.</t>
</list></t>

</section>
<section anchor="what-the-primary-does" title="What the Primary does">

<t>A Primary downloads, verifies, and distributes the latest time, metadata and images. To do so, it SHALL perform the following seven steps:</t>

<t><list style="numbers">
  <t>Construct and send vehicle version manifest (<xref target="construct_manifest_primary"/>)</t>
  <t>Download and check current time (<xref target="check_time_primary"/>)</t>
  <t>Download and verify metadata (<xref target="download_meta_primary"/>)</t>
  <t>Download and verify images (<xref target="download_images_primary"/>)</t>
  <t>OPTIONAL: Send latest time to secondaries (<xref target="send_time_primary"/>)</t>
  <t>Send metadata to Secondaries (<xref target="send_metadata_primary"/>)</t>
  <t>Send images to Secondaries (<xref target="send_images_primary"/>)</t>
</list></t>

<t>Note that the subsequent sections concerning requirements for a Primary do not prohibit implementing Primary capabilities on an ECU that does not communicate directly with the Uptane repositories. This allows for implementations to have multiple ECUs within the vehicle performing functions equivalent to a Primary.
If multiple such Primaries are included within a vehicle, each Secondary ECU SHALL have a single Primary responsible for providing its updates.</t>

<section anchor="construct_manifest_primary" title="Construct and send vehicle version manifest">

<t>The Primary SHALL build a <spanx style="emph">vehicle version manifest</spanx> as described in <xref target="vehicle_version_manifest"/>.</t>

<t>Once the complete manifest is built, the Primary MAY send the manifest to the Director repository. However, it is not strictly required that the Primary send the manifest until step three. If permitted by the implementation, a Primary MAY send only a diff of the manifest to save bandwidth. If an implementation permits diffs, the Director SHOULD have a way to request a full manifest.</t>

<t>Secondaries MAY send their version report at any time so that it is already stored on the Primary when it wishes to check for updates. Alternatively, the Primary MAY request a version report from each Secondary at the time of the update check.</t>

<section anchor="vehicle_version_manifest" title="Vehicle version manifest">

<t>The vehicle version manifest is a metadata structure that MUST contain the following information:</t>

<t><list style="symbols">
  <t>An attribute containing the signature(s) of the payload, each specified by:
  <list style="symbols">
      <t>The public key identifier of the key being used to sign the payload</t>
      <t>The signing method (e.g. ed25519, rsassa-pss, etc.)</t>
      <t>A hash of the payload to be signed</t>
      <t>The hashing function used (e.g. sha256, sha512-224, etc.)</t>
      <t>The signature of the hash</t>
    </list></t>
  <t>A payload representing the installed versions of each software image on the vehicle. This payload SHALL contain:
  <list style="symbols">
      <t>The vehicle’s unique identifier (e.g. the VIN)</t>
      <t>The Primary ECU’s unique identifier (e.g. the serial number)</t>
      <t>A list of ECU version reports as specified in <xref target="version_report"/></t>
    </list></t>
</list></t>

<t>Note that one of the ECU version reports should be the version report for the Primary itself.</t>

</section>
<section anchor="version_report" title="ECU version report">

<t>An ECU version report is a metadata structure that MUST contain the following information:</t>

<t><list style="symbols">
  <t>An attribute containing the signature(s) of the payload, each specified by:
  <list style="symbols">
      <t>The public key identifier of the key being used to sign the payload</t>
      <t>The signing method (e.g. ed25519, rsassa-pss, etc.)</t>
      <t>A hash of the payload to be signed</t>
      <t>The hashing function used (e.g. sha256, sha512-224, etc.)</t>
      <t>The signature of the hash</t>
    </list></t>
  <t>A payload containing:
  <list style="symbols">
      <t>The ECU’s unique identifier (e.g. the serial number)</t>
      <t>The filename, length, and hashes of its currently installed image (i.e. the non-custom Targets metadata for this particular image)</t>
      <t>An indicator of any detected security attack</t>
      <t>The latest time the ECU can verify at the time this version report was generated</t>
      <t>A nonce or counter to prevent a replay of the ECU version report. This value MUST change each update cycle and MAY be the cryptographic nonce used with a Time Server.</t>
    </list></t>
</list></t>

</section>
</section>
<section anchor="check_time_primary" title="Download and check current time">

<t>The Primary SHALL load the current time from a secure source.</t>

</section>
<section anchor="download_meta_primary" title="Download and verify metadata">

<t>The Primary SHALL download metadata for all targets and perform a full verification on it as specified in <xref target="full_verification"/>.</t>

</section>
<section anchor="download_images_primary" title="Download and verify images">

<t>The Primary SHALL download and verify images for itself and for all of its associated Secondaries. Images SHALL be verified by checking that the hash of the image file matches the hash specified in the Director’s Targets metadata for that image.</t>

<t>There may be several different filenames that all refer to the same image binary, as described in <xref target="metadata_filename_rules"/>. If the primary has received multiple hashes for a given image binary via the Targets role (see <xref target="targets_images_meta"/>) then it SHALL verify every hash for this image despite that the image is identified by a single hash as part of its filename.</t>

</section>
<section anchor="send_time_primary" title="Send latest time to Secondaries">

<t>Unless the Secondary ECU has its own way of verifying the time or does not have the capacity to verify a time message, the Primary is CONDITIONALLY REQUIRED to send the time to each ECU. The Secondary will verify the time message, then overwrite its current time with the received time.</t>

</section>
<section anchor="send_metadata_primary" title="Send metadata to Secondaries">

<t>The Primary SHALL send its latest downloaded metadata to all of its associated Secondaries. The metadata it sends to each Secondary MUST include all of the metadata required for verification on that Secondary. For full verification Secondaries, this includes the metadata for all four roles from both repositories, plus any delegated Targets metadata files the Secondary will recurse through to find the proper delegation. For partial verification Secondaries, this includes only the Targets metadata file from the Director repository.</t>

<t>The Primary SHOULD determine the minimal set of metadata files to send to each Secondary by performing delegation resolution as described in <xref target="full_verification"/>.</t>

<t>Each Secondary SHALL store the latest copy of all metadata required for its own verification.</t>

</section>
<section anchor="send_images_primary" title="Send images to Secondaries">

<t>The Primary SHALL send the latest image to each of its associated Secondaries that have storage to receive it.</t>

<t>For Secondaries without storage, the Primary SHOULD wait for a request from the Secondary to stream the new image file to it. The Secondary will send the request once it has verified the metadata sent in the previous step.</t>

</section>
</section>
<section anchor="installing-images-on-primary-or-secondary-ecus" title="Installing images on Primary or Secondary ECUs">

<t>An ECU SHALL perform the following steps when attempting to install a new image:</t>

<t><list style="numbers">
  <t>Verify latest attested time (<xref target="verify_time"/>)</t>
  <t>Verify metadata (<xref target="verify_metadata"/>)</t>
  <t>Download latest image (<xref target="download_image"/>)</t>
  <t>Verify image (<xref target="verify_image"/>)</t>
  <t>Install image (<xref target="install_image"/>)</t>
  <t>Create and send version report (<xref target="create_version_report"/>)</t>
</list></t>

<section anchor="verify_time" title="Load and verify the latest attested time">

<t>The ECU SHALL load and verify the current time, or the most recent securely attested time.</t>

</section>
<section anchor="verify_metadata" title="Verify metadata">

<t>The ECU SHALL verify the latest downloaded metadata (<xref target="metadata_verification"/>) using either full or partial verification. If the metadata verification fails for any reason, the ECU SHALL jump to the final step (<xref target="create_version_report"/>).</t>

</section>
<section anchor="download_image" title="Download latest image">

<t>If the ECU does not have secondary storage, i.e. buffer storage to temporarily store the latest image before installing it, it SHALL download the latest image from the Primary. (If the ECU has secondary storage, it will already have the latest image in its secondary storage as specified in <xref target="send_images_primary"/>, and should skip to the next step.) The ECU MAY first create a backup of its previous working image and store it elsewhere (e.g., the primary).</t>

<t>The filename used to identify the latest known image (i.e., the file to request from the Primary) SHALL be determined as follows:</t>

<t><list style="numbers">
  <t>Load the Targets metadata file from the Director repository.</t>
  <t>Find the Targets metadata associated with this ECU identifier.</t>
  <t>Construct the Image filename using the rule in <xref target="metadata_filename_rules"/>, or use the download URL specified in the Director metadata.</t>
  <t>If there is no Targets metadata about this image, abort the update cycle and report that there is no such image. Additionally, in the case of failure, the ECU SHALL retain its previous Targets metadata instead of using the new Targets metadata. Otherwise, download the image (up to the number of bytes specified in the Targets metadata) and verify it according to <xref target="verify_image"/>.</t>
</list></t>

<t>When the Primary responds to the download request, the ECU SHALL overwrite its current image with the downloaded image from the Primary.</t>

<t>If any part of this step fails, the ECU SHALL jump to the final step (<xref target="create_version_report"/>).</t>

</section>
<section anchor="verify_image" title="Verify image">

<t>The ECU SHALL verify that the latest image matches the latest metadata as follows:</t>

<t><list style="numbers">
  <t>Load the latest Targets metadata file from the Director.</t>
  <t>Find the Targets metadata associated with this ECU identifier.</t>
  <t>Check that the hardware identifier in the metadata matches the ECUs hardware identifier.</t>
  <t>Check that the image filename is valid for this ECU. This MAY be a comparison against a wildcard path, which restricts the ECUs to which a delegation will apply.</t>
  <t>Check that the release counter of the image in the previous metadata, if it exists, is less than or equal to the release counter in the latest metadata.</t>
  <t>If the image is encrypted, decrypt the image with a decryption key to be chosen as follows:
  <list style="symbols">
      <t>If the ECU key is a symmetric key, the ECU SHALL use the ECU key for image decryption.</t>
      <t>If the ECU key is asymmetric, the ECU SHALL check the Targets metadata for an encrypted symmetric key. If such a key is found, the ECU SHALL decrypt the symmetric key using its ECU key, and use the decrypted symmetric key for image decryption.</t>
      <t>If the ECU key is asymmetric and there is no symmetric key in the target metadata, the ECU SHALL use its ECU key for image decryption.</t>
    </list></t>
  <t>Check that all hashes listed in the metadata match the corresponding hashes of the image.</t>
</list></t>

<t>If the ECU has secondary storage, the checks SHOULD be performed on the image in secondary storage before it is installed.</t>

<t>NOTE: See <xref target="DEPLOY"/> for guidance on how to deal with Secondary ECU failures for ECUs that do not have secondary storage.</t>

<t>If any step fails, the ECU SHALL jump to the (<xref target="create_version_report"/>) step.</t>

</section>
<section anchor="install_image" title="Install image">

<t>The ECU SHALL attempt to install the update. This installation SHOULD occur at a time when all pre-conditions are met. These pre-conditions MAY include ensuring the vehicle is in a safe environment for install (e.g., the vehicle is parked when updating a specific ECU). Another pre-condition MAY include ensuring the ECU has a backup of its current image and metadata in case the current installation fails.</t>

</section>
<section anchor="create_version_report" title="Create and send version report">

<t>The ECU SHALL create a version report as described in <xref target="version_report"/>, and send it to the Primary (or simply save it to disk, if the ECU is a Primary). The Primary SHOULD write the version reports it receives to disk and associate them with the Secondaries that sent them.</t>

</section>
</section>
<section anchor="metadata_verification" title="Metadata verification procedures">

<t>A Primary ECU MUST perform full verification of metadata. A Secondary ECU SHOULD perform full verification of metadata. If a Secondary cannot perform full verification, it SHALL perform partial verification instead.</t>

<t>If a step in the following workflows does not succeed (e.g., the update is aborted because a new metadata file was not signed), an ECU SHOULD still be able to update again in the future. Errors raised during the update process SHOULD NOT leave ECUs in an unrecoverable state.</t>

<section anchor="partial_verification" title="Partial verification">

<t>In order to perform partial verification, an ECU SHALL perform the following steps:</t>

<t><list style="numbers">
  <t>Load and verify the current time or the most recent securely attested time.</t>
  <t>Download and check the Targets metadata file from the Director repository, following the procedure in <xref target="check_targets"/>.</t>
</list></t>

</section>
<section anchor="full_verification" title="Full verification">

<t>Full verification of metadata means that the ECU checks that the Targets metadata about images from the Director repository matches the Targets metadata about the same images from the Image repository. This provides resilience to a key compromise in the system.</t>

<t>Full verification MAY be performed by either Primary or Secondary ECUs. In the following instructions, whenever an ECU is directed to download metadata, it applies only to Primary ECUs.</t>

<t>If <xref target="TAP-5"/> is supported and a Primary has an external connection to the Uptane repositories, a Primary ECU SHALL download metadata and images following the rules specified in that TAP.  If <xref target="TAP-5"/> is not supported, or if the Primary does not have an external connection to the Uptane repositories, the download SHOULD follow the <xref target="TUF-spec"/> and the metadata file renaming rules specified in <xref target="metadata_filename_rules"/>.</t>

<t>Before starting full verification, the repository mapping metadata MUST be consulted to determine where to download metadata from. This procedure assumes the basic Uptane case: there are only two repositories (Director and Image), and all image paths are required to be signed by both repositories. If a more complex repository layout is being used, refer to <xref target="DEPLOY"/> for guidance on how to determine where metadata should be downloaded from.</t>

<t>In order to perform full verification, an ECU SHALL perform the following steps:</t>

<t><list style="numbers">
  <t>Load and verify the current time or the most recent securely attested time.</t>
  <t>Download and check the Root metadata file from the Director repository, following the procedure in <xref target="check_root"/>.</t>
  <t>Download and check the Timestamp metadata file from the Director repository, following the procedure in <xref target="check_timestamp"/>.</t>
  <t>Check the previously downloaded Snapshot metadata file from the Directory repository (if available). If the hashes and version number of that file match the hashes and version number listed in the new Timestamp metadata, there are no new updates and the verification process MAY be stopped and considered complete. Otherwise, download and check the Snapshot metadata file from the Director repository, following the procedure in <xref target="check_snapshot"/>.</t>
  <t>Download and check the Targets metadata file from the Director repository, following the procedure in <xref target="check_targets"/>.</t>
  <t>If the Targets metadata from the Directory repository indicates that there are no new targets that are not already currently installed, the verification process MAY be stopped and considered complete. Otherwise, download and check the Root metadata file from the Image repository, following the procedure in <xref target="check_root"/>.</t>
  <t>Download and check the Timestamp metadata file from the Image repository, following the procedure in <xref target="check_timestamp"/>.</t>
  <t>Check the previously downloaded Snapshot metadata file from the Image repository (if available). If the hashes and version number of that file match the hashes and version number listed in the new Timestamp metadata, the ECU MAY skip to the last step. Otherwise, download and check the Snapshot metadata file from the Image repository, following the procedure in <xref target="check_snapshot"/>.</t>
  <t>Download and check the top-level Targets metadata file from the Image repository, following the procedure in <xref target="check_targets"/>.</t>
  <t>Verify that Targets metadata from the Director and Image repositories match. A Primary ECU MUST perform this check on metadata for all images listed in the Targets metadata file from the Director repository downloaded in step 6. A Secondary ECU MAY elect to perform this check only on the metadata for the image it will install. (That is, the target metadata from the Director that contains the ECU identifier of the current ECU.) To check that the metadata for an image matches, complete the following procedure:
  <list style="numbers">
      <t>Locate and download a Targets metadata file from the Image repository that contains an image with exactly the same file name listed in the Director metadata, following the procedure in <xref target="resolve_delegations"/>.</t>
      <t>Check that the Targets metadata from the Image repository matches the Targets metadata from the Director repository:
      <list style="numbers">
          <t>Check that the non-custom metadata (i.e., length and hashes) of the unencrypted or encrypted image are the same in both sets of metadata. Note: the Primary is responsible for validating encrypted images and associated metadata. The target ECU (Primary or Secondary) is responsible for validating the unencrypted image and associated metadata.</t>
          <t>Check that all “MUST match” custom metadata (e.g., hardware identifier and release counter) are the same in both sets of metadata.</t>
          <t>Check that the release counter in the previous Targets metadata file is less than or equal to the release counter in this Targets metadata file.</t>
        </list></t>
    </list></t>
</list></t>

<t>If any step fails, the ECU MUST return an error code indicating the failure. If a check for a specific type of security attack fails (e.g. rollback, freeze, arbitrary software, etc.), the ECU SHOULD return an error code that indicates the type of attack.</t>

</section>
<section anchor="check_root" title="How to check Root metadata">

<t>To properly check Root metadata, an ECU SHOULD:</t>

<t><list style="numbers">
  <t>Load the previous Root metadata file.</t>
  <t>Update to the latest Root metadata file.
  <list style="numbers">
      <t>Let N denote the version number of the latest Root metadata file (which at first could be the same as the previous Root metadata file).</t>
      <t>Try downloading a new version N+1 of the Root metadata file, up to some X number of bytes. The value for X is set by the implementor. For example, X may be tens of kilobytes. The filename used to download the Root metadata file is of the fixed form VERSION_NUMBER.FILENAME.EXT (e.g., 42.root.json). If this file is not available, the current Root metadata file is the latest; continue with step 3.</t>
      <t>Version N+1 of the Root metadata file MUST have been signed by the following: (1) a threshold of keys specified in the latest Root metadata file (version N), and (2) a threshold of keys specified in the new Root metadata file being validated (version N+1). If version N+1 is not signed as required, discard it, abort the update cycle, and report the signature failure. On the next update cycle, begin at version N of the Root metadata file. (Checks for an arbitrary software attack.)</t>
      <t>The version number of the latest Root metadata file (version N) must be less than or equal to the version number of the new Root metadata file (version N+1). Effectively, this means checking that the version number signed in the new Root metadata file is indeed N+1. If the version of the new Root metadata file is less than the latest metadata file, discard it, abort the update cycle, and report the rollback attack. On the next update cycle, begin at step 1 and version N of the Root metadata file. (Checks for a rollback attack.)</t>
      <t>Set the latest Root metadata file to the new Root metadata file.</t>
      <t>Repeat steps 2.1 to 2.6.</t>
    </list></t>
  <t>Check that the current (or latest securely attested) time is lower than the expiration timestamp in the latest Root metadata file. (Checks for a freeze attack.)</t>
  <t>If the Timestamp and/or Snapshot keys have been rotated, delete the previous Timestamp and Snapshot metadata files. (Checks for recovery from fast-forward attacks <xref target="MERCURY"/>.)</t>
</list></t>

</section>
<section anchor="check_timestamp" title="How to check Timestamp metadata">

<t>To properly check Timestamp metadata, an ECU SHOULD:</t>

<t><list style="numbers">
  <t>Download up to Y number of bytes. The value for Y is set by the implementor. For example, Y may be tens of kilobytes. The filename used to download the Timestamp metadata file is of the fixed form FILENAME.EXT (e.g., timestamp.json).</t>
  <t>Check that it has been signed by the threshold of keys specified in the latest Root metadata file. If the new Timestamp metadata file is not properly signed, discard it, abort the update cycle, and report the signature failure. (Checks for an arbitrary software attack.)</t>
  <t>Check that the version number of the previous Timestamp metadata file, if any, is less than or equal to the version number of this Timestamp metadata file. If the new Timestamp metadata file is older than the trusted Timestamp metadata file, discard it, abort the update cycle, and report the potential rollback attack. (Checks for a rollback attack.)</t>
  <t>Check that the current (or latest securely attested) time is lower than the expiration timestamp in this Timestamp metadata file. If the new Timestamp metadata file has expired, discard it, abort the update cycle, and report the potential freeze attack. (Checks for a freeze attack.)</t>
</list></t>

</section>
<section anchor="check_snapshot" title="How to check Snapshot metadata">

<t>To properly check Snapshot metadata, an ECU SHOULD:</t>

<t><list style="numbers">
  <t>Download up to the number of bytes specified in the Timestamp metadata file, constructing the metadata filename as defined in <xref target="metadata_filename_rules"/>.</t>
  <t>The hashes and version number of the new Snapshot metadata file MUST match the hashes and version number listed in Timestamp metadata. If the hashes and version number do not match, discard the new Snapshot metadata, abort the update cycle, and report the failure. (Checks for a mix-and-match attack.)</t>
  <t>Check that it has been signed by the threshold of keys specified in the latest Root metadata file. If the new Snapshot metadata file is not signed as required, discard it, abort the update cycle, and report the signature failure. (Checks for an arbitrary software attack.)</t>
  <t>Check that the version number of the previous Snapshot metadata file, if any, is less than or equal to the version number of this Snapshot metadata file. If this Snapshot metadata file is older than the previous Snapshot metadata file, discard it, abort the update cycle, and report the potential rollback attack. (Checks for a rollback attack.)</t>
  <t>Check that the version number listed by the previous Snapshot metadata file for each Targets metadata file is less than or equal to its version number in this Snapshot metadata file. If this condition is not met, discard the new Snapshot metadata file, abort the update cycle, and report the failure. (Checks for a rollback attack.)</t>
  <t>Check that each Targets metadata filename listed in the previous Snapshot metadata file is also listed in this Snapshot metadata file. If this condition is not met, discard the new Snapshot metadata file, abort the update cycle, and report the failure. (Checks for a rollback attack.)</t>
  <t>Check that the current (or latest securely attested) time is lower than the expiration timestamp in this Snapshot metadata file. If the new Snapshot metadata file is expired, discard it, abort the update cycle, and report the potential freeze attack. (Checks for a freeze attack.)</t>
</list></t>

</section>
<section anchor="check_targets" title="How to check Targets metadata">

<t>To properly check Targets metadata, an ECU SHOULD:</t>

<t><list style="numbers">
  <t>Download up to Z number of bytes, constructing the metadata filename as defined in <xref target="metadata_filename_rules"/>. The value for Z is set by the implementor. For example, Z may be tens of kilobytes.</t>
  <t>The version number of the new Targets metadata file MUST match the version number listed in the latest Snapshot metadata. If the version number does not match, discard it, abort the update cycle, and report the failure. (Checks for a mix-and-match attack.) Skip this step if checking Targets metadata on a partial verification ECU; partial verification ECUs will not have Snapshot metadata.</t>
  <t>Check that the Targets metadata has been signed by the threshold of keys specified in the relevant metadata file (Checks for an arbitrary software attack):
  <list style="numbers">
      <t>If checking top-level Targets metadata, the threshold of keys is specified in the Root metadata.</t>
      <t>If checking delegated Targets metadata, the threshold of keys is specified in the Targets metadata file that delegated authority to this role.</t>
    </list></t>
  <t>Check that the version number of the previous Targets metadata file, if any, is less than or equal to the version number of this Targets metadata file. (Checks for a rollback attack.)</t>
  <t>Check that the current (or latest securely attested) time is lower than the expiration timestamp in this Targets metadata file. (Checks for a freeze attack.)</t>
  <t>If checking Targets metadata from the Director repository, verify that there are no delegations.</t>
  <t>If checking Targets metadata from the Director repository, check that no ECU identifier is represented more than once.</t>
  <t>If checking Targets metadata from the Director repository, and the ECU performing the verification is the Primary ECU, check that all listed ECU identifiers correspond to ECUs that are actually present in the vehicle.</t>
</list></t>

</section>
<section anchor="resolve_delegations" title="How to resolve delegations">

<t>To properly check Targets metadata for an image, an ECU MUST locate the metadata file(s) for the role (or roles) that have the authority to sign the image. This metadata might be located in the top-level Targets metadata, but it also may be delegated to another role or to multiple roles. Therefore, all delegations MUST be resolved using the following recursive procedure, beginning with the top-level Targets metadata file.</t>

<t><list style="numbers">
  <t>Download the current metadata file, and check it following the procedure in <xref target="check_targets"/>. If the file cannot be loaded, or if any verification step fails, abort the delegation resolution, and indicate that Image metadata cannot be found because of a missing or invalid role.</t>
  <t>If the current metadata file contains signed metadata about the image, end the delegation resolution and return the metadata to be checked.</t>
  <t>If the current metadata file was reached via a terminating delegation and does not contain signed metadata about the image, abort the delegation resolution for this image and return an error indicating that image metadata could not be found.</t>
  <t>Search the list of delegations, in listed order. For each delegation:
  <list style="numbers">
      <t>Check if the delegation applies to the image being processed. For the delegation to apply, it MUST include the hardware identifier of the target, and the target name must match one of the delegation’s image paths. If either of these tests fail, move on to the next delegation in the list.</t>
      <t>If the delegation is a multi-role delegation, follow the procedure described in <xref target="multirole_delegations"/>. If the multi-role delegation is terminating and no valid Image metadata is found, abort the delegation resolution and return an error indicating that image metadata could not be found.</t>
      <t>If the delegation is a normal delegation, perform delegation resolution, starting at step 1. Note that this may recurse an arbitrary number of levels deep. If a delegation that applies to the image is found but no image metadata is found in the delegated roles or any of its sub-delegations, simply continue on with the next delegation in the list. The search is only completed/aborted if image metadata or a terminating delegation that applies to the image is found.</t>
    </list></t>
  <t>If the end of the list of delegations in the top-level metadata is reached without finding valid image metadata, return an error indicating that image metadata could not be found.</t>
</list></t>

</section>
<section anchor="multirole_delegations" title="Multi-role delegations">

<t>It is possible to delegate signing authority to multiple delegated roles as described in <xref target="TAP-3"/>. Each multi-role delegation effectively contains a list of ordinary delegations, plus a threshold of those roles that must be in agreement about the non-custom metadata for the image. All multi-role delegations MUST be resolved using the following procedure. Note that there may be sub-delegations inside multi-role delegations.</t>

<t><list style="numbers">
  <t>For each of the roles in the delegation, find and load the image metadata (or error) following the procedure in <xref target="resolve_delegations"/>.</t>
  <t>Inspect the non-custom part of the metadata loaded in step 1:
  <list style="numbers">
      <t>Locate all sets of roles which have agreeing (i.e. identical) non-custom metadata and “MUST match” custom metadata. Discard any set of roles with a size smaller than the threshold of roles that must be in agreement for this delegation.</t>
      <t>Check for a conflict. A conflict exists if there remains more than one agreeing set of roles, each set having different metadata. If a conflict is found, choose and return the metadata from the set of roles which includes the earliest role in the multi-delegation list.</t>
      <t>If there is no conflict, check if there is any single set of roles with matching non-custom metadata. If there is, choose and return the metadata from this set.</t>
      <t>If no agreeing set can be found that meets the agreement threshold, return an error indicating that image metadata could not be found.</t>
    </list></t>
</list></t>

</section>
</section>
</section>
</section>


  </middle>

  <back>

    <references title='Normative References'>





<reference  anchor="RFC2119" target='https://www.rfc-editor.org/info/rfc2119'>
<front>
<title>Key words for use in RFCs to Indicate Requirement Levels</title>
<author initials='S.' surname='Bradner' fullname='S. Bradner'><organization /></author>
<date year='1997' month='March' />
<abstract><t>In many standards track documents several words are used to signify the requirements in the specification.  These words are often capitalized. This document defines these words as they should be interpreted in IETF documents.  This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t></abstract>
</front>
<seriesInfo name='BCP' value='14'/>
<seriesInfo name='RFC' value='2119'/>
<seriesInfo name='DOI' value='10.17487/RFC2119'/>
</reference>



<reference  anchor="RFC3647" target='https://www.rfc-editor.org/info/rfc3647'>
<front>
<title>Internet X.509 Public Key Infrastructure Certificate Policy and Certification Practices Framework</title>
<author initials='S.' surname='Chokhani' fullname='S. Chokhani'><organization /></author>
<author initials='W.' surname='Ford' fullname='W. Ford'><organization /></author>
<author initials='R.' surname='Sabett' fullname='R. Sabett'><organization /></author>
<author initials='C.' surname='Merrill' fullname='C. Merrill'><organization /></author>
<author initials='S.' surname='Wu' fullname='S. Wu'><organization /></author>
<date year='2003' month='November' />
<abstract><t>This document presents a framework to assist the writers of certificate policies or certification practice statements for participants within public key infrastructures, such as certification authorities, policy authorities, and communities of interest that wish to rely on certificates.  In particular, the framework provides a comprehensive list of topics that potentially (at the writer's discretion) need to be covered in a certificate policy or a certification practice statement.  This document supersedes RFC 2527.</t></abstract>
</front>
<seriesInfo name='RFC' value='3647'/>
<seriesInfo name='DOI' value='10.17487/RFC3647'/>
</reference>



<reference  anchor="RFC5198" target='https://www.rfc-editor.org/info/rfc5198'>
<front>
<title>Unicode Format for Network Interchange</title>
<author initials='J.' surname='Klensin' fullname='J. Klensin'><organization /></author>
<author initials='M.' surname='Padlipsky' fullname='M. Padlipsky'><organization /></author>
<date year='2008' month='March' />
<abstract><t>The Internet today is in need of a standardized form for the transmission of internationalized &quot;text&quot; information, paralleling the specifications for the use of ASCII that date from the early days of the ARPANET.  This document specifies that format, using UTF-8 with normalization and specific line-ending sequences.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='5198'/>
<seriesInfo name='DOI' value='10.17487/RFC5198'/>
</reference>


<reference anchor="NFC" target="http://www.unicode.org/reports/tr15/">
  <front>
    <title>Unicode Standard Annex #15: Unicode Normalization Forms</title>
    <author initials="M." surname="Davis">
      <organization></organization>
    </author>
    <author initials="M." surname="Duerst">
      <organization></organization>
    </author>
    <date year="2018" month="October"/>
  </front>
</reference>
<reference anchor="TAP-3" target="https://github.com/theupdateframework/taps/blob/d0818e580c322815a473520f2e8cc5f5eb8df499/tap3.md">
  <front>
    <title>The Update Framework TAP 3 - Multi-role delegations</title>
    <author initials="T.K." surname="Kuppusamy">
      <organization></organization>
    </author>
    <author initials="S." surname="Awwad">
      <organization></organization>
    </author>
    <author initials="E." surname="Cordell">
      <organization></organization>
    </author>
    <author initials="V." surname="Diaz">
      <organization></organization>
    </author>
    <author initials="J." surname="Moshenko">
      <organization></organization>
    </author>
    <author initials="J." surname="Cappos">
      <organization></organization>
    </author>
    <date year="2018" month="January" day="18"/>
  </front>
</reference>
<reference anchor="TAP-4" target="https://github.com/theupdateframework/taps/blob/2cb67d913ec19424d1e354b38f862886fbfd4105/tap4.md">
  <front>
    <title>The Update Framework TAP 4 - Multiple repository consensus on entrusted targets</title>
    <author initials="T.K." surname="Kuppusamy">
      <organization></organization>
    </author>
    <author initials="S." surname="Awwad">
      <organization></organization>
    </author>
    <author initials="E." surname="Cordell">
      <organization></organization>
    </author>
    <author initials="V." surname="Diaz">
      <organization></organization>
    </author>
    <author initials="J." surname="Moshenko">
      <organization></organization>
    </author>
    <author initials="J." surname="Cappos">
      <organization></organization>
    </author>
    <date year="2017" month="December" day="15"/>
  </front>
</reference>
<reference anchor="TAP-5" target="https://github.com/theupdateframework/taps/blob/01726d203c9b9c029d26f6612069ce3180500d9a/tap5.md#downloading-metadata-and-target-files">
  <front>
    <title>The Update Framework TAP 5 - Setting URLs for roles in the root metadata file</title>
    <author initials="T.K." surname="Kuppusamy">
      <organization></organization>
    </author>
    <author initials="S." surname="Awwad">
      <organization></organization>
    </author>
    <author initials="E." surname="Cordell">
      <organization></organization>
    </author>
    <author initials="V." surname="Diaz">
      <organization></organization>
    </author>
    <author initials="J." surname="Moshenko">
      <organization></organization>
    </author>
    <author initials="J." surname="Cappos">
      <organization></organization>
    </author>
    <date year="2018" month="January" day="22"/>
  </front>
</reference>
<reference anchor="TUF-spec" target="https://github.com/theupdateframework/specification/blob/2b4e18472fe25d5b57f36f6fa50104967c8faeaa/tuf-spec.md">
  <front>
    <title>The Update Framework Specification</title>
    <author initials="J." surname="Samuel">
      <organization></organization>
    </author>
    <author initials="N." surname="Mathewson">
      <organization></organization>
    </author>
    <author initials="G." surname="Condra">
      <organization></organization>
    </author>
    <author initials="V." surname="Diaz">
      <organization></organization>
    </author>
    <author initials="T.K." surname="Kuppusamy">
      <organization></organization>
    </author>
    <author initials="S." surname="Awwad">
      <organization></organization>
    </author>
    <author initials="S." surname="Tobias">
      <organization></organization>
    </author>
    <author initials="J." surname="Wright">
      <organization></organization>
    </author>
    <author initials="H." surname="Mehnert">
      <organization></organization>
    </author>
    <author initials="E." surname="Tryzelaar">
      <organization></organization>
    </author>
    <author initials="J." surname="Cappos">
      <organization></organization>
    </author>
    <author initials="R." surname="Dingledine">
      <organization></organization>
    </author>
    <date year="2018" month="September" day="19"/>
  </front>
</reference>


    </references>

    <references title='Informative References'>

<reference anchor="MERCURY" target="https://www.usenix.org/system/files/conference/atc17/atc17-kuppusamy.pdf">
  <front>
    <title>Mercury: Bandwidth-Effective Prevention of Rollback Attacks Against Community Repositories</title>
    <author initials="T.K." surname="Kuppusamy">
      <organization></organization>
    </author>
    <author initials="V." surname="Diaz">
      <organization></organization>
    </author>
    <author initials="J." surname="Cappos">
      <organization></organization>
    </author>
    <date year="2017" month="July" day="12"/>
  </front>
  <seriesInfo name="ISBN" value="978-1-931971-38-6"/>
</reference>
<reference anchor="UPTANEESCAR" target="https://ssl.engineering.nyu.edu/papers/kuppusamy_escar_16.pdf">
  <front>
    <title>Securing Software Updates for Automobiles</title>
    <author initials="T.K." surname="Kuppusamy">
      <organization></organization>
    </author>
    <author initials="A." surname="Brown">
      <organization></organization>
    </author>
    <author initials="S." surname="Awwad">
      <organization></organization>
    </author>
    <author initials="D." surname="McCoy">
      <organization></organization>
    </author>
    <author initials="R." surname="Bielawski">
      <organization></organization>
    </author>
    <author initials="C." surname="Mott">
      <organization></organization>
    </author>
    <author initials="S." surname="Lauzon">
      <organization></organization>
    </author>
    <author initials="A." surname="Weimerskirch">
      <organization></organization>
    </author>
    <author initials="J." surname="Cappos">
      <organization></organization>
    </author>
    <date year="2016" month="October" day="16"/>
  </front>
</reference>
<reference anchor="PEP-458" target="https://www.python.org/dev/peps/pep-0458/">
  <front>
    <title>PEP 458 -- Surviving a Compromise of PyPI</title>
    <author initials="T.K." surname="Kuppusamy">
      <organization></organization>
    </author>
    <author initials="V." surname="Diaz">
      <organization></organization>
    </author>
    <author initials="D." surname="Stufft">
      <organization></organization>
    </author>
    <author initials="J." surname="Cappos">
      <organization></organization>
    </author>
    <date year="2013" month="September" day="27"/>
  </front>
</reference>
<reference anchor="DEPLOY" target="https://docs.google.com/document/d/17wOs-T7mugwte5_Dt-KLGMsp-3_yAARejpFmrAMefSE/">
  <front>
    <title>Uptane Deployment Considerations</title>
    <author initials="." surname="Members of the Uptane Alliance Community">
      <organization></organization>
    </author>
    <date year="n.d."/>
  </front>
</reference>
<reference anchor="USATODAY" target="https://www.usatoday.com/story/tech/columnist/2016/06/28/your-average-car-lot-more-code-driven-than-you-think/86437052/">
  <front>
    <title>Your average car is a lot more code-driven than you think</title>
    <author initials="B." surname="O'Donnell">
      <organization></organization>
    </author>
    <date year="2016" month="June" day="28"/>
  </front>
</reference>
<reference anchor="CR-OTA" target="https://www.consumerreports.org/automotive-technology/automakers-embrace-over-the-air-updates-can-we-trust-digital-car-repair/">
  <front>
    <title>Automakers Embrace Over-the-Air Updates, but Can We Trust Digital Car Repair?</title>
    <author initials="K." surname="Barry">
      <organization></organization>
    </author>
    <date year="2018" month="April" day="20"/>
  </front>
</reference>
<reference anchor="IN-TOTO" target="https://in-toto.github.io/">
  <front>
    <title>in-toto: A framework to secure the integrity of software supply chains</title>
    <author >
      <organization></organization>
    </author>
    <date year="2018" month="October" day="29"/>
  </front>
</reference>


    </references>



  </back>

<!-- ##markdown-source:
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
wjkp0BUwwqPPH0Lu/x9F+Eg6KjIBAA==

-->

</rfc>


<?xml version="1.0" encoding="UTF-8"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc2629 version 1.2.9 -->

<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
]>

<?rfc toc="yes"?>
<?rfc sortrefs="yes"?>
<?rfc symrefs="yes"?>

<rfc ipr="noDerivativesTrust200902" docName="uptane-standard-design" category="info">

  <front>
    <title abbrev="UPTANE">Uptane Standard for Design and Implementation 2.0.0</title>

    <author initials="." surname="Members of the Uptane Community" fullname="Uptane Community">
      <organization>Joint Development Foundation Projects, LLC, Uptane Series (c/o Prof. Justin Cappos)</organization>
      <address>
        <postal>
          <street>6 MetroTech</street>
          <city>Brooklyn</city>
          <region>NY</region>
          <code>11201</code>
          <country>USA</country>
        </postal>
        <email>uptane-standards@googlegroups.com</email>
      </address>
    </author>

    <date year="2022" month="March" day="15"/>

    <area>TODO</area>
    <workgroup>TODO</workgroup>
    <keyword>Internet-Draft</keyword>

    <abstract>


<t>This document describes a framework for securing ground vehicle software update systems.</t>



    </abstract>


  </front>

  <middle>


<section anchor="introduction" title="Introduction">

<t>Uptane is a secure software update framework for ground vehicles. This document describes procedures to enable programmers for OEMs and suppliers to securely design and implement this framework in a manner that better protects connected units on ground vehicles. Integrating Uptane as outlined in the sections that follow can reduce the ability of attackers to compromise critical systems. It also assures a faster and easier recovery process when a compromise occurs.</t>

<t>These instructions specify the components necessary for a compliant implementation. Individual implementers can make their own technological choices within those requirements. This flexibility makes Uptane adaptable to the many customized update solutions used by manufacturers. If implementers wish to have compatible formats, they can use POUFs. POUFs contain a description of implementation choices as well as data binding formats. An implementer who adopts a POUF, as well as the Uptane Standard, will be able to interoperate with other implementations using that POUF.</t>

</section>
<section anchor="terminology" title="Terminology">

<t>With the exception of the Conformance terminology and Uptane role terminology presented below, please refer to the <eref target="https://uptane.github.io/deployment-considerations/glossary.html">glossary</eref> in the Deployment Best Practices volume for definitions of all terms used in this Standard.</t>

<section anchor="conformance-terminology" title="Conformance terminology">

<t>The keywords REQUIRED, SHALL, SHALL NOT, SHOULD, SHOULD NOT, RECOMMENDED, MAY, and OPTIONAL in this document are to be interpreted as described in <xref target="RFC2119"/>. Given the importance of interpreting these terms correctly, we present these definitions here. Note that when referring to actions in the Standard that mandate compliance, the word SHALL will be used, rather than the word MUST.</t>

<t><spanx style="emph">SHALL</spanx> This word or the term “REQUIRED” mean that the definition is an absolute requirement of the specification.
<spanx style="emph">SHALL NOT</spanx> This phrase means that the definition is an absolute prohibition of the specification.
<spanx style="emph">SHOULD</spanx> This word or the adjective “RECOMMENDED” mean that, in particular circumstances, there could exist valid reasons to ignore a particular item, but the full implications will be understood and carefully weighed before choosing a different course.
<spanx style="emph">SHOULD NOT</spanx> This phrase or the phrase “NOT RECOMMENDED” mean that there could exist valid reasons in particular circumstances when the particular behavior is acceptable or even useful, but the full implications will be understood and the case carefully weighed before implementing any behavior described with this label.
<spanx style="emph">MAY</spanx> This word or the adjective “OPTIONAL,” mean that an item is truly optional.</t>

<t>In order to be considered Uptane-compliant, an implementation SHALL follow all of these rules as specified in the document.</t>

<t>Note that, following the recommendations of <xref target="RFC2119"/>, imperatives of the type defined here will be used only when essential for security.</t>

</section>
<section anchor="uptane-role-terminology" title="Uptane role terminology">

<t>These terms are defined in greater detail in <xref target="roles"/>.</t>

<t><spanx style="emph">Delegation</spanx>: A process by which the responsibility of signing metadata about images is assigned to another party.</t>

<t><spanx style="emph">Role</spanx>: A party (human or machine) responsible for signing a certain type of metadata. The role controls keys and is responsible for signing the metadata entrusted to it with these keys. The roles mechanism of Uptane allows the system to distribute signing responsibilities so that the compromise of one key does not necessarily impact the security of the entire system.</t>

<t><list style="symbols">
  <t><spanx style="emph">Root role</spanx>: Signs metadata that distributes and revokes public keys used to verify the Root, Timestamp, Snapshot, and Targets role metadata.</t>
  <t><spanx style="emph">Snapshot role</spanx>: Signs metadata that indicates which images the repository has released at the same time.</t>
  <t><spanx style="emph">Targets role</spanx>: Signs metadata used to verify the image, such as cryptographic hashes and file size.</t>
  <t><spanx style="emph">Timestamp role</spanx>: Signs metadata that indicates if there are any new metadata or images on the repository.</t>
</list></t>

</section>
<section anchor="acronyms-and-abbreviations" title="Acronyms and abbreviations">

<t><spanx style="emph">CDN</spanx>: Content Delivery Network</t>

<t><spanx style="emph">ECUs</spanx>: Electronic Control Units, the computing units on a vehicle</t>

<t><spanx style="emph">LIN Bus</spanx>: Local Interconnect Bus</t>

<t><spanx style="emph">OBD</spanx>: On-board diagnostics</t>

<t><spanx style="emph">SOTA</spanx>: Software Updates Over-the-Air</t>

<t><spanx style="emph">UDS</spanx>: Unified Diagnostic Services</t>

<t><spanx style="emph">VIN</spanx>: Vehicle Identification Number</t>

</section>
</section>
<section anchor="rationale-for-and-scope-of-the-uptane-standard" title="Rationale for and scope of the Uptane Standard">

<t>This Standard document provides the essential components for the secure design, implementation, and deployment of Uptane by OEMs and suppliers. These guidelines contribute to compromise resilience, or the ability to minimize the extent of the threat posed by any given attack.</t>

<t>However, this specification is intended as an implementation guide, and not as a detailed technical argument about the security properties that Uptane provides.  Readers interested in such documentation can refer to published papers that cover this topic.  <xref target="UPTANEESCAR"/></t>

<section anchor="why-uptane-requires-a-standards-document" title="Why Uptane requires a standards document">

<t>A standards document that can guide the safe design, integration, and deployment of Uptane in vehicles is needed at this time because:</t>

<t><list style="symbols">
  <t>The number of connected units on the average vehicle continues to grow, with mainstream cars now containing up to 100 million lines of code. <xref target="USATODAY"/></t>
  <t>The expanded use of software over-the-air strategies creates new attack surfaces for malicious parties. <xref target="CR-OTA"/></t>
  <t>Legacy update strategies, such as SSL/TLS or GPG/RSA, are not feasible for use on vehicle ECUs because they force manufacturers to chose between enhanced security and customizability.</t>
  <t>Conventional strategies are also complicated by the differing resources of the ECUs, which can vary greatly in memory, storage space, and Internet connectivity.</t>
  <t>The design of Uptane makes it possible to offer improved design flexibility without sacrificing security.</t>
  <t>This added design flexibility, however, could be a liability if the framework is implemented incorrectly.</t>
  <t>Standardization of crucial steps in the design, implementation, and use of Uptane can assure that customizability does not impact security or functionality.</t>
</list></t>

</section>
<section anchor="scope-of-standard-coverage" title="Scope of Standard coverage">

<t>This document sets guidelines for implementing Uptane in most systems capable of updating software on connected units in ground vehicles, including passenger vehicles, light-duty trucks, heavy-duty trucks, and motorcycles. Uptane could potentially also be applied to other ground vehicles, such as automated shuttles, recreational vehicles, and military ground vehicles. Uptane could even be applied to domains such as IoT devices, medical devices, and autonomous aerial vehicles. In this section, we define the scope of that applicability by providing sample use cases and possible exceptions, aspects of software update security that are not applicable to Uptane, and the design requirements governing the preparation of these standards.</t>

<section anchor="assumptions" title="Assumptions">

<t>We assume the following system preconditions for Uptane:</t>

<t><list style="symbols">
  <t>Vehicles have the ability to establish connectivity to required backend services. For example, this could be done through cellular, Wi-Fi, or hard-wired mechanisms.</t>
  <t>ECUs are either directly connected to the communication channel, or are indirectly connected via some sort of network gateway.</t>
  <t>ECUs are programmable and provide sufficient performance to be updated.</t>
  <t>ECUs SHALL be able to perform public key cryptography operations and calculate hashes of images and metadata files.</t>
  <t>There are state-of-the-art secure servers in place, such as the Director and Image repository servers.</t>
</list></t>

<t>It is important that any bugs detected in Uptane implementations be patched promptly. Failure to do so could interfere with the effectiveness of Uptane’s operations.</t>

</section>
<section anchor="use-cases" title="Use cases">

<t>The following use cases provide a number of scenarios illustrating the manner in which software updates could be accomplished using Uptane.</t>

<section anchor="oems-initializing-uptane-at-the-factory-using-sota" title="OEMs initializing Uptane at the factory using SOTA">

<t>An OEM plans to install Uptane on new vehicles. This entails the following components: code to perform full and partial verification, the latest copy of the relevant metadata, the public keys, and an accurate attestation of the latest time. The OEM then either requires its tier-1 suppliers to provide these materials to the suppliers’ assembly lines or can choose to add the materials later at the OEM’s assembly lines. The OEM’s in-vehicle implementation is Uptane-compliant if:</t>

<t><list style="numbers">
  <t>all Primaries perform full verification;</t>
  <t>all Secondaries that are updated via OTA at least perform partial verification; and</t>
  <t>any ECUs that do not perform any type of verification cannot be updated via OTA.</t>
</list></t>

</section>
<section anchor="updating-one-ecu-with-a-complete-image" title="Updating one ECU with a complete image">

<t>A tier-1 supplier completes work on a revised image for an electronic brake control module. This module will control the brakes on all models of an SUV produced by the OEM mentioned above. Assuming supplier delegation is supported by the OEM for this ECU, each tier-1 supplier digitally signs the image, then delivers the signature, all of its metadata, including delegations, and associated images to the OEM. The OEM adds these metadata and images to its Image repository, along with information about any dependencies and conflicts between this image and those for other ECUs used in the OEM’s vehicles. The OEM also updates the inventory database, so that the Director repository can instruct the ECU on how to install these updated images.</t>

</section>
<section anchor="updating-individual-ecus-on-demand" title="Updating individual ECUs on demand">

<t>An OEM has issued a recall to address a problem with a keyless entry device that has been locking people out of their cars. The OEM prepares an updated flash image in the manner described above. The OEM then ships USB flash drives to vehicle owners and dealerships that allow those parties to update the firmware of their vehicles.</t>

</section>
<section anchor="update-one-ecu-with-multiple-deltas" title="Update one ECU with multiple deltas">

<t>The OEM wants to use delta updates to save over-the-air bytes. The delta images contain only the code and/or data that has changed from the previous image version. To do so, the OEM will first modify the Director repository, using the vehicle version manifest and dependency resolution to determine the differences between the previous and latest images. The OEM will then add the following to the custom Targets metadata used by the Director repository: (1) the algorithm used to apply a delta image, and (2) the Targets metadata about the delta image. The OEM will also check whether the delta images match the Targets metadata from the Director repository.</t>

</section>
</section>
</section>
<section anchor="exceptions" title="Exceptions">

<t>There are a number of factors that could impede the completion of the above scenarios:</t>

<t><list style="symbols">
  <t>ECUs can be lacking the necessary resources to function as designated. These insufficient resources could include limited CPU or RAM inadequate for performance of public key cryptography; a lack of sufficient storage to undo installation of bad software; or a location on a low-speed network (e.g., LIN).</t>
  <t>ECUs can reside on different network segments, and cannot directly reach each other, requiring a gateway to facilitate communication.</t>
  <t>A user can replace OEM-installed ECUs with aftermarket ECUs.</t>
  <t>A vehicle can download only a limited amount of data via a cellular channel (e.g. due to limits on a data plan).</t>
  <t>A system can lack sufficient power to download or install software updates.</t>
  <t>Vehicles can be offline for extended periods of time, thus missing required updates (e.g., key rotations).</t>
  <t>OEMs can be unwilling to implement costly security or hardware requirements.</t>
</list></t>

</section>
<section anchor="out-of-scope" title="Out of scope">

<t>The following topics will not be addressed in this document, as they represent threats outside the scope of Uptane:</t>

<t><list style="symbols">
  <t>Physical attacks, such as manual tampering with ECUs outside the vehicle.</t>
  <t>Compromise of the packaged software, such as malware embedded in a trusted package.</t>
  <t>Compromise of the supply chain (e.g., build system, version control system, packaging process). A number of strategies (e.g., git signing, TPMs, in-toto <xref target="IN-TOTO"/>)  already exist to address this problem. Therefore, there is no need to duplicate those techniques here.</t>
  <t>Problems associated with OBD or UDS programming of ECUs, such as authentication of communications between ECUs.</t>
  <t>Malicious mirrors of package repositories, which could substitute original packages with malicious packages with matching version numbers <xref target="MERCURY"/>.</t>
</list></t>

</section>
<section anchor="design-requirements" title="Design requirements">

<t>The design requirements for this document are governed by the following principal parameters:</t>

<t><list style="symbols">
  <t>to clearly mandate the design and implementation steps that are security critical and will be followed as is, while offering flexibility in the implementation of non-critical steps. In this manner, users can adapt to support different use models and deployment scenarios.</t>
  <t>to ensure that, if Uptane is implemented, the security practices mandated or suggested in this document do not interfere with the functionality of ECUs, vehicles, or the systems that maintain them.</t>
  <t>to delineate guidelines to ensure that, when any part of the SOTA mechanism of a vehicle is attacked, an attacker has to compromise two or more modules to breach the SOTA mechanism.</t>
</list></t>

</section>
</section>
<section anchor="threat-model-and-attack-strategies" title="Threat model and attack strategies">

<t>The overarching goal of Uptane is to provide a system that is resilient in the face of various types of compromise. In this section, we describe the goals an attacker could have (<xref target="attacker_goals"/>) and the capabilities they could have or could develop (<xref target="capabilities"/>). We then describe and classify types of attacks on the system according to the attacker’s goals (<xref target="threats"/>).</t>

<section anchor="attacker_goals" title="Attacker goals">

<t>We assume that attackers could want to achieve one or more of the following goals, in increasing order of severity:</t>

<t><list style="symbols">
  <t>Read the contents of updates to discover confidential information, reverse-engineer firmware, or compare two firmware images to identify security fixes and hence determine the fixed security vulnerability.</t>
  <t>Deny installation of updates to prevent vehicles from fixing software problems.</t>
  <t>Cause one or more ECUs in the vehicle to fail, denying use of the vehicle or of certain functions.</t>
  <t>Control ECUs within the vehicle, and possibly the vehicle itself.</t>
</list></t>

</section>
<section anchor="capabilities" title="Attacker capabilities">

<t>Uptane is designed with resilience to compromise in mind. We assume that attackers could develop one or more of the following capabilities:</t>

<t><list style="symbols">
  <t>Intercept and modify network traffic (i.e., perform man-in-the-middle attacks). This capability could be developed in two domains:
  <list style="symbols">
      <t>Outside the vehicle, intercepting and modifying traffic between the vehicle and software repositories.</t>
      <t>Inside the vehicle, intercepting and modifying traffic on one or more vehicle buses (e.g., via an OBD port or by using a compromised ECU as a vector).</t>
    </list></t>
  <t>Compromise and control either a Director repository or Image repository server, and any keys stored on that repository, but not both the Director and Image repositories.</t>
  <t>Compromise either a Primary ECU or a Secondary ECU, but not both in the same vehicle.</t>
</list></t>

</section>
<section anchor="threats" title="Description of threats">

<t>Uptane’s threat model includes the following types of attacks, organized according to the attacker goals listed in <xref target="attacker_goals"/>.</t>

<section anchor="read_updates" title="Read updates">

<t><list style="symbols">
  <t><spanx style="emph">Eavesdrop attack:</spanx> Read sensitive or confidential information from an update intended to be encrypted for a specific ECU. (Note: Not all implementations will have a need to protect information in this way.)</t>
</list></t>

</section>
<section anchor="deny_updates" title="Deny installation of updates">

<t>An attacker seeking to deny the installation of updates could attempt one or more of the following strategies:</t>

<t><list style="symbols">
  <t><spanx style="emph">Drop-request attack:</spanx> Block network traffic outside or inside the vehicle.</t>
  <t><spanx style="emph">Slow retrieval attack:</spanx> Slow down network traffic, in the extreme case sending barely enough packets to avoid a timeout. Similar to a drop-request attack, except that both the sender and receiver of the traffic still think network traffic is unimpeded.</t>
  <t><spanx style="emph">Freeze attack:</spanx> Continue to send a properly signed, but old, update bundle to the ECUs, even if newer updates exist.</t>
  <t><spanx style="emph">Partial bundle installation attack:</spanx> Install a valid (signed) update bundle, and then block selected updates within the bundle.</t>
  <t><spanx style="emph">Denial of service attack</spanx> against the Uptane repositories or infrastructure.</t>
</list></t>

</section>
<section anchor="change_functionality" title="Interfere with ECU functionality">

<t>Attackers seeking to interfere with the functionality of vehicle ECUs in order to cause an operational failure or unexpected behavior could do so in one of the following ways:</t>

<t><list style="symbols">
  <t><spanx style="emph">Rollback attack:</spanx> Cause an ECU to install a previously valid software revision that is older than the currently installed version.</t>
  <t><spanx style="emph">Endless data attack:</spanx> Send a large amount of data to an ECU until it runs out of storage, possibly causing the ECU to fail to operate.</t>
  <t><spanx style="emph">Mix-and-match attack:</spanx> Install a malicious software bundle in which some of the updates do not interoperate properly. This could be accomplished even if all of the individual images being installed are valid, as long as valid versions exist that are mutually incompatible.</t>
</list></t>

</section>
<section anchor="control_ecu" title="Control an ECU or vehicle">

<t>Full control of a vehicle, or one or more ECUs within a vehicle, is the most severe threat.</t>

<t><list style="symbols">
  <t><spanx style="emph">Arbitrary software attack:</spanx> Cause an ECU to install and run arbitrary code of the attacker’s choice.</t>
</list></t>

</section>
</section>
</section>
<section anchor="design" title="Detailed design of Uptane">

<t>Uptane does not specify implementation details. Instead, this Standard describes the components necessary for a compliant implementation and leaves it up to individual implementers to make their own technological choices within those requirements.</t>

<t>At a high level, Uptane requires:</t>

<t><list style="symbols">
  <t>Two software repositories:
  <list style="symbols">
      <t>An Image repository containing binary images to install and signed metadata about those images.</t>
      <t>A Director repository connected to an inventory database that can sign metadata on demand for images in the Image repository.</t>
    </list></t>
  <t>Repository tools for generating Uptane-specific metadata about images.</t>
  <t>A public key infrastructure supporting the required metadata production and signing roles on each repository:
  <list style="symbols">
      <t>Root - The certificate authority for the Uptane ecosystem. Distributes public keys for verifying all the other roles’ metadata.</t>
      <t>Timestamp - Indicates whether there are new metadata or images.</t>
      <t>Snapshot - Indicates images released by the repository at a point in time via signing metadata about Targets metadata.</t>
      <t>Targets - Indicates metadata about images, such as hashes and file sizes.</t>
    </list></t>
  <t>A secure way for ECUs to know the time.</t>
  <t>An ECU capable of downloading images and associated metadata from the Uptane servers.</t>
  <t>An in-vehicle client on a Primary ECU capable of verifying the signatures on all update metadata and downloading updates on behalf of its associated Secondary ECUs. The Primary ECU can be the same ECU that communicates with the server.</t>
  <t>A client or library on each Secondary ECU capable of performing either full or partial verification of metadata.</t>
</list></t>

<section anchor="roles" title="Roles on repositories">

<t>A repository contains images and metadata. Each role has a particular type of metadata associated with it, as described in <xref target="meta_structures"/>.</t>

<section anchor="root_role" title="The Root role">

<t>A repository’s Root role SHALL be responsible for a Certificate Authority as defined in <xref target="RFC3647"/>.
A repository’s Root role SHALL produce and sign Root metadata as described in <xref target="root_meta"/>.
A repository’s Root role SHALL sign the public keys used to verify the metadata produced by the Timestamp, Snapshot, and Targets roles.
A repository’s Root role SHALL revoke keys for the other roles if they are compromised.</t>

</section>
<section anchor="targets_role" title="The Targets role">

<t>A repository’s Targets role SHALL produce and sign metadata about images and delegations as described in <xref target="targets_meta"/>.</t>

<section anchor="targets_role_delegations" title="Delegations">

<t>The Targets role on the Image repository can delegate the responsibility of signing metadata to other, custom-defined roles referred to as delegated targets. If it does, it SHALL do so as specified in <xref target="delegations_meta"/>.</t>

<t>As responsibility for signing images or a subset of images could be delegated to more than one role, it is possible that two different roles will be trusted to sign a particular image. For this reason, delegations SHALL be prioritized.</t>

<t>A particular delegation for a subset of images could be designated as <spanx style="strong">terminating</spanx>. For terminating delegations, the client SHALL NOT search any further if it does not find validly signed metadata about those images. Delegations SHOULD NOT be terminating by default; terminating delegations SHOULD only be used when there is a compelling technical reason to do so.</t>

<t>A delegation for a subset of images could be a multi-role delegation <xref target="TAP-3"/>. A multi-role delegation indicates that multiple roles are needed to sign a particular image and each of the delegatee roles SHALL sign the same metadata.</t>

<t>Delegations only apply to the Image repository. The Targets role on the Director repository SHALL NOT delegate metadata signing responsibility.</t>

</section>
</section>
<section anchor="snapshot_role" title="The Snapshot role">

<t>A repository’s Snapshot role SHALL produce and sign metadata about all Targets metadata the repository releases, including the current version number of the top-level Targets metadata, and the version numbers of all delegated Targets metadata, as described in <xref target="snapshot_meta"/>.</t>

</section>
<section anchor="timestamp_role" title="The Timestamp role">

<t>A repository’s Timestamp role SHALL produce and sign metadata indicating whether there are new metadata or images on the repository. It SHALL do so by signing the metadata about the Snapshot metadata file.</t>

</section>
</section>
<section anchor="meta_structures" title="Metadata structures">

<t>Uptane’s security guarantees all rely on properly created metadata that follows a designated structure. The Uptane Standard <spanx style="strong">does not</spanx> mandate any particular format or encoding for the metadata as a whole. ASN.1 (with any encoding scheme like BER, DER, XER, etc.), JSON, XML, or any other encoding format that is capable of providing the required structure can be used.</t>

<t>However, string comparison is required as part of metadata verification. To ensure an accurate basis for comparing strings, all strings SHALL be encoded in the Unicode Format for Network Interchange as defined in <xref target="RFC5198"/>, including normalization into Unicode Normalization Form C (<xref target="NFC"/>).</t>

<t>The <spanx style="emph">Deployment Best Practices</spanx> (<xref target="DEPLOY"/>), Joint Development Foundation Projects, LLC, Uptane Series provides some examples of compliant metadata structures in ASN.1 and JSON.</t>

<section anchor="common_metadata" title="Common metadata structures">

<t>Every public key SHALL be represented using a public key identifier.  A public key identifier is EITHER all of the following:</t>

<t><list style="symbols">
  <t>The value of the public key itself (which could be, for example, formatted as a PEM string)</t>
  <t>The public key cryptographic algorithm used by the key (such as RSA or ECDSA)</t>
  <t>The particular scheme used to verify the signature (such as <spanx style="verb">rsassa-pss-sha256</spanx> or <spanx style="verb">ecdsa-sha2-nistp256</spanx>)</t>
</list></t>

<t>OR a secure hash over at least the above components (such as the keyid mechanism in TUF).</t>

<t>All four Uptane roles (Root, Targets, Snapshot, and Timestamp) share a common structure. They SHALL contain the following two attributes:</t>

<t><list style="symbols">
  <t>A payload of metadata to be signed</t>
  <t>An attribute containing the signature(s) of the payload, where each entry specifies:
  <list style="symbols">
      <t>The public key identifier of the key being used to sign the payload</t>
      <t>A signature with this key over the payload</t>
    </list></t>
</list></t>

<t>The payload differs depending on the role. However, the payload for all roles shares a common structure. It SHALL contain the following four attributes:</t>

<t><list style="symbols">
  <t>An indicator of the type of role (Root, Targets, Snapshot, or Timestamp)</t>
  <t>An expiration date and time</t>
  <t>An integer version number, which SHOULD be incremented each time the metadata file is updated</t>
  <t>The role-specific metadata for the role indicated</t>
</list></t>

<t>The following sections describe the role-specific metadata. All roles SHALL follow the common structures described here.</t>

</section>
<section anchor="root_meta" title="Root metadata">

<t>A repository’s Root metadata distributes the public keys of the top-level Root, Targets, Snapshot, and Timestamp roles, as well as revocations of those keys. It SHALL contain two attributes:</t>

<t><list style="symbols">
  <t>A representation of the public keys for all four roles. Each key SHALL have a unique public key identifier.</t>
  <t>An attribute mapping each role to (1) its public key(s), and (2) the threshold of signatures required for that role.</t>
</list></t>

</section>
<section anchor="targets_meta" title="Targets metadata">

<t>The Targets metadata on a repository contains all of the information about images to be installed on ECUs. This includes filenames, hashes, and file sizes. It can also include other useful information, such as what types of hardware are compatible with a particular image.</t>

<t>Targets metadata can also contain metadata about delegations, allowing one Targets role to delegate its authority to another. This means that an individual Targets metadata file might contain only metadata about delegations, only metadata about images, or some combination of the two. The details of how ECUs traverse the delegation tree to find valid metadata about images is specified in <xref target="resolve_delegations"/>.</t>

<section anchor="targets_images_meta" title="Metadata about images">

<t>To be available to install on clients, all images on the repository SHALL have their metadata listed in a Targets role.  Each Targets role can provide a list of some images on the repository.  This list SHALL provide, at a minimum, the following information about each image:</t>

<t><list style="symbols">
  <t>The image filename</t>
  <t>The size of the image in bytes</t>
  <t>One or more hashes of the image file, along with the hashing function used</t>
</list></t>

<t>If there are no images included in the Targets metadata from the Director repository, then the metadata SHALL include a vehicle identifier in order to avoid a replay attack.</t>

<section anchor="custom-metadata-about-images" title="Custom metadata about images">

<t>In addition to what is required, Targets metadata files can contain extra metadata for images on the repository. This metadata can be customized for a particular use case. Examples of use cases for different types of custom metadata can be found in the <spanx style="emph">Deployment Best Practices</spanx> document (<xref target="DEPLOY"/>). However, there are a few important pieces of custom metadata that SHOULD be present in most implementations. In addition, there is one element in the custom metadata that SHALL be present in the Targets metadata from the Director.</t>

<t>Custom metadata can also contain a demarcated field or section that SHALL match whenever two pieces of metadata are checked against each other, such as when Targets metadata from the Director repository is checked against Targets metadata from the Image repository.</t>

<t>The information listed below SHOULD be provided for each image on both the Image repository and the Director repository. If a “SHALL match section” is to be implemented, that is where this information SHOULD be placed.</t>

<t><list style="symbols">
  <t>A release counter, to be incremented each time a new version of the image is released. This can be used to prevent rollback attacks even in cases where the Director repository is compromised.</t>
  <t>A hardware identifier, or list of hardware identifiers, representing models of ECUs with which the image is compatible. This can be used to ensure that an ECU cannot be ordered to install an incompatible image, even in cases where the Director repository is compromised.</t>
</list></t>

<t>The following information is CONDITIONALLY REQUIRED for each image on the Director repository IF that image is encrypted:</t>

<t><list style="symbols">
  <t>Information about filenames, hashes, and file size of the encrypted image.</t>
  <t>Information about the encryption method, and other relevant information–for example, a symmetric encryption key encrypted by the ECU’s asymmetric key could be included in the Director repository metadata.</t>
</list></t>

<t>The following information SHALL be provided from the Director repository for each image in the Targets metadata:</t>

<t><list style="symbols">
  <t>An ECU identifier (such as a serial number), specifying the ECU that SHOULD install the image.</t>
</list></t>

<t>The Director repository could provide a download URL for the image file. This may be useful, for example, when the image is on a public CDN and the Director wishes to provide a signed URL.</t>

</section>
</section>
<section anchor="delegations_meta" title="Metadata about delegations">

<t>A Targets metadata file on the Image repository (but not the Director repository) SHALL be able to delegate signing authority to other entities. For example, it could delegate signing authority for a particular ECU’s firmware to that ECU’s supplier. A metadata file can contain any number of delegations and SHALL keep the delegations in prioritized order.</t>

<t>Any metadata file with delegations SHALL provide the following information:</t>

<t><list style="symbols">
  <t>A list of public keys of all delegatees. Each key SHOULD have a unique public key identifier and a key type.</t>
  <t>A list of delegations, each of which contains:
  <list style="symbols">
      <t>A list of the filenames to which this role applies. This could be expressed using wildcards, or by enumerating a list, or a combination of the two.</t>
      <t>An optional list of the hardware identifiers to which this role applies.  If this is omitted, any hardware identifier will match.</t>
      <t>An indicator of whether or not this is a terminating delegation. (See <xref target="targets_role_delegations"/>.)</t>
      <t>A list of the roles to which this delegation applies. Each role needs to specify:
      <list style="symbols">
          <t>A name for the role (e.g., “supplier1-qa”)</t>
          <t>The key identifiers for each key this role uses</t>
          <t>A threshold of keys that SHALL sign for this role</t>
        </list></t>
    </list></t>
</list></t>

<t>Note that <spanx style="strong">any</spanx> Targets metadata file stored on the Image repository can contain delegations, and these delegations can be in chains of arbitrary length.</t>

</section>
</section>
<section anchor="snapshot_meta" title="Snapshot metadata">

<t>The Snapshot metadata lists version numbers and filenames of all Targets metadata files. It protects against mix-and-match attacks if a delegated supplier key is compromised.</t>

<t>For each Targets metadata file on the repository, the Snapshot metadata SHALL contain the following information:</t>

<t><list style="symbols">
  <t>The filename and version number of the Targets metadata file.</t>
</list></t>

<t>The Snapshot metadata could also list the Root metadata filename and version number for the purpose of backwards compatibility. Historically, this was a requirement in TUF, but it is no longer required and does not provide a significant security benefit.</t>

</section>
<section anchor="timestamp_meta" title="Timestamp metadata">

<t>The Timestamp metadata SHALL contain the following information:</t>

<t><list style="symbols">
  <t>The filename and version number of the latest Snapshot metadata on the repository.</t>
  <t>One or more hashes of the Snapshot metadata file, along with the hashing function used.</t>
</list></t>

</section>
<section anchor="repo_mapping_meta" title="Repository mapping metadata">

<t>As described in the introduction to <xref target="design"/>, Uptane requires a Director repository and an Image repository. However, it is possible to have an Uptane-compliant implementation that has more than two repositories.</t>

<t>Repository mapping metadata informs a Primary ECU about which repositories to trust for images or image paths. <xref target="TAP-4"/> describes how to make use of more complex repository mapping metadata in order to have more than the two required repositories.</t>

<t>Repository mapping metadata, or the equivalent informational content, SHALL be present on all Primary ECUs, and SHALL contain the following information:</t>

<t><list style="symbols">
  <t>A list of repository names and one or more URLs at which the named repository can be accessed. At a minimum, this SHALL include the Director and Image repositories.</t>
  <t>A list of mappings of image paths to repositories, each of which contains:
  <list style="symbols">
      <t>A list of image paths. Image paths could be expressed using wildcards, or by enumerating a list, or a combination of the two.</t>
      <t>A list of repositories that SHALL provide signed Targets metadata for images stored at those paths.</t>
    </list></t>
</list></t>

<t>For example, in the most basic Uptane case, the repository mapping metadata would contain:</t>

<t><list style="symbols">
  <t>The name and URL of the Director repository.</t>
  <t>The name and URL of the Image repository.</t>
  <t>A single mapping indicating that all images (<spanx style="verb">*</spanx>) SHALL be signed by both the Director and Image repository.</t>
</list></t>

<t>Note that the metadata need not be in the form of a metadata file. For example, in the basic case where there is only one Director and one Image repository, and all images need to have signed metadata from both repositories, it would be sufficient to have a configuration file with URLs for the two repositories and a client that always checks for metadata matches between them. In this case, no explicit mapping would be defined, because the mapping is defined as part of the Uptane client implementation.</t>

<t>The <spanx style="emph">Uptane Deployment Best Practices</spanx> document (<xref target="DEPLOY"/>) provides more guidance on how to implement repository mapping metadata for more complex use cases. It also discusses strategies for updating repository mapping metadata, if required.</t>

</section>
<section anchor="metadata_filename_rules" title="Rules for filenames in repositories and metadata">

<t>There is a difference between the filename in a metadata file or an ECU, and the filename on a repository. This difference exists in order to avoid race conditions, where metadata and images are read from, and written to, at the same time. For more details, the reader can read the TUF specification <xref target="TUF-spec"/> and PEP 458 <xref target="PEP-458"/>.</t>

<t>Unless stated otherwise, all files SHALL be written to repositories in accordance with the following two rules:</t>

<t><list style="numbers">
  <t>Metadata filenames SHALL be qualified with version numbers. If a metadata file A is specified as FILENAME.EXT in another metadata file B, then it SHALL be written as VERSION.FILENAME.EXT, where VERSION is A’s version number, as defined in <xref target="common_metadata"/>, with one exception: If the version number of the Timestamp metadata file is not be known in advance by a client, it could be read from, and written to, a repository using a filename without a version number qualification, i.e., FILENAME.EXT.</t>
  <t>If an image is specified in a Targets metadata file as FILENAME.EXT, it SHALL be written to the repository as HASH.FILENAME.EXT, where HASH is one of the hash digests of the file, as specified in <xref target="targets_images_meta"/>. The file SHALL be written to the repository using <spanx style="emph">n</spanx> different filenames, one for each hash digest listed in its corresponding Targets metadata.</t>
  <t>Filenames of images SHOULD be encoded to prevent a path traversal on the client system, either by using URL encoding or by limiting the allowed character set in the filename.</t>
</list></t>

<t>For example:</t>

<t><list style="symbols">
  <t>The version number of the Snapshot metadata file is 61, and its filename in the Timestamp metadata is <spanx style="emph">snapshot.json</spanx>. The filename on the repository will be <spanx style="emph">61.snapshot.json</spanx>.</t>
  <t>There is an image with the <spanx style="emph">filename acme_firmware.bin</spanx> specified in the Targets metadata, with a SHA3-256 of <spanx style="emph">aaaa</spanx> and a SHA-512/224 of <spanx style="emph">bbbb</spanx>. It will have two filenames on the repository: <spanx style="emph">aaaa.acme_firmware.bin</spanx> and <spanx style="emph">bbbb.acme_firmware.bin</spanx>.</t>
</list></t>

</section>
</section>
<section anchor="server-repository-implementation-requirements" title="Server / repository implementation requirements">

<t>An Uptane implementation SHALL make the following services available to vehicles:</t>

<t><list style="symbols">
  <t>Image repository</t>
  <t>Director repository</t>
</list></t>

<t>Additionally, an Uptane implementation requires ECUs to have a secure way to know the current time.</t>

<section anchor="image-repository" title="Image repository">

<t>The Image repository exists to allow an OEM and/or its suppliers to upload images and their associated metadata. It makes these images and their metadata available to vehicles. The Image repository is designed to be primarily controlled by human actors, and updated relatively infrequently.</t>

<t>The Image repository SHALL expose an interface permitting the download of metadata and images. This interface SHOULD be public.</t>

<t>The Image repository SHALL require authorization for writing metadata and images.</t>

<t>The Image repository SHALL provide a method for authorized users to upload images and their associated metadata. It SHALL check that a user writing metadata and images is authorized to do so for that specific image by checking the chain of delegations as described in <xref target="delegations_meta"/>.</t>

<t>The Image repository SHALL implement storage that permits authorized users to write an image file using a unique filename, and later read the same file using the same name. It could use any filesystem, key-value store, or database that fulfills this requirement.</t>

<t>The Image repository could require authentication for read access.</t>

</section>
<section anchor="director_repository" title="Director repository">

<t>The Director repository instructs ECUs as to which images will be installed by producing signed metadata on demand. Unlike the Image repository, it is mostly controlled by automated, online processes. It also consults a private inventory database containing information on vehicles, ECUs, and software revisions.</t>

<t>The Director repository SHALL expose an interface for Primaries to upload vehicle version manifests (<xref target="vehicle_version_manifest"/>) and download metadata. This interface SHOULD be public.</t>

<t>The Director could encrypt images for ECUs that require them, either by encrypting on-the-fly or by storing encrypted images on the repository.</t>

<t>The Director repository SHALL implement storage that permits an automated service to write generated metadata files. It could use any filesystem, key-value store, or database that fulfills this requirement.</t>

<section anchor="directing-installation-of-images-on-vehicles" title="Directing installation of images on vehicles">

<t>A Director repository SHALL conform to the following six-step process for directing the installation of software images on a vehicle.</t>

<t><list style="numbers">
  <t>The Director SHOULD first identify the vehicle. This could be done when the Director receives a vehicle version manifest sent by a Primary (as described in <xref target="construct_manifest_primary"/>), decodes the manifest, and determines the unique vehicle identifier. Additionally, the Director could utilize other mechanisms to uniquely identify a vehicle (e.g., 2-way TLS with unique client certificates).</t>
  <t>Using the vehicle identifier, the Director queries its inventory database (as described in <xref target="inventory_db"/>) for relevant information about each ECU in the vehicle.</t>
  <t>The Director SHALL check the manifest for accuracy compared to the information in the inventory database. If any of the required checks fail, the Director SHOULD drop the request. An implementer can make additional checks if desired. At a minimum, the Director SHOULD check the following:
  <list style="symbols">
      <t>Each ECU recorded in the inventory database is also represented in the manifest.</t>
      <t>The signature of the manifest matches the ECU key of the Primary that sent it.</t>
      <t>The signature of each Secondary’s contribution to the manifest matches the ECU key of that Secondary.</t>
    </list></t>
  <t>The Director SHOULD check that the nonce or counter in each ECU version report has not been used before to prevent a replay of the ECU version report. If the nonce or counter is reused the Director SHOULD drop the request.</t>
  <t>The Director extracts information about currently installed images from the vehicle version manifest. Using this information, it determines if the vehicle is already up-to-date, and if not, determines a set of images that could be installed. The exact process by which this determination takes place is out of scope for this Standard. However, the Director SHALL take into account <spanx style="emph">dependencies</spanx> and <spanx style="emph">conflicts</spanx> between images and SHOULD consult well-established techniques for dependency resolution.</t>
  <t>The Director could encrypt images for ECUs that require it.</t>
  <t>The Director generates new metadata representing the desired set of images to be installed on the vehicle, based on the dependency resolution in step 4. This includes Targets (<xref target="targets_meta"/>), Snapshot (<xref target="snapshot_meta"/>), and Timestamp (<xref target="timestamp_meta"/>) metadata. It then sends this metadata to the Primary as described in <xref target="download_meta_primary"/>.</t>
</list></t>

</section>
<section anchor="inventory_db" title="Inventory Database">

<t>The Director SHALL use a private inventory database to store information about ECUs and vehicles. An implementer could use any durable database for this purpose.</t>

<t>The inventory database SHALL record the following pieces of information:</t>

<t><list style="symbols">
  <t>Per vehicle:
  <list style="symbols">
      <t>A unique identifier (such as a VIN)</t>
    </list></t>
  <t>Per ECU:
  <list style="symbols">
      <t>A unique identifier (such as a serial number)</t>
      <t>The vehicle identifier the ECU is associated with</t>
      <t>An ECU key (symmetric or asymmetric; for asymmetric keys, only the public part SHOULD be stored)</t>
      <t>The ECU key identifier (as defined in <xref target="common_metadata"/>)</t>
      <t>Whether the ECU is a Primary or a Secondary</t>
    </list></t>
</list></t>

<t>The inventory database can record other information about ECUs and vehicles. It SHOULD record a hardware identifier for each ECU to protect against the possibility of directing the ECU to install incompatible firmware.</t>

</section>
</section>
</section>
<section anchor="in-vehicle-implementation-requirements" title="In-vehicle implementation requirements">

<t>An Uptane-compliant ECU SHALL be able to download and verify image metadata and image binaries before installing a new image and SHALL have a secure way of verifying the current time, or a sufficiently recent attestation of the time.</t>

<t>All ECUs SHALL monitor the download speed of image metadata and image binaries to detect and respond to a slow retrieval attack. If the download is slower than a pre-defined threshold, the ECU SHOULD send an alert to the Director repository, for example as part of the next vehicle version manifest.</t>

<t>Each ECU receiving over-the-air updates in a vehicle is either a Primary or a Secondary ECU. A Primary ECU collects and delivers to the Director vehicle manifests (<xref target="vehicle_version_manifest"/>) that contain information about which images have been installed on ECUs in the vehicle. It also verifies the time, and downloads and verifies the latest metadata and images for itself and for its Secondaries. A Secondary ECU verifies the time, and downloads and verifies the latest metadata and images for itself from its associated Primary ECU. It also sends signed information about its installed images to its associated Primary.</t>

<t>All ECUs SHALL verify image metadata as specified in <xref target="metadata_verification"/> before installing an image or making it available to other ECUs. A Primary ECU SHALL perform full verification (<xref target="full_verification"/>). A Secondary ECU SHOULD perform full verification if possible. If a Secondary cannot perform full verification, it SHALL, at the very least, perform partial verification. In addition, it can also perform some steps from the full verification process. See the <spanx style="emph">Uptane Deployment Best Practices</spanx> document (<xref target="DEPLOY"/>) for a discussion of how to choose between partial and full verification.</t>

<t>ECUs SHALL have a secure source of time. An OEM/Uptane implementer can use any external source of time that is demonstrably secure.</t>

<section anchor="build-time-prerequisite-requirements-for-ecus" title="Build-time prerequisite requirements for ECUs">

<t>For an ECU to be capable of receiving Uptane-secured updates, it SHALL have the following data provisioned at the time it is manufactured or installed in the vehicle:</t>

<t><list style="numbers">
  <t>A sufficiently recent copy of required Uptane metadata at the time of manufacture or install. This is necessary for the ECU to authenticate that the remote repository is legitimate when it first downloads metadata in the field. See <spanx style="emph">Uptane Deployment Best Practices</spanx> (<xref target="DEPLOY"/>) for more information.
  <list style="symbols">
      <t>Partial verification Secondary ECUs SHALL have the Root and Targets metadata from the Director repository (to reduce the scope of rollback and replay attacks). These ECUs can also have metadata from other roles or the Image repository if they will be used by the Secondary.</t>
      <t>Full verification ECUs SHALL have a complete set of metadata (Root, Targets, Snapshot, and Timestamp) from both repositories (to prevent rollback and replay attacks), as well as the repository mapping metadata (<xref target="repo_mapping_meta"/>). Delegations are not required.</t>
    </list></t>
  <t>The current time, or a secure attestation of a sufficiently recent time.</t>
  <t>An <spanx style="strong">ECU signing key</spanx>. This is a private key, unique to the ECU, used to sign ECU version reports and decrypt images. An ECU key can be either a symmetric key or an asymmetric key. If it is an asymmetric key, there SHOULD be separate keys for encryption and signing. For the purposes of this Standard, the set of private keys that an ECU uses is referred to as the ECU key (singular), even if it is actually multiple keys used for different purposes. Note that while signing keys are required to be unique to the ECU to avoid replay attacks, the secret keys used to decrypt images need not be unique.</t>
</list></t>

</section>
<section anchor="what-the-primary-does" title="What the Primary does">

<t>A Primary downloads, verifies, and distributes the latest time, metadata, and images. To do so, it SHALL perform the following seven steps:</t>

<t><list style="numbers">
  <t>Construct and send vehicle version manifest (<xref target="construct_manifest_primary"/>)</t>
  <t>Download and check current time (<xref target="check_time_primary"/>)</t>
  <t>Download and verify metadata (<xref target="download_meta_primary"/>)</t>
  <t>Download and verify images (<xref target="download_images_primary"/>)</t>
  <t>Send latest time to Secondaries (<xref target="send_time_primary"/>)</t>
  <t>Send metadata to Secondaries (<xref target="send_metadata_primary"/>)</t>
  <t>Send images to Secondaries (<xref target="send_images_primary"/>)</t>
</list></t>

<t>Note that the subsequent sections concerning requirements for a Primary do not prohibit implementing Primary capabilities on an ECU that does not communicate directly with the Uptane repositories. This allows for implementations to have multiple ECUs within the vehicle performing functions equivalent to a Primary.
If multiple such Primaries are included within a vehicle, each Primary SHOULD have a designated set of Secondaries and each Secondary SHALL have at least one Primary responsible for providing its updates</t>

<section anchor="construct_manifest_primary" title="Construct and send vehicle version manifest">

<t>The Primary SHALL build a <spanx style="emph">vehicle version manifest</spanx> as described in <xref target="vehicle_version_manifest"/>.</t>

<t>Once the complete manifest is built, the Primary can send the manifest to the Director repository. However, it is not strictly required that the Primary send the manifest until step three. If permitted by the implementation, a Primary could send only a diff of the manifest to save bandwidth. If an implementation permits diffs, the Director SHOULD have a way to request a full manifest.</t>

<t>Secondaries can send their version reports at any time so that they are already stored on the Primary when it wishes to check for updates. Alternatively, the Primary can request a version report from each Secondary at the time of the update check.</t>

<section anchor="vehicle_version_manifest" title="Vehicle version manifest">

<t>The vehicle version manifest is a metadata structure that SHALL contain the following information:</t>

<t><list style="symbols">
  <t>An attribute containing the signature(s) of the payload, each specified by:
  <list style="symbols">
      <t>The public key identifier of the key being used to sign the payload</t>
      <t>The signing method (i.e., ed25519, rsassa-pss, etc.)</t>
      <t>A hash of the payload to be signed</t>
      <t>The hashing function used (i.e., SHA3-256, SHA-512/224, etc.)</t>
      <t>The signature of the hash</t>
    </list></t>
  <t>A payload representing the installed versions of each software image on the vehicle. This payload SHALL contain:
  <list style="symbols">
      <t>The vehicle’s unique identifier (e.g., the VIN)</t>
      <t>The Primary ECU’s unique identifier (e.g., the serial number)</t>
      <t>A list of ECU version reports as specified in <xref target="version_report"/></t>
    </list></t>
</list></t>

<t>Note that one of the ECU version reports SHOULD be the version report for the Primary itself.</t>

</section>
<section anchor="version_report" title="ECU version report">

<t>An ECU version report is a metadata structure that SHALL contain the following information:</t>

<t><list style="symbols">
  <t>An attribute containing the signature(s) of the payload, each specified by:
  <list style="symbols">
      <t>The public key identifier of the key being used to sign the payload</t>
      <t>The signing method (i.e., ed25519, rsassa-pss, etc.)</t>
      <t>A hash of the payload to be signed</t>
      <t>The hashing function used (i.e., SHA3-256, SHA-512/224, etc.)</t>
      <t>The signature of the hash</t>
    </list></t>
  <t>A payload containing:
  <list style="symbols">
      <t>The ECU’s unique identifier (e.g., the serial number)</t>
      <t>The filename, length, and hashes of its currently installed image (i.e., the non-custom Targets metadata for this particular image)</t>
      <t>An indicator of any detected security attack</t>
      <t>The latest time the ECU can verify at the time this version report was generated</t>
      <t>A nonce or counter to prevent a replay of the ECU version report. This value SHALL change each update cycle.</t>
    </list></t>
</list></t>

</section>
</section>
<section anchor="check_time_primary" title="Download and check current time">

<t>The Primary SHALL load the current time from a secure source.</t>

</section>
<section anchor="download_meta_primary" title="Download and verify metadata">

<t>The Primary SHALL download metadata for all targets and perform a full verification on it as specified in <xref target="full_verification"/>.</t>

</section>
<section anchor="download_images_primary" title="Download and verify images">

<t>The Primary SHALL download and verify images for itself and for all of its associated Secondaries. Images SHALL be verified by checking that the hash of the image file matches the hash specified in the Director’s Targets metadata for that image.</t>

<t>There could be several different filenames that all refer to the same image binary, as described in <xref target="metadata_filename_rules"/>. If the Primary has received multiple hashes for a given image binary via the Targets role (see <xref target="targets_images_meta"/>) then it SHALL verify every hash for this image even though the image is identified by a single hash as part of its filename.</t>

</section>
<section anchor="send_time_primary" title="Send latest time to Secondaries">

<t>The Primary SHOULD send the time to each ECU.</t>

</section>
<section anchor="send_metadata_primary" title="Send metadata to Secondaries">

<t>The Primary SHALL send its latest downloaded metadata to all of its associated Secondaries. The metadata it sends to each Secondary SHALL include all of the metadata required for verification on that Secondary. For full verification Secondaries, this includes the metadata for all four roles from both repositories, plus any delegated Targets metadata files the Secondary will recurse through to find the proper delegation. For partial verification Secondaries, this could include fewer metadata files; at a minimum, it includes only the Targets metadata file from the Director repository.</t>

<t>The Primary SHOULD determine the minimal set of metadata files to send to each Secondary by performing delegation resolution as described in <xref target="full_verification"/>.</t>

<t>Each Secondary SHALL store the latest copy of all metadata required for its own verification.</t>

</section>
<section anchor="send_images_primary" title="Send images to Secondaries">

<t>The Primary SHALL send the latest image to each of its associated Secondaries that have sufficient storage to receive it.</t>

<t>For Secondaries without sufficient storage to store a copy of the image, the Primary SHOULD wait for a request from the Secondary to stream the new image file to it. The Secondary will send the request once it has verified the metadata sent in the previous step.</t>

</section>
</section>
<section anchor="installing-images-on-primary-or-secondary-ecus" title="Installing images on Primary or Secondary ECUs">

<t>An ECU SHALL perform the following steps when attempting to install a new image:</t>

<t><list style="numbers">
  <t>Verify latest attested time. This is optional if the ECU does not have the capacity to verify a time message (<xref target="verify_time"/>)</t>
  <t>Verify metadata (<xref target="verify_metadata"/>)</t>
  <t>Download latest image (<xref target="download_image"/>)</t>
  <t>Verify image (<xref target="verify_image"/>)</t>
  <t>Install image (<xref target="install_image"/>)</t>
  <t>Create and send version report (<xref target="create_version_report"/>)</t>
</list></t>

<section anchor="verify_time" title="Load and verify the latest attested time">

<t>IF the ECU has the capability to verify a time message, the ECU SHOULD load and verify the current time, or the most recent securely attested time.</t>

</section>
<section anchor="verify_metadata" title="Verify metadata">

<t>The ECU SHALL verify the latest downloaded metadata (<xref target="metadata_verification"/>) using either full or partial verification. If the metadata verification fails for any reason, the ECU SHALL jump to the final step (<xref target="create_version_report"/>).</t>

</section>
<section anchor="download_image" title="Download latest image">

<t>If the ECU has limited secondary storage, i.e., insufficient buffer storage to temporarily store the latest image before installing it, it SHALL download the latest image from the Primary. (If the ECU has sufficient secondary storage, it will already have the latest image in its secondary storage as specified in <xref target="send_images_primary"/>, and SHALL skip to the next step.) The ECU SHOULD first create a backup of its previous working image and store it elsewhere (e.g., the Primary).</t>

<t>The filename used to identify the latest known image (i.e., the file to request from the Primary) SHALL be determined as follows:</t>

<t><list style="numbers">
  <t>Load the Targets metadata file from the Director repository.</t>
  <t>Find the Targets metadata associated with this ECU identifier.</t>
  <t>Construct the Image filename using the rule in <xref target="metadata_filename_rules"/>, or use the download URL specified in the Director metadata.</t>
  <t>If there is no Targets metadata about this image, abort the update cycle and report that there is no such image. Additionally, in the case of failure, the ECU SHALL retain its previous Targets metadata instead of using the new Targets metadata. Otherwise, download the image (up to the number of bytes specified in the Targets metadata) and verify it according to <xref target="verify_image"/>.</t>
</list></t>

<t>When the Primary responds to the download request, the ECU SHALL overwrite its current image with the downloaded image from the Primary.</t>

<t>If any part of this step fails, the ECU SHALL jump to the final step (<xref target="create_version_report"/>).</t>

</section>
<section anchor="verify_image" title="Verify image">

<t>The ECU SHALL verify that the latest image matches the latest metadata as follows:</t>

<t><list style="numbers">
  <t>Load the latest Targets metadata file from the Director.</t>
  <t>Find the Targets metadata associated with this ECU identifier.</t>
  <t>Check that the hardware identifier in the metadata matches the ECU’s hardware identifier.</t>
  <t>Check that the image filename is valid for this ECU. This could be a comparison against a wildcard path, which restricts the ECUs to which a delegation will apply.</t>
  <t>Check that the release counter of the image in the previous metadata, if it exists, is less than or equal to the release counter in the latest metadata.</t>
  <t>If the image is encrypted, decrypt the image with a decryption key to be chosen as follows:
  <list style="symbols">
      <t>If the ECU key is a symmetric key, the ECU SHALL use the ECU key for image decryption.</t>
      <t>If the ECU key is asymmetric, the ECU SHALL check the Targets metadata for an encrypted symmetric key. If such a key is found, the ECU SHALL decrypt the symmetric key using its ECU key, and use the decrypted symmetric key for image decryption.</t>
      <t>If the ECU key is asymmetric and there is no symmetric key in the Targets metadata, the ECU SHALL use its ECU key for image decryption.</t>
    </list></t>
  <t>Check that all hashes listed in the metadata match the corresponding hashes of the image.</t>
</list></t>

<t>If the ECU has enough secondary storage capacity to store the image, the checks SHOULD be performed on the image in secondary storage before it is installed.</t>

<t>When checking hashes, the ECU SHALL additionally check that the length of the image matches the length listed in the metadata.</t>

<t>NOTE: See <xref target="DEPLOY"/> for guidance on how to deal with Secondary ECU failures for ECUs that have limited secondary storage.</t>

<t>If any step fails, the ECU SHALL jump to the final step (<xref target="create_version_report"/>).</t>

</section>
<section anchor="install_image" title="Install image">

<t>The ECU SHALL attempt to install the update. This installation SHOULD occur at a time when all pre-conditions are met. These pre-conditions could include ensuring the vehicle is in a safe environment for an installation (e.g., the vehicle is parked when updating a specific ECU). Other pre-conditions could include ensuring the ECU has a backup of its current image and metadata in case the current installation fails.</t>

</section>
<section anchor="create_version_report" title="Create and send version report">

<t>The ECU SHALL create a version report as described in <xref target="version_report"/>, and send it to the Primary (or simply save it to disk, if the ECU is a Primary). The Primary SHOULD write the version reports it receives to disk and associate them with the Secondaries that sent them.</t>

</section>
</section>
<section anchor="metadata_verification" title="Metadata verification procedures">

<t>A Primary ECU SHALL perform full verification of metadata. A Secondary ECU SHOULD perform full verification of metadata. If a Secondary cannot perform full verification, it SHALL, at the very least, perform partial verification.</t>

<t>If a step in the following workflows does not succeed (e.g., the update is aborted because a new metadata file was not signed), an ECU SHOULD still be able to update again in the future. Errors raised during the update process SHOULD NOT leave ECUs in an unrecoverable state.</t>

<section anchor="partial_verification" title="Partial verification">

<t>In order to perform partial verification, an ECU SHALL perform the following steps:</t>

<t><list style="numbers">
  <t>Load and verify the current time or the most recent securely attested time.</t>
  <t>Download and check the Targets metadata file from the Director repository, following the procedure in <xref target="check_targets"/>.</t>
</list></t>

<t>Note that this verification procedure is the smallest set of Uptane checks permissible for an Uptane Secondary ECU. An ECU can additionally implement more metadata checks.</t>

<t>For example, an ECU could also fetch and verify Root metadata from the Director (following the procedure in <xref target="check_root"/>) before checking Targets metadata. Performing this additional check would provide the ECU with a secure way to receive and validate a rotation of the Director’s Targets key.</t>

<t>See <xref target="DEPLOY"/> for more discussion on this topic.</t>

</section>
<section anchor="full_verification" title="Full verification">

<t>Full verification of metadata means that the ECU checks that the Targets metadata about images from the Director repository matches the Targets metadata about the same images from the Image repository. This provides resilience to a key compromise in the system.</t>

<t>Full verification SHALL be performed by Primary ECUs and SHOULD be performed by Secondary ECUs. In the following instructions, whenever an ECU is directed to download metadata, it applies only to Primary ECUs.</t>

<t>Before starting full verification, the repository mapping metadata SHALL be consulted to determine where to download metadata from. This procedure assumes the basic Uptane case: there are only two repositories (Director and Image), and all image paths are required to be signed by both repositories. If a more complex repository layout is being used, refer to <xref target="DEPLOY"/> for guidance on how to determine where metadata could be downloaded from.</t>

<t>In order to perform full verification, an ECU SHALL perform the following steps:</t>

<t><list style="numbers">
  <t>Load and verify the current time or the most recent securely attested time.</t>
  <t>Download and check the Root metadata file from the Director repository, following the procedure in <xref target="check_root"/>.</t>
  <t>Download and check the Timestamp metadata file from the Director repository, following the procedure in <xref target="check_timestamp"/>.</t>
  <t>Check the previously downloaded Snapshot metadata file from the Directory repository (if available). If the hashes and version number of that file match the hashes and version number listed in the new Timestamp metadata, there are no new updates and the verification process SHALL be stopped and considered complete. Otherwise, download and check the Snapshot metadata file from the Director repository, following the procedure in <xref target="check_snapshot"/>.</t>
  <t>Download and check the Targets metadata file from the Director repository, following the procedure in <xref target="check_targets"/>.</t>
  <t>If the Targets metadata from the Directory repository indicates that there are no new targets that are not already currently installed, the verification process SHALL be stopped and considered complete. Otherwise, download and check the Root metadata file from the Image repository, following the procedure in <xref target="check_root"/>.</t>
  <t>Download and check the Timestamp metadata file from the Image repository, following the procedure in <xref target="check_timestamp"/>.</t>
  <t>Check the previously downloaded Snapshot metadata file from the Image repository (if available). If the hashes and version number of that file match the hashes and version number listed in the new Timestamp metadata, the ECU SHALL skip to the last step. Otherwise, download and check the Snapshot metadata file from the Image repository, following the procedure in <xref target="check_snapshot"/>.</t>
  <t>Download and check the top-level Targets metadata file from the Image repository, following the procedure in <xref target="check_targets"/>.</t>
  <t>Verify that Targets metadata from the Director and Image repositories match. A Primary ECU SHALL perform this check on metadata for all images listed in the Targets metadata file from the Director repository downloaded in step 6. A Secondary ECU can elect to perform this check only on the metadata for the image it will install. (That is, the image metadata from the Director that contains the ECU identifier of the current ECU.) To check that the metadata for an image matches, complete the following procedure:
  <list style="numbers">
      <t>Locate and download a Targets metadata file from the Image repository that contains an image with exactly the same filename listed in the Director metadata, following the procedure in <xref target="resolve_delegations"/>.</t>
      <t>Check that the Targets metadata from the Image repository matches the Targets metadata from the Director repository:
      <list style="numbers">
          <t>Check that the non-custom metadata (i.e., length and hashes) of the unencrypted or encrypted image are the same in both sets of metadata. Note: the Primary is responsible for validating encrypted images and associated metadata. The target ECU (Primary or Secondary) is responsible for validating the unencrypted image and associated metadata.</t>
          <t>Check that all SHALL match custom metadata (e.g., hardware identifier and release counter) are the same in both sets of metadata.</t>
          <t>Check that the release counter, if one is used, in the previous Targets metadata file is less than or equal to the release counter in this Targets metadata file.</t>
        </list></t>
    </list></t>
</list></t>

<t>If any step fails, the ECU SHALL return an error code indicating the failure. If a check for a specific type of security attack fails (i.e., rollback, freeze, arbitrary software, etc.), the ECU SHOULD return an error code that indicates the type of attack.</t>

</section>
<section anchor="check_root" title="How to check Root metadata">

<t>To properly check Root metadata, an ECU SHOULD:</t>

<t><list style="numbers">
  <t>Load the previous Root metadata file.</t>
  <t>Update to the latest Root metadata file.
  <list style="numbers">
      <t>Let N denote the version number of the latest Root metadata file (which at first could be the same as the previous Root metadata file).</t>
      <t>Try downloading a new version N+1 of the Root metadata file, up to some X number of bytes. The value for X is set by the implementer. For example, X could be tens of kilobytes. The filename used to download the Root metadata file is of the fixed form VERSION_NUMBER.FILENAME.EXT (e.g., 42.root.json). If this file is not available, the current Root metadata file is the latest; continue with step 3.</t>
      <t>Version N+1 of the Root metadata file SHALL have been signed by the following: (1) a threshold of unique keys specified in the latest Root metadata file (version N), and (2) a threshold of unique keys specified in the new Root metadata file being validated (version N+1). If version N+1 is not signed as required, discard it, abort the update cycle, and report the signature failure. On the next update cycle, begin at version N of the Root metadata file. (Checks for an arbitrary software attack.)</t>
      <t>The version number of the latest Root metadata file (version N) SHALL be less than or equal to the version number of the new Root metadata file (version N+1). Effectively, this means checking that the version number signed in the new Root metadata file is indeed N+1. If the version of the new Root metadata file is less than the latest metadata file, discard it, abort the update cycle, and report the rollback attack. On the next update cycle, begin at step 1 and version N of the Root metadata file. (Checks for a rollback attack.)</t>
      <t>Set the latest Root metadata file to the new Root metadata file.</t>
      <t>Repeat steps 2.1 to 2.6.</t>
    </list></t>
  <t>Check that the current (or latest securely attested) time is lower than the expiration timestamp in the latest Root metadata file. (Checks for a freeze attack.)</t>
  <t>If the Timestamp and/or Snapshot keys have been rotated, delete the previous Timestamp and Snapshot metadata files. (Checks for recovery from fast-forward attacks <xref target="MERCURY"/>.)</t>
</list></t>

</section>
<section anchor="check_timestamp" title="How to check Timestamp metadata">

<t>To properly check Timestamp metadata, an ECU SHOULD:</t>

<t><list style="numbers">
  <t>Download up to Y number of bytes. The value for Y is set by the implementer. For example, Y could be tens of kilobytes. The filename used to download the Timestamp metadata file is of the fixed form FILENAME.EXT (e.g., timestamp.json).</t>
  <t>Check that it has been signed by the threshold of unique keys specified in the latest Root metadata file. If the new Timestamp metadata file is not properly signed, discard it, abort the update cycle, and report the signature failure. (Checks for an arbitrary software attack.)</t>
  <t>Check that the version number of the previous Timestamp metadata file, if any, is less than or equal to the version number of this Timestamp metadata file. If the new Timestamp metadata file is older than the trusted Timestamp metadata file, discard it, abort the update cycle, and report the potential rollback attack. (Checks for a rollback attack.)</t>
  <t>Check that the current (or latest securely attested) time is lower than the expiration timestamp in this Timestamp metadata file. If the new Timestamp metadata file has expired, discard it, abort the update cycle, and report the potential freeze attack. (Checks for a freeze attack.)</t>
</list></t>

</section>
<section anchor="check_snapshot" title="How to check Snapshot metadata">

<t>To properly check Snapshot metadata, an ECU SHOULD:</t>

<t><list style="numbers">
  <t>Download up to the number of bytes specified in the Timestamp metadata file, constructing the metadata filename as defined in <xref target="metadata_filename_rules"/>.</t>
  <t>The hashes and version number of the new Snapshot metadata file SHALL match the hashes and version number listed in the Timestamp metadata. If the hashes and version number do not match, discard the new Snapshot metadata, abort the update cycle, and report the failure. (Checks for a mix-and-match attack.)</t>
  <t>Check that it has been signed by the threshold of unique keys specified in the latest Root metadata file. If the new Snapshot metadata file is not signed as required, discard it, abort the update cycle, and report the signature failure. (Checks for an arbitrary software attack.)</t>
  <t>Check that the version number of the previous Snapshot metadata file, if any, is less than or equal to the version number of this Snapshot metadata file. If this Snapshot metadata file is older than the previous Snapshot metadata file, discard it, abort the update cycle, and report the potential rollback attack. (Checks for a rollback attack.)</t>
  <t>Check that the version number listed by the previous Snapshot metadata file for each Targets metadata file is less than or equal to its version number in this Snapshot metadata file. If this condition is not met, discard the new Snapshot metadata file, abort the update cycle, and report the failure. (Checks for a rollback attack.)</t>
  <t>Check that each Targets metadata filename listed in the previous Snapshot metadata file is also listed in this Snapshot metadata file. If this condition is not met, discard the new Snapshot metadata file, abort the update cycle, and report the failure. (Checks for a rollback attack.)</t>
  <t>Check that the current (or latest securely attested) time is lower than the expiration timestamp in this Snapshot metadata file. If the new Snapshot metadata file is expired, discard it, abort the update cycle, and report the potential freeze attack. (Checks for a freeze attack.)</t>
</list></t>

</section>
<section anchor="check_targets" title="How to check Targets metadata">

<t>To properly check Targets metadata, an ECU SHOULD:</t>

<t><list style="numbers">
  <t>Download up to Z number of bytes, constructing the metadata filename as defined in <xref target="metadata_filename_rules"/>. The value for Z is set by the implementer. For example, Z could be tens of kilobytes.</t>
  <t>The version number of the new Targets metadata file SHALL match the version number listed in the latest Snapshot metadata. If the version number does not match, discard it, abort the update cycle, and report the failure. (Checks for a mix-and-match attack.) This step can be skipped when checking Targets metadata on a partial verification ECU, as these ECUs might not have Snapshot metadata.</t>
  <t>Check that the Targets metadata has been signed by the threshold of unique keys specified in the relevant metadata file. (Checks for an arbitrary software attack.):
  <list style="numbers">
      <t>If checking top-level Targets metadata, the threshold of keys is specified in the Root metadata.</t>
      <t>If checking delegated Targets metadata, the threshold of keys is specified in the Targets metadata file that delegated authority to this role.</t>
    </list></t>
  <t>Check that the version number of the previous Targets metadata file, if any, is less than or equal to the version number of this Targets metadata file. (Checks for a rollback attack.)</t>
  <t>Check that the current (or latest securely attested) time is lower than the expiration timestamp in this Targets metadata file. (Checks for a freeze attack.)</t>
  <t>If checking Targets metadata from the Director repository, verify that there are no delegations.</t>
  <t>If checking Targets metadata from the Director repository, check that no ECU identifier is represented more than once.</t>
  <t>If checking Targets metadata from the Director repository, and the ECU performing the verification is the Primary ECU, check that all listed ECU identifiers correspond to ECUs that are actually present in the vehicle.</t>
</list></t>

</section>
<section anchor="resolve_delegations" title="How to resolve delegations">

<t>To properly check Targets metadata for an image, an ECU SHALL locate the metadata file(s) for the role (or roles) that have the authority to sign the image. This metadata might be located in the top-level Targets metadata, but it could also be delegated to another role or to multiple roles. Therefore, all delegations SHALL be resolved using the following recursive procedure, beginning with the top-level Targets metadata file.</t>

<t><list style="numbers">
  <t>Download and check the current metadata file, following the procedure in <xref target="check_targets"/>. If the file cannot be loaded, or if any verification step fails, abort the delegation resolution, and indicate that image metadata cannot be found because of a missing or invalid role.</t>
  <t>If the current metadata file contains signed metadata about the image, end the delegation resolution and return the metadata to be checked.</t>
  <t>If the current metadata file was reached via a terminating delegation and does not contain signed metadata about the image, abort the delegation resolution for this image and return an error indicating that image metadata could not be found.</t>
  <t>Search the list of delegations, in listed order. For each delegation:
  <list style="numbers">
      <t>Check if the delegation applies to the image being processed. For the delegation to apply, it SHALL include the hardware identifier of the target, and the target name SHALL match one of the delegation’s image paths. If either of these tests fail, move on to the next delegation in the list.</t>
      <t>If the delegation is a multi-role delegation, follow the procedure described in <xref target="multirole_delegations"/>. If the multi-role delegation is terminating and no valid image metadata is found, abort the delegation resolution and return an error indicating that image metadata could not be found.</t>
      <t>If the delegation is a normal delegation, perform delegation resolution, starting at step 1. Note that this could recurse an arbitrary number of levels deep. If a delegation that applies to the image is found but no image metadata is found in the delegated roles or any of its sub-delegations, simply continue on with the next delegation in the list. The search is only completed or aborted if image metadata or a terminating delegation that applies to the image is found.</t>
    </list></t>
  <t>If the end of the list of delegations in the top-level metadata is reached without finding valid image metadata, return an error indicating that image metadata could not be found.</t>
</list></t>

</section>
<section anchor="multirole_delegations" title="Multi-role delegations">

<t>It is possible to delegate signing authority to multiple delegated roles as described in <xref target="TAP-3"/>. Each multi-role delegation effectively contains a list of ordinary delegations, plus a threshold of those roles that SHALL be in agreement about the non-custom metadata for the image. All multi-role delegations SHALL be resolved using the following procedure. Note that there could be sub-delegations inside multi-role delegations.</t>

<t><list style="numbers">
  <t>For each of the roles in the delegation, find and load the image metadata following the procedure in <xref target="resolve_delegations"/>.</t>
  <t>Inspect the non-custom part of the metadata loaded in step 1:
  <list style="numbers">
      <t>Locate all sets of roles that have agreeing (i.e., identical) non-custom metadata and “SHALL match” custom metadata. Discard any set of roles with a size smaller than the threshold of roles that SHALL be in agreement for this delegation.</t>
      <t>Check for a conflict. A conflict exists if there is more than one agreeing set of roles, yet each set has different metadata. If a conflict is found, choose and return the metadata from the set of roles that include the earliest role in the multi-delegation list.</t>
      <t>If there is no conflict, check if there is any single set of roles with matching non-custom metadata. If there is, choose and return the metadata from this set.</t>
      <t>If no agreeing set can be found that meets the agreement threshold, return an error indicating that image metadata could not be found.</t>
    </list></t>
</list></t>

</section>
</section>
</section>
</section>


  </middle>

  <back>

    <references title='Normative References'>





<reference  anchor="RFC2119" target='https://www.rfc-editor.org/info/rfc2119'>
<front>
<title>Key words for use in RFCs to Indicate Requirement Levels</title>
<author initials='S.' surname='Bradner' fullname='S. Bradner'><organization /></author>
<date year='1997' month='March' />
<abstract><t>In many standards track documents several words are used to signify the requirements in the specification.  These words are often capitalized. This document defines these words as they should be interpreted in IETF documents.  This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t></abstract>
</front>
<seriesInfo name='BCP' value='14'/>
<seriesInfo name='RFC' value='2119'/>
<seriesInfo name='DOI' value='10.17487/RFC2119'/>
</reference>



<reference  anchor="RFC3647" target='https://www.rfc-editor.org/info/rfc3647'>
<front>
<title>Internet X.509 Public Key Infrastructure Certificate Policy and Certification Practices Framework</title>
<author initials='S.' surname='Chokhani' fullname='S. Chokhani'><organization /></author>
<author initials='W.' surname='Ford' fullname='W. Ford'><organization /></author>
<author initials='R.' surname='Sabett' fullname='R. Sabett'><organization /></author>
<author initials='C.' surname='Merrill' fullname='C. Merrill'><organization /></author>
<author initials='S.' surname='Wu' fullname='S. Wu'><organization /></author>
<date year='2003' month='November' />
<abstract><t>This document presents a framework to assist the writers of certificate policies or certification practice statements for participants within public key infrastructures, such as certification authorities, policy authorities, and communities of interest that wish to rely on certificates.  In particular, the framework provides a comprehensive list of topics that potentially (at the writer's discretion) need to be covered in a certificate policy or a certification practice statement.  This document supersedes RFC 2527.</t></abstract>
</front>
<seriesInfo name='RFC' value='3647'/>
<seriesInfo name='DOI' value='10.17487/RFC3647'/>
</reference>



<reference  anchor="RFC5198" target='https://www.rfc-editor.org/info/rfc5198'>
<front>
<title>Unicode Format for Network Interchange</title>
<author initials='J.' surname='Klensin' fullname='J. Klensin'><organization /></author>
<author initials='M.' surname='Padlipsky' fullname='M. Padlipsky'><organization /></author>
<date year='2008' month='March' />
<abstract><t>The Internet today is in need of a standardized form for the transmission of internationalized &quot;text&quot; information, paralleling the specifications for the use of ASCII that date from the early days of the ARPANET.  This document specifies that format, using UTF-8 with normalization and specific line-ending sequences.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='5198'/>
<seriesInfo name='DOI' value='10.17487/RFC5198'/>
</reference>


<reference anchor="NFC" target="https://www.unicode.org/reports/tr15/">
  <front>
    <title>Unicode Standard Annex #15: Unicode Normalization Forms</title>
    <author initials="M." surname="Davis">
      <organization></organization>
    </author>
    <author initials="M." surname="Duerst">
      <organization></organization>
    </author>
    <date year="2018" month="October"/>
  </front>
</reference>
<reference anchor="TAP-3" target="https://github.com/theupdateframework/taps/blob/d0818e580c322815a473520f2e8cc5f5eb8df499/tap3.md">
  <front>
    <title>The Update Framework TAP 3 - Multi-role delegations</title>
    <author initials="T.K." surname="Kuppusamy">
      <organization></organization>
    </author>
    <author initials="S." surname="Awwad">
      <organization></organization>
    </author>
    <author initials="E." surname="Cordell">
      <organization></organization>
    </author>
    <author initials="V." surname="Diaz">
      <organization></organization>
    </author>
    <author initials="J." surname="Moshenko">
      <organization></organization>
    </author>
    <author initials="J." surname="Cappos">
      <organization></organization>
    </author>
    <date year="2018" month="January" day="18"/>
  </front>
</reference>
<reference anchor="TAP-4" target="https://github.com/theupdateframework/taps/blob/2cb67d913ec19424d1e354b38f862886fbfd4105/tap4.md">
  <front>
    <title>The Update Framework TAP 4 - Multiple repository consensus on entrusted targets</title>
    <author initials="T.K." surname="Kuppusamy">
      <organization></organization>
    </author>
    <author initials="S." surname="Awwad">
      <organization></organization>
    </author>
    <author initials="E." surname="Cordell">
      <organization></organization>
    </author>
    <author initials="V." surname="Diaz">
      <organization></organization>
    </author>
    <author initials="J." surname="Moshenko">
      <organization></organization>
    </author>
    <author initials="J." surname="Cappos">
      <organization></organization>
    </author>
    <date year="2017" month="December" day="15"/>
  </front>
</reference>
<reference anchor="TUF-spec" target="https://github.com/theupdateframework/specification/blob/2b4e18472fe25d5b57f36f6fa50104967c8faeaa/tuf-spec.md">
  <front>
    <title>The Update Framework Specification</title>
    <author initials="J." surname="Samuel">
      <organization></organization>
    </author>
    <author initials="N." surname="Mathewson">
      <organization></organization>
    </author>
    <author initials="G." surname="Condra">
      <organization></organization>
    </author>
    <author initials="V." surname="Diaz">
      <organization></organization>
    </author>
    <author initials="T.K." surname="Kuppusamy">
      <organization></organization>
    </author>
    <author initials="S." surname="Awwad">
      <organization></organization>
    </author>
    <author initials="S." surname="Tobias">
      <organization></organization>
    </author>
    <author initials="J." surname="Wright">
      <organization></organization>
    </author>
    <author initials="H." surname="Mehnert">
      <organization></organization>
    </author>
    <author initials="E." surname="Tryzelaar">
      <organization></organization>
    </author>
    <author initials="J." surname="Cappos">
      <organization></organization>
    </author>
    <author initials="R." surname="Dingledine">
      <organization></organization>
    </author>
    <date year="2018" month="September" day="19"/>
  </front>
</reference>


    </references>

    <references title='Informative References'>

<reference anchor="MERCURY" target="https://www.usenix.org/system/files/conference/atc17/atc17-kuppusamy.pdf">
  <front>
    <title>Mercury: Bandwidth-Effective Prevention of Rollback Attacks Against Community Repositories</title>
    <author initials="T.K." surname="Kuppusamy">
      <organization></organization>
    </author>
    <author initials="V." surname="Diaz">
      <organization></organization>
    </author>
    <author initials="J." surname="Cappos">
      <organization></organization>
    </author>
    <date year="2017" month="July" day="12"/>
  </front>
  <seriesInfo name="ISBN" value="978-1-931971-38-6"/>
</reference>
<reference anchor="UPTANEESCAR" target="https://ssl.engineering.nyu.edu/papers/kuppusamy_escar_16.pdf">
  <front>
    <title>Securing Software Updates for Automobiles</title>
    <author initials="T.K." surname="Kuppusamy">
      <organization></organization>
    </author>
    <author initials="A." surname="Brown">
      <organization></organization>
    </author>
    <author initials="S." surname="Awwad">
      <organization></organization>
    </author>
    <author initials="D." surname="McCoy">
      <organization></organization>
    </author>
    <author initials="R." surname="Bielawski">
      <organization></organization>
    </author>
    <author initials="C." surname="Mott">
      <organization></organization>
    </author>
    <author initials="S." surname="Lauzon">
      <organization></organization>
    </author>
    <author initials="A." surname="Weimerskirch">
      <organization></organization>
    </author>
    <author initials="J." surname="Cappos">
      <organization></organization>
    </author>
    <date year="2016" month="October" day="16"/>
  </front>
</reference>
<reference anchor="PEP-458" target="https://www.python.org/dev/peps/pep-0458/">
  <front>
    <title>Secure PyPI downloads with signed repository metadata</title>
    <author initials="T.K." surname="Kuppusamy">
      <organization></organization>
    </author>
    <author initials="V." surname="Diaz">
      <organization></organization>
    </author>
    <author initials="M." surname="Moore">
      <organization></organization>
    </author>
    <author initials="L." surname="Pühringer">
      <organization></organization>
    </author>
    <author initials="J." surname="Locke">
      <organization></organization>
    </author>
    <author initials="L.A." surname="DeLong">
      <organization></organization>
    </author>
    <author initials="J." surname="Cappos">
      <organization></organization>
    </author>
    <date year="2019" month="November" day="13"/>
  </front>
</reference>
<reference anchor="DEPLOY" target="https://uptane.github.io/deployment-considerations/index.html">
  <front>
    <title>Uptane Deployment Best Practices</title>
    <author initials="." surname="Members of the Uptane Community">
      <organization></organization>
    </author>
    <date year="n.d."/>
  </front>
</reference>
<reference anchor="USATODAY" target="https://www.usatoday.com/story/tech/columnist/2016/06/28/your-average-car-lot-more-code-driven-than-you-think/86437052/">
  <front>
    <title>Your average car is a lot more code-driven than you think</title>
    <author initials="B." surname="O'Donnell">
      <organization></organization>
    </author>
    <date year="2016" month="June" day="28"/>
  </front>
</reference>
<reference anchor="CR-OTA" target="https://www.consumerreports.org/automotive-technology/automakers-embrace-over-the-air-updates-can-we-trust-digital-car-repair/">
  <front>
    <title>Automakers Embrace Over-the-Air Updates, but Can We Trust Digital Car Repair?</title>
    <author initials="K." surname="Barry">
      <organization></organization>
    </author>
    <date year="2018" month="April" day="20"/>
  </front>
</reference>
<reference anchor="IN-TOTO" target="https://in-toto.io/">
  <front>
    <title>in-toto: A framework to secure the integrity of software supply chains</title>
    <author >
      <organization></organization>
    </author>
    <date year="2018" month="October" day="29"/>
  </front>
</reference>


    </references>



  </back>

<!-- ##markdown-source:
H4sIAEPwMGIAA+1923bbRrbgu74CK36IpENSlnyJ4zzMyLbcUbdvY8lJ55x1
lhskQAltEmADoGTGy382b/Njs69VuwoAJdvpPnPWmjzENgjUZdeufb+Mx+Od
tmgX+ePk3apNyzw5g/9naZ0l86pOnuVNcVEm8CQ5Xa4W+TIv27QtqjI5mtyd
3N1Jp9M6v4Jv35wfvzrZyapZmS5hrDWNNW5krHFG4+zM0ja/qOrN46Qo59XO
TrGqHydl9SyviysY9ipvzut10x7dvfvj3aOdtM7Tx8n562evd66r+sNFXa1X
8u8P+QYeZY+T07LN6zJvx8/qdN7u7NCM79NFVcIqNnmzsyoeJ//RVrNR0lR1
W+fzBv62WeJf/nNnJ123l1X9eCdJxrCk5nHyMl9O87pJqnnSXuYKk6fVcrku
i3YDLyYJb7H3p6q+SMvidwLR4+TPVVG2AMOrfFGtEHTJ82oNACEAvqmrv+ez
Fpbz4sXTkYM+gCJvkt3ZQYVvzCfJnwEgRZk8TVerqtmjWfJlWiw6QG7+50VV
XSxyglMzmVVLermBTeft4+Qh7K2tq/N8dknPZ7CUFo/i3dkxPajzC1r1q9/4
d9jT4+RJXVUfFptSPslg44eHR3cPd3bKql7SmSH07iR/4RNJsnye7J79fPzi
xSh5efzbKDn7+fW7F89GSd7OJrj8t8+fHh0e/shf/XXy4O6PyZu/nCbNKp/x
r/ce3v+Bf32Vt3jwybuywKkJI2Fbq7QuygvcGPzR8EcPDn98xB/py69wfQs5
CwB8vUyewguvnj99TJtp0/oC4XLZtqvm8cHB9fX1ZM3fTuAYD+p8BQjTHLT1
4YMD/oLvyXc6g7spx2WZf0zuHD54vGX25jsaxGMc/qdYN0mepVdF0326BmRs
6TGgDUwOoH80PrxLOz0/fpPcS9IWTu4qye4+OnyUP4Af4PH4Xv8eL4r2cj1F
1DgA7F6vcMx5DeiMYD5o01VzMF1U0wMZ7NHd2b2jo0eHD9L7P9x7cHR3fpQ/
ms0ezB/k00fZ/P6PP+In9ybLzILnnK4Njpw816FlqePk5XrRFuO6WuSAKICq
BJ5mGDDnk79Mkr+sV6t1ky434W9nk+T4+jrNwqcnE7iSNQy+CJ//AsAs0t/D
h3+eJC+r5jIvP1SdH/jCxaC/ezg+fOSgf1+hfzSbPvwh+1Ggf//boC+DHd7L
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
/wWLn4qOnS4BAA==

-->

</rfc>

